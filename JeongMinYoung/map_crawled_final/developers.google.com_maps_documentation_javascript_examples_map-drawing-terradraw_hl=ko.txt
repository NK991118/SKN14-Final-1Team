Source URL: https://developers.google.com/maps/documentation/javascript/examples/map-drawing-terradraw?hl=ko
Title: Draw on a map using Terra Draw
bookmark_border

Send feedback

Draw on a map using Terra Draw

bookmark_borderbookmark

Stay organized with collections

Save and categorize content based on your preferences.

이 페이지의 내용Try Sample [https://developers.google.com/maps/documentation/javascript/examples/map-drawing-terradraw#try-sample]Clone Sample [https://developers.google.com/maps/documentation/javascript/examples/map-drawing-terradraw#clone-sample]Key Steps for Integration [https://developers.google.com/maps/documentation/javascript/examples/map-drawing-terradraw#key-steps-for-integration]

The following example shows how to add a drawing layer to a map using Terra
Draw [https://github.com/JamesLMilner/terra-draw] JavaScript libraries. The
layer relies on OverlayView [https://developers.google.com/maps/documentation/javascript/reference/overlay-view#OverlayView]
and enables users to draw, edit, and select features like polygons, lines, and
points directly on the map interface.
All geometries created by the user are returned as standard GeoJSON [https://geojson.org/]
objects.

--- 탭: TypeScript [https://developers.google.com/maps/documentation/javascript/examples/map-drawing-terradraw#typescript] [None] ---
import { Loader } from '@googlemaps/js-api-loader';

import {
TerraDraw,
TerraDrawSelectMode,
TerraDrawPointMode,
TerraDrawLineStringMode,
TerraDrawPolygonMode,
TerraDrawRectangleMode,
TerraDrawCircleMode,
TerraDrawFreehandMode

newFeature.properties.mode = 'polygon';
draw.setMode('static');
const { LatLngBounds } = await google.maps.importLibrary("core") as google.maps.CoreLibrary;
const { Data } = await google.maps.importLibrary("maps") as google.maps.MapsLibrary;

map.addListener("click", () => {
if (draw) {

draw.on('ready', () => {
setupModeButtons();
draw.setMode('point');
currentMode = 'point';
setActiveButton('point-mode');

draw.on("select", (id) => {

draw.on("change", (ids, type) => {
if (isRestoring) {
return;
history.push(filteredSnapshot);
redoHistory = [];
link.download = "drawing.geojson";
link.click();
URL.revokeObjectURL(url);
resizeButton.classList.toggle('active', resizingEnabled);

draw.clear();
draw.addFeatures(snapshotToRestore);
setTimeout(() => { isRestoring = false; }, 0);
isRestoring = true;
draw.clear();
draw.addFeatures(snapshot);
setTimeout(() => { isRestoring = false; }, 0);
return newFeature;
y += point[1];
count++;
import { TerraDraw, TerraDrawSelectMode, TerraDrawPointMode, TerraDrawLineStringMode, TerraDrawPolygonMode, TerraDrawRectangleMode, TerraDrawCircleMode, TerraDrawFreehandMode } from 'terra-draw';
import { TerraDrawGoogleMapsAdapter } from 'terra-draw-google-maps-adapter';
newFeature.properties.mode = 'polygon';
draw.setMode('static');
const { LatLngBounds } = await google.maps.importLibrary("core");
const { Data } = await google.maps.importLibrary("maps");
map.addListener("click", () => {
if (draw) {
draw.on('ready', () => {
setupModeButtons();
draw.setMode('point');
currentMode = 'point';
setActiveButton('point-mode');
draw.on("select", (id) => {
draw.on("change", (ids, type) => {
if (isRestoring) {
return;
redoHistory = [];
link.download = "drawing.geojson";
link.click();
URL.revokeObjectURL(url);
resizeButton.classList.toggle('active', resizingEnabled);
draw.clear();
draw.addFeatures(snapshotToRestore);
setTimeout(() => { isRestoring = false; }, 0);
isRestoring = true;
draw.clear();
draw.addFeatures(snapshot);
setTimeout(() => { isRestoring = false; }, 0);
return newFeature;
y += point[1];
count++;
body {

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone https://github.com/googlemaps-samples/js-api-samples.git
cd samples/map-drawing-terradraw
npm i
npm start

Key Steps for Integration

Load Libraries: Include the Google Maps JavaScript API script, followed by
the Terra Draw core and google-maps scripts. If you are using script tags:

<script src="https://unpkg.com/terra-draw@latest/dist/terra-draw.umd.js"></script>

<script src="https://unpkg.com/terra-draw-google-maps-adapter@latest/dist/terra-draw-google-maps-adapter.umd.js"></script>

Initialize Map: Create your standard google.maps.Map instance.
Create Adapter: Instantiate TerraDrawGoogleMapsAdapter, passing it the
google.maps library and your map instance to connect them.
Create TerraDraw: Create a TerraDraw instance, providing the adapter and an
array of the drawing modes you want to support.
Activate Drawing: Call draw.start() to enable the tool, then
draw.setMode('polygon') to select a drawing shape.
Capture Data: Listen to the draw.on('change', callback) event to get an
array of all drawn features as GeoJSON.

도움이 되었나요?

Send feedback