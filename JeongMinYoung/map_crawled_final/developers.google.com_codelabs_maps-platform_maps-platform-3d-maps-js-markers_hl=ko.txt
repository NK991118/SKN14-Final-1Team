Source URL: https://developers.google.com/codelabs/maps-platform/maps-platform-3d-maps-js-markers?hl=ko
Title: 사실적인 3D 지도에 마커 및 애니메이션 추가

의견 보내기

사실적인 3D 지도에 마커 및 애니메이션 추가

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

1. 시작하기 전에

이 튜토리얼에서는 애플리케이션에 3D 마커를 추가하고 스타일을 지정하는 방법을 살펴봅니다. 특정 위치로 이동하고 그 주변을 비행하여 애플리케이션에 애니메이션을 적용하는 방법도 알아봅니다.
이 튜토리얼은 첫 번째 codelab [https://developers.google.com/codelabs/maps-platform/maps-platform-101-3d-maps-js?hl=ko]에서 다룬 개념을 기반으로 합니다. 아직 수강하지 않았다면 이 Codelab을 완료하여 이 애플리케이션에 필요한 기본 지식을 습득하세요.
실행할 작업

이 애플리케이션에서는 유럽의 주요 Google 사무실을 간략하게 설명합니다. 사용자는 사무실을 선택하고 사무실을 둘러본 후 축소하여 일반 보기로 돌아갈 수 있습니다. 이러한 기능은 여행 및 탐색 애플리케이션에서 흔히 볼 수 있으며 사용자에게 더 몰입도 높은 환경을 제공합니다.
이 Codelab에서는 다음을 실행하는 3D 웹 앱을 빌드합니다.

Maps JavaScript API를 동적으로 로드합니다.
지도에 3D 마커를 추가합니다.
SVG를 사용하여 마커의 스타일을 지정합니다.
마커로 이동하고 마커 주변을 비행하는 기능을 추가합니다.
코드의 위치를 배열로 추상화합니다.

학습할 내용

마커의 작동 방식
마커의 스타일을 지정하는 방법
애니메이션이 내장 함수와 함께 작동하는 방식
프레이밍을 개선하기 위해 포즈를 취하는 카메라 위치와 지점 위치
카메라 매개변수를 캡처하여 상품을 더 잘 프레이밍하는 데 도움이 되는 유용한 해킹

기본 요건
이 Codelab을 완료하려면 다음 항목을 숙지해야 합니다. Google Maps Platform 사용에 익숙하다면 Codelab으로 건너뛰어도 됩니다.
필수 Google Maps Platform 제품
이 Codelab에서는 다음 Google Maps Platform 제품을 사용합니다.

Maps JavaScript API

본 Codelab의 기타 요구사항
이 Codelab을 완료하려면 다음과 같은 계정, 서비스, 도구가 필요합니다.

결제가 사용 설정된 Google Cloud 계정
Maps JavaScript API가 사용 설정된 Google Maps Platform API 키
JavaScript, HTML, CSS에 대한 기본 지식
원하는 텍스트 편집기 또는 IDE: 수정한 파일을 저장하여 확인합니다.
작업 중에 파일을 볼 수 있는 웹브라우저

2. 설정

Google Maps Platform 설정하기
Google Cloud Platform 계정 및 결제가 사용 설정된 프로젝트가 없는 경우 Google Maps Platform 시작하기 [https://developers.google.com/maps/gmp-get-started?hl=ko] 가이드를 참고하여 결제 계정 및 프로젝트를 만듭니다.

Cloud Console [https://console.cloud.google.com/?hl=ko]에서 프로젝트 드롭다운 메뉴를 클릭하고 이 Codelab에 사용할 프로젝트를 선택합니다.

Google Cloud Marketplace [https://console.cloud.google.com/marketplace?hl=ko]에서 이 Codelab에 필요한 Google Maps Platform API 및 SDK를 사용 설정합니다. 사용 설정을 위해 이 동영상 [https://youtu.be/n1UorU1PALk] 또는 이 문서 [https://developers.google.com/maps/gmp-get-started?hl=ko#enable-api-sdk]에서 설명하고 있는 단계를 따르세요.
Cloud Console의 사용자 인증 정보 [https://console.cloud.google.com/apis/credentials?hl=ko] 페이지에서 API 키를 생성합니다. 이 동영상 [https://youtu.be/2_HZObVbe-g] 또는 이 문서 [https://developers.google.com/maps/gmp-get-started?hl=ko#api-key]에서 설명하고 있는 단계를 따릅니다. Google Maps Platform에 대한 모든 요청에는 API 키가 필요합니다.

3. 간단한 지구본

애플리케이션 빌드를 시작하려면 기본 설정을 설정하는 것이 중요합니다. 그러면 이미지와 같이 지구의 '블루 마블' 뷰가 가장 기본적인 형태로 표시됩니다.

시작 페이지의 코드 추가
사이트에 지구본을 추가하려면 페이지에 다음 코드를 추가해야 합니다. 이렇게 하면 Maps JavaScript API 로더 섹션과 마커 코드를 추가할 페이지 내에 지도 3D 요소를 만드는 init 함수가 추가됩니다.
페이지에 자체 키 (설정 섹션에서 생성됨)를 추가해야 합니다. 그러지 않으면 3D 요소를 초기화할 수 없습니다.
<!DOCTYPE html>
<html>
<head>
<title>Step 1 - Simple Globe</title>
<style>
body {

map3D = new Map3DElement({
mode: MapMode.HYBRID,
</script>
</body>
</html>

이제 관심 장소의 프레임을 설정할 준비가 되었습니다. 다음 단계에서 진행하겠습니다.

4. 프레임 첫 번째 뷰

이제 지구본 뷰가 포함된 지도를 만들었으므로 다음 구현 단계는 올바른 출발 위치를 프레이밍하는 것입니다. 이렇게 하면 사용자가 작업 중인 위치를 한눈에 파악할 수 있습니다.
이 예에서는 유럽의 Google 사무실을 중점적으로 살펴보지만 이 접근 방식은 국가 전체에서 단일 도시 블록에 이르기까지 전 세계 모든 위치에 적용할 수 있습니다. 제품의 속도와 유연성을 통해 최소한의 코드 변경으로 애플리케이션을 글로벌에서 로컬로 확장할 수 있습니다.
먼저 초기 프레이밍으로 3D 지도를 다음과 같이 표시합니다.

카메라 프레임을 유럽에 맞춤
표시된 것처럼 디스플레이를 가져오려면 마치 공간에 카메라를 배치하여 위치를 내려다보는 것처럼 디스플레이의 프레임을 올바르게 설정해야 합니다.
이렇게 하려면 지도 컨트롤의 여러 매개변수를 사용하여 카메라 세부정보를 설정할 수 있습니다. 다이어그램에서 '실제' 세계에서 매개변수가 상호작용하는 방식을 확인할 수 있습니다. 특히 카메라가 바라보는 중앙 지점과 내가 바라보는 지점과의 거리 (범위)가 있습니다. 카메라 관점의 기울기도 설정해야 합니다. 그러지 않으면 지구를 똑바로 내려다보게 됩니다.

마지막 설정인 방향은 카메라의 방향을 결정합니다. 북쪽에서의 오프셋으로 측정됩니다. 이러한 값은 초기 디스플레이를 설정하는 객체로 3D 지도 요소에 적용됩니다. 업데이트된 3D 요소 생성자가 있는 코드에서 이를 확인할 수 있습니다.
map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.HYBRID

map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.HYBRID,
</script>

</body>

</html>

5. 간단한 마커

이 섹션에서는 첫 번째 마커를 추가하는 방법을 알아봅니다. 먼저 마커에 관한 일반적인 세부정보를 알아봅니다.
3D 지도에서는 두 가지 마커 클래스인 Marker3DElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement] 클래스와 Marker3DInteractiveElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DInteractiveElement] 클래스를 만들 수 있습니다. 이 클래스는 마커 클릭을 사용 설정할지 여부에 따라 선택됩니다. 그 외에는 기본적으로 동일하므로 먼저 Marker3DElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement]를 만든 다음 이후 단계에서 Marker3DInteractiveElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DInteractiveElement]로 '업그레이드'합니다.
이 단계의 전체 솔루션은 여기에서 확인할 수 있습니다.

마커에 높이 추가
먼저 마커는 3D 지도의 다른 모든 항목과 마찬가지로 3D입니다. 즉, 위치에 높이 (고도)가 있을 수 있으며 이 높이는 해수면, 지상, 메시를 기준으로 한 위치로 나타낼 수 있거나 지상에 고정되고 고도 위치를 무시하도록 설정할 수 있습니다. 자세한 내용은 AltitudeMode [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#AltitudeMode] 문서의 고도 상수 섹션을 참고하세요.
extruded [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement.extruded] 값을 사용하여 마커가 돌출되는지 여부를 설정할 수도 있습니다. 이 옵션에 따라 마커에 높이와 관련된 실제 위치를 표시하는 데 도움이 되는 작은 선이 지면에 그려질지 결정됩니다. 이 선은 지상에서 지점을 선택하는 데 유용합니다. Google 영국 위치를 예로 들 수 있습니다. 둘 다 돌출되고 위치가 절대 높이로 설정되어 있습니다. 첫 번째는 75m, 두 번째는 125m에 있습니다.
|  |  |
| --- | --- |
| 고도 75미터 | 고도 125m |
가림 및 충돌이 있는 마커 숨기기 또는 표시
위치가 서로 멀리 떨어져 있으므로 이 예시에서는 중요하지 않을 수 있지만, 서로 겹치거나 건물 뒤에 있을 수 있는 마커의 경우 collisionBehavior [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement.collisionBehavior] 또는 drawsWhenOccluded [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement.drawsWhenOccluded] 값으로 마커에 어떤 일이 일어나는지 제어할 수 있습니다.
충돌 동작에는 다음과 같은 옵션이 있습니다.

REQUIRED(기본값): 충돌과 관계없이 항상 마커를 표시합니다.
OPTIONAL_AND_HIDES_LOWER_PRIORITY: 마커가 다른 마커와 겹치지 않는 경우에만 마커를 표시합니다. 이 유형의 마커 두 개가 겹치면 zIndex가 더 높은 마커가 표시됩니다. zIndex가 동일하면 세로 화면 위치가 더 낮은 마커가 표시됩니다.
REQUIRED_AND_HIDES_OPTIONAL: 충돌과 관계없이 항상 마커를 표시하고 마커와 겹치는 OPTIONAL_AND_HIDES_LOWER_PRIORITY 마커 또는 라벨을 숨깁니다.

정의된 충돌 동작에 따라 마커가 표시되는 방식의 차이는 이미지에 나와 있습니다. REQUIRED를 설정하면 모든 마커가 표시되지만 REQUIRED_AND_HIDES_OPTIONAL를 사용하면 이 경우 화면 아래쪽에 있는 마커가 표시됩니다. 원하는 경우 zIndex를 조정하여 다른 마커를 맨 위에 표시할 수 있습니다.
|  |  |
| --- | --- |
| 필수 | REQUIRED_AND_HIDES_OPTIONAL |
가림의 경우 마커를 건물 뒤에 그릴지 여부를 선택할 수 있습니다. 다음 이미지를 참고하세요. drawsWhenOccluded를 true로 설정하면 건물 뒤에 그려질 때 마커가 약간 어두워집니다. false로 설정하면 건물 뒤에 있을 때 마커가 숨겨집니다. 자세한 내용은 다음 표를 참고하세요.
|  |  |
| --- | --- |
| drawsWhenOccluded : false | drawsWhenOccluded : true |
앞서 언급한 대로 가려진 마커의 그리기가 허용되는 경우 충돌로 인해 숨겨진 마커가 희미하게 표시됩니다. 이미지에서 일부 마커는 건물에 가려져 있고 일부 마커는 다른 마커에 가려져 있습니다.

자세한 내용은 2D 지도의 collision-behavior [https://developers.google.com/maps/documentation/javascript/advanced-markers/collision-behavior?hl=ko] 예를 참고하세요.
캔버스 지우기
이제 첫 번째 마커를 만들어 보겠습니다. 사용자가 마커에 집중할 수 있도록 3D 지도에서 기본 라벨을 사용 중지할 수 있습니다.
3D 지도 요소의 mode 값을 SATELLITE로 설정합니다.
자세한 내용은 모드 [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Map3DElement.mode]를 참고하세요.
map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.SATELLITE

마커를 만든 후 append 메서드를 사용하여 3D 지도에 추가합니다. 마커는 3D 지도 내에 하위 요소 배열로 저장됩니다. 마커를 수정하려면 이 배열을 통해 마커에 액세스해야 합니다.
API를 로드할 때 라이브러리 목록에 추가하여 Marker3DElement가 Maps JavaScript API에서 로드되는지 확인합니다.
const { Map3DElement, MapMode, Marker3DElement } = await google.maps.importLibrary("maps3d");

이제 페이지가 로드되면 런던 지점 위에 마커가 표시된 채로 유럽 전체가 표시됩니다. 애니메이션에서 볼 수 있듯이 수동으로 확대하여 생성된 위치 위에 마커를 표시할 수 있습니다.

이제 첫 번째 마커를 로드했으므로 다음 단계는 마커를 더 보기 좋게 만드는 것입니다.
섹션 솔루션
이 단계에서는 구현을 확인하기 위한 솔루션으로 완성된 페이지가 제공됩니다. (복사하는 경우 자체 API 키를 사용해야 합니다.)
<!DOCTYPE html>
<html>

<head>
<title>Step 3 - Simple Marker</title>
<style>
body {

map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.SATELLITE,

</script>
</body>

</html>

6. SVG 마커

이 단계에서는 마커를 변경하여 마커에 있는 국가를 나타내는 국기를 추가하여 마커를 더 멋지게 만듭니다. 이를 수행하는 방법을 알아보겠습니다. 이를 위해서는 PinElement [https://developers.google.com/maps/documentation/javascript/reference/advanced-markers?hl=ko#PinElement]를 알아야 합니다.
완료되면 다음과 같이 새로운 디자인이 표시됩니다.

PinElement를 사용한 기본 맞춤설정
2D 또는 3D 지도와 관계없이 JavaScript API의 마커 간에 공유되는 요소 중 하나는 PinElement [https://developers.google.com/maps/documentation/javascript/reference/advanced-markers?hl=ko#PinElement]입니다. Map3DElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Map3DElement]에 Marker3DElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement]를 추가하는 동안 Marker3DElement에 PinElement를 해당 요소의 하위 요소로 추가합니다.
PinElement에는 기본 수준에서 일반 마커를 변경하여 테두리 색상, 내부 점 (또는 글리프) 색상, 배경 색상을 설정하는 기능이 포함되어 있습니다. 2D 마커를 보여주는 이미지에서 확인할 수 있습니다.

배율 값을 설정하여 요소를 통해 마커 크기를 설정할 수도 있습니다(1보다 크면 평소보다 크고 1보다 작으면 비율이 작음).
더 맞춤설정된 모양을 적용하면서도 표준 PinElement 지도 핀 모양을 유지하려면 글리프를 이미지 또는 SVG 파일로 대체할 수도 있습니다.
PinElements 외
이 단계에서는 svg 플래그와 다양한 색상으로 표준 PinElement를 업데이트합니다. 하지만 마커의 모양을 완전히 변경하여 지도 핀처럼 보이지 않게 할 수도 있습니다. 마커 내에서 HTMLImageElement 및 SVGElement와 같은 템플릿을 사용하여 새 그래픽을 삽입할 수도 있습니다. Marker3DElement-Slots [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement-Slots] 문서에서 이에 관한 자세한 내용을 확인할 수 있습니다.
가능한 작업을 확인하려면 다양한 기법을 사용하여 마커의 스타일을 지정하는 예를 보여주는 다음 샘플을 살펴보세요.
|  |  |
| --- | --- |
| PinElement를 통한 기본 맞춤설정이 적용된 마커는 샘플을 참고하세요. | SVG 및 이미지를 통해 템플릿을 통한 복잡한 맞춤설정이 적용된 마커는 샘플을 참고하세요. |
PinElement 추가
마커의 모양을 변경하려면 먼저 PinElement 라이브러리가 페이지에 추가되었는지 확인해야 합니다. maps3d 라이브러리를 가져온 후 다음 코드 줄을 추가하면 됩니다.
const { Map3DElement, MapMode, Marker3DElement } = await google.maps.importLibrary("maps3d");
const { PinElement } = await google.maps.importLibrary('marker');

이제 요소가 로드되었으므로 PinElement를 참조하고 만들 수 있습니다. 코드를 살펴보고 마커가 생성되는 위치 사이에 코드를 추가한 후 마커를 3D 지도에 추가합니다.

map3D.append(marker);

기본 핀을 로드하는 것이 아니므로 PinElement를 설정하는 것 외에도 관련 배경 색상 및 크기와 함께 여러 작업을 실행해야 합니다.
먼저 국기 아이콘의 svg 이미지(이 경우 영국 국기)를 참조해야 합니다. https://flagicons.lipis.dev/ [https://flagicons.lipis.dev/]와 같은 컬렉션에서 가져올 수 있습니다.
사이트에서 찾을 수 있는 위치에 아이콘을 배치할 수 있습니다. 이 경우 이미지의 위치를 하드코딩하거나 현재 사이트 위치를 디렉터리의 스텁으로 사용할 수 있습니다(여기서는 기본 변수로 표시). 그런 다음 서버의 올바른 위치에 있는 올바른 국기에 연결할 수 있습니다. 여기서는 '/images/gb.svg' 아래에 있습니다.
그러면 다음과 같이 PinElement가 생성됩니다.

따라서 플래그를 올바른 위치에 배치하고 코드를 올바른 위치에 배치하면 다음과 같은 3D 지도가 표시됩니다.

이제 마커가 모두 준비되었습니다. 클릭 가능하도록 변경하여 상호작용을 추가할 수도 있습니다. 다음 단계에서 이 작업을 수행합니다.
섹션 솔루션
이 단계에서는 구현을 확인하기 위한 솔루션으로 완성된 페이지가 제공됩니다. (복사하는 경우 자체 API 키를 사용해야 합니다.)
또한 플래그 svg (또는 원하는 png 파일) 파일을 가져와 페이지에서 찾을 수 있는 디렉터리에 저장해야 합니다 (여기서는 이미지 폴더에 저장됨).
<!DOCTYPE html>
<html>

<head>
<title>Step 4 - SVG Marker</title>
<style>
body {
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.SATELLITE,

map3D.append(marker);

</script>
</body>

</html>

7. 대화형 마커

이전 단계에서 페이지에 마커가 추가되었지만 보기 좋을 뿐 별다른 기능이 없으며 3D 지도와 동일한 방식으로 상호작용해야 합니다. 다음 단계는 마커를 클릭할 때 마커로 할 수 있는 작업을 추가하여 마커가 사용자 상호작용에 반응하도록 하는 것입니다.
이 기능을 추가하려면 Marker3DElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DElement]를 Marker3DInteractiveElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DInteractiveElement]로 변환해야 합니다. 완료하면 비슷한 페이지가 표시되지만 이 페이지에서 마커를 클릭하면 알림이 표시되며 다음과 같이 표시됩니다.

먼저 마커 클래스를 변경합니다.
마커에 상호작용을 추가하려면 올바른 클래스를 사용하고 있는지 확인해야 합니다. 필요한 클래스는 Marker3DInteractiveElement [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Marker3DInteractiveElement]이지만 Marker3DElement의 확장 프로그램이므로 새 클래스를 로드하고 생성자의 클래스 이름을 변경하는 것 외에는 아무것도 할 필요가 없습니다.
const { Map3DElement, MapMode, Marker3DInteractiveElement } = await google.maps.importLibrary("maps3d");
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.SATELLITE,
event.stopPropagation();
이제 애플리케이션을 실행하면 다음과 같은 결과가 표시됩니다.

마커를 클릭할 때 어떤 작업을 실행할 수 있는 기능이 있으므로 이제 다음 단계에서 페이지에 애니메이션을 추가할 수 있습니다.
섹션 솔루션
이 단계에서는 구현을 확인하기 위한 솔루션으로 완성된 페이지가 제공됩니다. (복사하는 경우 자체 API 키를 사용해야 합니다.)
<!DOCTYPE html>
<html>

<head>
<title>Step 5 - Interactive Marker</title>
<style>
body {
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.SATELLITE,
event.stopPropagation();

map3D.append(marker);

</script>
</body>

</html>

8. 빠른 이동

이 단계에서는 마커를 클릭하여 추가된 애니메이션을 사용하여 해당 위치로 이동하는 기능을 사용합니다. 여기에서 이를 실제로 확인할 수 있습니다.

flyCameraTo로 애니메이션 처리
페이지에 이를 추가하려면 3D 지도의 flyCameraTo [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Map3DElement.flyCameraTo] 메서드를 사용합니다. 이 메서드에서는 현재 있는 카메라 위치와 확인하려는 카메라 위치 간에 카메라가 애니메이션 처리되며, 두 위치 간에 보간하고 3D 지도 내에서 비행을 애니메이션 처리합니다.
flyCameraTo [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Map3DElement.flyCameraTo]를 사용할 때는 두 가지 속성(애니메이션이 끝날 때 카메라가 가리켜야 하는 위치인 endCamera [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#FlyToAnimationOptions.endCamera] 및 전환하는 데 걸리는 밀리초 단위의 시간인 durationMillis [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#FlyToAnimationOptions.durationMillis])이 있는 FlyToAnimationOptions [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#FlyToAnimationOptions]를 지정해야 합니다.
이 예에서는 마커 위치인 건물을 바라보도록 카메라를 설정하고 기울기를 65도, 범위를 500m, 방향을 0도로 설정하여 북쪽을 향하게 합니다. 애니메이션 시간을 12500밀리초 (12.5초)로 설정합니다.
페이지의 현재 알림 이벤트를 flyCameraTo 스니펫으로 바꿉니다.
marker.addEventListener('gmp-click', (event) => {
map3D.flyCameraTo({
endCamera: {
center: marker.position,
tilt: 65,
range: 500,
heading: 0,
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
center: { lat: 46.717, lng: 7.075, altitude: 2175.130 },
range: 5814650,
tilt: 33,
heading: 4.36,
mode: MapMode.SATELLITE,

map3D.append(marker);

</script>
</body>

</html>

9. 둘러보기

애니메이션의 마지막 요소는 flyCameraAround [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Map3DElement.flyCameraAround] 메서드를 사용하여 건물 주위를 공전하는 애니메이션을 만드는 것입니다. 완료되면 애니메이션과 같이 건물로 날아가고 건물 주위를 날아다니는 애니메이션이 만들어집니다. 실제 예시로는 약간 빠르지만, 너무 길지 않게 작업이 작동하는 방식을 보여주는 데 유용합니다. 적절한 값을 얻을 때까지 타이밍을 조정해 보세요.

둘러보러 가자
flyCameraAround 메서드는 옵션 [https://developers.google.com/codelabs/maps-platform/maps-platform-3d-maps-js-markers/FlyAroundAnimationOptions?hl=ko]을 입력으로 사용하여 공전할 위치, 카메라 매개변수, 공전하는 데 걸리는 밀리초 시간을 제어한다는 점에서 flyCameraTo [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Map3DElement.flyCameraTo] 함수와 유사합니다. 마지막으로 지정된 시간에 발생할 수 있는 회전 수를 지정할 수도 있습니다. FlyAroundAnimationOptions [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#FlyAroundAnimationOptions]에서 모든 옵션을 확인할 수 있습니다.
하지만 잠깐만요!
애니메이션에서 애니메이션이 위치로 이동한 다음 주변을 비행하면서 애니메이션을 연결하는 것을 볼 수 있습니다. 이렇게 하려면 3D 지도 gmp-animationend [https://developers.google.com/maps/documentation/javascript/reference/3d-map?hl=ko#Map3DElement.gmp-animationend] 이벤트를 사용하여 다음 애니메이션을 실행하기 전에 현재 애니메이션이 완료되었는지 확인합니다. 이 애니메이션은 중지되기 전에 한 번만 실행되어야 합니다.
코드를 살펴본 후 이전 섹션에 추가한 코드 뒤에 삽입합니다.
marker.addEventListener('gmp-click', (event) => {
map3D.flyCameraTo({
endCamera: {
center: marker.position,
tilt: 65,
range: 500,
heading: 0,
즉, 카메라가 5초에 한 번 지점을 중심으로 회전합니다. 이러한 값을 실험하여 적합한 값을 찾을 수 있습니다.
이 시점에서 애니메이션이 종료되지만 이 코드로 인해 gmp-animationend 이벤트가 다시 실행되어 궤도가 무한히 반복되는 것을 원하지 않습니다. 이를 방지하려면 리스너에 once를 true로 설정하는 옵션을 제공합니다. 즉, 이벤트가 완료되면 삭제되므로 무한 루프가 방지됩니다.
이렇게 추가하면 솔루션을 실행할 수 있으며 애니메이션이 끝에서 마커 주위를 날아다니는 것을 볼 수 있습니다(애니메이션 참고).

이 단계에서는 클릭할 수 있는 마커를 추가했습니다. 그러면 카메라가 마커 위치로 이동하고 그 주변을 날아다닙니다. 다음 단계에서는 점들을 더 추가하고 점 간에 이동할 수 있도록 허용합니다.
섹션 솔루션
이 단계에서는 구현을 확인하기 위한 솔루션으로 완성된 페이지가 제공됩니다. (복사하는 경우 자체 API 키를 사용해야 합니다.)
<!DOCTYPE html>
<html>

<head>
<title>Step 7 - Zoom Around</title>
<style>
body {
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
...europeCamera,
mode: MapMode.SATELLITE,

map3D.append(marker);

</script>
</body>

</html>

10. 파리!

런던은 멋진 도시이지만 페이지에 런던만 있으면 조금 외로워 보이므로 파리부터 시작해 새로운 위치를 추가해 보겠습니다. 이를 위해 배열을 사용하여 모든 위치 관련 세부정보를 보관한 다음 이를 마커 표시 매개변수와 카메라 위치로 이동 및 주변을 이동하는 기능과 변수의 입력으로 사용할 수 있습니다. 예를 들어 건물의 더 나은 카메라 샷을 찍기 위해 마커 포인트 위치와 다를 수 있습니다.

위치 배열
보기 카메라 , 마커 지점, 표시 옵션과 같이 특정 위치에 관한 모든 세부정보를 하드코딩하지 않아도 되도록 소수의 JSON 객체 배열을 사용하여 이 데이터를 보관할 수 있습니다. 그런 다음 애플리케이션에서 마커가 생성되고 사용될 때 이를 적용할 수 있습니다. 다음 코드 스니펫에서 배열을 보관할 officeLocations라는 변수를 만드는 예를 확인할 수 있습니다.
init 함수 바로 앞에 다음 코드를 추가합니다. 또한 모든 오피스 위치에 적용할 수 있도록 base 변수가 init 함수 외부로 이동되었습니다.
먼저 Map3DElement를 만들 때 europeCamera 객체를 입력으로 사용해야 합니다.
두 번째로 수정해야 할 사항은 마커 생성 섹션을 루프로 래핑하여 변수에 저장된 매개변수로 업데이트하는 것입니다. 이는 표시된 코드에서 확인할 수 있습니다.

office.point : 마커 위치입니다.
office.name : 마커 라벨에 사용되는 지점 이름입니다.
office.camera : 초기 카메라 위치입니다.
office.pin : 표시 차이에 관한 PinElement 옵션

프랑스 국기의 SVG 파일이나 이미지도 가져와야 합니다.
async function init() {
const { Map3DElement, MapMode, Marker3DInteractiveElement } = await google.maps.importLibrary("maps3d");
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
...europeCamera,
mode: MapMode.SATELLITE,

map3D.append(marker);
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
...europeCamera,
mode: MapMode.SATELLITE,

map3D.append(marker);
</script>
</body>

</html>

11. 장소 더보기

이제 애플리케이션에 필요한 모든 기능이 있지만 3D 지도에 아직 약간 빈 공간이 있으므로 위치를 몇 개 더 추가하여 지도에 약간 더 많은 내용을 표시해 보겠습니다. 배열을 사용하면 고유한 마커가 있는 새 위치를 계속 채울 수 있습니다. 마지막 단계는 다음과 같은 보기가 표시될 때까지 마커를 계속 추가하는 것입니다.

마커를 추가합니다.
Google은 유럽의 여러 국가에 사무실을 운영하고 있습니다. 그중 몇 곳을 지도에 추가해 보겠습니다. 배열을 업데이트하기만 하면 됩니다. 웹 서비스에서 가져오거나 어딘가의 정적 파일에서 제공할 수 있습니다. 단순성을 위해 이 경우에는 동일한 페이지에 유지됩니다.
마커는 원하는 만큼 추가할 수 있으며 페이지에서 이를 선택한 후 뷰에 자동으로 추가됩니다. 올바른 플래그를 가져와 이미지 디렉터리 (또는 편리한 위치)에 저장해야 합니다.
Codelab을 완료하셨습니다. 축하합니다. 다음 섹션에서 마무리하고 다른 새로운 작업을 찾아보세요.
섹션 솔루션
이 단계에서는 구현을 확인하기 위한 솔루션으로 완성된 페이지가 제공됩니다. (복사하는 경우 자체 API 키를 사용해야 합니다.)
또한 국기 svg (또는 원하는 png 파일) 파일을 가져와 페이지에서 찾을 수 있는 디렉터리에 저장해야 합니다 (여기서는 이미지 폴더에 저장됨).
<!DOCTYPE html>
<html>

<head>
<title>Step 9 - More Places!</title>
<style>
body {
const { PinElement } = await google.maps.importLibrary('marker');

map3D = new Map3DElement({
...europeCamera,
mode: MapMode.SATELLITE,

map3D.append(marker);
</script>
</body>

</html>

12. 다음 단계

이 Codelab에서는 Maps JavaScript API의 3D로 할 수 있는 작업의 기본사항을 살펴봤습니다. 다음으로, 지도에 다음과 같은 기능을 추가해 보세요.

사무실을 선택할 수 있는 드롭다운 목록을 추가합니다.
다른 마커 스타일 지정 옵션 [https://developers.google.com/maps/documentation/javascript/examples/3d/marker?hl=ko#create_markers_with_graphics]을 사용하여 더 멋진 지도를 만들어 보세요.
Maps JavaScript API에서 사용할 수 있는 추가 라이브러리 [https://developers.google.com/maps/documentation/javascript/libraries?hl=ko]를 확인합니다. 이러한 라이브러리를 사용하면 장소 ID를 사용하여 각 지점의 평점을 표시하는 장소 등의 추가 기능을 사용 설정할 수 있습니다.

계속해서 웹에서 Google Maps Platform 및 3D를 사용하는 방법을 자세히 알아보려면 다음 링크를 참고하세요.

지도 JavaScript 문서에서 포토리얼리스틱 3D 지도를 살펴보기 [https://developers.google.com/maps/documentation/javascript/3d-maps-overview?hl=ko]
3D 지도 데모에서 아이디어 얻기 [https://mapsplatform.google.com/demos/3d-maps-javascript/?hl=ko]
다른 Google Maps Platform Codelab [https://codelabs.developers.google.com/?product=googlemapsplatform&hl=ko]을 진행합니다.
GitHub의 Google Maps Platform 오픈소스 프로젝트 [https://github.com/googlemaps]를 확인하세요.
Google Maps Platform 블로그 [https://mapsplatform.google.com/resources/blog/?hl=ko]를 읽습니다.