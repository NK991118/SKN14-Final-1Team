Source URL: https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks?hl=ko
Title: Tasks

Stay organized with collections

Save and categorize content based on your preferences.

Tasks

Kotlin [https://developers.google.com/android/reference/kotlin/com/google/android/gms/tasks/Tasks]
|Java

public final class Tasks [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks]

Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task] utility methods.
Summary

| Public methods |
| --- |
| static TResult | <TResult> await(@NonNull Task<TResult> task) Blocks until the specified Task is complete. |
| static TResult | <TResult> await(     @NonNull Task<TResult> task,     long timeout,     @NonNull TimeUnit unit ) Blocks until the specified Task is complete. |
| static @NonNull Task<TResult> | <TResult> call(@NonNull Callable<TResult> callable) This method is deprecated. Use TaskCompletionSource instead, which allows the caller to manage their own Executor. |
| static @NonNull Task<TResult> | <TResult> call(     @NonNull Executor executor,     @NonNull Callable<TResult> callable ) This method is deprecated. Use TaskCompletionSource instead, which allows the caller to manage their own Executor. |
| static @NonNull Task<TResult> | <TResult> forCanceled() Returns a canceled Task. |
| static @NonNull Task<TResult> | <TResult> forException(@NonNull Exception e) Returns a completed Task with the specified exception. |
| static @NonNull Task<TResult> | <TResult> forResult(TResult result) Returns a completed Task with the specified result. |
| static @NonNull Task<Void> | whenAll(@Nullable Task[] tasks) Returns a Task that completes successfully when all of the specified Tasks complete successfully. |
| static @NonNull Task<Void> | whenAll(@Nullable Collection<Task<Object>> tasks) Returns a Task that completes successfully when all of the specified Tasks complete successfully. |
| static @NonNull Task<List<Task<Object>>> | whenAllComplete(@Nullable Task[] tasks) Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. |
| static @NonNull Task<List<Task<Object>>> | whenAllComplete(@Nullable Collection<Task<Object>> tasks) Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. |
| static @NonNull Task<List<Task<Object>>> | whenAllComplete(Executor executor, @Nullable Task[] tasks) Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. |
| static @NonNull Task<List<Task<Object>>> | whenAllComplete(     Executor executor,     @Nullable Collection<Task<Object>> tasks ) Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. |
| static @NonNull Task<List<TResult>> | <TResult> whenAllSuccess(@Nullable Task[] tasks) Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. |
| static @NonNull Task<List<TResult>> | <TResult> whenAllSuccess(@Nullable Collection<Task<Object>> tasks) Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. |
| static @NonNull Task<List<TResult>> | <TResult> whenAllSuccess(Executor executor, @Nullable Task[] tasks) Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. |
| static @NonNull Task<List<TResult>> | <TResult> whenAllSuccess(     Executor executor,     @Nullable Collection<Task<Object>> tasks ) Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. |
| static Task<T> | <T> withTimeout(@NonNull Task<T> task, long timeout, @NonNull TimeUnit unit) Returns a new Task which will return a TimeoutException if a result is not returned within the specified time period. |

Public methods

await

public static TResult <TResult> await [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#await(com.google.android.gms.tasks.Task%3CTResult%3E)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> task)
Blocks until the specified Task is complete.

| Returns |
| --- |
| TResult | the Task's result |

| Throws |
| --- |
| java.util.concurrent.ExecutionException | if the Task fails. getCause will return the original exception. |
| java.lang.InterruptedException | if an interrupt occurs while waiting for the Task to complete |

await

public static TResult <TResult> await [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#await(com.google.android.gms.tasks.Task%3CTResult%3E,long,java.util.concurrent.TimeUnit)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> task,    long timeout,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] TimeUnit [https://developer.android.com/reference/java/util/concurrent/TimeUnit.html] unit)
Blocks until the specified Task is complete.

| Returns |
| --- |
| TResult | the Task's result |

| Throws |
| --- |
| java.util.concurrent.ExecutionException | if the Task fails. getCause will return the original exception. |
| java.lang.InterruptedException | if an interrupt occurs while waiting for the Task to complete |
| java.util.concurrent.TimeoutException | if the specified timeout is reached before the Task completes |

call

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> <TResult> call [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#call(java.util.concurrent.Callable%3CTResult%3E)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Callable [https://developer.android.com/reference/java/util/concurrent/Callable.html]<TResult> callable)
This method is deprecated.
Use TaskCompletionSource [https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource] instead, which allows the caller to manage their own Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html].

Returns a Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task] that will be completed with the result of the specified
Callable.
If a non-Exception [https://developer.android.com/reference/java/lang/Exception.html] throwable is thrown in the callable, the Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task] will be failed with a RuntimeException [https://developer.android.com/reference/java/lang/RuntimeException.html] whose cause is the original throwable.
The Callable will be called on the main application thread.

call

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> <TResult> call [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#call(java.util.concurrent.Executor,java.util.concurrent.Callable%3CTResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Callable [https://developer.android.com/reference/java/util/concurrent/Callable.html]<TResult> callable)
This method is deprecated.
Use TaskCompletionSource [https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource] instead, which allows the caller to manage their own Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html].

Returns a Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task] that will be completed with the result of the specified
Callable.
If a non-Exception [https://developer.android.com/reference/java/lang/Exception.html] throwable is thrown in the callable, the Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task] will be failed with a RuntimeException [https://developer.android.com/reference/java/lang/RuntimeException.html] whose cause is the original throwable.

| Parameters |
| --- |
| @NonNull Executor executor | the Executor to use to call the Callable |

forCanceled

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> <TResult> forCanceled [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#forCanceled()]()
Returns a canceled Task.

forException

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> <TResult> forException [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#forException(java.lang.Exception)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Exception [https://developer.android.com/reference/java/lang/Exception.html] e)
Returns a completed Task with the specified exception.

forResult

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> <TResult> forResult [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#forResult(TResult)](TResult result)
Returns a completed Task with the specified result.

whenAll

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Void [https://developer.android.com/reference/java/lang/Void.html]> whenAll [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAll(com.google.android.gms.tasks.Task%3C?%3E...)](@Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Task[] tasks)
Returns a Task that completes successfully when all of the specified Tasks complete successfully. Does not accept nulls.
This Task would fail if any of the provided Tasks fail. This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAll

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Void [https://developer.android.com/reference/java/lang/Void.html]> whenAll [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAll(java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)](@Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Collection [https://developer.android.com/reference/java/util/Collection.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>> tasks)
Returns a Task that completes successfully when all of the specified Tasks complete successfully. Does not accept nulls.
The returned Task would fail if any of the provided Tasks fail. The returned Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllComplete

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>>> whenAllComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(com.google.android.gms.tasks.Task%3C?%3E...)](@Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Task[] tasks)
Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.
This method execute tasks on the main thread, and can cause stuttering or delay when the main thread is busy. Consider migrating to whenAllComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(java.util.concurrent.Executor,java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)] where an executor can be specified to use a background thread.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllComplete

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>>> whenAllComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)](@Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Collection [https://developer.android.com/reference/java/util/Collection.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>> tasks)
Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.
This method execute tasks on the main thread, and can cause stuttering or delay when the main thread is busy. Consider migrating to whenAllComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(java.util.concurrent.Executor,java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)] where an executor can be specified to use a background thread.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllComplete

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>>> whenAllComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(java.util.concurrent.Executor,com.google.android.gms.tasks.Task%3C?%3E...)](Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor, @Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Task[] tasks)
Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllComplete

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>>> whenAllComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(java.util.concurrent.Executor,java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)](    Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Collection [https://developer.android.com/reference/java/util/Collection.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>> tasks)
Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllSuccess

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<TResult>> <TResult> whenAllSuccess [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(com.google.android.gms.tasks.Task%3C?%3E...)](@Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Task[] tasks)
Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls.
This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.
This method execute tasks on the main thread, and can cause stuttering or delay when the main thread is busy. Consider migrating to whenAllSuccess [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(java.util.concurrent.Executor,java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)] where an executor can be specified to use a background thread.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllSuccess

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<TResult>> <TResult> whenAllSuccess [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)](@Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Collection [https://developer.android.com/reference/java/util/Collection.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>> tasks)
Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls.
This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.
This method execute tasks on the main thread, and can cause stuttering or delay when the main thread is busy. Consider migrating to whenAllSuccess [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(java.util.concurrent.Executor,java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)] where an executor can be specified to use a background thread.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllSuccess

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<TResult>> <TResult> whenAllSuccess [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(java.util.concurrent.Executor,com.google.android.gms.tasks.Task%3C?%3E...)](Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor, @Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Task[] tasks)
Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls.
This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

whenAllSuccess

public static @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<List [https://developer.android.com/reference/java/util/List.html]<TResult>> <TResult> whenAllSuccess [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(java.util.concurrent.Executor,java.util.Collection%3C?%20extends%20com.google.android.gms.tasks.Task%3C?%3E%3E)](    Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Collection [https://developer.android.com/reference/java/util/Collection.html]<Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<Object [https://developer.android.com/reference/java/lang/Object.html]>> tasks)
Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls.
This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.

| Parameters |
| --- |
| Executor executor | the Executor to use to run the Continuation |

| Throws |
| --- |
| java.lang.NullPointerException | if any of the provided Tasks are null |

withTimeout

public static Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<T> <T> withTimeout [https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#withTimeout(com.google.android.gms.tasks.Task%3CT%3E,long,java.util.concurrent.TimeUnit)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<T> task, long timeout, @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] TimeUnit [https://developer.android.com/reference/java/util/concurrent/TimeUnit.html] unit)
Returns a new Task which will return a TimeoutException [https://developer.android.com/reference/java/util/concurrent/TimeoutException.html] if a result is not returned within the specified time period.

| Returns |
| --- |
| Task<T> | A new Task. |