Source URL: https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient?hl=ko
Title: GooglePlaces Framework Reference

Send feedback

GooglePlaces Framework Reference

Stay organized with collections

Save and categorize content based on your preferences.

이 페이지의 내용+sharedClient [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#+sharedclient]+provideAPIKey: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#+provideapikey:]+setAppCheckTokenProvider: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#+setappchecktokenprovider:]+openSourceLicenseInfo [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#+opensourcelicenseinfo]+SDKVersion [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#+sdkversion]+SDKLongVersion [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#+sdklongversion]-lookUpPlaceID:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-lookupplaceid:callback:]-fetchAutocompleteSuggestionsFromRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-fetchautocompletesuggestionsfromrequest:callback:]-loadPlacePhoto:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-loadplacephoto:callback:]-loadPlacePhoto:constrainedToSize:scale:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-loadplacephoto:constrainedtosize:scale:callback:]-currentPlaceWithCallback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-currentplacewithcallback:]-findPlaceLikelihoodsFromCurrentLocationWithPlaceFields:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-findplacelikelihoodsfromcurrentlocationwithplacefields:callback:]-findAutocompletePredictionsFromQuery:filter:sessionToken:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-findautocompletepredictionsfromquery:filter:sessiontoken:callback:]-lookUpPhotosForPlaceID:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-lookupphotosforplaceid:callback:]-isOpenWithPlaceID:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-isopenwithplaceid:callback:]-isOpenWithPlaceID:date:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-isopenwithplaceid:date:callback:]-isOpenWithPlace:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-isopenwithplace:callback:]-isOpenWithPlace:date:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-isopenwithplace:date:callback:]-fetchPlaceFromPlaceID:placeFields:sessionToken:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-fetchplacefromplaceid:placefields:sessiontoken:callback:]-isOpenWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-isopenwithrequest:callback:]-searchByTextWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-searchbytextwithrequest:callback:]-fetchPlaceWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-fetchplacewithrequest:callback:]-fetchPhotoWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-fetchphotowithrequest:callback:]-searchNearbyWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#-searchnearbywithrequest:callback:]+addInternalUsageAttributionID: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#+addinternalusageattributionid:]

GMSPlacesClient

@interface GMSPlacesClient : NSObject

Main interface to the Places SDK. Used for searching and getting details about places. This class
should be accessed through the [GMSPlacesClient sharedClient] method.

GMSPlacesClient methods should only be called from the main thread. Calling these methods from
another thread will result in an exception or undefined behavior. Unless otherwise specified, all
callbacks will be invoked on the main thread.

+sharedClient [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(cm)sharedClient]

Provides the shared instance of GMSPlacesClient for the Google Places SDK for iOS, creating it
if necessary.

If your application often uses methods of GMSPlacesClient it may want to hold onto this object
directly, as otherwise your connection to Google may be restarted on a regular basis.

Declaration

Swift
class func shared() -> Self

Objective-C
+ (nonnull instancetype)sharedClient;

+provideAPIKey: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(cm)provideAPIKey:]

Provides your API key to the Google Places SDK for iOS. This key is generated for your
application via the Google Cloud Platform Console, and is paired with your application’s
bundle ID to identify it. This should be called by your application before using
GMSPlacesClient (e.g., in application:didFinishLaunchingWithOptions:).

Declaration

Swift
class func provideAPIKey(_ key: String) -> Bool

Objective-C
+ (BOOL)provideAPIKey:(nonnull NSString *)key;

Return Value
YES if the APIKey was successfully provided.

+setAppCheckTokenProvider: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(cm)setAppCheckTokenProvider:]

Provides an App Check token provider to the Google Places SDK for iOS.  This should be called by
your application before using GMSPlacesClient
(for example, in application:didFinishLaunchingWithOptions:). If you do not provide a token
provider, the SDK will not use the token provider.

Declaration

Swift
class func setAppCheckTokenProvider(_ provider: any GMSPlacesAppCheckTokenProvider [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Protocols/GMSPlacesAppCheckTokenProvider.html])

Objective-C
+ (void)setAppCheckTokenProvider:
(nonnull id<GMSPlacesAppCheckTokenProvider [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Protocols/GMSPlacesAppCheckTokenProvider.html]>)provider;

+openSourceLicenseInfo [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(cm)openSourceLicenseInfo]

Returns the open source software license information for the Google Places SDK for iOS. This
information must be made available within your application.

Declaration

Swift
class func openSourceLicenseInfo() -> String

Objective-C
+ (nonnull NSString *)openSourceLicenseInfo;

+SDKVersion [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(cm)SDKVersion]

Returns the version for this release of the Google Places SDK for iOS.. For example, “1.0.0”.

Declaration

Swift
class func sdkVersion() -> String

Objective-C
+ (nonnull NSString *)SDKVersion;

+SDKLongVersion [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(cm)SDKLongVersion]

Returns the long version for this release of the Google Places SDK for iOS.. For example, “1.0.0
(102.1)”.

Declaration

Swift
class func sdkLongVersion() -> String

Objective-C
+ (nonnull NSString *)SDKLongVersion;

-lookUpPlaceID:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)lookUpPlaceID:callback:]

Deprecated
This method is replaced by fetchPlaceWithRequest:callback: and will be removed in a future release.

Get details for a place. This method is non-blocking.

Declaration

Swift
func lookUpPlaceID(_ placeID: String, callback: @escaping GMSPlaceResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceResultCallback.html])

Objective-C
- (void)lookUpPlaceID:(nonnull NSString *)placeID
| placeID | The place ID to look up. |
| --- | --- |
| callback | The callback to invoke with the lookup result. |

-fetchAutocompleteSuggestionsFromRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)fetchAutocompleteSuggestionsFromRequest:callback:]

Find Autocomplete suggestions from text query. Results may optionally be biased towards a
certain location or restricted to an area. This method is non-blocking.

The supplied callback will be invoked with an array of autocompletion suggestions upon success
and an NSError upon an error.

Declaration

Swift
func fetchAutocompleteSuggestions(from request: GMSAutocompleteRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteRequest.html], callback: @escaping GMSAutocompleteSuggestionsCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSAutocompleteSuggestionsCallback.html])

Objective-C
- (void)
fetchAutocompleteSuggestionsFromRequest:
(nonnull GMSAutocompleteRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteRequest.html] *)request
callback:
(nonnull
GMSAutocompleteSuggestionsCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSAutocompleteSuggestionsCallback.html])
callback;

Parameters
| request | The GMSAutocompleteRequest request for autocomplete. |
| --- | --- |
| callback | The callback to invoke with the suggestions. |

-loadPlacePhoto:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)loadPlacePhoto:callback:]

Loads the image for a specific photo at its maximum size.

Image data may be cached by the SDK. If the requested photo does not exist in the cache then a
network lookup will be performed.

Declaration

Swift
func loadPlacePhoto(_ photoMetadata: GMSPlacePhotoMetadata [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacePhotoMetadata.html], callback: @escaping GMSPlacePhotoImageResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlacePhotoImageResultCallback.html])

Objective-C
- (void)loadPlacePhoto:(nonnull GMSPlacePhotoMetadata [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacePhotoMetadata.html] *)photoMetadata
| photoMetadata | The GMSPlacePhotoMetadata for which to load a UIImage. |
| --- | --- |
| callback | The callback to invoke with the loaded UIImage. |

-loadPlacePhoto:constrainedToSize:scale:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)loadPlacePhoto:constrainedToSize:scale:callback:]

Loads the image for a specific photo, scaled to fit the given maximum dimensions.

The image will be scaled to fit within the given dimensions while maintaining the aspect ratio of
the original image. This scaling is performed server-side.

If the scale parameter is not 1.0 maxSize will be multiplied by this value and the returned
UIImage will be set to have the specified scale. This parameter should be set to the screen
scale if you are loading images for display on screen.

Image data may be cached by the SDK. If the requested photo does not exist in the cache then a
network lookup will be performed.

NOTE: After applying the scale factor the dimensions in maxSize will be rounded up to the nearest
integer before use. If an image is requested which is larger than the maximum size available a
smaller image may be returned.

Declaration

Swift
func loadPlacePhoto(_ photoMetadata: GMSPlacePhotoMetadata [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacePhotoMetadata.html], constrainedTo maxSize: CGSize, scale: CGFloat, callback: @escaping GMSPlacePhotoImageResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlacePhotoImageResultCallback.html])

Objective-C
- (void)loadPlacePhoto:(nonnull GMSPlacePhotoMetadata [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacePhotoMetadata.html] *)photoMetadata
constrainedToSize:(CGSize)maxSize
scale:(CGFloat)scale
| photoMetadata | The GMSPlacePhotoMetadata for which to load a UIImage. |
| --- | --- |
| maxSize | The maximum size of the image. |
| scale | The scale to load the image at. |
| callback | The callback to invoke with the loaded UIImage. |

-currentPlaceWithCallback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)currentPlaceWithCallback:]

Returns an estimate of the place where the device is currently known to be located.

Generates a place likelihood list based on the device’s last estimated location. The supplied
callback will be invoked with this likelihood list upon success and an NSError upon an error.

NOTE: This method requires that your app has permission to access the current device location.
Before calling this make sure to request access to the users location using [CLLocationManager
requestWhenInUseAuthorization] or [CLLocationManager requestAlwaysAuthorization]. If you do call
this method and your app does not have the correct authorization status, the callback will be
called with an error.

Declaration

Swift
func currentPlace(callback: @escaping GMSPlaceLikelihoodListCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceLikelihoodListCallback.html])

Objective-C
- (void)currentPlaceWithCallback:
(nonnull GMSPlaceLikelihoodListCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceLikelihoodListCallback.html])callback;

Parameters
| callback | The callback to invoke with the place likelihood list. |
| --- | --- |

-findPlaceLikelihoodsFromCurrentLocationWithPlaceFields:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)findPlaceLikelihoodsFromCurrentLocationWithPlaceFields:callback:]

Find place likelihoods using the user’s current location. This method is non-blocking.

The supplied callback will be invoked with an array of places with likelihood scores upon success
and an NSError upon an error.

Declaration

Swift
func findPlaceLikelihoodsFromCurrentLocation(withPlaceFields placeFields: GMSPlaceField [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceField.html], callback: @escaping GMSPlaceLikelihoodsCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceLikelihoodsCallback.html])

Objective-C
- (void)
findPlaceLikelihoodsFromCurrentLocationWithPlaceFields:
(GMSPlaceField [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceField.html])placeFields
callback:
(nonnull
GMSPlaceLikelihoodsCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceLikelihoodsCallback.html])
callback;

Parameters
| placeFields | The individual place fields requested for the place objects in the list. |
| --- | --- |
| callback | The callback to invoke with place likelihoods. |

-findAutocompletePredictionsFromQuery:filter:sessionToken:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)findAutocompletePredictionsFromQuery:filter:sessionToken:callback:]

Find Autocomplete predictions from text query. Results may optionally be biased towards a
certain location or restricted to an area. This method is non-blocking.

The supplied callback will be invoked with an array of autocompletion predictions upon success
and an NSError upon an error.

Declaration

Swift
func findAutocompletePredictions(fromQuery query: String, filter: GMSAutocompleteFilter [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteFilter.html]?, sessionToken: GMSAutocompleteSessionToken [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteSessionToken.html]?, callback: @escaping GMSAutocompletePredictionsCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSAutocompletePredictionsCallback.html])

Objective-C
- (void)
findAutocompletePredictionsFromQuery:(nonnull NSString *)query
filter:
(nullable GMSAutocompleteFilter [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteFilter.html] *)filter
sessionToken:
(nullable GMSAutocompleteSessionToken [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteSessionToken.html] *)
sessionToken
callback:
(nonnull GMSAutocompletePredictionsCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSAutocompletePredictionsCallback.html])
callback;

Parameters
| query | The partial text to autocomplete. |
| --- | --- |
| filter | The filter to apply to the results. This parameter may be nil. |
| sessionToken | The GMSAutocompleteSessionToken to associate request to a billing session. |
| callback | The callback to invoke with the predictions. |

-lookUpPhotosForPlaceID:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)lookUpPhotosForPlaceID:callback:]

Gets the metadata for up to 10 photos associated with a place.

Photos are sourced from a variety of locations, including business owners and photos contributed
by Google+ users. In most cases, these photos can be used without attribution, or will have the
required attribution included as a part of the image. However, you must use the attributions
property in the response to retrieve any additional attributions required, and display those
attributions in your application wherever you display the image. A maximum of 10 photos are
returned.

Multiple calls of this method will probably return the same photos each time. However, this is
not guaranteed because the underlying data may have changed.

This method performs a network lookup.

Declaration

Swift
func lookUpPhotos(forPlaceID placeID: String, callback: @escaping GMSPlacePhotoMetadataResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlacePhotoMetadataResultCallback.html])

Objective-C
- (void)lookUpPhotosForPlaceID:(nonnull NSString *)placeID
callback:
(nonnull GMSPlacePhotoMetadataResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlacePhotoMetadataResultCallback.html])callback;

Parameters
| placeID | The place ID for which to look up photos. |
| --- | --- |
| callback | The callback to invoke with the lookup result. |

-isOpenWithPlaceID:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)isOpenWithPlaceID:callback:]

Gets details for a place including all fields necessary to determine GMSPlaceOpenStatus [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceOpenStatus.html] at the
current time. This method is non-blocking.

Declaration

Swift
func isOpen(withPlaceID placeID: String, callback: @escaping GMSPlaceOpenStatusCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceOpenStatusCallback.html])

Objective-C
- (void)isOpenWithPlaceID:(nonnull NSString *)placeID
| placeID | The place ID to look up. |
| --- | --- |
| callback | The callback to invoke with the place result. |

-isOpenWithPlaceID:date:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)isOpenWithPlaceID:date:callback:]

Gets details for a place including all fields necessary to determine GMSPlaceOpenStatus [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceOpenStatus.html] at the
specified NSDate. This method is non-blocking.

Declaration

Swift
func isOpen(withPlaceID placeID: String, date: Date, callback: @escaping GMSPlaceOpenStatusCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceOpenStatusCallback.html])

Objective-C
- (void)isOpenWithPlaceID:(nonnull NSString *)placeID
date:(nonnull NSDate *)date
| placeID | The place ID to look up. |
| --- | --- |
| date | The NSDate to determine open status for. |
| callback | The callback to invoke with the place result. |

-isOpenWithPlace:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)isOpenWithPlace:callback:]

Gets details for a place including all fields necessary to determine GMSPlaceOpenStatus [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceOpenStatus.html] at the
current time. Only requests additional fields if the GMSPlace [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlace.html] does not have all necessary
fields, otherwise GMSPlaceOpenStatus [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceOpenStatus.html] will be returned in the callback immediately. This method
is non-blocking.

Declaration

Swift
func isOpen(with place: GMSPlace [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlace.html], callback: @escaping GMSPlaceOpenStatusCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceOpenStatusCallback.html])

Objective-C
- (void)isOpenWithPlace:(nonnull GMSPlace [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlace.html] *)place
| place | The GMSPlace to look up. |
| --- | --- |
| callback | The callback to invoke with the place result. |

-isOpenWithPlace:date:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)isOpenWithPlace:date:callback:]

Gets details for a place including all fields necessary to determine GMSPlaceOpenStatus [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceOpenStatus.html] at the
specified NSDate. Only requests additional fields if the GMSPlace [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlace.html] does not have all necessary
fields, otherwise GMSPlaceOpenStatus [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceOpenStatus.html] will be returned in the callback immediately. This method
is non-blocking.

Declaration

Swift
func isOpen(with place: GMSPlace [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlace.html], date: Date, callback: @escaping GMSPlaceOpenStatusCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceOpenStatusCallback.html])

Objective-C
- (void)isOpenWithPlace:(nonnull GMSPlace [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlace.html] *)place
date:(nonnull NSDate *)date
| place | The GMSPlace to look up. |
| --- | --- |
| date | The NSDate to determine open status for. |
| callback | The callback to invoke with the place result. |

-fetchPlaceFromPlaceID:placeFields:sessionToken:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)fetchPlaceFromPlaceID:placeFields:sessionToken:callback:]

Deprecated
This method is replaced by fetchPlaceWithRequest:callback:callback: and will be removed in a future release.

Fetch details for a place. This method is non-blocking.

Declaration

Swift
func fetchPlace(fromPlaceID placeID: String, placeFields: GMSPlaceField [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceField.html], sessionToken: GMSAutocompleteSessionToken [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteSessionToken.html]?, callback: @escaping GMSPlaceResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceResultCallback.html])

Objective-C
- (void)fetchPlaceFromPlaceID:(nonnull NSString *)placeID
placeFields:(GMSPlaceField [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceField.html])placeFields
sessionToken:
(nullable GMSAutocompleteSessionToken [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteSessionToken.html] *)sessionToken
| placeID | The place ID to look up. |
| --- | --- |
| placeFields | The individual place fields requested for the place objects in the list. |
| sessionToken | The GMSAutocompleteSessionToken to associate request to a billing session. |
| callback | The callback to invoke with the lookup result. |

-isOpenWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)isOpenWithRequest:callback:]

Gets the open status for a place. Gets details for a place including all properties necessary to
determine GMSPlaceOpenStatus [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceOpenStatus.html] at the specified NSDate. This method is non-blocking.

Declaration

Swift
func isOpen(with isOpenRequest: GMSPlaceIsOpenRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlaceIsOpenRequest.html], callback: @escaping GMSPlaceOpenStatusResponseCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceOpenStatusResponseCallback.html])

Objective-C
- (void)isOpenWithRequest:(nonnull GMSPlaceIsOpenRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlaceIsOpenRequest.html] *)isOpenRequest
| isOpenRequest | The request to determine the open status for a given place. |
| --- | --- |
| callback | The callback to invoke with the open status response. |

-searchByTextWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)searchByTextWithRequest:callback:]

Search for places by text and restrictions. This method is non-blocking.

Declaration

Swift
func searchByText(with textSearchRequest: GMSPlaceSearchByTextRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlaceSearchByTextRequest.html], callback: @escaping GMSPlaceSearchByTextResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceSearchByTextResultCallback.html])

Objective-C
- (void)searchByTextWithRequest:
(nonnull GMSPlaceSearchByTextRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlaceSearchByTextRequest.html] *)textSearchRequest
callback:
(nonnull GMSPlaceSearchByTextResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceSearchByTextResultCallback.html])callback;

Parameters
| textSearchRequest | GMSPlaceSearchByTextRequest The text request to use for the query. |
| --- | --- |
| callback | The callback to invoke with the lookup result. |

-fetchPlaceWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)fetchPlaceWithRequest:callback:]

Get a place using a request object. This method is non-blocking.

Declaration

Swift
func fetchPlace(with fetchPlaceRequest: GMSFetchPlaceRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSFetchPlaceRequest.html], callback: @escaping GMSPlaceResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceResultCallback.html])

Objective-C
- (void)fetchPlaceWithRequest:(nonnull GMSFetchPlaceRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSFetchPlaceRequest.html] *)fetchPlaceRequest
| fetchPlaceRequest | GMSFetchPlaceRequest The fetch place request to use for the query. |
| --- | --- |
| callback | The callback to invoke with the place result. |

-fetchPhotoWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)fetchPhotoWithRequest:callback:]

Request a photo using fetch photo request. This method is non-blocking.

Declaration

Swift
func fetchPhoto(with fetchPhotoRequest: GMSFetchPhotoRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSFetchPhotoRequest.html], callback: @escaping GMSFetchPhotoResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSFetchPhotoResultCallback.html])

Objective-C
- (void)fetchPhotoWithRequest:(nonnull GMSFetchPhotoRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSFetchPhotoRequest.html] *)fetchPhotoRequest
| fetchPhotoRequest | GMSFetchPhotoRequest The photo request to use. |
| --- | --- |
| callback | The callback to invoke with the NSURL result. |

-searchNearbyWithRequest:callback: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(im)searchNearbyWithRequest:callback:]

Search for places near a location and restriction. This method is non-blocking.

Declaration

Swift
func searchNearby(with searchNearbyRequest: GMSPlaceSearchNearbyRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlaceSearchNearbyRequest.html], callback: @escaping GMSPlaceSearchNearbyResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceSearchNearbyResultCallback.html])

Objective-C
- (void)searchNearbyWithRequest:
(nonnull GMSPlaceSearchNearbyRequest [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlaceSearchNearbyRequest.html] *)searchNearbyRequest
callback:
(nonnull GMSPlaceSearchNearbyResultCallback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Type-Definitions/GMSPlaceSearchNearbyResultCallback.html])callback;

Parameters
| searchNearbyRequest | GMSPlaceSearchNearbyRequest The search nearby request to use for the query. |
| --- | --- |
| callback | The callback to invoke with the lookup result. |

+addInternalUsageAttributionID: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient#/c:objc(cs)GMSPlacesClient(cm)addInternalUsageAttributionID:]

Adds a usage attribution ID to the initializer, which helps Google understand which libraries and
samples are helpful to developers, such as usage of a marker clustering library.
To opt out of sending the usage attribution ID, it is safe to delete this function call or
replace the value with an empty string.

Declaration

Swift
class func addInternalUsageAttributionID(_ internalUsageAttributionID: String)

Objective-C
+ (void)addInternalUsageAttributionID:
(nonnull NSString *)internalUsageAttributionID;

Parameters
| internalUsageAttributionId | The usage attribution ID to add |
| --- | --- |

Send feedback