Source URL: https://developers.google.com/maps/documentation/directions/get-directions?hl=ko
Title: Directions API를 통해 길찾기

의견 보내기

Directions API를 통해 길찾기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#before-you-begin]Directions API 요청 빌드 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsRequests]Required parameters [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#required-parameters]destination [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#destination]origin [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#origin]Optional parameters [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#optional-parameters]alternatives [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#alternatives]arrival_time [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#arrival_time]avoid [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#avoid]departure_time [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#departure_time]language [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#language]mode [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#mode]region [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#region]traffic_model [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#traffic_model]transit_mode [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#transit_mode]transit_routing_preference [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#transit_routing_preference]units [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#units]waypoints [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#waypoints]경로 예시 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#ExampleRequests]이동 수단 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#TravelModes]교통 정보 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsAdvanced]중간점 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Waypoints]제한사항 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Restrictions]단위 체계 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#unit-systems]리전 바이어스 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#RegionBiasing]위치 수정자 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#location-modifiers]경로 응답 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsResponses]DirectionsResponse [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsResponse]DirectionsRoute [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsRoute]Bounds [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Bounds]LatLngLiteral [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#LatLngLiteral]DirectionsLeg [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsLeg]DirectionsStep [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsStep]TextValueObject [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#TextValueObject]DirectionsPolyline [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsPolyline]TravelMode [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#TravelMode]DirectionsTransitDetails [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsTransitDetails]DirectionsTransitStop [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsTransitStop]TimeZoneTextValueObject [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#TimeZoneTextValueObject]DirectionsTransitLine [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsTransitLine]DirectionsTransitAgency [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsTransitAgency]DirectionsTransitVehicle [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsTransitVehicle]DirectionsTrafficSpeedEntry [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsTrafficSpeedEntry]DirectionsViaWaypoint [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsViaWaypoint]Fare [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Fare]DirectionsStatus [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsStatus]DirectionsGeocodedWaypoint [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#DirectionsGeocodedWaypoint]

유럽 경제 지역 (EEA) 개발자

청구서 수신 주소가 유럽 경제 지역에 있는 경우 2025년 7월 8일부터
Google Maps Platform EEA 서비스 약관 [https://cloud.google.com/terms/maps-platform/eea?hl=ko]
이 서비스 이용에 적용됩니다. 기능은 리전에 따라 다릅니다.
자세히 알아보기 [https://developers.google.com/maps/comms/eea/faq?hl=ko]

사용자 입력에 실시간으로 응답하는 경로 계산 (예: 사용자 인터페이스 요소 내)의 경우 Directions API를 사용하거나 Maps JavaScript API를 사용하는 경우 Directions 서비스 [https://developers.google.com/maps/documentation/javascript/directions?hl=ko]를 사용할 수 있습니다.
서버 측에서 사용하려면 Google 지도 서비스용 Java 클라이언트, Python 클라이언트, Go 클라이언트, Node.js 클라이언트 [https://developers.google.com/maps/documentation/directions/client-library?hl=ko]를 사용하면 됩니다.

Directions API (기존)를 사용하면 다음 작업을 할 수 있습니다.

대중교통, 운전, 도보, 자전거 등 여러 이동 수단의 경로를 검색합니다.
일련의 경유지를 사용하여 여러 찾아가는 길을 반환합니다.
출발지, 목적지, 경유지를 텍스트 문자열('Chicago, IL' 또는 'Darwin, NT, Australia'), 장소 ID 또는 위도/경도 좌표로 지정합니다.

API는 경로를 계산할 때 가장 효율적인 경로를 반환합니다. 이동 시간이 최적화되는 주요 요소이지만 API는 가장 효율적인 경로를 결정할 때 거리, 방향 전환 횟수 등 다른 요인도 고려할 수 있습니다.

시작하기 전에
Directions API를 사용하려면 결제 계정이 있고 Directions API가 사용 설정된 프로젝트가 필요합니다. 자세한 내용은 Cloud 콘솔에서 설정하기 [https://developers.google.com/maps/documentation/directions/cloud-setup?hl=ko]를 참고하세요.

Directions API 요청 빌드

Directions API (기존) 요청은 다음 형식을 취합니다.

https://maps.googleapis.com/maps/api/directions/outputFormat?parameters

여기서 outputFormat은 다음 값 중 하나일 수 있습니다.

json (권장)은 JavaScript 객체 표기법 (JSON)의 출력을 나타냅니다.
xml는 XML로 출력을 나타냅니다.

참고: URL이 유효하려면 올바르게 인코딩 [https://developers.google.com/maps/documentation/directions/web-service-best-practices?hl=ko#BuildingURLs]되어야 하며 모든 웹 서비스에서 16384자로 제한됩니다. URL을 구성할 때 이 제한에 유의하세요.

URL에서와 마찬가지로 모든 매개변수는 앰퍼샌드(&) 문자를 사용하여 구분합니다. 모든 예약된 문자 (예: 더하기 기호 '+')는 URL로 인코딩 [https://developers.google.com/maps/documentation/directions/web-service-best-practices?hl=ko#BuildingURLs]되어야 합니다.
매개변수와 가능한 값 목록은 아래에 나와 있습니다.

Required parametersdestination
The place ID, address, or textual latitude/longitude value to which you
wish to calculate directions. The options for the destination parameter
are the same as for the origin parameter.
origin
The place ID, address, or textual latitude/longitude value from which you
wish to calculate directions.

Place IDs must be prefixed with place_id:. You can
retrieve place IDs from the Geocoding API and the Places API
(including Place Autocomplete). For an example using place IDs from
Place Autocomplete, see
Place Autocomplete and Directions [https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions?hl=ko]. For more about place IDs, see the
Place ID overview [https://developers.google.com/maps/documentation/places/web-service/place-id?hl=ko].
origin=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE

If you pass an address, the Directions service geocodes the string and
converts it to a latitude/longitude coordinate to calculate
directions. This coordinate may be different from that returned by the
Geocoding API, for example a building entrance rather than its center.
origin=24+Sussex+Drive+Ottawa+ON

Using place IDs is preferred over using addresses or
latitude/longitude coordinates. Using coordinates will always result
in the point being snapped to the road nearest to those coordinates -
which may not be an access point to the property, or even a road that
will quickly or safely lead to the destination.

If you pass coordinates, the point will snap to the nearest road.
Passing a place ID is preferred. If you do pass coordinates, ensure
that no space exists between the latitude and longitude values.
origin=41.43206,-81.38992

Plus codes must be formatted as a global code or a compound code.
Format plus codes as shown here (plus signs are url-escaped to
%2B and spaces are url-escaped to %20).
Global code is a 4 character area code and 6
character or longer local code (849VCWC8+R9 is
849VCWC8%2BR9).
Compound code is a 6 character or longer local code
with an explicit location (CWC8+R9 Mountain View, CA, USA is
CWC8%2BR9%20Mountain%20View%20CA%20USA).

Note: For efficiency and accuracy, use place ID's when possible. These
ID's are uniquely explicit like a lat/lng value pair and provide geocoding
benefits for routing such as access points and traffic variables. Unlike
an address, ID's do not require the service to perform a search or an
intermediate request for place details; therefore, performance is better.
Optional parametersalternatives
If set to true, specifies that the Directions service may
provide more than one route alternative in the response. Note that
providing route alternatives may increase the response time from the
server. This is only available for requests without intermediate
waypoints. For more information, see the
guide to waypoints [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Waypoints].
arrival_time
Specifies the desired time of arrival for transit directions, in seconds
since midnight, January 1, 1970 UTC. You can specify either
departure_time or arrival_time, but not both.
Note that arrival_time must be specified as an integer.
avoid
Indicates that the calculated route(s) should avoid the indicated
features. This parameter supports the following arguments:
tolls indicates that the calculated route should avoid toll
roads/bridges.
highways indicates that the calculated route should avoid
highways.
ferries indicates that the calculated route should avoid
ferries.
indoor indicates that the calculated route should avoid
indoor steps for walking and transit directions.

It's possible to request a route that avoids any combination of tolls,
highways and ferries by passing multiple restrictions to the avoid
parameter. For example:
avoid=tolls|highways|ferries.
departure_time
Specifies the desired time of departure. You can specify the time as an
integer in seconds since midnight, January 1, 1970 UTC. If a
departure_time later than 9999-12-31T23:59:59.999999999Z is
specified, the API will fall back the departure_time to
9999-12-31T23:59:59.999999999Z. Alternatively, you can specify a value of
now, which sets the departure time to the current time (correct to the
nearest second). The departure time may be specified in two cases:

For requests where the travel mode is transit: You can optionally
specify one of departure_time or arrival_time.
If neither time is specified, the departure_time defaults
to now (that is, the departure time defaults to the current time).

For requests where the travel mode is driving: You can specify the
departure_time to receive a route and trip duration
(response field: duration_in_traffic) that take traffic conditions into
account. The departure_time must be set to the current time
or some time in the future. It cannot be in the past.

Note: If departure time is not specified, choice of route and duration are
based on road network and average time-independent traffic conditions.
Results for a given request may vary over time due to changes in the road
network, updated average traffic conditions, and the distributed nature of
the service. Results may also vary between nearly-equivalent routes at any
time or frequency.

Note: Distance Matrix requests specifying departure_time when
mode=driving are limited to a maximum of 100 elements per request. The
number of origins times the number of destinations defines the number of
elements.
languageThe language in which to return results. Note that this applies only to the geocoded addresses in start_address and end_address, the localized text in distance and duration fields (in legs and steps), and the description of maneuvers in html_instructions, but not to the names and addresses in html_instructions, which are formatted in their local language and script.
See the
list of supported languages [https://developers.google.com/maps/faq?hl=ko#languagesupport]. Google often updates the supported languages, so this list may not be
exhaustive.

If language is not supplied, the API attempts to use the
preferred language as specified in the
Accept-Language header.

The API does its best to provide a street address that is readable for
both the user and locals. To achieve that goal, it returns street
addresses in the local language, transliterated to a script readable by
the user if necessary, observing the preferred language. All other
addresses are returned in the preferred language. Address components are
all returned in the same language, which is chosen from the first
component.

If a name is not available in the preferred language, the API uses the
closest match.

The preferred language has a small influence on the set of results that
the API chooses to return, and the order in which they are returned. The
geocoder interprets abbreviations differently depending on language,
such as the abbreviations for street types, or synonyms that may be
valid in one language but not in another. For example, utca and
tér are synonyms for street in Hungarian.
mode
For the calculation of distances and directions, you may specify the
transportation mode to use. By default, driving mode is used.
By default, directions are calculated as driving directions. The following
travel modes are supported:
driving (default) indicates standard driving directions or
distance using the road network.
walking requests walking directions or distance via
pedestrian paths & sidewalks (where available).
bicycling requests bicycling directions or distance via
bicycle paths & preferred streets (where available).
transit requests directions or distance using public transit routes (where
available). If you set the mode to transit, you can optionally specify either a
departure_time or an arrival_time. If neither time is specified,
the departure_time defaults to now (that is, the departure time defaults to
the current time). You can also optionally include a transit_mode and/or a
transit_routing_preference. Transit trips are available for up to 7 days in
the past or up to 100 days in the future, subject to availability of transit information
supplied by data providers. Transit schedules change frequently, available transit trips
may change over time and there is no guarantee to provide consistent results for predictions
far in advance.

Note: Both walking and bicycling directions may sometimes not include
clear pedestrian or bicycling paths, so these directions will return
warnings in the returned result which you must display to the user.
region
The region code, specified as a
ccTLD ("top-level domain") [https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains]
two-character value. Most ccTLD codes are identical to ISO 3166-1 codes,
with some notable exceptions. For example, the United Kingdom's ccTLD is
"uk" (.co.uk) while its ISO 3166-1 code is "gb" (technically for the
entity of "The United Kingdom of Great Britain and Northern Ireland").
traffic_model
Specifies the assumptions to use when calculating time in traffic. This
setting affects the value returned in the duration_in_traffic field in the
response, which contains the predicted time in traffic based on historical
averages. The traffic_model parameter may only be specified
for driving directions where the request includes a
departure_time. The available values for this parameter are:
best_guess (default) indicates that the returned
duration_in_traffic should be the best estimate of travel time given
what is known about both historical traffic conditions and live traffic.
Live traffic becomes more important the closer the
departure_time is to now.
pessimistic indicates that the returned duration_in_traffic
should be longer than the actual travel time on most days, though
occasional days with particularly bad traffic conditions may exceed this
value.
optimistic indicates that the returned duration_in_traffic
should be shorter than the actual travel time on most days, though
occasional days with particularly good traffic conditions may be faster
than this value.

The default value of best_guess will give the most useful
predictions for the vast majority of use cases. It is possible the
best_guess travel time prediction may be shorter than
optimistic, or alternatively, longer than
pessimistic, due to the way the
best_guess prediction model integrates live traffic
information.
transit_mode
Specifies one or more preferred modes of transit. This parameter may only
be specified for transit directions. The parameter supports the following
arguments:
bus indicates that the calculated route should prefer
travel by bus.
subway indicates that the calculated route should prefer
travel by subway.
train indicates that the calculated route should prefer
travel by train.
tram indicates that the calculated route should prefer
travel by tram and light rail.
rail indicates that the calculated route should prefer
travel by train, tram, light rail, and subway. This is equivalent to
transit_mode=train|tram|subway.

transit_routing_preference

Specifies preferences for transit routes. Using this parameter, you can
bias the options returned, rather than accepting the default best route
chosen by the API. This parameter may only be specified for transit
directions. The parameter supports the following arguments:
less_walking indicates that the calculated route should
prefer limited amounts of walking.
fewer_transfers indicates that the calculated route should
prefer a limited number of transfers.
unitsSpecifies the unit system to use when displaying results.
Directions results contain text within distance fields that may be
displayed to the user to indicate the distance of a particular "step" of
the route. By default, this text uses the unit system of the origin's
country or region.

For example, a route from "Chicago, IL" to "Toronto, ONT" will display
results in miles, while the reverse route will display results in
kilometers. You may override this unit system by setting one explicitly
within the request's units parameter, passing one of the following values:
metric specifies usage of the metric system. Textual
distances are returned using kilometers and meters.
imperial specifies usage of the Imperial (English) system.
Textual distances are returned using miles and feet.

Note: this unit system setting only affects the text displayed within
distance fields. The distance fields also contain values which are always
expressed in meters.
waypoints
Caution: Requests using more than 10 waypoints (between 11 and 25), or
waypoint optimization, are billed at a higher rate.
Learn more about billing [https://developers.google.com/maps/billing-and-pricing/pricing?hl=ko#directions-advanced]
for Google Maps Platform products.

Specifies an array of intermediate locations to include along the route
between the origin and destination points as pass through or stopover
locations. Waypoints alter a route by directing it through the specified
location(s). The API supports waypoints for these travel modes: driving,
walking and bicycling; not transit. You can supply one or more locations
separated by the pipe character (| or %7C), in
the form of a place ID, an address, or latitude/longitude coordinates. By
default, the Directions service calculates a route using the waypoints in
the order they are given. The precedence for parsing the value of the
waypoint is place ID, latitude/longitude coordinates, then address.

If you pass a place ID, you must prefix it with place_id:.
You can retrieve place IDs from the Geocoding API and the Places API
(including Place Autocomplete). For an example using place IDs from
Place Autocomplete, see
Place Autocomplete and Directions [https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions?hl=ko]. For more about place IDs, see the
Place ID overview [https://developers.google.com/maps/documentation/places/web-service/place-id?hl=ko].

For efficiency and accuracy, use place ID's when possible. These ID's
are uniquely explicit like a lat/lng value pair and provide geocoding
benefits for routing such as access points and traffic variables.
Unlike an address, ID's do not require the service to perform a search
or an intermediate request for place details; therefore, performance
is better.

If you pass latitude/longitude coordinates, the values go directly to
the front-end server to calculate directions without geocoding. The
points are snapped to roads and might not provide the accuracy your app
needs. Use coordinates when you are confident the values truly specify
the points your app needs for routing without regard to possible access
points or additional geocoding details. Ensure that a comma
(%2C) and not a space (%20) separates the
latitude and longitude values.

If you pass an address, the Directions service will geocode the string
and convert it into latitude/longitude coordinates to calculate
directions. If the address value is ambiguous, the value might evoke a
search to disambiguate from similar addresses. For example, "1st Street"
could be a complete value or a partial value for "1st street NE" or "1st
St SE". This result may be different from that returned by the Geocoding
API. You can avoid possible misinterpretations using place IDs.

Alternatively, you can supply an encoded set of points using the
Encoded Polyline Algorithm [https://developers.google.com/maps/documentation/utilities/polylinealgorithm?hl=ko]. You will find an encoded set is useful for a large number of
waypoints, because the URL is significantly shorter. All web services
have a URL limit of 16384 characters.

Encoded polylines must be prefixed with enc: and
followed by a colon (:). For example:
waypoints=enc:gfo}EtohhU:.

You can also include multiple encoded polylines, separated by the
pipe character (|). For example,
waypoints=via:enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:|
via:enc:udymA{~bxM:Influence routes with stopover and pass through points
For each waypoint in the request, the directions response appends an entry
to the legs array to provide the details for stopovers on
that leg of the journey.

If you'd like to influence the route using waypoints without adding a
stopover, add the prefix via: to the waypoint. Waypoints
prefixed with via: will not add an entry to the
legs array, but will route the journey through the waypoint.

The following URL modifies the previous request such that the journey is
routed through Lexington without stopping:
https://maps.googleapis.com/maps/api/directions/json?
origin=Boston,MA&destination=Concord,MA
&waypoints=Charlestown,MA|via:Lexington,MA

The via: prefix is most effective when creating routes in
response to the user dragging the waypoints on the map. Doing so allows
the user to see how the final route may look in real-time and helps ensure
that waypoints are placed in locations that are accessible to the
Directions API.

Caution: Using the via: prefix to avoid stopovers results in directions
that are strict in their interpretation of the waypoint. This
interpretation may result in severe detours on the route or ZERO_RESULTS
in the response status code if the Directions API is unable to create
directions through that point.
Optimize your waypoints
By default, the Directions service calculates a route through the provided
waypoints in their given order. Optionally, you may pass
optimize:true as the first argument within the waypoints
parameter to allow the Directions service to optimize the provided route
by rearranging the waypoints in a more efficient order. (This optimization
is an application of the traveling salesperson problem.) Travel time is
the primary factor which is optimized, but other factors such as distance,
number of turns and many more may be taken into account when deciding
which route is the most efficient. All waypoints must be stopovers for the
Directions service to optimize their route.

If you instruct the Directions service to optimize the order of its
waypoints, their order will be returned in the
waypoint_order field within the routes object. The
waypoint_order field returns values which are zero-based.

The following example calculates a road journey from Adelaide, South
Australia to each of South Australia's main wine regions using route
optimization.
https://maps.googleapis.com/maps/api/directions/json?
origin=Adelaide,SA&destination=Adelaide,SA
&waypoints=optimize:true|Barossa+Valley,SA|Clare,SA|Connawarra,SA|McLaren+Vale,SA

Inspection of the calculated route will indicate that calculation uses
waypoints in the following waypoint order:
"waypoint_order": [ 3, 2, 0, 1 ]

Caution: Requests using waypoint optimization are billed at a higher rate.
Learn more about how Google Maps Platform products are billed. [https://developers.google.com/maps/billing-and-pricing/pricing?hl=ko#directions-advanced]

경로 예시

다음 요청은 온타리오주 토론토에서 퀘벡주 몬트리올까지의 운전 경로를 반환합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Montreal
&origin=Toronto
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Toronto&destination=Montreal&key=YOUR_API_KEY'

mode 및 avoid 매개변수를 변경하면 주요 고속도로를 피하는 경치 좋은 자전거 여행의 경로를 반환하도록 초기 요청을 수정할 수 있습니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?avoid=highways
&destination=Montreal
&mode=bicycling
&origin=Toronto
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Toronto&destination=Montreal&avoid=highways&mode=bicycling&key=YOUR_API_KEY'

다음 요청은 뉴욕 브루클린에서 뉴욕 퀸즈까지의 대중교통 경로를 검색합니다. 요청에 departure_time가 지정되지 않았으므로 출발 시간은 기본적으로 현재 시간입니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Queens
&mode=transit
&origin=Brooklyn
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Brooklyn&destination=Queens&mode=transit&key=YOUR_API_KEY'

다음 대중교통 요청에는 구체적인 출발 시간이 포함되어 있습니다.

참고: 이 예에서는 출발 시간이 2012년 7월 30일 오전 9시 45분으로 지정되어 있습니다. 오류를 방지하려면 요청을 제출하기 전에 매개변수를 미래의 시간으로 변경해야 합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?departure_time=1343641500
&destination=Queens
&mode=transit
&origin=Brooklyn
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Brooklyn&destination=Queens&mode=transit&departure_time=1343641500&key=YOUR_API_KEY'

다음 요청은 더하기 코드를 사용하여 인도 콜카타의 H8MW+WP에서 GCG2+3M까지의 운전 경로를 반환합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=GCG2%2B3M%20Kolkata%20India
&origin=H8MW%2BWP%20Kolkata%20India
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=H8MW%2BWP%20Kolkata%20India&destination=GCG2%2B3M%20Kolkata%20India&key=YOUR_API_KEY'

다음 요청은 장소 ID를 사용하여 영국 글래스고에서 영국 퍼스까지의 운전 경로를 반환합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=place_id%3AChIJA01I-8YVhkgRGJb0fW4UX7Y
&origin=place_id%3AChIJ685WIFYViEgRHlHvBbiD5nE
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=place_id%3AChIJ685WIFYViEgRHlHvBbiD5nE&destination=place_id%3AChIJA01I-8YVhkgRGJb0fW4UX7Y&key=YOUR_API_KEY'

이동 수단

경로를 계산할 때 사용할 교통수단 mode를 지정할 수 있습니다. 기본적으로 방향은 driving 방향으로 계산됩니다. 다음과 같은 이동 수단이 지원됩니다.

driving (기본값)은 도로망을 사용하는 일반 운전 경로를 나타냅니다.
walking은 보행자 전용 도로와 인도를 경유하는 도보 경로를 요청합니다 (해당하는 경우).
bicycling은 자전거 전용 도로 및 선호하는 거리를 경유하는 자전거 경로를 요청합니다 (해당하는 경우).
transit은 대중교통 경로를 경유하는 경로를 요청합니다(해당하는 경우). 모드를 transit로 설정한 경우 departure_time 또는 arrival_time를 선택적으로 지정할 수 있습니다. 두 시간이 모두 지정되지 않은 경우 departure_time의 기본값은 현재 시간입니다 (즉, 출발 시간의 기본값은 현재 시간임). 선택적으로 transit_mode 또는 transit_routing_preference를 포함할 수도 있습니다.

참고: 도보 및 자전거 경로에 명확한 보행자 또는 자전거 도로가 포함되지 않을 수도 있으므로 이러한 경로에서는 사용자에게 표시해야 하는 반환된 결과의 warnings를 반환합니다.

교통 정보

주의: 교통정보를 사용하는 요청에는 더 높은 요율로 청구됩니다. Directions API 사용 요금 청구 방식 자세히 알아보기 [https://developers.google.com/maps/billing-and-pricing/sku-details?hl=ko#directions-advanced-pro-sku]

교통정보는 다음 사항이 모두 적용되는 경우에 사용됩니다 (경로 응답에서 duration_in_traffic [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#duration-in-traffic] 필드를 수신하는 데 필요한 조건입니다).

이동 mode [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#TravelModes] 매개변수가 driving이거나 지정되지 않았습니다(driving이 기본 이동 모드).
요청에 유효한 departure_time 매개변수 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#departure_time]가 포함되어 있습니다. departure_time은 현재 시간 또는 미래의 특정 시간으로 설정할 수 있습니다. 과거 시간으로 설정할 수는 없습니다.
요청에 중간 기착 경유지 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Waypoints]가 포함되지 않습니다. 요청에 경유지가 포함된 경우 각 경유지 앞에 via:를 붙이면 경로에 영향을 주지만 중간 기착을 피할 수 있습니다. 예를 들면 다음과 같습니다.
&waypoints=via:San Francisco|via:Mountain View|...

원하는 경우 요청에 traffic_model [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#traffic_model] 매개변수를 포함하여 교통 상황에서 시간을 계산할 때 사용할 가정을 지정할 수 있습니다.

다음 URL은 찰스타운과 렉싱턴을 거쳐 매사추세츠주 보스턴에서 매사추세츠주 콩코드까지의 여정에 대한 길찾기 요청을 시작합니다. 요청에는 출발 시간이 포함되어 있으며, Directions 응답에서 duration_in_traffic 필드를 반환하기 위한 모든 요구사항을 충족합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?departure_time=now
&destination=Concord%2C%20MA
&origin=Boston%2C%20MA
&waypoints=via%3ACharlestown%2CMA%7Cvia%3ALexington%2CMA
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Boston%2C%20MA&destination=Concord%2C%20MA&waypoints=via%3ACharlestown%2CMA%7Cvia%3ALexington%2CMA&departure_time=now&key=YOUR_API_KEY'

중간점

주의: 경유지가 10개를 초과하거나 (11~25개) 경유지 최적화를 사용하는 요청에는 더 높은 요율로 청구됩니다.
Google Maps Platform 제품의 요금 청구 방식 자세히 알아보기 [https://developers.google.com/maps/billing-and-pricing/sku-details?hl=ko#directions-advanced-pro-sku]

Directions API (레거시)를 사용하여 경로를 계산할 때 경유지를 지정하여 중간 위치를 통과하거나 중간 위치에 정차하는 경로를 반환할 수 있습니다. 운전, 도보 또는 자전거 경로에는 경유지를 추가할 수 있지만 대중교통 경로에는 추가할 수 없습니다.

waypoints 매개변수에 위치를 지정합니다.

장소 ID, 주소 또는 위도/경도 좌표 형식으로 파이프 문자(| 또는 %7C)로 구분된 하나 이상의 위치를 제공할 수 있습니다. 기본적으로 경로 서비스는 경유지가 제공된 순서대로 경유지를 사용하여 경로를 계산합니다. 경로 지점 값을 파싱하는 우선순위는 장소 ID, 위도/경도 좌표, 주소 순입니다.

장소 ID를 전달하는 경우 place_id:을 앞에 붙여야 합니다. 지오코딩 API 및 Places API (Place Autocomplete 포함)에서 장소 ID를 가져올 수 있습니다. Place Autocomplete의 장소 ID를 사용하는 예는 Place Autocomplete 및 경로 [https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions?hl=ko]를 참고하세요. 장소 ID에 대한 자세한 내용은 장소 ID 개요 [https://developers.google.com/maps/documentation/places/web-service/place-id?hl=ko]를 참고하세요.
효율성과 정확성을 위해 가능한 경우 장소 ID를 사용하세요. 이러한 ID는 위도/경도 값 쌍과 같이 명시적으로 고유하며 액세스 포인트 및 교통 변수와 같은 라우팅에 지오코딩 이점을 제공합니다. 주소와 달리 ID는 서비스에서 장소 세부정보를 검색하거나 중간 요청을 실행할 필요가 없으므로 성능이 더 좋습니다.

위도/경도 좌표를 전달하면 값이 프런트엔드 서버로 직접 이동하여 지오코딩 없이 경로를 계산합니다. 포인트가 도로에 스냅되므로 앱에 필요한 정확도를 제공하지 않을 수 있습니다. 좌표는 가능한 액세스 포인트나 추가 지오코딩 세부정보와 관계없이 값이 앱이 라우팅에 필요한 포인트를 실제로 지정한다고 확신하는 경우에 사용합니다. 위도와 경도 값을 공백 (%20)이 아닌 쉼표 (%2C)로 구분해야 합니다.
주소를 전달하면 경로 서비스가 문자열을 지오코딩하고 위도/경도 좌표로 변환하여 경로를 계산합니다. 주소 값이 모호한 경우 유사한 주소와 구분하기 위해 검색이 유도될 수 있습니다. 예를 들어 '1st Street'는 '1st street NE' 또는 '1st St SE'의 전체 값 또는 부분 값일 수 있습니다. 이 결과는 Geocoding API에서 반환된 결과와 다를 수 있습니다. 장소 ID를 사용하면 오해를 방지할 수 있습니다.
경로 요청 결과 문제 해결을 참고하세요.

또는 인코딩된 다중선 알고리즘 [https://developers.google.com/maps/documentation/utilities/polylinealgorithm?hl=ko]을 사용하여 인코딩된 포인트 집합을 제공할 수 있습니다. 인코딩된 집합은 URL이 훨씬 짧기 때문에 많은 수의 경유지에 유용합니다. 모든 웹 서비스의 URL 제한은 16,384자입니다.

인코딩된 폴리라인에는 enc: 접두사가 붙고 콜론 (:)이 뒤에 와야 합니다. 예를 들면 waypoints=enc:gfo}EtohhU:입니다.

파이프 문자 (|)로 구분된 인코딩된 폴리라인을 여러 개 포함할 수도 있습니다. 예를 들면 다음과 같습니다.
waypoints=via:enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:|
via:enc:udymA{~bxM:

다음 URL은 보스턴(매사추세츠주)과 콩코드(매사추세츠주) 사이의 여정에 대한 길찾기 요청을 시작하며, 찰스타운과 렉싱턴을 순서대로 경유합니다. 이 예시에서는 다음 주소를 사용합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Concord%2C%20MA
&origin=Boston%2C%20MA
&waypoints=via%3ACharlestown%2CMA%7Cvia%3ALexington%2CMA
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Boston%2C%20MA&destination=Concord%2C%20MA&waypoints=via%3ACharlestown%2CMA%7Cvia%3ALexington%2CMA&key=YOUR_API_KEY'

경유지 및 통과 지점으로 경로에 영향 주기

요청의 각 경유지에 대해 경로 응답은 legs [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Legs] 배열에 항목을 추가하여 해당 여정 구간의 중간 기착에 관한 세부정보를 제공합니다.

중간 기착을 추가하지 않고 경유지를 사용하여 경로에 영향을 주려면 경유지에 via: 접두사를 추가합니다. via:로 시작하는 경유지는 legs [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Legs] 배열에 항목을 추가하지 않지만 경유지를 통해 여정을 라우팅합니다.

다음 URL은 여정이 멈추지 않고 렉싱턴을 통과하도록 이전 요청을 수정합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Concord%2C%20MA
&origin=Boston%2C%20MA
&waypoints=Charlestown%2CMA%7Cvia%3ALexington%2CMA
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Boston%2C%20MA&destination=Concord%2C%20MA&waypoints=Charlestown%2CMA%7Cvia%3ALexington%2CMA&key=YOUR_API_KEY'

via: 접두사는 사용자가 지도에서 경유지를 드래그하는 것에 대한 응답으로 경로를 만들 때 가장 효과적입니다. 이렇게 하면 사용자가 최종 경로가 어떻게 표시되는지 실시간으로 확인할 수 있으며, 경유지가 Directions API (기존)에서 액세스할 수 있는 위치에 배치되도록 할 수 있습니다.

주의:
중간 기착을 피하기 위해 via: 접두사를 사용하면 경유지를 엄격하게 해석한 경로가 생성됩니다. 이 해석으로 인해 경로가 심하게 우회하거나 경로 API (기존)에서 해당 지점을 지나는 경로를 만들 수 없는 경우 응답 상태 코드에 ZERO_RESULTS가 반환될 수도 있습니다.

다음 URL은 위도/경도 좌표를 사용하여 경유지를 요청합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Perth%2C%20AU
&origin=Sydney%2C%20AU
&waypoints=via%3A-37.81223%2C144.96254%7Cvia%3A-34.92788%2C138.60008
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Sydney%2C%20AU&destination=Perth%2C%20AU&waypoints=via%3A-37.81223%2C144.96254%7Cvia%3A-34.92788%2C138.60008&key=YOUR_API_KEY'

다음은 인코딩된 폴리라인을 사용한 동일한 요청입니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Perth%2C%20AU
&origin=Sydney%2C%20AU
&waypoints=via%3Aenc%3AlexeF%7B~wsZejrPjtye%40%3A
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Sydney%2C%20AU&destination=Perth%2C%20AU&waypoints=via%3Aenc%3AlexeF%7B~wsZejrPjtye%40%3A&key=YOUR_API_KEY'

via: 지정자를 위치 수정자 [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#location-modifiers]와 자유롭게 혼합할 수 있습니다.
예를 들면 다음과 같습니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Perth%2C%20AU
&origin=Sydney%2C%20AU
&waypoints=side_of_road%3Avia%3Aenc%3AlexeF%7B~wsZejrPjtye%40%3A
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Sydney%2C%20AU&destination=Perth%2C%20AU&waypoints=side_of_road%3Avia%3Aenc%3AlexeF%7B~wsZejrPjtye%40%3A&key=YOUR_API_KEY'

경유지 최적화

기본적으로 경로 서비스는 제공된 경유지를 통해 지정된 순서대로 경로를 계산합니다. optimize:true 매개변수 내에 waypoints를 첫 번째 인수로 전달하여 경로 서비스에서 더 효율적인 순서로 경유지를 재정렬하여 제공된 경로를 최적화하도록 할 수도 있습니다. 이 최적화는 여행하는 영업사원 문제 [https://en.wikipedia.org/wiki/Travelling_salesman_problem]를 적용한 사례입니다. 이동 시간이 최적화되는 주요 요소이지만 가장 효율적인 경로를 결정할 때 거리, 방향 전환 횟수 등 여러 요인이 고려될 수 있습니다. 경로 서비스에서 경로를 최적화하려면 모든 경유지가 중간 기착지여야 합니다.

경로 서비스에서 경유지의 순서를 최적화하도록 지정한 경우 경유지의 순서는 routes [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#Routes] 객체 내 waypoint_order 필드에 반환됩니다.
waypoint_order 필드는 0부터 시작하는 값을 반환합니다.

다음 예에서는 경로 최적화를 사용하여 오스트레일리아 사우스오스트레일리아 주 애들레이드에서 사우스오스트레일리아의 각 주요 와인 지역까지의 도로 여정을 계산합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Adelaide%2C%20SA
&origin=Adelaide%2C%20SA
&waypoints=optimize%3Atrue%7CBarossa%20Valley%2C%20SA%7CClare%2C%20SA%7CConnawarra%2C%20SA%7CMcLaren%20Vale%2C%20SA
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Adelaide%2C%20SA&destination=Adelaide%2C%20SA&waypoints=optimize%3Atrue%7CBarossa%20Valley%2C%20SA%7CClare%2C%20SA%7CConnawarra%2C%20SA%7CMcLaren%20Vale%2C%20SA&key=YOUR_API_KEY'

계산된 경로를 검사하면 계산에서 다음 경유지 순서로 경유지를 사용하는 것으로 표시됩니다.

"waypoint_order": [ 3, 2, 0, 1 ]

주의: 경유지 최적화를 사용하는 요청에는 더 높은 요율로 청구됩니다. Google Maps Platform 제품의 요금 청구 방식 자세히 알아보기 [https://developers.google.com/maps/billing-and-pricing/sku-details?hl=ko#directions-advanced-pro-sku]

제한사항

특정한 제한을 준수하여 찾아가는 길이 계산될 수도 있습니다. 제한사항은 avoid 매개변수를 사용하여 표시되며, 이 매개변수의 인수는 피해야 할 제한사항을 나타냅니다. 다음과 같은 제한이 지원됩니다.

avoid=tolls
avoid=highways
avoid=ferries

제한사항을 avoid 매개변수에 모두 전달하여 유료도로, 고속도로, 페리의 조합을 피하는 경로를 요청할 수 있습니다. 예를 들면 다음과 같습니다.
avoid=tolls|highways|ferries.

참고: 제한사항을 추가해도 제한된 기능이 포함된 경로가 제외되지는 않습니다. 결과가 더 유리한 경로로 편향됩니다.

단위 체계

경로 결과에는 경로의 특정 '단계' 거리를 나타내기 위해 사용자에게 표시될 수 있는 distance 필드 내에 text가 포함됩니다. 기본적으로 이 텍스트는 출발지 국가 또는 지역의 단위 체계를 사용합니다.

예를 들어 '일리노이주, 시카고'에서 '온타리오주, 토론토'까지의 경로는 결과가 마일로 표시되고 그 반대 경로는 킬로미터로 표시됩니다. 요청의 units 매개변수 내에서 명시적으로 설정하여 이 단위 체계를 재정의할 수 있습니다. 다음 값 중 하나를 전달하세요.

metric은 미터법 사용을 지정합니다.
텍스트 거리는 킬로미터와 미터를 사용하여 반환됩니다.
imperial은 야드파운드법(영국) 사용을 지정합니다. 텍스트 거리는 마일과 피트를 사용하여 반환됩니다.

참고:  이 단위 체계 설정은 distance 필드 내에 표시되는 text에만 영향을 미칩니다. distance 필드에는 항상 미터 단위로 표현되는 values도 포함됩니다.

리전 바이어스

region 매개변수를 사용하여 특정 지역의 결과를 반환하도록 경로 서비스를 설정할 수 있습니다. 이 매개변수는 지역 편향을 지정하는 2자리 ccTLD [https://en.wikipedia.org/wiki/CcTLD](국가 코드 최상위 도메인) 인수를 사용합니다. 대부분의 ccTLD 코드는 ISO 3166-1 alpha-2 코드와 동일하지만 일부 주목할 만한 예외가 있습니다.
예를 들어 영국의 ccTLD는 'uk' (.co.uk)이지만 ISO 3166-1 코드는 'gb' (엄밀히 말해 '영국' 법인의 경우)입니다. 지원되는 지역은 Google Maps Platform 노출 범위 세부정보 [https://developers.google.com/maps/coverage?hl=ko]를 참고하세요.

기본 Google 지도 애플리케이션에서 운전 경로를 실행한 도메인을 사용할 수 있습니다.

예를 들어 region이 es로 설정되고 'Toledo'가 스페인 도시로 해석되면 'Toledo'에서 'Madrid'로 가는 길찾기 요청이 적절한 결과를 반환합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Madrid
&origin=Toledo
&region=es
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Toledo&destination=Madrid&region=es&key=YOUR_API_KEY'

--- 탭: JSON [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#json] [None] ---
"geocoded_waypoints":
[
"geocoder_status": "OK",
"place_id": "ChIJ8f21C60Lag0R_q11auhbf8Y",
"types": ["locality", "political"],

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Madrid
&origin=Toledo
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Toledo&destination=Madrid&key=YOUR_API_KEY'

--- 탭: JSON [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#json] [None] ---
"geocoded_waypoints":
[
"geocoder_status": "OK",
"place_id": "ChIJeU4e_C2HO4gRRcM6RZ_IPHw",
"types": ["locality", "political"],

https://maps.googleapis.com/maps/api/directions/json
?destination=side_of_road%3A37.7663444%2C-122.4412006
&origin=37.7680296%2C-122.4375126
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=37.7680296%2C-122.4375126&destination=side_of_road%3A37.7663444%2C-122.4412006&key=YOUR_API_KEY'

인코딩된 폴리라인과 함께 side_of_road:를 사용하면 매개변수가 폴리라인을 따라 모든 위치에 적용됩니다.

side_of_road: 수정자는 다음 제한사항과 함께만 사용할 수 있습니다.

이동 mode [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#TravelModes] 매개변수가 driving이거나 지정되지 않았습니다 (driving이 기본 이동 모드).

경로에 특정 방향이 있어야 한다고 지정

경유지를 지정할 때 특정 방향으로 경유지를 통과하도록 경로를 요청할 수 있습니다. 이 방향은 heading=X: 접두사로 지정되며, 여기서 X는 0 (포함)에서 360 (제외) 사이의 정수 각도 값입니다. 방향 0은 북쪽을 나타내고 90은 동쪽을 나타내는 등 시계 방향으로 계속됩니다. 예를 들어 이 경로 요청에서 경로는 출발지에서 동쪽으로 이동한 후 U턴합니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=37.773245%2C-122.469502
&origin=heading%3D90%3A37.773279%2C-122.468780
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=heading%3D90%3A37.773279%2C-122.468780&destination=37.773245%2C-122.469502&key=YOUR_API_KEY'

heading=X: 수정자는 다음 제한사항에만 사용할 수 있습니다.

이동 mode [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#TravelModes] 매개변수가 driving, bicycling이거나 지정되지 않았습니다 (driving이 기본 이동 모드).
동일한 위치에 side_of_road [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#side-of-road] 수정자가 지정되지 않았습니다.
위치는 위도/경도 값으로 지정됩니다. 주소, 장소 ID 또는 인코딩된 폴리라인과 함께 heading를 사용할 수 없습니다.

경로 응답

경로 응답은 URL 요청 경로 내의 output 플래그로 표시된 형식으로 반환됩니다.

다음은 일리노이주 시카고에서 미주리주 조플린과 오클라호마주 오클라호마시티의 두 경유지를 거쳐 캘리포니아주 로스앤젤레스까지의 경로를 계산하는 샘플 HTTP 요청입니다.

URL

https://maps.googleapis.com/maps/api/directions/json
?destination=Los%20Angeles%2C%20CA
&origin=Chicago%2C%20IL
&waypoints=Joplin%2C%20MO%7COklahoma%20City%2C%20OK
&key=YOUR_API_KEY

cURL

curl -L -X GET 'https://maps.googleapis.com/maps/api/directions/json?origin=Chicago%2C%20IL&destination=Los%20Angeles%2C%20CA&waypoints=Joplin%2C%20MO%7COklahoma%20City%2C%20OK&key=YOUR_API_KEY'

위의 예시는 JSON 출력을 요청합니다. XML 출력을 요청할 수도 있습니다. 아래 탭을 선택하여 샘플 JSON 및 XML 응답을 확인하세요.

--- 탭: JSON [https://developers.google.com/maps/documentation/directions/get-directions?hl=ko#json] [None] ---
"geocoded_waypoints":
[
"geocoder_status": "OK",
"place_id": "ChIJ7cv00DwsDogRAMDACa2m4K8",
"types": ["locality", "political"],
XML 결과는 루트 <DirectionsResponse> 요소로 래핑됩니다.
JSON은 복수 배열 (예: steps 및 legs)로 여러 요소가 있는 항목을 나타내지만 XML은 여러 단수 요소 (예: <step> 및 <leg>)를 사용하여 이를 나타냅니다.
JSON은 waypoint_order 필드를 통해 경유지 순서를 나타내고 XML은 개별 <waypoint_index> 요소를 사용하여 이를 나타냅니다.
빈 요소는 JSON에서는 빈 배열로 표시되지만 XML에서는 이러한 요소가 없습니다. 결과를 생성하지 않는 응답은 JSON에서 빈 routes 배열을 반환하지만 XML에서는 <route> 요소를 반환하지 않습니다.

DirectionsResponse| Field | Required | Type | Description |
| --- | --- | --- | --- |
| routes | required | Array<DirectionsRoute> | Contains an array of routes from the origin to the destination. Routes consist of nested Legs and Steps. See DirectionsRoute for more information. |
| status | required | DirectionsStatus | Contains the status of the request, and may contain debugging information to help you track down why the request failed. See DirectionsStatus for more information. |
| available_travel_modes | optional | Array<TravelMode> | Contains an array of available travel modes. This field is returned when a request specifies a travel mode and gets no results. The array contains the available travel modes in the countries of the given set of waypoints. This field is not returned if one or more of the waypoints are 'via waypoints'. See TravelMode for more information. |
| error_message | optional | string | When the service returns a status code other than OK, there may be an additional error_message field within the response object. This field contains more detailed information about the reasons behind the given status code. This field is not always returned, and its content is subject to change. |
| geocoded_waypoints | optional | Array<DirectionsGeocodedWaypoint> | Contains an array with details about the geocoding of origin, destination and waypoints. Elements in the geocoded_waypoints array correspond, by their zero-based position, to the origin, the waypoints in the order they are specified, and the destination. These details will not be present for waypoints specified as textual latitude/longitude values if the service returns no results. This is because such waypoints are only reverse geocoded to obtain their representative address after a route has been found. An empty JSON object will occupy the corresponding places in the geocoded_waypoints array. See DirectionsGeocodedWaypoint for more information. |

DirectionsRouteRoutes consist of nested legs and steps.| Field | Required | Type | Description |
| --- | --- | --- | --- |
| bounds | required | Bounds | Contains the viewport bounding box of the overview_polyline. See Bounds for more information. |
| copyrights | required | string | Contains the copyright notices to be displayed for this route. You must handle and display this information yourself. This content is meant to be read as-is. Do not programmatically parse this display-only content. |
| legs | required | Array<DirectionsLeg> | An array which contains information about a leg of the route, between two locations within the given route. A separate leg will be present for each waypoint or destination specified. (A route with no waypoints will contain exactly one leg within the legs array.) Each leg consists of a series of steps. See DirectionsLeg for more information. |
| overview_polyline | required | DirectionsPolyline | Contains an object that holds an encoded polyline representation of the route. This polyline is an approximate (smoothed) path of the resulting directions. See DirectionsPolyline for more information. |
| summary | required | string | Contains a short textual description for the route, suitable for naming and disambiguating the route from alternatives. |
| warnings | required | Array<string> | Contains an array of warnings to be displayed when showing these directions. You must handle and display these warnings yourself. |
| waypoint_order | required | Array<integer> | An array indicating the order of any waypoints in the calculated route. This waypoints may be reordered if the request was passed optimize:true within its waypoints parameter. |
| fare | optional | Fare | If present, contains the total fare (that is, the total ticket costs) on this route. This property is only returned for transit requests and only for routes where fare information is available for all transit legs. See Fare for more information. |

Bounds
A rectangle in geographical coordinates from points at the southwest and
northeast corners.
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| northeast | required | LatLngLiteral | See LatLngLiteral for more information. |
| southwest | required | LatLngLiteral | See LatLngLiteral for more information. |

LatLngLiteral
An object describing a specific location with Latitude and Longitude in
decimal degrees.
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| lat | required | number | Latitude in decimal degrees |
| lng | required | number | Longitude in decimal degrees |

DirectionsLeg| Field | Required | Type | Description |
| --- | --- | --- | --- |
| end_address | required | string | Contains the human-readable address (typically a street address) from reverse geocoding the end_location of this leg. This content is meant to be read as-is. Do not programmatically parse the formatted address. |
| end_location | required | LatLngLiteral | The latitude/longitude coordinates of the given destination of this leg. Because the Directions API calculates directions between locations by using the nearest transportation option (usually a road) at the start and end points, end_location may be different than the provided destination of this leg if, for example, a road is not near the destination. See LatLngLiteral for more information. |
| start_address | required | string | Contains the human-readable address (typically a street address) resulting from reverse geocoding the start_location of this leg. This content is meant to be read as-is. Do not programmatically parse the formatted address. |
| start_location | required | LatLngLiteral | The latitude/longitude coordinates of the origin of this leg. Because the Directions API calculates directions between locations by using the nearest transportation option (usually a road) at the start and end points, start_location may be different than the provided origin of this leg if, for example, a road is not near the origin. See LatLngLiteral for more information. |
| steps | required | Array<DirectionsStep> | An array of steps denoting information about each separate step of the leg of the journey. See DirectionsStep for more information. |
| traffic_speed_entry | required | Array<DirectionsTrafficSpeedEntry> | Information about traffic speed along the leg. See DirectionsTrafficSpeedEntry for more information. |
| via_waypoint | required | Array<DirectionsViaWaypoint> | The locations of via waypoints along this leg. See DirectionsViaWaypoint for more information. |
| arrival_time | optional | TimeZoneTextValueObject | Contains the estimated time of arrival for this leg. This property is only returned for transit directions. See TimeZoneTextValueObject for more information. |
| departure_time | optional | TimeZoneTextValueObject | Contains the estimated time of departure for this leg, specified as a Time object. The departure_time is only available for transit directions. See TimeZoneTextValueObject for more information. |
| distance | optional | TextValueObject | The total distance covered by this leg. See TextValueObject for more information. |
| duration | optional | TextValueObject | The total duration of this leg. See TextValueObject for more information. |
| duration_in_traffic | optional | TextValueObject | Indicates the total duration of this leg. This value is an estimate of the time in traffic based on current and historical traffic conditions. See the traffic_model request parameter for the options you can use to request that the returned value is optimistic, pessimistic, or a best-guess estimate. The duration in traffic is returned only if all of the following are true: The request does not include stopover waypoints. If the request includes waypoints, they must be prefixed with via: to avoid stopovers. The request is specifically for driving directions—the mode parameter is set to driving. The request includes a departure_time parameter. Traffic conditions are available for the requested route. See TextValueObject for more information. |

DirectionsStep
Each element in the steps array defines a single step of the calculated
directions. A step is the most atomic unit of a direction's route, containing
a single step describing a specific, single instruction on the journey. E.g.
"Turn left at W. 4th St." The step not only describes the instruction but also
contains distance and duration information relating to how this step relates
to the following step. For example, a step denoted as "Merge onto I-80 West"
may contain a duration of "37 miles" and "40 minutes," indicating that the
next step is 37 miles/40 minutes from this step.

When using the Directions API to search for transit directions, the steps
array will include additional transit details in the form of a transit_details
array. If the directions include multiple modes of transportation, detailed
directions will be provided for walking or driving steps in an inner steps
array. For example, a walking step will include directions from the start and
end locations: "Walk to Innes Ave & Fitch St". That step will include
detailed walking directions for that route in the inner steps array, such as:
"Head north-west", "Turn left onto Arelious Walker", and "Turn left onto Innes
Ave".
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| duration | required | TextValueObject | Contains the typical time required to perform the step, until the next step. This field may be undefined if the duration is unknown. See TextValueObject for more information. |
| end_location | required | LatLngLiteral | Contains the location of the last point of this step. See LatLngLiteral for more information. |
| html_instructions | required | string | Contains formatted instructions for this step, presented as an HTML text string. This content is meant to be read as-is. Do not programmatically parse this display-only content. |
| polyline | required | DirectionsPolyline | Contains a single points object that holds an encoded polyline representation of the step. This polyline is an approximate (smoothed) path of the step. See DirectionsPolyline for more information. |
| start_location | required | LatLngLiteral | Contains the location of the starting point of this step. See LatLngLiteral for more information. |
| travel_mode | required | TravelMode | Contains the type of travel mode used. See TravelMode for more information. |
| distance | optional | TextValueObject | Contains the distance covered by this step until the next step. This field may be undefined if the distance is unknown. See TextValueObject for more information. |
| maneuver | optional | string | Contains the action to take for the current step (turn left, merge, straight, etc.). Values are subject to change, and new values may be introduced without prior notice. The allowed values include: turn-slight-left, turn-sharp-left, turn-left, turn-slight-right, turn-sharp-right, keep-right, keep-left, uturn-left, uturn-right, turn-right, straight, ramp-left, ramp-right, merge, fork-left, fork-right, ferry, ferry-train, roundabout-left, and roundabout-right |
| steps | optional |  | Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to "transit". The inner steps array is of the same type as steps. |
| transit_details | optional | DirectionsTransitDetails | Details pertaining to this step if the travel mode is transit. See DirectionsTransitDetails for more information. |

TextValueObject
An object containing a numeric value and its formatted text representation.
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| text | required | string | String value. |
| value | required | number | Numeric value. |

DirectionsPolylinePolyline encoding [https://developers.google.com/maps/documentation/utilities/polylinealgorithm?hl=ko]
is a lossy compression algorithm that allows you to store a series of
coordinates as a single string. Point coordinates are encoded using signed
values. If you only have a few static points, you may also wish to use the
interactive polyline encoding utility.

The encoding process converts a binary value into a series of character codes
for ASCII characters using the familiar base64 encoding scheme: to ensure
proper display of these characters, encoded values are summed with 63 (the
ASCII character '?') before converting them into ASCII. The algorithm also
checks for additional character codes for a given point by checking the least
significant bit of each byte group; if this bit is set to 1, the point is not
yet fully formed and additional data must follow.

Additionally, to conserve space, points only include the offset from the
previous point (except of course for the first point). All points are encoded
in Base64 as signed integers, as latitudes and longitudes are signed values.
The encoding format within a polyline needs to represent two coordinates
representing latitude and longitude to a reasonable precision. Given a maximum
longitude of +/- 180 degrees to a precision of 5 decimal places (180.00000 to
-180.00000), this results in the need for a 32 bit signed binary integer
value.
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| points | required | string | A single string representation of the polyline. |

TravelModeDRIVING (default) indicates calculation using the road network.
BICYCLING requests calculation for bicycling via bicycle paths
& preferred streets (where available).
TRANSIT requests calculation via public transit routes (where
available).
WALKING requests calculation for walking via pedestrian paths
& sidewalks (where available).

DirectionsTransitDetails

Additional information that is not relevant for other modes of transportation.
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| arrival_stop | optional | DirectionsTransitStop | The arrival transit stop. See DirectionsTransitStop for more information. |
| arrival_time | optional | TimeZoneTextValueObject | See TimeZoneTextValueObject for more information. |
| departure_stop | optional | DirectionsTransitStop | The departure transit stop. See DirectionsTransitStop for more information. |
| departure_time | optional | TimeZoneTextValueObject | See TimeZoneTextValueObject for more information. |
| headsign | optional | string | Specifies the direction in which to travel on this line, as it is marked on the vehicle or at the departure stop. This will often be the terminus station. |
| headway | optional | integer | Specifies the expected number of seconds between departures from the same stop at this time. For example, with a headway value of 600, you would expect a ten minute wait if you should miss your bus. |
| line | optional | DirectionsTransitLine | Contains information about the transit line used in this step. See DirectionsTransitLine for more information. |
| num_stops | optional | integer | The number of stops from the departure to the arrival stop. This includes the arrival stop, but not the departure stop. For example, if your directions involve leaving from Stop A, passing through stops B and C, and arriving at stop D, num_stops will return 3. |
| trip_short_name | optional | string | The text that appears in schedules and sign boards to identify a transit trip to passengers. The text should uniquely identify a trip within a service day. For example, "538" is the trip_short_name of the Amtrak train that leaves San Jose, CA at 15:10 on weekdays to Sacramento, CA. |

DirectionsTransitStop| Field | Required | Type | Description |
| --- | --- | --- | --- |
| location | required | LatLngLiteral | The location of the stop. See LatLngLiteral for more information. |
| name | required | string | The name of the transit stop. |

TimeZoneTextValueObject

An object containing Unix time, a time zone, and its formatted text
representation.
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| text | required | string | The time specified as a string in the time zone. |
| time_zone | required | string | Contains the time zone. The value is the name of the time zone as defined in the IANA Time Zone Database, e.g. "America/New_York". |
| value | required | number | The time specified as Unix time, or seconds since midnight, January 1, 1970 UTC. |

DirectionsTransitLine| Field | Required | Type | Description |
| --- | --- | --- | --- |
| agencies | required | Array<DirectionsTransitAgency> | The transit agency (or agencies) that operates this transit line. See DirectionsTransitAgency for more information. |
| name | required | string | The full name of this transit line, e.g. "8 Avenue Local". |
| color | optional | string | The color commonly used in signage for this line. |
| icon | optional | string | Contains the URL for the icon associated with this line. |
| short_name | optional | string | The short name of this transit line. This will normally be a line number, such as "M7" or "355". |
| text_color | optional | string | The color commonly used in signage for this line. |
| url | optional | string | Contains the URL for this transit line as provided by the transit agency. |
| vehicle | optional | DirectionsTransitVehicle | The type of vehicle that operates on this transit line. See DirectionsTransitVehicle for more information. |

DirectionsTransitAgency
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| name | optional | string | The name of this transit agency. |
| phone | optional | string | The transit agency's phone number. |
| url | optional | string | The transit agency's URL. |

DirectionsTransitVehicle
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| name | required | string | The name of this vehicle, capitalized. |
| type | required | string | The type of vehicle used. BUS - Bus. CABLE_CAR - A vehicle that operates on a cable, usually on the ground. Aerial cable cars may be of the type GONDOLA_LIFT. COMMUTER_TRAIN - Commuter rail. FERRY - Ferry. FUNICULAR - A vehicle that is pulled up a steep incline by a cable. A Funicular typically consists of two cars, with each car acting as a counterweight for the other. GONDOLA_LIFT - An aerial cable car. HEAVY_RAIL - Heavy rail. HIGH_SPEED_TRAIN - High speed train. INTERCITY_BUS - Intercity bus. LONG_DISTANCE_TRAIN - Long distance train. METRO_RAIL - Light rail transit. MONORAIL - Monorail. OTHER - All other vehicles will return this type. RAIL - Rail. SHARE_TAXI - Share taxi is a kind of bus with the ability to drop off and pick up passengers anywhere on its route. SUBWAY - Underground light rail. TRAM - Above ground light rail. TROLLEYBUS - Trolleybus. The allowed values include: BUS, CABLE_CAR, COMMUTER_TRAIN, FERRY, FUNICULAR, GONDOLA_LIFT, HEAVY_RAIL, HIGH_SPEED_TRAIN, INTERCITY_BUS, LONG_DISTANCE_TRAIN, METRO_RAIL, MONORAIL, OTHER, RAIL, SHARE_TAXI, SUBWAY, TRAM, and TROLLEYBUS |
| icon | optional | string | Contains the URL for an icon associated with this vehicle type. |
| local_icon | optional | string | Contains the URL for the icon associated with this vehicle type, based on the local transport signage. |

DirectionsTrafficSpeedEntry
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| offset_meters | required | number | The offset along the path (in meters) up to which this speed category is valid. |
| speed_category | required | string | The current traffic/speed conditions on this portion of a path. |

DirectionsViaWaypoint| Field | Required | Type | Description |
| --- | --- | --- | --- |
| location | optional | LatLngLiteral | The location of the waypoint. See LatLngLiteral for more information. |
| step_index | optional | integer | The index of the step containing the waypoint. |
| step_interpolation | optional | number | The position of the waypoint along the step's polyline, expressed as a ratio from 0 to 1. |

FareThe total fare for the route.{
"currency" : "USD",
"value" : 6,
"text" : "$6.00"
DirectionsStatus
The status field within the Directions response object contains the status of
the request, and may contain debugging information to help you track down why
the Directions service failed. The status field may contain the following
values:
OK indicates the response contains a valid result.NOT_FOUND indicates at least one of the locations specified in
the request's origin, destination, or waypoints could not be geocoded.
ZERO_RESULTS indicates no route could be found between the
origin and destination.
MAX_WAYPOINTS_EXCEEDED indicates that too many waypoints were
provided in the request. For applications using the Directions API as a web
service, or the directions service in the Maps JavaScript API, the maximum
allowed number of waypoints is 25, plus the origin and destination.
MAX_ROUTE_LENGTH_EXCEEDED indicates the requested route is too
long and cannot be processed. This error occurs when more complex directions
are returned. Try reducing the number of waypoints, turns, or instructions.
INVALID_REQUEST indicates that the provided request was
invalid. Common causes of this status include an invalid parameter or
parameter value.
OVER_DAILY_LIMIT indicates any of the following:
The API key is missing or invalid.Billing has not been enabled on your account.A self-imposed usage cap has been exceeded.
The provided method of payment is no longer valid (for example, a credit
card has expired).

See the
Maps FAQ [https://developers.google.com/maps/faq?hl=ko#over-limit-key-error]
to learn how to fix this.
OVER_QUERY_LIMIT indicates the service has received too many
requests from your application within the allowed time period.
REQUEST_DENIED indicates that the service denied use of the
directions service by your application.
UNKNOWN_ERROR indicates a directions request could not be
processed due to a server error. The request may succeed if you try again.

DirectionsGeocodedWaypoint
| Field | Required | Type | Description |
| --- | --- | --- | --- |
| geocoder_status | optional | string | Indicates the status code resulting from the geocoding operation. This field may contain the following values. The allowed values include: OK, and ZERO_RESULTS |
| partial_match | optional |  | Indicates that the geocoder did not return an exact match for the original request, though it was able to match part of the requested address. You may wish to examine the original request for misspellings and/or an incomplete address. Partial matches most often occur for street addresses that do not exist within the locality you pass in the request. Partial matches may also be returned when a request matches two or more locations in the same locality. For example, "21 Henr St, Bristol, UK" will return a partial match for both Henry Street and Henrietta Street. Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address. Suggestions triggered in this way will also be marked as a partial match. |
| place_id | optional | string | A unique identifier that can be used with other Google APIs. See the Place ID overview. |
| types | optional | Array<string> | Indicates the address type of the geocoding result used for calculating directions. administrative_area_level_1 indicates a first-order civil entity below the country level. Within the United States, these administrative levels are states. Not all nations exhibit these administrative levels. In most cases, administrative_area_level_1 short names will closely match ISO 3166-2 subdivisions and other widely circulated lists; however this is not guaranteed as our geocoding results are based on a variety of signals and location data. administrative_area_level_2 indicates a second-order civil entity below the country level. Within the United States, these administrative levels are counties. Not all nations exhibit these administrative levels. administrative_area_level_3 indicates a third-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels. administrative_area_level_4 indicates a fourth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels. administrative_area_level_5 indicates a fifth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels. airport indicates an airport. colloquial_area indicates a commonly-used alternative name for the entity. country indicates the national political entity, and is typically the highest order type returned by the Geocoder. intersection indicates a major intersection, usually of two major roads. locality indicates an incorporated city or town political entity. natural_feature indicates a prominent natural feature. neighborhood indicates a named neighborhood park indicates a named park. plus_code indicates an encoded location reference, derived from latitude and longitude. Plus codes can be used as a replacement for street addresses in places where they do not exist (where buildings are not numbered or streets are not named). See https://plus.codes for details. point_of_interest indicates a named point of interest. Typically, these "POI"s are prominent local entities that don't easily fit in another category, such as "Empire State Building" or "Eiffel Tower". political indicates a political entity. Usually, this type indicates a polygon of some civil administration. postal_code indicates a postal code as used to address postal mail within the country. premise indicates a named location, usually a building or collection of buildings with a common name route indicates a named route (such as "US 101"). street_address indicates a precise street address. sublocality indicates a first-order civil entity below a locality. For some locations may receive one of the additional types: sublocality_level_1 to sublocality_level_5. Each sublocality level is a civil entity. Larger numbers indicate a smaller geographic area. subpremise indicates a first-order entity below a named location, usually a singular building within a collection of buildings with a common name tourist_attraction indicates a tourist attraction. train_station indicates a train station. transit_station indicates a transit station. An empty list of types indicates there are no known types for the particular address component, for example, Lieu-dit in France. |

의견 보내기