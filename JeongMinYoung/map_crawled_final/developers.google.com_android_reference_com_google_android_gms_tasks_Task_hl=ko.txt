Source URL: https://developers.google.com/android/reference/com/google/android/gms/tasks/Task?hl=ko
Title: Task

Stay organized with collections

Save and categorize content based on your preferences.

이 페이지의 내용Summary [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#summary]Public methods [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-methods]Public constructors [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-constructors_1]Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#Task()]Public methods [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-methods_1]addOnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener)]addOnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(android.app.Activity,com.google.android.gms.tasks.OnCanceledListener)]addOnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCanceledListener)]addOnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener%3CTResult%3E)]addOnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(android.app.Activity,com.google.android.gms.tasks.OnCompleteListener%3CTResult%3E)]addOnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCompleteListener%3CTResult%3E)]addOnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(com.google.android.gms.tasks.OnFailureListener)]addOnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(android.app.Activity,com.google.android.gms.tasks.OnFailureListener)]addOnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnFailureListener)]addOnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener%3C?%20super%20TResult%3E)]addOnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(android.app.Activity,com.google.android.gms.tasks.OnSuccessListener%3C?%20super%20TResult%3E)]addOnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnSuccessListener%3C?%20super%20TResult%3E)]continueWith [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWith(com.google.android.gms.tasks.Continuation%3CTResult,TContinuationResult%3E)]continueWith [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation%3CTResult,TContinuationResult%3E)]continueWithTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWithTask(com.google.android.gms.tasks.Continuation%3CTResult,com.google.android.gms.tasks.Task%3CTContinuationResult%3E%3E)]continueWithTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWithTask(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation%3CTResult,com.google.android.gms.tasks.Task%3CTContinuationResult%3E%3E)]getException [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getException()]getResult [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getResult()]getResult [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getResult(java.lang.Class%3CX%3E)]isCanceled [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isCanceled()]isComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isComplete()]isSuccessful [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isSuccessful()]onSuccessTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#onSuccessTask(com.google.android.gms.tasks.SuccessContinuation%3CTResult,TContinuationResult%3E)]onSuccessTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#onSuccessTask(java.util.concurrent.Executor,com.google.android.gms.tasks.SuccessContinuation%3CTResult,TContinuationResult%3E)]

Task

Kotlin [https://developers.google.com/android/reference/kotlin/com/google/android/gms/tasks/Task]
|Java

public abstract class Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult>

Represents an asynchronous operation.

| Parameters |
| --- |
| <TResult> | the type of the result of the operation |

| See also |
| --- |
| Tasks |  |

Summary

| Public constructors |
| --- |
| Task() |

| Public methods |
| --- |
| @NonNull Task<TResult> | @CanIgnoreReturnValue addOnCanceledListener(@NonNull OnCanceledListener listener) Adds a listener that is called if the Task is canceled. |
| @NonNull Task<TResult> | @CanIgnoreReturnValue addOnCanceledListener(     @NonNull Activity activity,     @NonNull OnCanceledListener listener ) Adds an Activity-scoped listener that is called if the Task is canceled. |
| @NonNull Task<TResult> | @CanIgnoreReturnValue addOnCanceledListener(     @NonNull Executor executor,     @NonNull OnCanceledListener listener ) Adds a listener that is called if the Task is canceled. |
| @NonNull Task<TResult> | @CanIgnoreReturnValue addOnCompleteListener(@NonNull OnCompleteListener<TResult> listener) Adds a listener that is called when the Task completes. |
| @NonNull Task<TResult> | @CanIgnoreReturnValue addOnCompleteListener(     @NonNull Activity activity,     @NonNull OnCompleteListener<TResult> listener ) Adds an Activity-scoped listener that is called when the Task completes. |
| @NonNull Task<TResult> | @CanIgnoreReturnValue addOnCompleteListener(     @NonNull Executor executor,     @NonNull OnCompleteListener<TResult> listener ) Adds a listener that is called when the Task completes. |
| abstract @NonNull Task<TResult> | @CanIgnoreReturnValue addOnFailureListener(@NonNull OnFailureListener listener) Adds a listener that is called if the Task fails. |
| abstract @NonNull Task<TResult> | @CanIgnoreReturnValue addOnFailureListener(     @NonNull Activity activity,     @NonNull OnFailureListener listener ) Adds an Activity-scoped listener that is called if the Task fails. |
| abstract @NonNull Task<TResult> | @CanIgnoreReturnValue addOnFailureListener(     @NonNull Executor executor,     @NonNull OnFailureListener listener ) Adds a listener that is called if the Task fails. |
| abstract @NonNull Task<TResult> | @CanIgnoreReturnValue addOnSuccessListener(@NonNull OnSuccessListener<Object> listener) Adds a listener that is called if the Task completes successfully. |
| abstract @NonNull Task<TResult> | @CanIgnoreReturnValue addOnSuccessListener(     @NonNull Activity activity,     @NonNull OnSuccessListener<Object> listener ) Adds an Activity-scoped listener that is called if the Task completes successfully. |
| abstract @NonNull Task<TResult> | @CanIgnoreReturnValue addOnSuccessListener(     @NonNull Executor executor,     @NonNull OnSuccessListener<Object> listener ) Adds a listener that is called if the Task completes successfully. |
| @NonNull Task<TContinuationResult> | <TContinuationResult> continueWith(     @NonNull Continuation<TResult, TContinuationResult> continuation ) Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. |
| @NonNull Task<TContinuationResult> | <TContinuationResult> continueWith(     @NonNull Executor executor,     @NonNull Continuation<TResult, TContinuationResult> continuation ) Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. |
| @NonNull Task<TContinuationResult> | <TContinuationResult> continueWithTask(     @NonNull Continuation<TResult, Task<TContinuationResult>> continuation ) Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. |
| @NonNull Task<TContinuationResult> | <TContinuationResult> continueWithTask(     @NonNull Executor executor,     @NonNull Continuation<TResult, Task<TContinuationResult>> continuation ) Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. |
| abstract @Nullable Exception | getException() Returns the exception that caused the Task to fail. |
| abstract TResult | getResult() Gets the result of the Task, if it has already completed. |
| abstract TResult | <X extends Throwable> getResult(@NonNull Class<X> exceptionType) Gets the result of the Task, if it has already completed. |
| abstract boolean | isCanceled() Returns true if the Task is canceled; false otherwise. |
| abstract boolean | isComplete() Returns true if the Task is complete; false otherwise. |
| abstract boolean | isSuccessful() Returns true if the Task has completed successfully; false otherwise. |
| @NonNull Task<TContinuationResult> | <TContinuationResult> onSuccessTask(     @NonNull SuccessContinuation<TResult, TContinuationResult> successContinuation ) Returns a new Task that will be completed with the result of applying the specified SuccessContinuation to this Task when this Task completes successfully. |
| @NonNull Task<TContinuationResult> | <TContinuationResult> onSuccessTask(     @NonNull Executor executor,     @NonNull SuccessContinuation<TResult, TContinuationResult> successContinuation ) Returns a new Task that will be completed with the result of applying the specified SuccessContinuation to this Task when this Task completes successfully. |

Public constructors

Task

public Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#Task()]()

Public methods

addOnCanceledListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCanceledListener] listener)
Adds a listener that is called if the Task is canceled.
The listener will be called on main application thread. If the Task has already been canceled, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnCanceledListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(android.app.Activity,com.google.android.gms.tasks.OnCanceledListener)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Activity [https://developer.android.com/reference/android/app/Activity.html] activity,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCanceledListener] listener)
Adds an Activity-scoped listener that is called if the Task is canceled.
The listener will be called on main application thread. If the Task has already been canceled, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.
The listener will be automatically removed during onStop [https://developer.android.com/reference/android/app/Activity.html#onStop()].

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnCanceledListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCanceledListener)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnCanceledListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCanceledListener] listener)
Adds a listener that is called if the Task is canceled.
If the Task has already been canceled, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.

| Parameters |
| --- |
| @NonNull Executor executor | the executor to use to call the listener |

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnCompleteListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener%3CTResult%3E)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCompleteListener]<TResult> listener)
Adds a listener that is called when the Task completes.
The listener will be called on main application thread. If the Task is already complete, a call to the listener will be immediately scheduled. A Task is considered complete if it succeeds, fails, or is canceled. If multiple listeners are added, they will be called in the order in which they were added.

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnCompleteListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(android.app.Activity,com.google.android.gms.tasks.OnCompleteListener%3CTResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Activity [https://developer.android.com/reference/android/app/Activity.html] activity,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCompleteListener]<TResult> listener)
Adds an Activity-scoped listener that is called when the Task completes.
The listener will be called on main application thread. If the Task is already complete, a call to the listener will be immediately scheduled. A Task is considered complete if it succeeds, fails, or is canceled. If multiple listeners are added, they will be called in the order in which they were added.
The listener will be automatically removed during onStop [https://developer.android.com/reference/android/app/Activity.html#onStop()].

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnCompleteListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCompleteListener%3CTResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnCompleteListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCompleteListener]<TResult> listener)
Adds a listener that is called when the Task completes.
If the Task is already complete, a call to the listener will be immediately scheduled. A Task is considered complete if it succeeds, fails, or is canceled. If multiple listeners are added, they will be called in the order in which they were added.

| Parameters |
| --- |
| @NonNull Executor executor | the executor to use to call the listener |

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnFailureListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public abstract @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(com.google.android.gms.tasks.OnFailureListener)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnFailureListener] listener)
Adds a listener that is called if the Task fails.
The listener will be called on main application thread. If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.
A canceled Task is not a failure Task. This listener will not trigger if the Task is canceled.

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnFailureListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public abstract @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(android.app.Activity,com.google.android.gms.tasks.OnFailureListener)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Activity [https://developer.android.com/reference/android/app/Activity.html] activity,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnFailureListener] listener)
Adds an Activity-scoped listener that is called if the Task fails.
The listener will be called on main application thread. If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.
A canceled Task is not a failure Task. This listener will not trigger if the Task is canceled.
The listener will be automatically removed during onStop [https://developer.android.com/reference/android/app/Activity.html#onStop()].

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnFailureListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public abstract @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnFailureListener)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnFailureListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnFailureListener] listener)
Adds a listener that is called if the Task fails.
If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.

| Parameters |
| --- |
| @NonNull Executor executor | the executor to use to call the listener |

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnSuccessListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public abstract @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener%3C?%20super%20TResult%3E)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnSuccessListener]<Object [https://developer.android.com/reference/java/lang/Object.html]> listener)
Adds a listener that is called if the Task completes successfully.
The listener will be called on the main application thread. If the Task has already completed successfully, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnSuccessListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public abstract @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(android.app.Activity,com.google.android.gms.tasks.OnSuccessListener%3C?%20super%20TResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Activity [https://developer.android.com/reference/android/app/Activity.html] activity,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnSuccessListener]<Object [https://developer.android.com/reference/java/lang/Object.html]> listener)
Adds an Activity-scoped listener that is called if the Task completes successfully.
The listener will be called on the main application thread. If the Task has already completed successfully, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.
The listener will be automatically removed during onStop [https://developer.android.com/reference/android/app/Activity.html#onStop()].

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

addOnSuccessListener

@CanIgnoreReturnValue [https://errorprone.info/api/latest/com/google/errorprone/annotations/CanIgnoreReturnValue.html]public abstract @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TResult> addOnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnSuccessListener%3C?%20super%20TResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] OnSuccessListener [https://developers.google.com/android/reference/com/google/android/gms/tasks/OnSuccessListener]<Object [https://developer.android.com/reference/java/lang/Object.html]> listener)
Adds a listener that is called if the Task completes successfully.
If multiple listeners are added, they will be called in the order in which they were added. If the Task has already completed successfully, a call to the listener will be immediately scheduled.

| Parameters |
| --- |
| @NonNull Executor executor | the executor to use to call the listener |

| Returns |
| --- |
| @NonNull Task<TResult> | this Task |

continueWith

public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult> <TContinuationResult> continueWith [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWith(com.google.android.gms.tasks.Continuation%3CTResult,TContinuationResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Continuation [https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation]<TResult, TContinuationResult> continuation)
Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.
The Continuation will be called on the main application thread.
If the previous Task is canceled, the returned Task will also be canceled and the Continuation would not execute.

| See also |
| --- |
| then |  |

continueWith

public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult> <TContinuationResult> continueWith [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation%3CTResult,TContinuationResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Continuation [https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation]<TResult, TContinuationResult> continuation)
Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.
If the previous Task is canceled, the returned Task will also be canceled and the Continuation would not execute.

| Parameters |
| --- |
| @NonNull Executor executor | the executor to use to call the Continuation |

| See also |
| --- |
| then |  |

continueWithTask

public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult> <TContinuationResult> continueWithTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWithTask(com.google.android.gms.tasks.Continuation%3CTResult,com.google.android.gms.tasks.Task%3CTContinuationResult%3E%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Continuation [https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation]<TResult, Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult>> continuation)
Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.
The Continuation will be called on the main application thread.
If the previous Task is canceled, the Continuation would still execute and task.isCanceled() is true can be observed in the Continuation.

| See also |
| --- |
| then |  |

continueWithTask

public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult> <TContinuationResult> continueWithTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWithTask(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation%3CTResult,com.google.android.gms.tasks.Task%3CTContinuationResult%3E%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Continuation [https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation]<TResult, Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult>> continuation)
Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.
If the previous Task is canceled, the Continuation would still execute and task.isCanceled() is true can be observed in the Continuation.

| Parameters |
| --- |
| @NonNull Executor executor | the executor to use to call the Continuation |

| See also |
| --- |
| then |  |

getException

public abstract @Nullable [https://developer.android.com/reference/androidx/annotation/Nullable.html] Exception [https://developer.android.com/reference/java/lang/Exception.html] getException [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getException()]()
Returns the exception that caused the Task to fail. Returns null if the Task is not yet complete, or completed successfully.

getResult

public abstract TResult getResult [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getResult()]()
Gets the result of the Task, if it has already completed.

| Throws |
| --- |
| java.lang.IllegalStateException | if the Task is not yet complete |
| com.google.android.gms.tasks.RuntimeExecutionException | if the Task failed with an exception |

getResult

public abstract TResult <X extends Throwable [https://developer.android.com/reference/java/lang/Throwable.html]> getResult [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getResult(java.lang.Class%3CX%3E)](@NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Class [https://developer.android.com/reference/java/lang/Class.html]<X> exceptionType)
Gets the result of the Task, if it has already completed.

| Throws |
| --- |
| java.lang.IllegalStateException | if the Task is not yet complete |
| X | if the Task failed with an exception of type X |
| com.google.android.gms.tasks.RuntimeExecutionException | if the Task failed with an exception that was not of type X |

isCanceled

public abstract boolean isCanceled [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isCanceled()]()
Returns true if the Task is canceled; false otherwise.

isComplete

public abstract boolean isComplete [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isComplete()]()
Returns true if the Task is complete; false otherwise.

isSuccessful

public abstract boolean isSuccessful [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isSuccessful()]()
Returns true if the Task has completed successfully; false otherwise.

onSuccessTask

public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult> <TContinuationResult> onSuccessTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#onSuccessTask(com.google.android.gms.tasks.SuccessContinuation%3CTResult,TContinuationResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] SuccessContinuation [https://developers.google.com/android/reference/com/google/android/gms/tasks/SuccessContinuation]<TResult, TContinuationResult> successContinuation)
Returns a new Task that will be completed with the result of applying the specified SuccessContinuation to this Task when this Task completes successfully. If the previous Task fails, the onSuccessTask completion will be skipped and failure listeners will be invoked.
The SuccessContinuation will be called on the main application thread.
If the previous Task is canceled, the returned Task will also be canceled and the SuccessContinuation would not execute.

| See also |
| --- |
| then |  |

onSuccessTask

public @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Task [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task]<TContinuationResult> <TContinuationResult> onSuccessTask [https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#onSuccessTask(java.util.concurrent.Executor,com.google.android.gms.tasks.SuccessContinuation%3CTResult,TContinuationResult%3E)](    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] Executor [https://developer.android.com/reference/java/util/concurrent/Executor.html] executor,    @NonNull [https://developer.android.com/reference/androidx/annotation/NonNull.html] SuccessContinuation [https://developers.google.com/android/reference/com/google/android/gms/tasks/SuccessContinuation]<TResult, TContinuationResult> successContinuation)
Returns a new Task that will be completed with the result of applying the specified SuccessContinuation to this Task when this Task completes successfully. If the previous Task fails, the onSuccessTask completion will be skipped and failure listeners will be invoked.
If the previous Task is canceled, the returned Task will also be canceled and the SuccessContinuation would not execute.

| Parameters |
| --- |
| @NonNull Executor executor | the executor to use to call the SuccessContinuation |

| See also |
| --- |
| then |  |