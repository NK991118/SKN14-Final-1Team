Source URL: https://developers.google.com/maps/documentation/route-optimization/make-request?hl=ko
Title: API 요청

의견 보내기

API 요청

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

유럽 경제 지역 (EEA) 개발자

청구서 수신 주소가 유럽 경제 지역에 있는 경우 2025년 7월 8일부터
Google Maps Platform EEA 서비스 약관 [https://cloud.google.com/terms/maps-platform/eea?hl=ko]
이 서비스 이용에 적용됩니다. 기능은 리전에 따라 다릅니다.
자세히 알아보기 [https://developers.google.com/maps/comms/eea/faq?hl=ko]

OptimizeToursRequest 메시지를 사용하여 OptimizeTours 요청을 할 수 있습니다.

예: OptimizeTours 요청하기

널리 사용되는 여러 프로그래밍 언어용 클라이언트 라이브러리도 제공됩니다.
OptimizeTours 요청은 REST [https://developers.google.com/maps/documentation/route-optimization/reference/rest/v1/projects/optimizeTours?hl=ko] 또는 gRPC [https://developers.google.com/maps/documentation/route-optimization/reference/rpc/google.maps.routeoptimization.v1?hl=ko#routeoptimization]를 사용하여 할 수도 있습니다.
참고: 다음 예에 사용된 클라이언트 라이브러리의 설치 안내 [https://developers.google.com/maps/documentation/route-optimization/client-libraries?hl=ko]를 참고하세요.
요청하기 전에 다음 매개변수를 환경에 적합한 값으로 바꿉니다.

OAuth 사용 [https://developers.google.com/maps/documentation/route-optimization/oauth-token?hl=ko]에 설명된 대로 애플리케이션 기본 사용자 인증 정보 [https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=ko]가 구성되어 있는지 확인합니다.
PROJECT_NUMBER_OR_ID를 클라우드 프로젝트 번호 또는 ID로 설정합니다.

GoGo 클라이언트 라이브러리를 사용하여 요청합니다.

import (
"context"
"fmt"

routeoptimization "cloud.google.com/go/maps/routeoptimization/apiv1"
"google.golang.org/genproto/googleapis/type/latlng"

rpb "cloud.google.com/go/maps/routeoptimization/apiv1/routeoptimizationpb"

func optimizeTours(projectID string) (*rpb.OptimizeToursResponse, error) {
ctx := context.Background()
c, err := routeoptimization.NewClient(ctx)
if err != nil {
return nil, fmt.Errorf("routeoptimization client: %w", err)

import com.google.maps.routeoptimization.v1.OptimizeToursResponse;
import com.google.maps.routeoptimization.v1.RouteOptimizationClient;
import com.google.maps.routeoptimization.v1.RouteOptimizationSettings;
import com.google.maps.routeoptimization.v1.Shipment;
import com.google.maps.routeoptimization.v1.Shipment.VisitRequest;
import com.google.maps.routeoptimization.v1.ShipmentModel;
import com.google.maps.routeoptimization.v1.Vehicle;
import com.google.type.LatLng;
import java.time.Duration;

public class OptimizeTours {
public static OptimizeToursResponse optimizeTours(String projectId) throws Exception {
RouteOptimizationSettings clientSettings = RouteOptimizationSettings
.newBuilder()
.setTransportChannelProvider(RouteOptimizationSettings
.defaultGrpcTransportProviderBuilder()
.setKeepAliveTimeDuration(Duration.ofSeconds(30))
.build()).build();

RouteOptimizationClient client = RouteOptimizationClient.create(clientSettings);
OptimizeToursRequest request =
OptimizeToursRequest.newBuilder()
.setParent("projects/" + projectId)
.setModel(
ShipmentModel.newBuilder()
.addShipments(
Shipment.newBuilder()
.addPickups(
VisitRequest.newBuilder()
.setArrivalLocation(
LatLng.newBuilder().setLatitude(48.8).setLongitude(2.4))))
.addVehicles(
Vehicle.newBuilder()
.setStartLocation(
LatLng.newBuilder().setLatitude(48.9).setLongitude(2.5))))
.build();
return client.optimizeTours(request);
Python 클라이언트 라이브러리를 사용하여 요청합니다.

from google.maps import routeoptimization_v1 as ro
from datetime import datetime

client = ro.RouteOptimizationClient()
request = ro.OptimizeToursRequest(
parent="projects/PROJECT_NUMBER_OR_ID",
model={
"shipments": [
"pickups": [
"arrival_location": {
"latitude": 37.738818,
"longitude": -122.4161
print(response)
Node.js먼저 Google 지도 플랫폼 담당자에게 Node.js 클라이언트 보관 파일의 사본을 요청합니다.

다음 JSON 스니펫을 사용하여 package.json 파일을 구성합니다.
"name": "route-optimization-example",
"version": "1.0.0",
"description": "A RouteOptimization example.",
"main": "main.js",
"scripts": {
"test": "echo \"Error: no test specified\" && exit 1"
Node.js 클라이언트 라이브러리를 사용하여 요청합니다.

REST다음 명령어는 Route Optimization API에 OptimizeTours 요청을 전송하고 동기식으로 응답을 수신합니다.

curl -X POST 'https://routeoptimization.googleapis.com/v1/projects/PROJECT_NUMBER_OR_ID:optimizeTours' \
-H "Content-Type: application/json" \
-H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
--data @- << EOM
"model": {
"shipments": [
"pickups": [
"arrivalLocation": {
"latitude": 37.73881799999999,
"longitude": -122.4161
참고: 이 예에서는 --data @-을 사용하여 표준 입력에서 요청을 읽습니다. --data @Filename을 사용하여 파일에서 읽습니다.

요청이 완료되면 응답 메시지가 전송됩니다.

다음: 대답 해석하기 [https://developers.google.com/maps/documentation/route-optimization/interpret-response?hl=ko]

의견 보내기