Source URL: https://firebase.google.com/docs/firestore/manage-data/add-data?hl=ko
Title: Cloud Firestore에 데이터 추가

의견 보내기

Cloud Firestore에 데이터 추가

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 문서에서는 Cloud Firestore에서 개별 문서를 설정, 추가 또는 업데이트하는 방법을 설명합니다. 데이터를 일괄 쓰기하려면 트랜잭션 및 일괄 쓰기 [https://firebase.google.com/docs/firestore/manage-data/transactions?hl=ko]를 참조하세요.

개요

다음 방법 중 하나로 Cloud Firestore에 데이터를 쓸 수 있습니다.

문서 식별자를 명시적으로 지정하여 컬렉션 내의 문서 데이터를 설정합니다.
컬렉션에 새 문서를 추가합니다. 이 경우 Cloud Firestore에서 자동으로 문서 식별자를 생성합니다.
자동으로 생성된 식별자로 빈 문서를 만들고 나중에 데이터를 할당합니다.

참고: 코드 샘플에서는 여러 언어를 다루지만 샘플을 설명하는 텍스트는 웹 메서드 이름을 참조합니다.시작하기 전에

데이터를 설정, 추가 또는 업데이트하도록 Cloud Firestore를 초기화하려면 다음 단계를 완료해야 합니다.

Cloud Firestore 데이터베이스 만들기 자세한 내용은 Cloud Firestore 시작하기 [https://firebase.google.com/docs/firestore/quickstart?hl=ko]를 참조하세요.
웹 또는 모바일 클라이언트 라이브러리를 사용하는 경우 보안 규칙으로 인증합니다. 자세한 내용은 보안 규칙 시작하기 [https://firebase.google.com/docs/firestore/manage-data/firestore/docs/security/get-started?hl=ko]를 참조하세요.
서버 클라이언트 라이브러리 또는 REST API를 사용하는 경우 Identity and Access Management(IAM)로 인증합니다. 자세한 내용은 서버 클라이언트 라이브러리의 보안 [https://firebase.google.com/firestore/docs/security/iam?hl=ko]을 참조하세요.

Cloud Firestore 초기화

Cloud Firestore의 인스턴스를 초기화합니다.

Web

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

import firebase from "firebase/app";
import "firebase/firestore";

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

import FirebaseCore
import FirebaseFirestore
FirebaseApp.configure()

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

@import FirebaseCore;
@import FirebaseFirestore;

FIRFirestore *defaultFirestore = [FIRFirestore firestore];AppDelegate.m [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/objc/firestore-smoketest-objc/AppDelegate.m#L32-L32]

Kotlin
db = FirebaseFirestore.instance;

Java

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;

import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;

GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();
FirebaseOptions options = new FirebaseOptions.Builder()
.setCredentials(credentials)
.setProjectId(projectId)
.build();
FirebaseApp.initializeApp(options);

Firestore db = FirestoreClient.getFirestore();

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;

import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;

InputStream serviceAccount = new FileInputStream("path/to/serviceAccount.json");
GoogleCredentials credentials = GoogleCredentials.fromStream(serviceAccount);
FirebaseOptions options = new FirebaseOptions.Builder()
.setCredentials(credentials)
.build();
FirebaseApp.initializeApp(options);

Firestore db = FirestoreClient.getFirestore();

Python

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import firebase_admin
from firebase_admin import firestore

# Application Default credentials are automatically created.
app = firebase_admin.initialize_app()
db = firestore.client()firestore.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore.py#L20-L25]

기존 애플리케이션 기본 사용자 인증 정보를 사용하여 SDK를 초기화할 수도 있습니다.
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# Use the application default credentials.
cred = credentials.ApplicationDefault()

firebase_admin.initialize_app(cred)
db = firestore.client()firestore.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore.py#L30-L38]

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# Use a service account.
cred = credentials.Certificate('path/to/serviceAccount.json')

app = firebase_admin.initialize_app(cred)

db = firestore.client()firestore.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore.py#L43-L52]

Python

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import firebase_admin
from firebase_admin import firestore_async

# Application Default credentials are automatically created.
app = firebase_admin.initialize_app()
db = firestore_async.client()firestore_async.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore_async.py#L22-L27]

기존 애플리케이션 기본 사용자 인증 정보를 사용하여 SDK를 초기화할 수도 있습니다.
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore_async

# Use the application default credentials.
cred = credentials.ApplicationDefault()

firebase_admin.initialize_app(cred)
db = firestore_async.client()firestore_async.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore_async.py#L32-L40]

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore_async

# Use a service account.
cred = credentials.Certificate('path/to/serviceAccount.json')

app = firebase_admin.initialize_app(cred)

db = firestore_async.client()firestore_async.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore_async.py#L45-L54]

C++

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Cloud Functions에서 초기화const { initializeApp, applicationDefault, cert } = require('firebase-admin/app');
const { getFirestore, Timestamp, FieldValue, Filter } = require('firebase-admin/firestore');
initializeApp();

Google Cloud에서 초기화const { initializeApp, applicationDefault, cert } = require('firebase-admin/app');
const { getFirestore, Timestamp, FieldValue, Filter } = require('firebase-admin/firestore');
initializeApp({
credential: applicationDefault()
const { getFirestore, Timestamp, FieldValue, Filter } = require('firebase-admin/firestore');

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import (
"log"

firebase "firebase.google.com/go"
"google.golang.org/api/option"

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import (
"log"

firebase "firebase.google.com/go"
"google.golang.org/api/option"

PHP

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

use Google\Cloud\Firestore\FirestoreClient;

/**
* Initialize Cloud Firestore with default project ID.
*/
function setup_client_create(string $projectId = null)
printf('Created Cloud Firestore client with default project ID.' . PHP_EOL);
printf('Created Cloud Firestore client with project ID: %s' . PHP_EOL, $projectId);
using Firebase.Firestore;
using Firebase.Extensions;
FirebaseFirestore db = FirebaseFirestore.DefaultInstance;

C#

C#

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

FirestoreDb db = FirestoreDb.Create(project);

require "google/cloud/firestore"

# The `project_id` parameter is optional and represents which project the
# client will act on behalf of. If not supplied, the client falls back to the
# default project inferred from the environment.
firestore = Google::Cloud::Firestore.new project_id: project_id

puts "Created Cloud Firestore client with given project ID."quickstart.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/quickstart.rb#L19-L26]

문서 설정

단일 문서를 만들거나 덮어쓰려면 다음 언어별 set() 메서드를 사용합니다.

Web
setDoc() 메서드를 사용합니다.
import { doc, setDoc } from "firebase/firestore";

set() 메서드를 사용합니다.
setData() 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

"name": "Los Angeles",
"state": "CA",
"country": "USA"
])
print("Document successfully written!")
Objective-C
setData: 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

NSLog(@"Error writing document: %@", error);
NSLog(@"Document successfully written!");
set() 메서드를 사용합니다.
val city = hashMapOf(
"name" to "Los Angeles",
"state" to "CA",
"country" to "USA",

db.collection("cities").document("LA")
.set(city)
set() 메서드를 사용합니다.
Map<String, Object> city = new HashMap<>();
city.put("name", "Los Angeles");
city.put("state", "CA");
city.put("country", "USA");

db.collection("cities").document("LA")
.set(city)
.addOnSuccessListener(new OnSuccessListener<Void>() {
@Override
public void onSuccess(Void aVoid) {
Log.d(TAG, "DocumentSnapshot successfully written!");
Log.w(TAG, "Error writing document", e);
set() 메서드를 사용합니다.
final city = <String, String>{
"name": "Los Angeles",
"state": "CA",
"country": "USA"
.collection("cities")
.doc("LA")
.set(city)
.onError((e, _) => print("Error writing document: $e"));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L132-L142]

자바
set() 메서드를 사용합니다.

Map<String, Object> docData = new HashMap<>();
docData.put("name", "Los Angeles");
docData.put("state", "CA");
docData.put("country", "USA");
docData.put("regions", Arrays.asList("west_coast", "socal"));
ApiFuture<WriteResult> future = db.collection("cities").document("LA").set(docData);
set() 메서드를 사용합니다.

data = {"name": "Los Angeles", "state": "CA", "country": "USA"}

# Add a new doc in collection 'cities' with ID 'LA'
db.collection("cities").document("LA").set(data)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L69-L72]

Python
set() 메서드를 사용합니다.

data = {"name": "Los Angeles", "state": "CA", "country": "USA"}

# Add a new doc in collection 'cities' with ID 'LA'
await db.collection("cities").document("LA").set(data)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L65-L68]

C++
Set() 메서드를 사용합니다.
.Document("LA")
.Set({{"name", FieldValue::String("Los Angeles")},
.OnCompletion([](const Future<void>& future) {
if (future.error() == Error::kErrorOk) {
set() 메서드를 사용합니다.

Set() 메서드를 사용합니다.

import (
"context"
"log"

"cloud.google.com/go/firestore"

func addDocAsMap(ctx context.Context, client *firestore.Client) error {
_, err := client.Collection("cities").Doc("LA").Set(ctx, map[string]interface{}{
"name":    "Los Angeles",
"state":   "CA",
"country": "USA",
set() 메서드를 사용합니다.

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$data = [
'name' => 'Los Angeles',
'state' => 'CA',
'country' => 'USA'
];
$db->collection('samples/php/cities')->document('LA')->set($data);data_set_from_map.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_from_map.php#L40-L45]

Unity
SetAsync() 메서드를 사용합니다.
DocumentReference docRef = db.Collection("cities").Document("LA");
Dictionary<string, object> city = new Dictionary<string, object>
Debug.Log("Added data to the LA document in the cities collection.");
SetAsync() 메서드를 사용합니다.

DocumentReference docRef = db.Collection("cities").Document("LA");
Dictionary<string, object> city = new Dictionary<string, object>
set() 메서드를 사용합니다.

city_ref = firestore.doc "#{collection_path}/LA"

data = {
name:    "Los Angeles",
state:   "CA",
country: "USA"
import { doc, setDoc } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

db.collection("cities").document("BJ")
.set(data, SetOptions.merge())DocSnippets.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L394-L398]

Java
Map<String, Object> data = new HashMap<>();
data.put("capital", true);

db.collection("cities").document("BJ")
.set(data, SetOptions.merge());DocSnippets.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L503-L508]

Dart

db.collection("cities").doc("BJ").set(data, SetOptions(merge: true));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L148-L151]

Java

Map<String, Object> update = new HashMap<>();
update.put("capital", true);

ApiFuture<WriteResult> writeResult =
db.collection("cities").document("BJ").set(update, SetOptions.merge());

city_ref = db.collection("cities").document("BJ")

city_ref.set({"capital": True}, merge=True)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L360-L362]

Python

city_ref = db.collection("cities").document("BJ")

await city_ref.set({"capital": True}, merge=True)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L354-L356]

C++
db->Collection("cities").Document("BJ").Set(

Node.js

import (
"context"
"log"

"cloud.google.com/go/firestore"

func updateDocCreateIfMissing(ctx context.Context, client *firestore.Client) error {
_, err := client.Collection("cities").Doc("BJ").Set(ctx, map[string]interface{}{
"capital": true,

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$cityRef = $db->collection('samples/php/cities')->document('BJ');
$cityRef->set([
'capital' => true
], ['merge' => true]);data_set_doc_upsert.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_doc_upsert.php#L40-L43]

Unity
DocumentReference docRef = db.Collection("cities").Document("LA");
Dictionary<string, object> update = new Dictionary<string, object>

C#

DocumentReference docRef = db.Collection("cities").Document("LA");
Dictionary<string, object> update = new Dictionary<string, object>

city_ref = firestore.doc "#{collection_path}/LA"
city_ref.set({ capital: false }, merge: true)add_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/add_data.rb#L43-L44]

문서가 있는지 확실하지 않은 경우 전체 문서를 실수로 덮어쓰지 않도록 새 데이터를 기존 문서와 병합하는 옵션을 전달하세요. 맵이 포함된 문서의 경우 빈 맵이 있는 필드를 사용해 집합을 지정하면 대상 문서의 맵 필드를 덮어씁니다.

데이터 유형

Cloud Firestore를 사용하면 문서 안에 문자열, 불리언, 숫자, 날짜, null, 중첩 배열, 객체를 비롯하여 다양한 데이터 유형을 쓸 수 있습니다. Cloud Firestore는 코드에서 사용하는 숫자 유형과 관계없이 숫자를 항상 배정밀도 부동 소수점으로 저장합니다.

Web
import { doc, setDoc, Timestamp } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

print("Document successfully written!")
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

NSDictionary *docData = @{
@"stringExample": @"Hello world!",
@"booleanExample": @YES,
@"numberExample": @3.14,
@"dateExample": [FIRTimestamp timestampWithDate:[NSDate date]],
@"arrayExample": @[@5, @YES, @"hello"],
@"nullExample": [NSNull null],
@"objectExample": @{
@"a": @5,
@"b": @{
@"nested": @"foo"
NSLog(@"Error writing document: %@", error);
NSLog(@"Document successfully written!");
val docData = hashMapOf(
"stringExample" to "Hello world!",
"booleanExample" to true,
"numberExample" to 3.14159265,
"dateExample" to Timestamp(Date()),
"listExample" to arrayListOf(1, 2, 3),
"nullExample" to null,

val nestedData = hashMapOf(
"a" to 5,
"b" to true,

docData["objectExample"] = nestedData

db.collection("data").document("one")
.set(docData)
Map<String, Object> docData = new HashMap<>();
docData.put("stringExample", "Hello world!");
docData.put("booleanExample", true);
docData.put("numberExample", 3.14159265);
docData.put("dateExample", new Timestamp(new Date()));
docData.put("listExample", Arrays.asList(1, 2, 3));
docData.put("nullExample", null);

Map<String, Object> nestedData = new HashMap<>();
nestedData.put("a", 5);
nestedData.put("b", true);

docData.put("objectExample", nestedData);

db.collection("data").document("one")
.set(docData)
.addOnSuccessListener(new OnSuccessListener<Void>() {
@Override
public void onSuccess(Void aVoid) {
Log.d(TAG, "DocumentSnapshot successfully written!");
Log.w(TAG, "Error writing document", e);
final docData = {
"stringExample": "Hello world!",
"booleanExample": true,
"numberExample": 3.14159265,
"dateExample": Timestamp.now(),
"listExample": [1, 2, 3],
"nullExample": null

db
.collection("data")
.doc("one")
.set(docData)
.onError((e, _) => print("Error writing document: $e"));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L157-L177]

Java

Map<String, Object> docData = new HashMap<>();
docData.put("stringExample", "Hello, World");
docData.put("booleanExample", false);
docData.put("numberExample", 3.14159265);
docData.put("nullExample", null);

ArrayList<Object> arrayExample = new ArrayList<>();
Collections.addAll(arrayExample, 5L, true, "hello");
docData.put("arrayExample", arrayExample);

Map<String, Object> objectExample = new HashMap<>();
objectExample.put("a", 5L);
objectExample.put("b", true);

docData.put("objectExample", objectExample);

ApiFuture<WriteResult> future = db.collection("data").document("one").set(docData);
System.out.println("Update time : " + future.get().getUpdateTime());ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L80-L97]

Python

data = {
"stringExample": "Hello, World!",
"booleanExample": True,
"numberExample": 3.14159265,
"dateExample": datetime.datetime.now(tz=datetime.timezone.utc),
"arrayExample": [5, True, "hello"],
"nullExample": None,
"objectExample": {"a": 5, "b": True},

data = {
"stringExample": "Hello, World!",
"booleanExample": True,
"numberExample": 3.14159265,
"dateExample": datetime.datetime.now(tz=datetime.timezone.utc),
"arrayExample": [5, True, "hello"],
"nullExample": None,
"objectExample": {"a": 5, "b": True},
MapFieldValue doc_data{
FieldValue::Integer(2),
FieldValue::Integer(3)})},
FieldValue::Map(
[](const Future<void>& future) {
if (future.error() == Error::kErrorOk) {

import (
"context"
"log"
"time"

"cloud.google.com/go/firestore"

func addDocDataTypes(ctx context.Context, client *firestore.Client) error {
doc := make(map[string]interface{})
doc["stringExample"] = "Hello world!"
doc["booleanExample"] = true
doc["numberExample"] = 3.14159265
doc["dateExample"] = time.Now()
doc["arrayExample"] = []interface{}{5, true, "hello"}
doc["nullExample"] = nil
doc["objectExample"] = map[string]interface{}{
"a": 5,
"b": true,

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$data = [
'stringExample' => 'Hello World',
'booleanExample' => true,
'numberExample' => 3.14159265,
'dateExample' => new Timestamp(new DateTime()),
'arrayExample' => array(5, true, 'hello'),
'nullExample' => null,
'objectExample' => ['a' => 5, 'b' => true],
'documentReferenceExample' => $db->collection('samples/php/data')->document('two'),
];
$db->collection('samples/php/data')->document('one')->set($data);
printf('Set multiple data-type data for the one document in the data collection.' . PHP_EOL);data_set_from_map_nested.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_from_map_nested.php#L44-L55]

Unity
DocumentReference docRef = db.Collection("data").Document("one");
Dictionary<string, object> docData = new Dictionary<string, object>

C#

DocumentReference docRef = db.Collection("data").Document("one");
Dictionary<string, object> docData = new Dictionary<string, object>

doc_ref = firestore.doc "#{collection_path}/one"

data = {
stringExample:  "Hello, World!",
booleanExample: true,
numberExample:  3.14159265,
dateExample:    DateTime.now,
arrayExample:   [5, true, "hello"],
nullExample:    nil,
objectExample:  {
a: 5,
b: true
Map 또는 Dictionary 객체를 사용하여 문서를 표현하기가 불편한 경우가 많으므로 Cloud Firestore는 커스텀 클래스를 사용하여 문서를 작성하는 방식도 지원합니다. Cloud Firestore에서 객체를 지원되는 데이터 유형으로 변환합니다.

커스텀 클래스를 사용하면 앞의 예시를 다음과 같이 다시 작성할 수 있습니다.

Web
class City {
constructor (name, state, country ) {
this.name = name;
this.state = state;
this.country = country;

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
class City {
constructor (name, state, country ) {
this.name = name;
this.state = state;
this.country = country;

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

public struct City: Codable {

case state
case country
case isCapital = "capital"
case population
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

data class City(
val name: String? = null,
val state: String? = null,
val country: String? = null,
@field:JvmField // use this annotation if your Boolean field is prefixed with 'is'
val isCapital: Boolean? = null,
val population: Long? = null,
val regions: List<String>? = null,
)DocSnippets.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L238-L246]

Java

각 커스텀 클래스에는 인수를 취하지 않는 public 생성자가 있어야 합니다. 또한 각 속성의 public getter가 클래스에 포함되어야 합니다.

public class City {

private String name;
private String state;
private String country;
private boolean capital;
private long population;
private List<String> regions;

public City() {}

public City(String name, String state, String country, boolean capital, long population, List<String> regions) {
class City {
final String? name;
final String? state;
final String? country;
final bool? capital;
final int? population;
final List<String>? regions;

City({
this.name,
this.state,
this.country,
this.capital,
this.population,
this.regions,
DocumentSnapshot<Map<String, dynamic>> snapshot,
SnapshotOptions? options,
) {
final data = snapshot.data();
return City(
name: data?['name'],
state: data?['state'],
country: data?['country'],
capital: data?['capital'],
population: data?['population'],
regions:
data?['regions'] is Iterable ? List.from(data?['regions']) : null,
String name,
String state,
String country,
Boolean capital,
Long population,
List<String> regions) {
this.name = name;
this.state = state;
this.country = country;
this.capital = capital;
this.population = population;
this.regions = regions;

class City:
def __init__(self, name, state, country, capital=False, population=0, regions=[]):
self.name = name
self.state = state
self.country = country
self.capital = capital
self.population = population
self.regions = regions

@staticmethod
def from_dict(source):
# ...

def to_dict(self):
# ...

def __repr__(self):
return f"City(\
name={self.name}, \
country={self.country}, \
population={self.population}, \
capital={self.capital}, \
regions={self.regions}\
)"

snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L94-L145]

Python

class City:
def __init__(self, name, state, country, capital=False, population=0, regions=[]):
self.name = name
self.state = state
self.country = country
self.capital = capital
self.population = population
self.regions = regions

@staticmethod
def from_dict(source):
# ...

def to_dict(self):
# ...

def __repr__(self):
return f"City(\
name={self.name}, \
country={self.country}, \
population={self.population}, \
capital={self.capital}, \
regions={self.regions}\
)"

snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L90-L141]

C++

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

class City

/**
* @param array<string> $regions
*/
public function __construct(
string $name,
string $state,
string $country,
bool $capital = false,
int $population = 0,
array $regions = []
) {
$this->name = $name;
$this->state = $state;
$this->country = $country;
$this->capital = $capital;
$this->population = $population;
$this->regions = $regions;
[FirestoreData]
public class City
[FirestoreProperty]
public string Name { get; set; }

[FirestoreProperty]
public string State { get; set; }

[FirestoreProperty]
public string Country { get; set; }

[FirestoreProperty]
public bool Capital { get; set; }

[FirestoreProperty]
public long Population { get; set; }

[FirestoreData]
public class City
[FirestoreProperty]
public string Name { get; set; }

[FirestoreProperty]
public string State { get; set; }

[FirestoreProperty]
public string Country { get; set; }

[FirestoreProperty]
public bool Capital { get; set; }

[FirestoreProperty]
public long Population { get; set; }
import { doc, setDoc } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
.withConverter(cityConverter)
.set(new City("Los Angeles", "CA", "USA"));test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L240-L243]

Swift

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

val city = City(
"Los Angeles",
"CA",
"USA",
false,
5000000L,
listOf("west_coast", "socal"),
db.collection("cities").document("LA").set(city)DocSnippets.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L297-L305]

Java
City city = new City("Los Angeles", "CA", "USA",
false, 5000000L, Arrays.asList("west_coast", "sorcal"));
db.collection("cities").document("LA").set(city);DocSnippets.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L399-L401]

Dart
final city = City(
name: "Los Angeles",
state: "CA",
country: "USA",
capital: false,
population: 5000000,
regions: ["west_coast", "socal"],
final docRef = db
.collection("cities")
.withConverter(
fromFirestore: City.fromFirestore,
toFirestore: (City city, options) => city.toFirestore(),
.doc("LA");
await docRef.set(city);firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L183-L198]

Java

City city =
new City("Los Angeles", "CA", "USA", false, 3900000L, Arrays.asList("west_coast", "socal"));
ApiFuture<WriteResult> future = db.collection("cities").document("LA").set(city);

city = City(name="Los Angeles", state="CA", country="USA")
db.collection("cities").document("LA").set(city.to_dict())snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L178-L179]

Python

city = City(name="Los Angeles", state="CA", country="USA")
await db.collection("cities").document("LA").set(city.to_dict())snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L174-L175]

C++

import (
"context"
"log"

"cloud.google.com/go/firestore"

func addDocAsEntity(ctx context.Context, client *firestore.Client) error {
city := City{
Name:    "Los Angeles",
Country: "USA",
DocumentReference docRef = db.Collection("cities").Document("LA");
City city = new City
Name = "Los Angeles",
State = "CA",
Country = "USA",
Capital = false,
Population = 3900000L

C#

DocumentReference docRef = db.Collection("cities").Document("LA");
City city = new City
Name = "Los Angeles",
State = "CA",
Country = "USA",
Capital = false,
Population = 3900000L

Web
import { doc, setDoc } from "firebase/firestore";

await setDoc(doc(db, "cities", "new-city-id"), data);cities_document_set.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/cities_document_set.js#L8-L10]

Web

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
db.collection("cities").doc("new-city-id").set(data);test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L430-L430]

Swift

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

db.collection("cities").document("new-city-id").setData(data)ViewController.swift [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/swift/firestore-smoketest/ViewController.swift#L314-L314]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[[self.db collectionWithPath:@"cities"] documentWithPath:@"new-city-id"]
db.collection("cities").document("new-city-id").set(data)DocSnippets.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L266-L266]

Java
db.collection("cities").document("new-city-id").set(data);DocSnippets.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L360-L360]

Dart
db.collection("cities").doc("new-city-id").set({"name": "Chicago"});firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L204-L204]

Java

db.collection("cities").document("new-city-id").set(data);ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L123-L123]

Python

db.collection("cities").document("new-city-id").set(data)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L187-L187]

Python

await db.collection("cities").document("new-city-id").set(data)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L183-L183]

C++
db->Collection("cities").Document("SF").Set({/*some data*/});snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L228-L228]

Node.js

await db.collection('cities').doc('new-city-id').set(data);index.js [https://github.com/firebase/snippets-node/blob/f1869eeb97c2bbb713aff3deb5a67666da7bcb6b/firestore/main/index.js#L209-L209]

Go

import (
"context"
"log"

"cloud.google.com/go/firestore"

func addDocWithID(ctx context.Context, client *firestore.Client) error {

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$db->collection('samples/php/cities')->document('new-city-id')->set($data);data_set_id_specified.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_id_specified.php#L44-L44]

Unity
db.Collection("cities").Document("new-city-id").SetAsync(city);

C#

await db.Collection("cities").Document("new-city-id").SetAsync(city);Program.cs [https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/e366158e45a4654e8090bac4691ec83690b789aa/firestore/api/AddData/Program.cs#L145-L145]

Ruby

city_ref = firestore.doc "#{collection_path}/new-city-id"
city_ref.set dataadd_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/add_data.rb#L86-L87]

문서에 유의미한 ID가 없는 경우 Cloud Firestore에서 ID를 자동으로 생성할 수 있습니다. 다음과 같은 언어별 add() 메서드를 호출할 수 있습니다.

Web
addDoc() 메서드를 사용합니다.
import { collection, addDoc } from "firebase/firestore";

add() 메서드를 사용합니다.
addDocument() 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C
addDocumentWithData: 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

NSLog(@"Error adding document: %@", error);
NSLog(@"Document added with ID: %@", ref.documentID);
add() 메서드를 사용합니다.
"name" to "Tokyo",
"country" to "Japan",

db.collection("cities")
.add(data)
Log.w(TAG, "Error adding document", e)
add() 메서드를 사용합니다.
Map<String, Object> data = new HashMap<>();
data.put("name", "Tokyo");
data.put("country", "Japan");

db.collection("cities")
.add(data)
.addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
@Override
public void onSuccess(DocumentReference documentReference) {
Log.d(TAG, "DocumentSnapshot written with ID: " + documentReference.getId());
Log.w(TAG, "Error adding document", e);
add() 메서드를 사용합니다.

db.collection("cities").add(data).then((documentSnapshot) =>
print("Added Data with ID: ${documentSnapshot.id}"));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L210-L214]

자바
add() 메서드를 사용합니다.

Map<String, Object> data = new HashMap<>();
data.put("name", "Tokyo");
data.put("country", "Japan");
ApiFuture<DocumentReference> addedDocRef = db.collection("cities").add(data);
System.out.println("Added document with ID: " + addedDocRef.get().getId());ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L135-L140]

Python
add() 메서드를 사용합니다.

city = {"name": "Tokyo", "country": "Japan"}
update_time, city_ref = db.collection("cities").add(city)
print(f"Added document with id {city_ref.id}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L194-L196]

Python
add() 메서드를 사용합니다.

city = City(name="Tokyo", state=None, country="Japan")
await db.collection("cities").add(city.to_dict())snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L190-L191]

C++
Add() 메서드를 사용합니다.
db->Collection("cities").Add({/*some data*/});snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L235-L235]

Node.js
add() 메서드를 사용합니다.

Add() 메서드를 사용합니다.

import (
"context"
"log"

"cloud.google.com/go/firestore"

func addDocWithoutID(ctx context.Context, client *firestore.Client) error {
_, _, err := client.Collection("cities").Add(ctx, map[string]interface{}{
"name":    "Tokyo",
"country": "Japan",
add() 메서드를 사용합니다.

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$data = [
'name' => 'Tokyo',
'country' => 'Japan'
];
$addedDocRef = $db->collection('samples/php/cities')->add($data);
printf('Added document with ID: %s' . PHP_EOL, $addedDocRef->id());data_set_id_random_collection.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_id_random_collection.php#L40-L45]

Unity
AddAsync() 메서드를 사용합니다.
Dictionary<string, object> city = new Dictionary<string, object>
DocumentReference addedDocRef = task.Result;
Debug.Log(String.Format("Added document with ID: {0}.", addedDocRef.Id));
AddAsync() 메서드를 사용합니다.

Dictionary<string, object> city = new Dictionary<string, object>
DocumentReference addedDocRef = await db.Collection("cities").AddAsync(city);
add() 메서드를 사용합니다.

data = {
name:    "Tokyo",
country: "Japan"

added_doc_ref = cities_ref.add data
puts "Added document with ID: #{added_doc_ref.document_id}."add_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/add_data.rb#L98-L106]

중요: Firebase 실시간 데이터베이스의 '푸시 ID'와 달리, Cloud Firestore에서 자동으로 생성한 ID에서는 자동 정렬을 지원하지 않습니다.
생성일에 따라 문서를 정렬하려면 타임스탬프를 문서의 필드로 저장해야 합니다.
경우에 따라서는 자동 생성 ID를 사용하여 문서 참조를 만든 후 참조를 사용하는 방법이 유용할 수 있습니다. 이 사용 사례의 경우 doc()를 호출하면 됩니다.

Web
import { collection, doc, setDoc } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *newCityRef = [[self.db collectionWithPath:@"cities"] documentWithAutoID];
val data = HashMap<String, Any>()

val newCityRef = db.collection("cities").document()

Map<String, Object> data = new HashMap<>();

DocumentReference newCityRef = db.collection("cities").document();

final newCityRef = db.collection("cities").doc();

firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L220-L227]

Java

DocumentReference addedDocRef = db.collection("cities").document();
System.out.println("Added document with ID: " + addedDocRef.getId());

new_city_ref = db.collection("cities").document()

# later...
new_city_ref.set(
# ...

new_city_ref = db.collection("cities").document()

# later...
await new_city_ref.set(
# ...
DocumentReference new_city_ref = db->Collection("cities").Document();snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L243-L243]

Node.js

import (
"context"
"log"

"cloud.google.com/go/firestore"

func addDocAfterAutoGeneratedID(ctx context.Context, client *firestore.Client) error {
data := City{
Name:    "Sydney",
Country: "Australia",

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$addedDocRef = $db->collection('samples/php/cities')->newDocument();
printf('Added document with ID: %s' . PHP_EOL, $addedDocRef->id());
$addedDocRef->set($data);data_set_id_random_document_ref.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_id_random_document_ref.php#L44-L46]

Unity
DocumentReference addedDocRef = db.Collection("cities").Document();
Debug.Log(String.Format("Added document with ID: {0}.", addedDocRef.Id));
addedDocRef.SetAsync(city).ContinueWithOnMainThread(task => {
Debug.Log(String.Format(
"Added data to the {0} document in the cities collection.", addedDocRef.Id));

DocumentReference addedDocRef = db.Collection("cities").Document();

cities_ref = firestore.col collection_path

added_doc_ref = cities_ref.doc
puts "Added document with ID: #{added_doc_ref.document_id}."

added_doc_ref.set dataadd_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/add_data.rb#L121-L126]

백엔드에서 .add(...)와 .doc().set(...)는 동일하므로 두 가지 옵션 중 하나를 선택하면 됩니다.

문서 업데이트

전체 문서를 덮어쓰지 않고 문서의 일부 필드를 업데이트하려면 다음과 같은 언어별 update() 메서드를 사용합니다.

Web
updateDoc() 메서드를 사용합니다.
import { doc, updateDoc } from "firebase/firestore";

update() 메서드를 사용합니다.
updateData() 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

"capital": true
])
print("Document successfully updated")
Objective-C
updateData: 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *washingtonRef =
[[self.db collectionWithPath:@"cities"] documentWithPath:@"DC"];
NSLog(@"Error updating document: %@", error);
NSLog(@"Document successfully updated");
update() 메서드를 사용합니다.
val washingtonRef = db.collection("cities").document("DC")

.update("capital", true)
update() 메서드를 사용합니다.
DocumentReference washingtonRef = db.collection("cities").document("DC");

.update("capital", true)
.addOnSuccessListener(new OnSuccessListener<Void>() {
@Override
public void onSuccess(Void aVoid) {
Log.d(TAG, "DocumentSnapshot successfully updated!");
Log.w(TAG, "Error updating document", e);
update() 메서드를 사용합니다.
final washingtonRef = db.collection("cites").doc("DC");
washingtonRef.update({"capital": true}).then(
(value) => print("DocumentSnapshot successfully updated!"),

DocumentReference docRef = db.collection("cities").document("DC");

ApiFuture<WriteResult> future = docRef.update("capital", true);

WriteResult result = future.get();
System.out.println("Write result: " + result);ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L172-L180]

Python
update() 메서드를 사용합니다.

city_ref = db.collection("cities").document("DC")

# Set the capital field
city_ref.update({"capital": True})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L318-L321]

Python
update() 메서드를 사용합니다.

city_ref = db.collection("cities").document("DC")

# Set the capital field
await city_ref.update({"capital": True})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L312-L315]

C++
Update() 메서드를 사용합니다.
DocumentReference washington_ref = db->Collection("cities").Document("DC");
update() 메서드를 사용합니다.

Update() 메서드를 사용합니다.

import (
"context"
"log"

"cloud.google.com/go/firestore"

func updateDoc(ctx context.Context, client *firestore.Client) error {
update() 메서드를 사용합니다.

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$cityRef = $db->collection('samples/php/cities')->document('DC');
$cityRef->update([
['path' => 'capital', 'value' => true]
]);data_set_field.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_field.php#L40-L43]

Unity
UpdateAsync() 메서드를 사용합니다.
DocumentReference cityRef = db.Collection("cities").Document("new-city-id");
Dictionary<string, object> updates = new Dictionary<string, object>
"Updated the Capital field of the new-city-id document in the cities collection.");
UpdateAsync() 메서드를 사용합니다.

DocumentReference cityRef = db.Collection("cities").Document("new-city-id");
Dictionary<string, object> updates = new Dictionary<string, object>

update() 메서드를 사용합니다.

city_ref = firestore.doc "#{collection_path}/DC"
city_ref.update({ capital: true })add_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/add_data.rb#L145-L146]

서버 타임스탬프

문서의 필드를 서버 업데이트 수신 시점을 추적하는 서버 타임스탬프로 설정할 수 있습니다.

Web
import { updateDoc, serverTimestamp } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

do {
try await db.collection("objects").document("some-id").updateData([
"lastUpdated": FieldValue.serverTimestamp(),
])
print("Document successfully updated")
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[[self.db collectionWithPath:@"objects"] documentWithPath:@"some-id"] updateData:@{
@"lastUpdated": [FIRFieldValue fieldValueForServerTimestamp]
NSLog(@"Error updating document: %@", error);
NSLog(@"Document successfully updated");

"timestamp" to FieldValue.serverTimestamp(),

docRef.update(updates).addOnCompleteListener { }DocSnippets.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L1089-L1096]

Java
DocumentReference docRef = db.collection("objects").document("some-id");

Map<String,Object> updates = new HashMap<>();
updates.put("timestamp", FieldValue.serverTimestamp());

docRef.update(updates).addOnCompleteListener(new OnCompleteListener<Void>() {
final docRef = db.collection("objects").doc("some-id");
final updates = <String, dynamic>{
"timestamp": FieldValue.serverTimestamp(),
(value) => print("DocumentSnapshot successfully updated!"),

DocumentReference docRef = db.collection("objects").document("some-id");
ApiFuture<WriteResult> writeResult = docRef.update("timestamp", FieldValue.serverTimestamp());
System.out.println("Update time : " + writeResult.get());ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L255-L258]

Python

city_ref = db.collection("objects").document("some-id")
city_ref.update({"timestamp": firestore.SERVER_TIMESTAMP})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L387-L388]

Python

city_ref = db.collection("objects").document("some-id")
await city_ref.update({"timestamp": firestore.SERVER_TIMESTAMP})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L381-L382]

C++
DocumentReference doc_ref = db->Collection("objects").Document("some-id");
doc_ref.Update({{"timestamp", FieldValue::ServerTimestamp()}})
.OnCompletion([](const Future<void>& future) {

import (
"context"
"log"

"cloud.google.com/go/firestore"

func updateDocServerTimestamp(ctx context.Context, client *firestore.Client) error {

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$docRef = $db->collection('samples/php/objects')->document('some-id');
$docRef->update([
['path' => 'timestamp', 'value' => FieldValue::serverTimestamp()]
]);data_set_server_timestamp.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/data_set_server_timestamp.php#L45-L48]

Unity
DocumentReference cityRef = db.Collection("cities").Document("new-city-id");
cityRef.UpdateAsync("Timestamp", FieldValue.ServerTimestamp)
.ContinueWithOnMainThread(task => {
Debug.Log(
"Updated the Timestamp field of the new-city-id document in the cities "
+ "collection.");

DocumentReference cityRef = db.Collection("cities").Document("new-city-id");
await cityRef.UpdateAsync("Timestamp", Timestamp.GetCurrentTimestamp());Program.cs [https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/e366158e45a4654e8090bac4691ec83690b789aa/firestore/api/AddData/Program.cs#L233-L234]

Ruby

city_ref = firestore.doc "#{collection_path}/new-city-id"
city_ref.update({ timestamp: firestore.field_server_time })add_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/add_data.rb#L218-L219]

트랜잭션 [https://firebase.google.com/docs/firestore/manage-data/transactions?hl=ko] 안의 여러 타임스탬프 필드를 업데이트할 때 각 필드는 동일한 서버 타임스탬프 값을 수신합니다.

중첩된 객체의 필드 업데이트

문서에 중첩된 객체가 있으면 update()를 호출할 때 점 표기법을 사용하여 문서 내 중첩 필드를 참조할 수 있습니다.

Web
import { doc, setDoc, updateDoc } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

"name": "Frank",
"favorites": [ "food": "Pizza", "color": "Blue", "subject": "recess" ],
"age": 12
])

"age": 13,
"favorites.color": "Red"
])
print("Document successfully updated")
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *frankDocRef =
[[self.db collectionWithPath:@"users"] documentWithPath:@"frank"];
[frankDocRef setData:@{
@"name": @"Frank",
@"favorites": @{
@"food": @"Pizza",
@"color": @"Blue",
@"subject": @"recess"
NSLog(@"Error updating document: %@", error);
NSLog(@"Document successfully updated");
.update(
mapOf(
"age" to 13,
"favorites.color" to "Red",
),
)DocSnippets.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L374-L388]

Java
.update(
"age", 13,
"favorites.color", "Red"
);DocSnippets.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L485-L497]

Dart
.collection("users")
.doc("frank")
.update({"age": 13, "favorites.color": "Red"});firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L255-L264]

Java

DocumentReference frankDocRef = db.collection("users").document("frank");
Map<String, Object> initialData = new HashMap<>();
initialData.put("name", "Frank");
initialData.put("age", 12);

Map<String, Object> favorites = new HashMap<>();
favorites.put("food", "Pizza");
favorites.put("color", "Blue");
favorites.put("subject", "Recess");
initialData.put("favorites", favorites);

ApiFuture<WriteResult> initialResult = frankDocRef.set(initialData);

Map<String, Object> updates = new HashMap<>();
updates.put("age", 13);
updates.put("favorites.color", "Red");

ApiFuture<WriteResult> writeResult = frankDocRef.update(updates);

# Create an initial document to update
frank_ref = db.collection("users").document("frank")
frank_ref.set(
"name": "Frank",
"favorites": {"food": "Pizza", "color": "Blue", "subject": "Recess"},
"age": 12,

# Create an initial document to update
frank_ref = db.collection("users").document("frank")
await frank_ref.set(
"name": "Frank",
"favorites": {"food": "Pizza", "color": "Blue", "subject": "Recess"},
"age": 12,

import (
"context"
"log"

"cloud.google.com/go/firestore"

func updateDocNested(ctx context.Context, client *firestore.Client) error {
initialData := map[string]interface{}{
"name": "Frank",
"age":  12,
"favorites": map[string]interface{}{
"food":    "Pizza",
"color":   "Blue",
"subject": "recess",

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$frankRef->set([
'first' => 'Frank',
'last' => 'Franklin',
'favorites' => ['food' => 'Pizza', 'color' => 'Blue', 'subject' => 'Recess'],
'age' => 12
]);

DocumentReference frankDocRef = db.Collection("users").Document("frank");
Dictionary<string, object> initialData = new Dictionary<string, object>
Dictionary<string, object> favorites = new Dictionary<string, object>
frankDocRef.SetAsync(initialData).ContinueWithOnMainThread(task => {

Dictionary<string, object> updates = new Dictionary<string, object>
"Updated the age and favorite color fields of the Frank document in "
+ "the users collection.");

DocumentReference frankDocRef = db.Collection("users").Document("frank");
Dictionary<string, object> initialData = new Dictionary<string, object>
Dictionary<string, object> favorites = new Dictionary<string, object>
await frankDocRef.SetAsync(initialData);

Dictionary<string, object> updates = new Dictionary<string, object>

# Create an initial document to update
frank_ref = firestore.doc "#{collection_path}/frank"
frank_ref.set(
name:      "Frank",
favorites: {
food:    "Pizza",
color:   "Blue",
subject: "Recess"
import { doc, updateDoc, arrayUnion, arrayRemove } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

"regions": FieldValue.arrayUnion(["greater_virginia"])
])

"regions": FieldValue.arrayRemove(["east_coast"])
])ViewController.swift [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/swift/firestore-smoketest/ViewController.swift#L364-L374]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *washingtonRef =
[[self.db collectionWithPath:@"cities"] documentWithPath:@"DC"];

val washingtonRef = db.collection("cities").document("DC")

DocumentReference washingtonRef = db.collection("cities").document("DC");

final washingtonRef = db.collection("cities").doc("DC");

DocumentReference washingtonRef = db.collection("cities").document("DC");

ApiFuture<WriteResult> arrayUnion =
washingtonRef.update("regions", FieldValue.arrayUnion("greater_virginia"));
System.out.println("Update time : " + arrayUnion.get());

ApiFuture<WriteResult> arrayRm =
washingtonRef.update("regions", FieldValue.arrayRemove("east_coast"));
System.out.println("Update time : " + arrayRm.get());ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L265-L275]

Python

city_ref = db.collection("cities").document("DC")

# Atomically add a new region to the 'regions' array field.
city_ref.update({"regions": firestore.ArrayUnion(["greater_virginia"])})

# // Atomically remove a region from the 'regions' array field.
city_ref.update({"regions": firestore.ArrayRemove(["east_coast"])})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L332-L338]

Python

city_ref = db.collection("cities").document("DC")

# Atomically add a new region to the 'regions' array field.
await city_ref.update({"regions": firestore.ArrayUnion(["greater_virginia"])})

# // Atomically remove a region from the 'regions' array field.
await city_ref.update({"regions": firestore.ArrayRemove(["east_coast"])})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L326-L332]

C++

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$cityRef = $db->collection('samples/php/cities')->document('DC');

DocumentReference washingtonRef = db.Collection("cities").Document("DC");

import { doc, updateDoc, increment } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

"population": FieldValue.increment(Int64(50))
])ViewController.swift [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/swift/firestore-smoketest/ViewController.swift#L380-L386]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *washingtonRef =
[[self.db collectionWithPath:@"cities"] documentWithPath:@"DC"];

val washingtonRef = db.collection("cities").document("DC")

DocumentReference washingtonRef = db.collection("cities").document("DC");

);firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L286-L291]

Java

DocumentReference washingtonRef = db.collection("cities").document("DC");

washingtonRef.update("population", FieldValue.increment(50));ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L430-L434]

Python

washington_ref = db.collection("cities").document("DC")

washington_ref.update({"population": firestore.Increment(50)})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L957-L959]

Python

washington_ref = db.collection("cities").document("DC")

await washington_ref.update({"population": firestore.Increment(50)})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L789-L791]

C++

import (
"context"
"fmt"

"cloud.google.com/go/firestore"

dc := client.Collection("cities").Doc(city)
_, err = dc.Update(ctx, []firestore.Update{

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$cityRef = $db->collection('samples/php/cities')->document('DC');

DocumentReference washingtonRef = db.Collection("cities").Document("DC");

city_ref = firestore.doc "#{collection_path}/DC"
city_ref.update({ population: firestore.field_increment(50) })add_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/add_data.rb#L239-L240]

증분 작업은 카운터를 구현하는 데 유용하지만, 단일 문서를 너무 빨리 업데이트하면 경합 또는 오류가 발생 [https://firebase.google.com/docs/firestore/best-practices?hl=ko#updates_to_a_single_document]할 수 있습니다. 카운터를 매우 높은 속도로 업데이트해야 하는 경우 분산 카운터 [https://firebase.google.com/docs/firestore/solutions/counters?hl=ko] 페이지를 참조하세요.

의견 보내기