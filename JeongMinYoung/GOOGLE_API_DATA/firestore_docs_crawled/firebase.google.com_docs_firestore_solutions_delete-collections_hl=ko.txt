Source URL: https://firebase.google.com/docs/firestore/solutions/delete-collections?hl=ko
Title: 호출 가능한 Cloud 함수를 사용한 데이터 삭제

의견 보내기

호출 가능한 Cloud 함수를 사용한 데이터 삭제

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지에서는 호출 가능한 Cloud 함수를 사용하여 데이터를 삭제하는 방법을 설명합니다. 이 함수를 배포하면 모바일 앱 또는 웹사이트에서 함수를 직접 호출하여 문서 및 컬렉션을 재귀적으로 삭제할 수 있습니다. 예를 들어 이 솔루션을 사용하여 일부 사용자에게 전체 컬렉션을 삭제할 수 있는 권한을 부여할 수 있습니다.

컬렉션을 삭제하는 다른 방법은 데이터 삭제 [https://firebase.google.com/docs/firestore/manage-data/delete-data?hl=ko#collections]를 참조하세요.

솔루션: 호출 가능한 Cloud 함수를 사용한 데이터 삭제

다음과 같은 이유로 리소스가 제한된 모바일 앱에서 전체 컬렉션 삭제를 구현하는 것은 어려울 수 있습니다.

컬렉션을 원자적으로 삭제하는 작업은 없습니다.
문서를 삭제해도 하위 컬렉션의 문서는 삭제되지 않습니다.
문서에 동적 하위 컬렉션이 있는 경우 지정된 경로에서 삭제할 데이터를 파악하기가 어려울 수 있습니다.
500개를 초과하는 문서가 있는 컬렉션을 삭제하려면 일괄 쓰기 작업을 여러 번 수행하거나 하나씩 삭제하는 작업을 수백 번 수행해야 합니다.
많은 앱에서 최종 사용자에게 전체 컬렉션을 삭제할 권한을 부여하는 것은 적절하지 않습니다.

다행히 호출 가능한 Cloud 함수 [https://firebase.google.com/docs/functions/callable?hl=ko]를 작성하여 전체 컬렉션 또는 컬렉션 트리를 안전하고 효율적으로 삭제할 수 있습니다. 아래의 Cloud 함수는 호출 가능한 함수 [https://firebase.google.com/docs/functions/callable?hl=ko]를 구현합니다. 즉, 로컬 함수와 마찬가지로 모바일 앱이나 웹사이트에서 직접 호출할 수 있습니다.

함수를 배포하고 데모를 사용해 보려면 샘플 코드 [https://github.com/firebase/snippets-node/tree/master/firestore/solution-deletes]를 참조하세요.

Cloud 함수

아래 Cloud 함수는 컬렉션과 해당 컬렉션의 모든 하위 항목을 삭제합니다.

Cloud 함수에 자체 재귀 삭제 로직을 구현하는 대신 Firebase 명령줄 인터페이스(CLI)에서 firestore:delete 명령어를 활용할 수 있습니다. firebase-tools 패키지를 사용하여 Firebase CLI의 모든 함수를 Node.js 애플리케이션으로 가져올 수 있습니다.
참고: Firebase CLI를 사용하여 데이터를 삭제하면 읽기 및 삭제 비용이 발생합니다. 자세한 내용은 가격 책정 [https://firebase.google.com/docs/firestore/pricing?hl=ko]을 참조하세요.
Firebase CLI는 Cloud Firestore REST API를 사용하여 지정된 경로에 있는 모든 문서를 찾아 개별적으로 삭제합니다.
이를 구현하기 위해 앱의 특정 데이터 계층 구조를 알아야 할 필요는 없으며, 더 이상 상위 항목이 존재하지 않는 '분리된' 문서도 찾아서 삭제합니다.

Node.js/**
* Initiate a recursive delete of documents at a given path.
* The calling user must be authenticated and have the custom "admin" attribute
* set to true on the auth token.
* This delete is NOT an atomic operation and it's possible
* that it may fail after only deleting some documents.
* @param {string} data.path the document or collection path to delete.
*/
exports.recursiveDelete = functions
.runWith({
timeoutSeconds: 540,
memory: '2GB'
'permission-denied',
'Must be an administrative user to initiate delete.'

.delete(path, {
project: process.env.GCLOUD_PROJECT,
recursive: true,
force: true,
token: functions.config().fb.token

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

/**
* Call the 'recursiveDelete' callable function with a path to initiate
* a server-side delete.
*/
fun deleteAtPath(path: String) {
val deleteFn = Firebase.functions.getHttpsCallable("recursiveDelete")
deleteFn.call(hashMapOf("path" to path))
/**
* Call the 'recursiveDelete' callable function with a path to initiate
* a server-side delete.
*/
public void deleteAtPath(String path) {
Map<String, Object> data = new HashMap<>();
data.put("path", path);

HttpsCallableReference deleteFn =
FirebaseFunctions.getInstance().getHttpsCallable("recursiveDelete");
deleteFn.call(data)
.addOnSuccessListener(new OnSuccessListener<HttpsCallableResult>() {
@Override
public void onSuccess(HttpsCallableResult httpsCallableResult) {