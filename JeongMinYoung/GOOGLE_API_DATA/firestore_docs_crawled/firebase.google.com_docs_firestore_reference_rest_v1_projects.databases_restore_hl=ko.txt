Source URL: https://firebase.google.com/docs/firestore/reference/rest/v1/projects.databases/restore?hl=ko
Title: Method: projects.databases.restore

Send feedback

Method: projects.databases.restore

Stay organized with collections

Save and categorize content based on your preferences.

Creates a new database by restoring from an existing backup.The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase [https://firebase.google.com/docs/firestore/reference/rest/v1/projects.databases/create#google.firestore.admin.v1.FirestoreAdmin.CreateDatabase] except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup.The long-running operation [https://firebase.google.com/docs/firestore/reference/rest/Shared.Types/Operation] can be used to track the progress of the restore, with the Operation's metadata [https://firebase.google.com/docs/firestore/reference/rest/Shared.Types/Operation#FIELDS.metadata] field type being the RestoreDatabaseMetadata [https://firebase.google.com/docs/firestore/reference/rest/Shared.Types/RestoreDatabaseMetadata]. The response [https://firebase.google.com/docs/firestore/reference/rest/Shared.Types/Operation#FIELDS.response] type is the Database [https://firebase.google.com/docs/firestore/reference/rest/v1/projects.databases#Database] if the restore was successful. The new database is not readable or writeable until the LRO has completed.

HTTP request
POST https://firestore.googleapis.com/v1/{parent=projects/*}/databases:restoreThe URL uses gRPC Transcoding [https://google.aip.dev/127] syntax.

Path parameters
| Parameters |
| --- |
| parent | string Required. The project to restore the database in. Format is projects/{projectId}. |

Request body
The request body contains data with the following structure:

| JSON representation |
| --- |
| {   "databaseId": string,   "backup": string,   "encryptionConfig": {     object (EncryptionConfig)   },   "tags": {     string: string,     ...   } } |

| Fields |
| --- |
| databaseId | string Required. The ID to use for the database, which will become the final component of the database's resource name. This database ID must not be associated with an existing database. This value should be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database ID is also valid. |
| backup | string Required. Backup to restore from. Must be from the same project as the parent. The restored database will be created in the same location as the source backup. Format is: projects/{projectId}/locations/{location}/backups/{backup} |
| encryptionConfig | object (EncryptionConfig) Optional. Encryption configuration for the restored database. If this field is not specified, the restored database will use the same encryption configuration as the backup, namely useSourceEncryption. |
| tags | map (key: string, value: string) Optional. Immutable. Tags to be bound to the restored database. The tags should be provided in the format of tagKeys/{tag_key_id} -> tagValues/{tag_value_id}. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. |

Response body
If successful, the response body contains an instance of Operation [https://firebase.google.com/docs/firestore/reference/rest/Shared.Types/Operation].

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/datastore
https://www.googleapis.com/auth/cloud-platform
For more information, see the OAuth 2.0 Overview [https://developers.google.com/identity/protocols/OAuth2].

Send feedback