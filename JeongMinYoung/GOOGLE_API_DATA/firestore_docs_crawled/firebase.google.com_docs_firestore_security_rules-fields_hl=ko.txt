Source URL: https://firebase.google.com/docs/firestore/security/rules-fields?hl=ko
Title: 특정 필드에 대한 액세스 제어

의견 보내기

특정 필드에 대한 액세스 제어

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지에서는 보안 규칙 구조화 [https://firebase.google.com/docs/firestore/security/rules-structure?hl=ko]와 보안 규칙 조건 작성 [https://firebase.google.com/docs/firestore/security/rules-conditions?hl=ko]의 개념을 바탕으로 Cloud Firestore Security Rules을 사용하여 클라이언트가 문서의 일부 필드에서만 작업을 수행하도록 하는 규칙을 만드는 방법을 설명합니다.

참고: 서버 클라이언트 라이브러리는 모든 Cloud Firestore Security Rules를 우회하고 대신 Google 애플리케이션 기본 사용자 인증 정보 [https://cloud.google.com/docs/authentication/production?hl=ko]를 통해 인증합니다.
서버 클라이언트 라이브러리, REST 또는 RPC API를 사용하는 경우 Cloud Firestore용 Identity and Access Management(IAM) [https://cloud.google.com/firestore/docs/security/iam?hl=ko]를 설정해야 합니다.

문서 수준에서가 아닌 필드 수준에서 문서 변경사항을 제어하려는 경우가 있을 수 있습니다.

예를 들어 클라이언트가 문서를 만들거나 변경하도록 허용하지만 문서의 특정 필드를 수정하지 못하게 할 수 있습니다. 또는 항상 클라이언트가 만드는 모든 문서에 특정 필드 세트가 포함되도록 적용할 수 있습니다. 이 가이드에서는 Cloud Firestore Security Rules을 사용하여 이러한 작업 중 일부를 수행하는 방법을 설명합니다.

특정 필드에만 읽기 액세스 허용

Cloud Firestore의 읽기는 문서 수준에서 수행됩니다. 전체 문서를 검색하거나 아무것도 검색하지 못합니다. 부분 문서를 검색할 수 있는 방법은 없습니다. 보안 규칙만 사용해서는 사용자가 문서 내 특정 필드를 읽지 못하게 할 수 없습니다.

문서 내 특정 필드가 일부 사용자에게 표시되지 않게 하려면 별도의 문서에 이러한 필드를 배치하는 것이 가장 좋습니다. 예를 들어 다음과 같이 private 하위 컬렉션에 문서를 만드는 것이 좋습니다.

/employees/{emp_id}
name: "Alice Hamilton",
department: 461,
start_date: <timestamp>

/employees/{emp_id}/private/finances
salary: 80000,
bonus_mult: 1.25,
perf_review: 4.2

그런 다음 두 컬렉션에 서로 다른 수준의 액세스 권한이 있는 보안 규칙을 추가할 수 있습니다. 다음 예시에서는 커스텀 인증 클레임 [https://firebase.google.com/docs/auth/admin/custom-claims?hl=ko]을 사용하여 커스텀 인증 클레임 role이 Finance인 사용자만 직원의 금융 정보를 볼 수 있게 합니다.
service cloud.firestore {
match /databases/{database}/documents {
Cloud Firestore에는 스키마가 없습니다. 즉, 문서에 포함된 필드의 데이터베이스 수준에서는 제한이 없습니다. 이러한 유연성으로 인해 개발이 더욱 쉬워지지만 클라이언트가 특정 필드를 포함하거나 다른 필드를 포함하지 않는 문서만 만들 수 있도록 해야 하는 경우가 있습니다.

request.resource.data [https://firebase.google.com/docs/reference/rules/rules.firestore.Resource?hl=ko#data] 객체의 keys 메서드를 검사하여 이러한 규칙을 만들 수 있습니다. 이 목록은 클라이언트가 이 새 문서에서 쓰기를 시도하는 모든 필드의 목록입니다. 이 필드 세트를 hasOnly() [https://firebase.google.com/docs/reference/rules/rules.List?hl=ko#hasOnly] 또는 hasAny() [https://firebase.google.com/docs/reference/rules/rules.List?hl=ko#hasAny]와 같은 함수와 결합하면 사용자가 Cloud Firestore에 추가할 수 있는 문서 유형을 제한하는 논리를 추가할 수 있습니다.

새 문서에 특정 필드 포함

restaurant 컬렉션에서 만든 모든 문서에 name, location, city 필드가 최소한 한 개 이상 있는지 확인하려고 한다고 가정해 보겠습니다. 새 문서의 키 목록에서 hasAll() [https://firebase.google.com/docs/reference/rules/rules.List?hl=ko#hasAll]을 호출하면 됩니다.
service cloud.firestore {
match /databases/{database}/documents {
request.resource.data.keys().hasOnly(allAllowedFields);
Cloud Firestore에 스키마가 없기 때문에 또한 특정 필드에 저장할 수 있는 데이터 유형의 데이터베이스 수준에는 적용할 수 있는 규칙이 없습니다. 하지만 is 연산자를 사용하면 보안 규칙에 적용할 수 있습니다.

예를 들어 다음 보안 규칙은 리뷰의 score 필드는 정수, headline, content, author_name 필드는 문자열, review_date는 타임스탬프로 적용합니다.
service cloud.firestore {
match /databases/{database}/documents {
match /restaurant/{restId} {
request.resource.data.content is string &&
request.resource.data.author_name is string &&
request.resource.data.review_date is timestamp

list 및 map 데이터 유형은 제네릭이나 유형 인수를 지원하지 않습니다.
즉, 보안 규칙을 사용하여 특정 필드가 목록이나 지도를 포함하도록 적용할 수 있지만 필드가 모든 정수나 모든 문자열의 목록을 포함하도록 적용할 수는 없습니다.

마찬가지로 보안 규칙을 사용하여 목록 또는 지도의 특정 항목에 유형 값을 적용할 수 있습니다(각각 대괄호 표기법이나 키 이름 사용). 하지만 지도나 목록에 있는 모든 구성원의 데이터 유형을 한 번에 적용할 수는 없습니다.

예를 들어 다음 규칙에서는 문서의 tags 필드에 목록이 포함되어 있고 첫 번째 항목이 문자열인지 확인합니다. 또한 product 필드에 문자열인 제품 이름과 정수인 수량이 차례대로 포함된 지도가 포함되어 있는지 확인합니다.
service cloud.firestore {
match /databases/{database}/documents {
match /orders/{orderId} {
allow create: if request.resource.data.tags is list &&
request.resource.data.tags[0] is string &&
request.resource.data.product is map &&
request.resource.data.product.name is string &&
request.resource.data.product.quantity is int
docData.headline is string &&
docData.content is string &&
docData.author_name is string &&
docData.review_date is timestamp;
docData.headline is string &&
docData.content is string &&
docData.author_name is string &&
docData.review_date is timestamp &&
docData.get('photo_url', '') is string &&
docData.get('tags', []) is list;
Cloud Firestore Security Rules의 마지막 사항은 클라이언트가 문서를 변경하도록 허용하거나 전체 편집을 거부한다는 것입니다.
같은 작업에서 문서의 일부 필드에 쓰기를 수락하는 동시에 다른 편집을 거부하는 보안 규칙을 만들 수 없습니다.

의견 보내기