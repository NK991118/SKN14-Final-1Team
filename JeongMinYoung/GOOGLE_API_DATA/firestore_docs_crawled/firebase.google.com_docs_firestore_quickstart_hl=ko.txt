Source URL: https://firebase.google.com/docs/firestore/quickstart?hl=ko
Title: Cloud Firestore 시작하기

의견 보내기

Cloud Firestore 시작하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 빠른 시작에서는 Cloud Firestore를 설정하고 데이터를 추가한 후 Firebase Console에서 방금 추가한 데이터를 보는 방법을 보여줍니다.

Cloud Firestore 데이터베이스 만들기

Firebase 프로젝트를 아직 만들지 않았다면 Firebase Console [https://console.firebase.google.com/?hl=ko]에서 프로젝트 추가를 클릭한 후 화면에 표시된 안내를 따라 Firebase 프로젝트를 만들거나 기존 Google Cloud 프로젝트에 Firebase 서비스를 추가합니다.
Firebase Console에서 프로젝트를 엽니다. 왼쪽 패널에서 빌드를 펼친 다음 Firestore 데이터베이스 [https://console.firebase.google.com/project/_/firestore/?hl=ko]를 선택합니다.
데이터베이스 만들기를 클릭합니다.
데이터베이스의 위치 [https://firebase.google.com/docs/firestore/locations?hl=ko#types]를 선택합니다.

위치를 선택할 수 없다면 프로젝트의 '기본 Google Cloud 리소스의 위치' [https://firebase.google.com/docs/firestore/locations?hl=ko#default-cloud-location]가 이미 설정된 것입니다. 일부 프로젝트 리소스(예: 기본 Cloud Firestore 인스턴스)는 공통 위치 종속 항목을 공유하며, 위치는 프로젝트 생성 중이나 이 위치 종속 항목을 공유하는 다른 서비스를 설정할 때 설정할 수 있습니다.
Cloud Firestore Security Rules의 시작 모드를 선택합니다.

테스트 모드
모바일 및 웹 클라이언트 라이브러리를 시작할 때 유용하지만 모든 사용자가 데이터를 읽고 덮어쓸 수 있습니다. 테스트 완료 후 데이터 보안 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#secure_your_data] 섹션을 검토해야 합니다.
웹, Apple 플랫폼 또는 Android SDK를 시작하려면 테스트 모드를 선택하세요.
잠금 모드
모바일 및 웹 클라이언트의 모든 읽기 및 쓰기를 거부합니다.
인증된 애플리케이션 서버(C#, Go, 자바, Node.js, PHP, Python, Ruby)에서는 사용자의 데이터베이스에 계속 액세스할 수 있습니다.
C#, Go, 자바, Node.js, PHP, Python 또는 Ruby 서버 클라이언트 라이브러리를 시작하려면 잠금 모드를 선택하세요.

Cloud Firestore Security Rules의 초기 집합이 기본 Cloud Firestore 데이터베이스에 적용됩니다. 프로젝트에 데이터베이스를 여러 개 만드는 경우 각 데이터베이스에 Cloud Firestore Security Rules를 배포할 수 있습니다.
만들기를 클릭합니다.

Cloud Firestore 및 App Engine:
동일한 프로젝트에서 Cloud Firestore와 Datastore를 모두 사용할 수는 없습니다. 이렇게 하면 App Engine을 사용하는 앱이 영향을 받을 수 있습니다. 다른 프로젝트에서 Cloud Firestore를 사용해 보세요.

Cloud Firestore를 사용 설정하면 Cloud API Manager [https://console.cloud.google.com/projectselector/apis/api/firestore.googleapis.com/overview?hl=ko]의 API도 사용 설정됩니다.

개발 환경 설정

필요한 종속 항목 및 클라이언트 라이브러리를 앱에 추가하세요.

Web

안내에 따라 Firebase를 웹 앱에 추가 [https://firebase.google.com/docs/web/setup?sdk_version=v9&hl=ko]합니다.

Cloud Firestore SDK는 npm 패키지로도 제공됩니다.
npm install firebase@12.1.0 --save
Firebase와 Cloud Firestore를 모두 가져와야 합니다.
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

간소화된 Firestore 라이브러리를 찾고 있고 간단한 REST/CRUD 기능만 필요하신가요? npm을 통해서만 사용할 수 있는 Firestore Lite SDK [https://firebase.google.com/docs/firestore/solutions/firestore-lite?hl=ko]를 사용해 보세요.

Web

안내에 따라 Firebase를 웹 앱에 추가 [https://firebase.google.com/docs/web/setup?hl=ko]합니다.

Firebase와 Cloud Firestore 라이브러리를 앱에 추가합니다.<script src="https://www.gstatic.com/firebasejs/12.1.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/12.1.0/firebase-firestore-compat.js"></script>
Cloud Firestore SDK는 npm 패키지로도 제공됩니다.npm install firebase@12.1.0 --save
Firebase와 Cloud Firestore를 모두 수동으로 요청해야 합니다.
import firebase from "firebase/compat/app";

iOS+

안내에 따라 Firebase를 Apple 앱에 추가 [https://firebase.google.com/docs/ios/setup?hl=ko]합니다.

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Swift Packages(Swift 패키지) > Add Package Dependency(패키지 종속 항목 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firestore 라이브러리를 선택합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

Android

안내에 따라 Firebase를 Android 앱에 추가 [https://firebase.google.com/docs/android/setup?hl=ko]합니다.

Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하여 모듈(앱 수준) Gradle 파일(일반적으로 app/build.gradle.kts 또는 app/build.gradle)에서 Android용 Cloud Firestore 라이브러리의 종속 항목을 선언합니다.dependencies {
BoM을 사용하지 않고 Firebase 라이브러리 종속 항목을 선언합니다.

Firebase BoM을 사용하지 않도록 선택한 경우에는 종속 항목 줄에 각 Firebase 라이브러리 버전을 지정해야 합니다.
앱에서 여러 Firebase 라이브러리를 사용하는 경우 모든 버전이 호환되도록 BoM을 사용하여 라이브러리 버전을 관리하는 것이 좋습니다.

dependencies {

아직 구성하지 않았다면 Flutter 앱에서 Firebase를 구성하고 초기화 [https://firebase.google.com/docs/flutter/setup?hl=ko]합니다.
Flutter 프로젝트 루트에서 다음 명령어를 실행하여 플러그인을 설치합니다.
flutter pub add cloud_firestore
완료되면 Flutter 애플리케이션을 다시 빌드합니다.
flutter run
선택사항: 사전 컴파일된 프레임워크를 포함하여 iOS 및 macOS 빌드 시간을 개선합니다.
현재 iOS용 Firestore SDK는 Xcode에서 빌드하는 데 5분 이상 걸릴 수 있는 코드를 사용합니다. 빌드 시간을 크게 줄이려면 Podfile의 target 'Runner' do 블록에 다음 줄을 추가하여 사전 컴파일된 버전을 사용하면 됩니다.
target 'Runner' do
use_frameworks!
use_modular_headers!

pod 'FirebaseFirestore',
:git => 'https://github.com/invertase/firestore-ios-sdk-frameworks.git',
:tag => 'IOS_SDK_VERSION'

flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
target 'RunnerTests' do
inherit! :search_paths
end
end
IOS_SDK_VERSION을 firebase_core의 firebase_sdk_version.rb [https://github.com/firebase/flutterfire/blob/master/packages/firebase_core/firebase_core/ios/firebase_sdk_version.rb#L3] 파일에 지정된 Firebase iOS SDK 버전으로 바꿉니다. firebase_core의 최신 버전을 사용하지 않는 경우 로컬 Pub 패키지 캐시(일반적으로 ~/.pub-cache)에서 이 파일을 찾습니다.
또한 CocoaPods를 1.9.1 이상으로 업그레이드했는지 확인합니다. gem install cocoapods
자세한 내용은 GitHub의 문제 [https://github.com/FirebaseExtended/flutterfire/issues/2751]를 참조하세요.

Java

Firebase Admin SDK를 앱에 추가합니다.
Gradle 사용:compile 'com.google.firebase:firebase-admin:1.32.0'

Maven 사용:<dependency>
<groupId>com.google.firebase</groupId>
<artifactId>firebase-admin</artifactId>
<version>1.32.0</version>
</dependency>

아래 안내에 따라 사용자 환경에서 적절한 사용자 인증 정보를 사용해 Cloud Firestore를 초기화합니다.

Python

Firebase Admin SDK를 Python 앱에 추가합니다.pip install --upgrade firebase-admin

아래 안내에 따라 사용자 환경에서 적절한 사용자 인증 정보를 사용해 Cloud Firestore를 초기화합니다.

C++

안내에 따라 Firebase를 C++ 프로젝트에 추가 [https://firebase.google.com/docs/cpp/setup?hl=ko]합니다.
Android용 C++ 인터페이스

Gradle 종속 항목 모듈(앱 수준) Gradle 파일(일반적으로 app/build.gradle)에 다음을 추가합니다.

android.defaultConfig.externalNativeBuild.cmake {
arguments "-DFIREBASE_CPP_SDK_DIR=$gradle.firebase_cpp_sdk_dir"
firestore
# Replace the target name below with the actual name of your target,
# for example, "native-lib".
target_link_libraries(${YOUR_TARGET_NAME_HERE} "${firebase_libs}")

데스크톱 통합을 설정하려면 C++ 프로젝트에 Firebase 추가 [https://firebase.google.com/docs/cpp/setup?hl=ko#desktop-workflow]를 참조하세요.

Unity

안내에 따라 Firebase를 Unity 프로젝트에 추가 [https://firebase.google.com/docs/unity/setup?hl=ko]합니다.
Unity 인터페이스를 사용하여 Android 빌드를 축소하도록 프로젝트를 구성합니다.

Error while merging dex archives 메시지를 방지하려면 빌드를 축소해야 합니다.

이 옵션은 Player Settings(플레이어 설정) > Android > Publishing Settings(게시 설정) > Minify(축소)에서 찾을 수 있습니다.

옵션은 Unity 버전에 따라 다를 수 있으므로 공식 Unity 문서 [https://docs.unity3d.com/Manual/class-PlayerSettingsAndroid.html#minify] 및 Firebase Unity 빌드 디버그 가이드 [https://firebase.google.com/docs/unity/build-debug-guide?hl=ko#single_dex_issues_and_minification_mandatory_if_using_cloud_firestore]를 참조하세요.

축소를 사용 설정한 후에도 참조된 메서드의 개수가 여전히 한도를 초과하는 경우 또 다른 옵션은 다음 파일에서 multidex를 사용 설정하는 것입니다.

Player Settings(플레이어 설정)에서 Custom Gradle Template(커스텀 Gradle 템플릿)이 사용 설정된 경우 mainTemplate.gradle

또는 Android 스튜디오를 사용하여 내보낸 프로젝트를 빌드하는 경우 모듈 수준 build.gradle 파일

Node.js

Firebase Admin SDK를 앱에 추가합니다.npm install firebase-admin --save

아래 안내에 따라 사용자 환경에서 적절한 사용자 인증 정보를 사용해 Cloud Firestore를 초기화합니다.

Go

Firebase Admin SDK를 Go 앱에 추가합니다.go get firebase.google.com/go

아래 안내에 따라 사용자 환경에서 적절한 사용자 인증 정보를 사용해 Cloud Firestore를 초기화합니다.

PHP

Cloud Firestore 서버 클라이언트 라이브러리(Java, Node.js, Python, Go, PHP, C#, Ruby)는 인증을 위해 Google 애플리케이션 기본 사용자 인증 정보 [https://cloud.google.com/docs/authentication/production?hl=ko]를 사용합니다.

개발 환경에서 인증하려면 GOOGLE_APPLICATION_CREDENTIALS 환경 변수가 JSON 서비스 계정 키 파일을 가리키도록 설정합니다. API 콘솔 사용자 인증 정보 페이지 [https://console.cloud.google.com/projectselector/apis/credentials?hl=ko]에서 키 파일을 만들 수 있습니다.
export GOOGLE_APPLICATION_CREDENTIALS="path/to/your/keyfile.json"

프로덕션 환경에서는 Cloud Firestore에 사용하는 것과 동일한 프로젝트를 사용하여 App Engine이나 Compute Engine에서 애플리케이션을 실행하는 경우 인증할 필요가 없습니다. 그 외의 경우는 서비스 계정을 설정 [https://cloud.google.com/docs/authentication/getting-started?hl=ko]합니다.

클라이언트 라이브러리를 사용하는 데 필요한
PHP용 gRPC 확장 프로그램 [https://cloud.google.com/php/grpc?hl=ko]을 설치하고 사용 설정합니다.

Cloud Firestore PHP 라이브러리를 앱에 추가합니다.composer require google/cloud-firestore

C#

Cloud Firestore 서버 클라이언트 라이브러리(Java, Node.js, Python, Go, PHP, C#, Ruby)는 인증을 위해 Google 애플리케이션 기본 사용자 인증 정보 [https://cloud.google.com/docs/authentication/production?hl=ko]를 사용합니다.

개발 환경에서 인증하려면 GOOGLE_APPLICATION_CREDENTIALS 환경 변수가 JSON 서비스 계정 키 파일을 가리키도록 설정합니다. API 콘솔 사용자 인증 정보 페이지 [https://console.cloud.google.com/projectselector/apis/credentials?hl=ko]에서 키 파일을 만들 수 있습니다.
export GOOGLE_APPLICATION_CREDENTIALS="path/to/your/keyfile.json"

프로덕션 환경에서는 Cloud Firestore에 사용하는 것과 동일한 프로젝트를 사용하여 App Engine이나 Compute Engine에서 애플리케이션을 실행하는 경우 인증할 필요가 없습니다. 그 외의 경우는 서비스 계정을 설정 [https://cloud.google.com/docs/authentication/getting-started?hl=ko]합니다.

Cloud Firestore C# 라이브러리를 .csproj 파일의 앱에 추가합니다.<ItemGroup>
<PackageReference Include="Google.Cloud.Firestore" Version="1.1.0-beta01" />
</ItemGroup>

Program.cs 파일에 다음을 추가합니다.using Google.Cloud.Firestore;

Ruby

Cloud Firestore 서버 클라이언트 라이브러리(Java, Node.js, Python, Go, PHP, C#, Ruby)는 인증을 위해 Google 애플리케이션 기본 사용자 인증 정보 [https://cloud.google.com/docs/authentication/production?hl=ko]를 사용합니다.

개발 환경에서 인증하려면 GOOGLE_APPLICATION_CREDENTIALS 환경 변수가 JSON 서비스 계정 키 파일을 가리키도록 설정합니다. API 콘솔 사용자 인증 정보 페이지 [https://console.cloud.google.com/projectselector/apis/credentials?hl=ko]에서 키 파일을 만들 수 있습니다.
export GOOGLE_APPLICATION_CREDENTIALS="path/to/your/keyfile.json"

프로덕션 환경에서는 Cloud Firestore에 사용하는 것과 동일한 프로젝트를 사용하여 App Engine이나 Compute Engine에서 애플리케이션을 실행하는 경우 인증할 필요가 없습니다. 그 외의 경우는 서비스 계정을 설정 [https://cloud.google.com/docs/authentication/getting-started?hl=ko]합니다.

Cloud Firestore Ruby 라이브러리를 Gemfile의 앱에 추가합니다.gem "google-cloud-firestore"

다음을 사용하여 Gemfile의 종속 항목을 설치합니다.bundle install

(선택사항) Firebase Local Emulator Suite으로 프로토타입 제작 및 테스트

모바일 개발자를 대상으로 앱이 Cloud Firestore에서 데이터를 읽고 쓰는 방법에 대해 설명하기 전에 Cloud Cloud Firestore 기능을 프로토타입으로 제작하고 테스트하는 데 사용할 수 있는 도구 모음인 Firebase Local Emulator Suite를 소개하려 합니다. 다양한 데이터 모델을 사용해 보거나, 보안 규칙을 최적화하거나, 백엔드와 상호작용할 수 있는 가장 비용 효율적인 방법을 찾는 경우 실시간 서비스를 배포하지 않고 로컬에서 작업할 수 있다는 것은 획기적인 아이디어입니다.

Cloud Firestore 에뮬레이터는 Local Emulator Suite의 일부이며 앱에서 에뮬레이션된 데이터베이스 콘텐츠와 구성은 물론 필요에 따라 에뮬레이션된 프로젝트 리소스(함수, 기타 데이터베이스, 보안 규칙)와 상호작용할 수 있게 해줍니다.

Cloud Firestore 에뮬레이터를 사용하려면 다음 몇 단계만 거치면 됩니다.

에뮬레이터에 연결하려면 앱의 테스트 구성에 코드 줄을 추가합니다.
로컬 프로젝트 디렉터리의 루트에서 firebase emulators:start를 실행합니다.
평소와 같이 Cloud Firestore 플랫폼 SDK를 사용하여 앱의 프로토타입 코드에서 호출합니다.

자세한 내용은 Cloud Firestore 및 Cloud Functions 관련 둘러보기 [https://firebase.google.com/docs/emulator-suite/connect_and_prototype?database=Firestore&hl=ko]를 참조하세요. Local Emulator Suite 소개 [https://firebase.google.com/docs/emulator-suite?hl=ko]도 살펴보세요.

Cloud Firestore 초기화

Cloud Firestore의 인스턴스를 초기화합니다.

Web

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

import firebase from "firebase/app";
import "firebase/firestore";

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

import FirebaseCore
import FirebaseFirestore
FirebaseApp.configure()

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

@import FirebaseCore;
@import FirebaseFirestore;

FIRFirestore *defaultFirestore = [FIRFirestore firestore];AppDelegate.m [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/objc/firestore-smoketest-objc/AppDelegate.m#L32-L32]

Kotlin
db = FirebaseFirestore.instance;

Java

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;

import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;

GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();
FirebaseOptions options = new FirebaseOptions.Builder()
.setCredentials(credentials)
.setProjectId(projectId)
.build();
FirebaseApp.initializeApp(options);

Firestore db = FirestoreClient.getFirestore();

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;

import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;

InputStream serviceAccount = new FileInputStream("path/to/serviceAccount.json");
GoogleCredentials credentials = GoogleCredentials.fromStream(serviceAccount);
FirebaseOptions options = new FirebaseOptions.Builder()
.setCredentials(credentials)
.build();
FirebaseApp.initializeApp(options);

Firestore db = FirestoreClient.getFirestore();

Python

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import firebase_admin
from firebase_admin import firestore

# Application Default credentials are automatically created.
app = firebase_admin.initialize_app()
db = firestore.client()firestore.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore.py#L20-L25]

기존 애플리케이션 기본 사용자 인증 정보를 사용하여 SDK를 초기화할 수도 있습니다.
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# Use the application default credentials.
cred = credentials.ApplicationDefault()

firebase_admin.initialize_app(cred)
db = firestore.client()firestore.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore.py#L30-L38]

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# Use a service account.
cred = credentials.Certificate('path/to/serviceAccount.json')

app = firebase_admin.initialize_app(cred)

db = firestore.client()firestore.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore.py#L43-L52]

Python

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import firebase_admin
from firebase_admin import firestore_async

# Application Default credentials are automatically created.
app = firebase_admin.initialize_app()
db = firestore_async.client()firestore_async.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore_async.py#L22-L27]

기존 애플리케이션 기본 사용자 인증 정보를 사용하여 SDK를 초기화할 수도 있습니다.
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore_async

# Use the application default credentials.
cred = credentials.ApplicationDefault()

firebase_admin.initialize_app(cred)
db = firestore_async.client()firestore_async.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore_async.py#L32-L40]

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore_async

# Use a service account.
cred = credentials.Certificate('path/to/serviceAccount.json')

app = firebase_admin.initialize_app(cred)

db = firestore_async.client()firestore_async.py [https://github.com/firebase/firebase-admin-python/blob/6555a84baaa27a4cfb0d76d2ce6c09c899573b3c/snippets/firestore/firestore_async.py#L45-L54]

C++

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Cloud Functions에서 초기화const { initializeApp, applicationDefault, cert } = require('firebase-admin/app');
const { getFirestore, Timestamp, FieldValue, Filter } = require('firebase-admin/firestore');
initializeApp();

Google Cloud에서 초기화const { initializeApp, applicationDefault, cert } = require('firebase-admin/app');
const { getFirestore, Timestamp, FieldValue, Filter } = require('firebase-admin/firestore');
initializeApp({
credential: applicationDefault()
const { getFirestore, Timestamp, FieldValue, Filter } = require('firebase-admin/firestore');

Cloud Firestore SDK는 환경에 따라 다양한 방식으로 초기화됩니다. 가장 일반적인 방법은 아래와 같습니다. 전체 참조를 보려면 Admin SDK 초기화 [https://firebase.google.com/docs/admin/setup?hl=ko#initialize-sdk]를 참조하세요.

Google Cloud에서 초기화import (
"log"

firebase "firebase.google.com/go"
"google.golang.org/api/option"

자체 서버에서 초기화
자체 서버에서 Firebase Admin SDK를 사용하려면 서비스 계정 [https://cloud.google.com/compute/docs/authentication?hl=ko]을 사용합니다.

Google Cloud 콘솔에서 IAM 및 관리자 > 서비스 계정 [https://console.cloud.google.com/iam-admin/serviceaccounts?hl=ko]으로 이동합니다. 새 비공개 키를 생성하고 JSON 파일을 저장합니다. 그런 다음 이 파일을 사용하여 SDK를 초기화합니다.

import (
"log"

firebase "firebase.google.com/go"
"google.golang.org/api/option"

PHP

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

use Google\Cloud\Firestore\FirestoreClient;

/**
* Initialize Cloud Firestore with default project ID.
*/
function setup_client_create(string $projectId = null)
printf('Created Cloud Firestore client with default project ID.' . PHP_EOL);
printf('Created Cloud Firestore client with project ID: %s' . PHP_EOL, $projectId);
using Firebase.Firestore;
using Firebase.Extensions;
FirebaseFirestore db = FirebaseFirestore.DefaultInstance;

C#

C#

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

FirestoreDb db = FirestoreDb.Create(project);

require "google/cloud/firestore"

# The `project_id` parameter is optional and represents which project the
# client will act on behalf of. If not supplied, the client falls back to the
# default project inferred from the environment.
firestore = Google::Cloud::Firestore.new project_id: project_id

puts "Created Cloud Firestore client with given project ID."quickstart.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/quickstart.rb#L19-L26]

데이터 추가

Cloud Firestore는 컬렉션에 저장되는 문서에 데이터를 저장합니다.
문서에 데이터를 처음 추가할 때 Cloud Firestore는 암시적으로 컬렉션과 문서를 만듭니다. 컬렉션이나 문서를 명시적으로
만들 필요가 없습니다.

다음 예시 코드를 사용해 새 컬렉션과 문서를 만듭니다.

Web
import { collection, addDoc } from "firebase/firestore";

try {

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
db.collection("users").add({
first: "Ada",
last: "Lovelace",
born: 1815

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

NSLog(@"Error adding document: %@", error);
NSLog(@"Document added with ID: %@", ref.documentID);
"first" to "Ada",
"last" to "Lovelace",
"born" to 1815,

.add(user)
Log.w(TAG, "Error adding document", e)
Map<String, Object> user = new HashMap<>();
user.put("first", "Ada");
user.put("last", "Lovelace");
user.put("born", 1815);

.add(user)
.addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
@Override
public void onSuccess(DocumentReference documentReference) {
Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
Log.w(TAG, "Error adding document", e);
print('DocumentSnapshot added with ID: ${doc.id}'));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L44-L53]

Java

DocumentReference docRef = db.collection("users").document("alovelace");
Map<String, Object> data = new HashMap<>();
data.put("first", "Ada");
data.put("last", "Lovelace");
data.put("born", 1815);
ApiFuture<WriteResult> result = docRef.set(data);

doc_ref = db.collection("users").document("alovelace")
doc_ref.set({"first": "Ada", "last": "Lovelace", "born": 1815})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L42-L43]

Python

doc_ref = db.collection("users").document("alovelace")
await doc_ref.set({"first": "Ada", "last": "Lovelace", "born": 1815})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L36-L37]

C++
Future<DocumentReference> user_ref =
db->Collection("users").Add({{"first", FieldValue::String("Ada")},

user_ref.OnCompletion([](const Future<DocumentReference>& future) {
if (future.error() == Error::kErrorOk) {
std::cout << "DocumentSnapshot added with ID: " << future.result()->id()
<< std::endl;

_, _, err := client.Collection("users").Add(ctx, map[string]interface{}{
"first": "Ada",
"last":  "Lovelace",
"born":  1815,

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$docRef = $db->collection('samples/php/users')->document('alovelace');
$docRef->set([
'first' => 'Ada',
'last' => 'Lovelace',
'born' => 1815
]);
printf('Added data to the lovelace document in the users collection.' . PHP_EOL);setup_dataset.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/setup_dataset.php#L40-L46]

Unity
DocumentReference docRef = db.Collection("users").Document("alovelace");
Dictionary<string, object> user = new Dictionary<string, object>
Debug.Log("Added data to the alovelace document in the users collection.");

DocumentReference docRef = db.Collection("users").Document("alovelace");
Dictionary<string, object> user = new Dictionary<string, object>

doc_ref = firestore.doc "#{collection_path}/alovelace"

doc_ref.set(
first: "Ada",
last:  "Lovelace",
born:  1815

try {

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

NSLog(@"Error adding document: %@", error);
NSLog(@"Document added with ID: %@", ref.documentID);
"first" to "Alan",
"middle" to "Mathison",
"last" to "Turing",
"born" to 1912,

.add(user)
Log.w(TAG, "Error adding document", e)
Map<String, Object> user = new HashMap<>();
user.put("first", "Alan");
user.put("middle", "Mathison");
user.put("last", "Turing");
user.put("born", 1912);

.add(user)
.addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
@Override
public void onSuccess(DocumentReference documentReference) {
Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
Log.w(TAG, "Error adding document", e);
print('DocumentSnapshot added with ID: ${doc.id}'));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L59-L69]

Java

DocumentReference docRef = db.collection("users").document("aturing");
Map<String, Object> data = new HashMap<>();
data.put("first", "Alan");
data.put("middle", "Mathison");
data.put("last", "Turing");
data.put("born", 1912);

ApiFuture<WriteResult> result = docRef.set(data);
System.out.println("Update time : " + result.get().getUpdateTime());Quickstart.java [https://github.com/googleapis/java-firestore/blob/2a9dd7de517f55edefac168f3f45186654341c4c/samples/snippets/src/main/java/com/example/firestore/Quickstart.java#L100-L109]

Python

doc_ref = db.collection("users").document("aturing")
doc_ref.set({"first": "Alan", "middle": "Mathison", "last": "Turing", "born": 1912})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L50-L51]

Python

doc_ref = db.collection("users").document("aturing")
await doc_ref.set(
)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L44-L47]

C++
db->Collection("users")
.Add({{"first", FieldValue::String("Alan")},
.OnCompletion([](const Future<DocumentReference>& future) {
if (future.error() == Error::kErrorOk) {
std::cout << "DocumentSnapshot added with ID: "
<< future.result()->id() << std::endl;

_, _, err = client.Collection("users").Add(ctx, map[string]interface{}{
"first":  "Alan",
"middle": "Mathison",
"last":   "Turing",
"born":   1912,

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$docRef = $db->collection('samples/php/users')->document('aturing');
$docRef->set([
'first' => 'Alan',
'middle' => 'Mathison',
'last' => 'Turing',
'born' => 1912
]);
printf('Added data to the aturing document in the users collection.' . PHP_EOL);setup_dataset.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/fb4e5fc6398145491c6197344849d9caeac33811/firestore/src/setup_dataset.php#L49-L56]

Unity
DocumentReference docRef = db.Collection("users").Document("aturing");
Dictionary<string, object> user = new Dictionary<string, object>
Debug.Log("Added data to the aturing document in the users collection.");

DocumentReference docRef = db.Collection("users").Document("aturing");
Dictionary<string, object> user = new Dictionary<string, object>

doc_ref = firestore.doc "#{collection_path}/aturing"

doc_ref.set(
first:  "Alan",
middle: "Mathison",
last:   "Turing",
born:   1912
import { collection, getDocs } from "firebase/firestore";

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
db.collection("users").get().then((querySnapshot) => {
querySnapshot.forEach((doc) => {

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

do {
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[self.db collectionWithPath:@"users"]
getDocumentsWithCompletion:^(FIRQuerySnapshot * _Nullable snapshot,
NSError * _Nullable error) {
if (error != nil) {
NSLog(@"Error getting documents: %@", error);
NSLog(@"%@ => %@", document.documentID, document.data);
db.collection("users")
.get()
Log.w(TAG, "Error getting documents.", exception)
db.collection("users")
.get()
.addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
@Override
public void onComplete(@NonNull Task<QuerySnapshot> task) {
if (task.isSuccessful()) {
for (QueryDocumentSnapshot document : task.getResult()) {
Log.d(TAG, document.getId() + " => " + document.getData());
Log.w(TAG, "Error getting documents.", task.getException());
await db.collection("users").get().then((event) {
for (var doc in event.docs) {
print("${doc.id} => ${doc.data()}");

ApiFuture<QuerySnapshot> query = db.collection("users").get();
QuerySnapshot querySnapshot = query.get();
List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
for (QueryDocumentSnapshot document : documents) {
System.out.println("User: " + document.getId());
System.out.println("First: " + document.getString("first"));
if (document.contains("middle")) {
System.out.println("Middle: " + document.getString("middle"));
System.out.println("Last: " + document.getString("last"));
System.out.println("Born: " + document.getLong("born"));
users_ref = db.collection("users")
docs = users_ref.stream()

for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-client/snippets.py#L58-L62]

Python

users_ref = db.collection("users")
docs = users_ref.stream()

async for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/467a34a26759d8aeac5f379fbc767854fc238e1e/firestore/cloud-async-client/snippets.py#L54-L58]

C++
Future<QuerySnapshot> users = db->Collection("users").Get();
users.OnCompletion([](const Future<QuerySnapshot>& future) {
if (future.error() == Error::kErrorOk) {
for (const DocumentSnapshot& document : future.result()->documents()) {

iter := client.Collection("users").Documents(ctx)
for {
doc, err := iter.Next()
if err == iterator.Done {
break

PHP

Cloud Firestore 클라이언트 설치 및 생성에 관한 자세한 내용은 Cloud Firestore 클라이언트 라이브러리 [https://firebase.google.com/firestore/docs/reference/libraries?hl=ko]를 참조하세요.

$usersRef = $db->collection('samples/php/users');
$snapshot = $usersRef->documents();
foreach ($snapshot as $user) {
printf('User: %s' . PHP_EOL, $user->id());
printf('First: %s' . PHP_EOL, $user['first']);
if (!empty($user['middle'])) {
printf('Middle: %s' . PHP_EOL, $user['middle']);
printf('Born: %d' . PHP_EOL, $user['born']);
printf(PHP_EOL);
CollectionReference usersRef = db.Collection("users");
usersRef.GetSnapshotAsync().ContinueWithOnMainThread(task =>
QuerySnapshot snapshot = task.Result;
foreach (DocumentSnapshot document in snapshot.Documents)
Debug.Log(String.Format("User: {0}", document.Id));
Dictionary<string, object> documentDictionary = document.ToDictionary();
Debug.Log(String.Format("First: {0}", documentDictionary["First"]));
if (documentDictionary.ContainsKey("Middle"))
Debug.Log(String.Format("Middle: {0}", documentDictionary["Middle"]));
Debug.Log(String.Format("Last: {0}", documentDictionary["Last"]));
Debug.Log(String.Format("Born: {0}", documentDictionary["Born"]));
Debug.Log("Read all data from the users collection.");

CollectionReference usersRef = db.Collection("users");
QuerySnapshot snapshot = await usersRef.GetSnapshotAsync();
foreach (DocumentSnapshot document in snapshot.Documents)
Dictionary<string, object> documentDictionary = document.ToDictionary();

users_ref = firestore.col collection_path
users_ref.get do |user|
puts "#{user.document_id} data: #{user.data}."
endquickstart.rb [https://github.com/googleapis/google-cloud-ruby/blob/d7956313714cca1df943713b9bba442ebd04962a/google-cloud-firestore/samples/quickstart.rb#L77-L80]

데이터 보안

웹, Android 또는 Apple 플랫폼 SDK를 사용하는 경우 Firebase 인증 [https://firebase.google.com/docs/auth/?hl=ko] 및 Cloud Firestore Security Rules [https://firebase.google.com/docs/firestore/security/get-started?hl=ko]를 사용하여 Cloud Firestore의 데이터에 보안을 적용합니다.

다음은 시작하는 데 사용할 수 있는 기본 규칙 세트입니다. Console의 규칙 탭 [https://console.firebase.google.com/project/_/firestore/rules?hl=ko]에서 보안 규칙을 수정할 수 있습니다.

인증 필요// Allow read/write access to a document keyed by the user's UID
service cloud.firestore {
match /databases/{database}/documents {
match /users/{uid} {
allow read, write: if request.auth != null && request.auth.uid == uid;
Cloud Firestore 모바일 클라이언트 라이브러리 시작에 대한 자세한 안내는 다음 동영상 튜토리얼을 참조하세요.

웹

iOS+

Android

그 밖에도 많은 동영상을 Firebase YouTube 채널 [https://www.youtube.com/firebase?hl=ko]에서 확인할 수 있습니다.

다음 단계

다음 주제를 자세히 알아보세요.

Codelabs - Android [https://codelabs.developers.google.com/codelabs/firestore-android?hl=ko], iOS [https://codelabs.developers.google.com/codelabs/firestore-ios?hl=ko] 또는 웹 [https://codelabs.developers.google.com/codelabs/firestore-web?hl=ko]용 Codelab의 안내를 따라 실제 앱에서 Cloud Firestore를 사용하는 방법을 알아보세요.
데이터 모델 [https://firebase.google.com/docs/firestore/data-model?hl=ko] - 계층적 데이터와 하위 컬렉션을 비롯한 Cloud Firestore에서 데이터가 구조화되는 방식을 자세히 알아보세요.
데이터 추가 [https://firebase.google.com/docs/firestore/manage-data/add-data?hl=ko] - Cloud Firestore에서 데이터를 만들고 업데이트하는 방법을 자세히 알아보세요.
데이터 가져오기 [https://firebase.google.com/docs/firestore/query-data/get-data?hl=ko] - 데이터를 검색하는 방법을 자세히 알아보세요.
단순 쿼리 및 복합 쿼리 실행 [https://firebase.google.com/docs/firestore/query-data/queries?hl=ko] - 단순 쿼리 및 복합 쿼리 실행 방법을 알아보세요.
쿼리 순서 지정 및 제한 [https://firebase.google.com/docs/firestore/query-data/order-limit-data?hl=ko] - 쿼리에서 반환된 데이터의 순서를 지정하고 제한하는 방법을 알아보세요.

의견 보내기