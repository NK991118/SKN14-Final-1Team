Source URL: https://firebase.google.com/docs/auth/admin/manage-users?hl=ko
Title: 사용자 관리
bookmark_border

의견 보내기

사용자 관리

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#before_you_begin]사용자 데이터 검색 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#retrieve_user_data]사용자 데이터 일괄 검색 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#bulk_retrieve_user_data]사용자 생성 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#create_a_user]사용자 업데이트 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#update_a_user]사용자 삭제 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#delete_a_user]여러 사용자 삭제 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#delete_multiple_users]모든 사용자 나열 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#list_all_users]나열된 사용자의 비밀번호 해시 [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#password_hashes_of_listed_users]

Firebase Admin SDK는 더 많은 권한으로 Firebase Authentication 사용자를 관리하는 API를 제공합니다. 관리자 사용자 관리 API를 사용하면
안전한 서버 환경에서 프로그래매틱 방식으로 다음과 같은 작업을 완료할 수
있습니다.

제한 또는 비율 제한 없이 새 사용자 생성
uid, 이메일, 전화번호 등 여러 기준으로 사용자 조회
지정된 프로젝트에 속한 모든 사용자를 배치별로 나열
계정 생성 날짜 및 마지막으로 로그인한 날짜 등 사용자 메타데이터 액세스
기존 사용자 비밀번호를 입력하지 않고 사용자 삭제
사용자로 로그인하지 않고 비밀번호 등 사용자 속성 업데이트
비밀번호를 확인하기 위한 대역 외 작업 흐름을 거치지 않고 이메일 확인
변경사항을 취소하기 위한 이메일 링크를 보내지 않고 사용자 이메일 변경
SMS 확인 흐름을 거치지 않고 전화번호로 새 사용자 생성
SMS 확인 흐름을 거치지 않고 사용자의 전화번호 변경
중지 상태에서 오프라인으로 사용자 프로비저닝한 후 사용자를 사용 설정할 시기를
나중에 제어
특정 애플리케이션의 사용자 관리 시스템에 맞는 커스텀 사용자 콘솔 빌드

시작하기 전에

Firebase Admin SDK가 제공하는 사용자 관리 API를 사용하려면
서비스 계정이 있어야 합니다. Admin SDK를 초기화하는 자세한 방법은 설정 안내 [https://firebase.google.com/docs/admin/setup?hl=ko]를 참조하세요.

사용자 데이터 검색

사용자를 식별하는 기본 방식은 사용자의 고유 식별자인 사용자의 uid를 사용하는 것입니다. Admin SDK는 uid에 따라 사용자의 프로필 정보를 가져오는 메서드를 제공합니다.
--- 탭: Node.js [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#node.js] ---
```
getAuth()
.getUser(uid)
.then((userRecord) => {
UserRecord userRecord = FirebaseAuth.getInstance().getUser(uid);
System.out.println("Successfully fetched user data: " + userRecord.getUid());
```

--- 탭: Python [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#python] ---
```
from firebase_admin import auth

user = auth.get_user(uid)
print(f'Successfully fetched user data: {user.uid}')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
UserRecord userRecord = await FirebaseAuth.DefaultInstance.GetUserAsync(uid);
.getUserByEmail(email)
.then((userRecord) => {
UserRecord userRecord = FirebaseAuth.getInstance().getUserByEmail(email);
System.out.println("Successfully fetched user data: " + userRecord.getEmail());
```

--- 탭: Python [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#python] ---
```
from firebase_admin import auth

user = auth.get_user_by_email(email)
print(f'Successfully fetched user data: {user.uid}')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
u, err := client.GetUserByEmail(ctx, email)
if err != nil {
log.Fatalf("error getting user by email %s: %v\n", email, err)
UserRecord userRecord = await FirebaseAuth.DefaultInstance.GetUserByEmailAsync(email);
.getUserByPhoneNumber(phoneNumber)
.then((userRecord) => {
UserRecord userRecord = FirebaseAuth.getInstance().getUserByPhoneNumber(phoneNumber);
System.out.println("Successfully fetched user data: " + userRecord.getPhoneNumber());
```

--- 탭: Python [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#python] ---
```
from firebase_admin import auth

user = auth.get_user_by_phone_number(phone)
print(f'Successfully fetched user data: {user.uid}')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
u, err := client.GetUserByPhoneNumber(ctx, phone)
if err != nil {
log.Fatalf("error getting user by phone %s: %v\n", phone, err)
UserRecord userRecord = await FirebaseAuth.DefaultInstance.GetUserByPhoneNumberAsync(phoneNumber);
Firebase Admin SDK를 사용하면 제공한 식별자를 기반으로 사용자 목록을 검색할 수도 있습니다. 사용자 ID, 이메일 또는 전화번호로 사용자를 식별할 수 있습니다. 호출 한 번에 최대 100개의 식별자를 제공할 수 있습니다.
다음과 같이 여러 유형의 식별자가 포함될 수 있습니다.
--- 탭: Node.js [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#node.js] ---
```
getAuth()
.getUsers([
])
.then((getUsersResult) => {
GetUsersResult result = FirebaseAuth.getInstance().getUsersAsync(Arrays.asList(
new UidIdentifier("uid1"),
new EmailIdentifier("user2@example.com"),
new PhoneIdentifier("+15555550003"),
new ProviderIdentifier("google.com", "google_uid4"))).get();

System.out.println("Successfully fetched user data:");
for (UserRecord user : result.getUsers()) {
System.out.println(user.getUid());
System.out.println("Unable to find users corresponding to these identifiers:");
for (UserIdentifier uid : result.getNotFound()) {
System.out.println(uid);

result = auth.get_users([
auth.UidIdentifier('uid1'),
auth.EmailIdentifier('user2@example.com'),
auth.PhoneIdentifier(+15555550003),
auth.ProviderIdentifier('google.com', 'google_uid4')
])

print('Successfully fetched user data:')
for user in result.users:
print(user.uid)

print('Unable to find users corresponding to these identifiers:')
for uid in result.not_found:
print(uid)
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
getUsersResult, err := client.GetUsers(ctx, []auth.UserIdentifier{
auth.UIDIdentifier{UID: "uid1"},
auth.EmailIdentifier{Email: "user@example.com"},
auth.PhoneIdentifier{PhoneNumber: "+15555551234"},
auth.ProviderIdentifier{ProviderID: "google.com", ProviderUID: "google_uid1"},
GetUsersResult result = await FirebaseAuth.DefaultInstance.GetUsersAsync(
new List<UserIdentifier>
new UidIdentifier("uid1"),
new EmailIdentifier("user2@example.com"),
new PhoneIdentifier("+15555550003"),
new ProviderIdentifier("google.com", "google_uid4"),
Admin SDK는 Firebase Authentication 사용자를 새로 만드는 메서드를 제공합니다. 이 메서드는 새로 만든 사용자 계정에 포함할 프로필 정보가 들어 있는 객체를 취합니다.
--- 탭: Node.js [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#node.js] ---
```
getAuth()
.createUser({
email: 'user@example.com',
emailVerified: false,
phoneNumber: '+11234567890',
password: 'secretPassword',
displayName: 'John Doe',
photoURL: 'http://www.example.com/12345678/photo.png',
disabled: false,
CreateRequest request = new CreateRequest()
.setEmail("user@example.com")
.setEmailVerified(false)
.setPassword("secretPassword")
.setPhoneNumber("+11234567890")
.setDisplayName("John Doe")
.setPhotoUrl("http://www.example.com/12345678/photo.png")
.setDisabled(false);

UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);
System.out.println("Successfully created new user: " + userRecord.getUid());
```

--- 탭: Python [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#python] ---
```
user = auth.create_user(
email='user@example.com',
email_verified=False,
phone_number='+15555550100',
password='secretPassword',
display_name='John Doe',
photo_url='http://www.example.com/12345678/photo.png',
disabled=False)
print(f'Sucessfully created new user: {user.uid}')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
params := (&auth.UserToCreate{}).
Email("user@example.com").
EmailVerified(false).
PhoneNumber("+15555550100").
Password("secretPassword").
DisplayName("John Doe").
PhotoURL("http://www.example.com/12345678/photo.png").
Disabled(false)
u, err := client.CreateUser(ctx, params)
if err != nil {
log.Fatalf("error creating user: %v\n", err)
UserRecordArgs args = new UserRecordArgs()
Email = "user@example.com",
EmailVerified = false,
PhoneNumber = "+11234567890",
Password = "secretPassword",
DisplayName = "John Doe",
PhotoUrl = "http://www.example.com/12345678/photo.png",
Disabled = false,
UserRecord userRecord = await FirebaseAuth.DefaultInstance.CreateUserAsync(args);
.createUser({
uid: 'some-uid',
email: 'user@example.com',
phoneNumber: '+11234567890',
CreateRequest request = new CreateRequest()
.setUid("some-uid")
.setEmail("user@example.com")
.setPhoneNumber("+11234567890");

UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);
System.out.println("Successfully created new user: " + userRecord.getUid());
```

--- 탭: Python [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#python] ---
```
user = auth.create_user(
uid='some-uid', email='user@example.com', phone_number='+15555550100')
print(f'Sucessfully created new user: {user.uid}')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
params := (&auth.UserToCreate{}).
UID(uid).
Email("user@example.com").
PhoneNumber("+15555550100")
u, err := client.CreateUser(ctx, params)
if err != nil {
log.Fatalf("error creating user: %v\n", err)
UserRecordArgs args = new UserRecordArgs()
Uid = "some-uid",
Email = "user@example.com",
PhoneNumber = "+11234567890",
UserRecord userRecord = await FirebaseAuth.DefaultInstance.CreateUserAsync(args);
Firebase Admin SDK는 기존 사용자의 데이터를 수정하는 기능을 지원합니다. 업데이트할 사용자 속성과 함께 해당 사용자의 uid를 지정해야 합니다.
--- 탭: Node.js [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#node.js] ---
```
getAuth()
.updateUser(uid, {
email: 'modifiedUser@example.com',
phoneNumber: '+11234567890',
emailVerified: true,
password: 'newPassword',
displayName: 'Jane Doe',
photoURL: 'http://www.example.com/12345678/photo.png',
disabled: true,
UpdateRequest request = new UpdateRequest(uid)
.setEmail("user@example.com")
.setPhoneNumber("+11234567890")
.setEmailVerified(true)
.setPassword("newPassword")
.setDisplayName("Jane Doe")
.setPhotoUrl("http://www.example.com/12345678/photo.png")
.setDisabled(true);

UserRecord userRecord = FirebaseAuth.getInstance().updateUser(request);
System.out.println("Successfully updated user: " + userRecord.getUid());
```

--- 탭: Python [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#python] ---
```
user = auth.update_user(
uid,
email='user@example.com',
phone_number='+15555550100',
email_verified=True,
password='newPassword',
display_name='John Doe',
photo_url='http://www.example.com/12345678/photo.png',
disabled=True)
print(f'Sucessfully updated user: {user.uid}')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
params := (&auth.UserToUpdate{}).
Email("user@example.com").
EmailVerified(true).
PhoneNumber("+15555550100").
Password("newPassword").
DisplayName("John Doe").
PhotoURL("http://www.example.com/12345678/photo.png").
Disabled(true)
u, err := client.UpdateUser(ctx, uid, params)
if err != nil {
log.Fatalf("error updating user: %v\n", err)
UserRecordArgs args = new UserRecordArgs()
Uid = uid,
Email = "modifiedUser@example.com",
PhoneNumber = "+11234567890",
EmailVerified = true,
Password = "newPassword",
DisplayName = "Jane Doe",
PhotoUrl = "http://www.example.com/12345678/photo.png",
Disabled = true,
UserRecord userRecord = await FirebaseAuth.DefaultInstance.UpdateUserAsync(args);
Firebase Admin SDK는 uid에 따라 기존 사용자를 삭제하는 기능을 지원합니다.
--- 탭: Node.js [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#node.js] ---
```
getAuth()
.deleteUser(uid)
.then(() => {
FirebaseAuth.getInstance().deleteUser(uid);
System.out.println("Successfully deleted user.");
```

--- 탭: Python [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#python] ---
```
auth.delete_user(uid)
print('Successfully deleted user')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
err := client.DeleteUser(ctx, uid)
if err != nil {
log.Fatalf("error deleting user: %v\n", err)
Firebase Admin SDK에서는 다음과 같이 여러 사용자를 한 번에 삭제할 수도 있습니다. 하지만 deleteUsers(uids)와 같은 메서드를 사용하여 한 번에 여러 사용자를 삭제하면 Cloud Functions for Firebase의 onDelete() 이벤트 핸들러가 트리거되지 않습니다.
일괄 삭제는 사용자별로 사용자 삭제 이벤트를 트리거하지 않기 때문입니다. 삭제된 각 사용자에 대해 사용자 삭제 이벤트를 실행하려면 한 번에 한 명씩 사용자를 삭제하세요.
--- 탭: Node.js [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#node.js] ---
```
getAuth()
.deleteUsers([uid1, uid2, uid3])
.then((deleteUsersResult) => {
DeleteUsersResult result = FirebaseAuth.getInstance().deleteUsersAsync(
Arrays.asList("uid1", "uid2", "uid3")).get();

System.out.println("Successfully deleted " + result.getSuccessCount() + " users");
System.out.println("Failed to delete " + result.getFailureCount() + " users");
for (ErrorInfo error : result.getErrors()) {
System.out.println("error #" + error.getIndex() + ", reason: " + error.getReason());

result = auth.delete_users(["uid1", "uid2", "uid3"])

print(f'Successfully deleted {result.success_count} users')
print(f'Failed to delete {result.failure_count} users')
for err in result.errors:
print(f'error #{result.index}, reason: {result.reason}')
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
deleteUsersResult, err := client.DeleteUsers(ctx, []string{"uid1", "uid2", "uid3"})
if err != nil {
log.Fatalf("error deleting users: %v\n", err)
log.Printf("Failed to delete %d users", deleteUsersResult.FailureCount)
for _, err := range deleteUsersResult.Errors {
log.Printf("%v", err)
DeleteUsersResult result = await FirebaseAuth.DefaultInstance.DeleteUsersAsync(new List<string>
"uid1",
"uid2",
"uid3",
Firebase Admin SDK를 사용하여 전체 사용자 목록을 배치별로 검색할 수 있습니다.
--- 탭: Node.js [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#node.js] ---
```
.listUsers(1000, nextPageToken)
.then((listUsersResult) => {
listUsersResult.users.forEach((userRecord) => {
ListUsersPage page = FirebaseAuth.getInstance().listUsers(null);
while (page != null) {
for (ExportedUserRecord user : page.getValues()) {
System.out.println("User: " + user.getUid());
for (ExportedUserRecord user : page.iterateAll()) {
System.out.println("User: " + user.getUid());
while page:
for user in page.users:
print('User: ' + user.uid)
# Get next batch of users.
page = page.get_next_page()

# Iterate through all users. This will still retrieve users in batches,
# buffering no more than 1000 users in memory at a time.
for user in auth.list_users().iterate_all():
print('User: ' + user.uid)
```

--- 탭: Go [https://firebase.google.com/docs/auth/admin/manage-users?hl=ko#go] ---
```
ExportedUserRecords response = responses.Current;
foreach (ExportedUserRecord user in response.Users)
ExportedUserRecord user = enumerator.Current;
한 번에 나열할 수 있는 최대 사용자 수도 이 숫자로 제한됩니다. 최댓값보다 큰 값은 인수 오류를 발생시킵니다.
pageToken를 지정하지 않으면 맨 처음 사용자부터 uid 순으로 나열됩니다.

설명 및 해결 단계가 포함된 전체 오류 코드 목록은 Admin Authentication API 오류 [https://firebase.google.com/docs/auth/admin/errors?hl=ko]를 참조하세요.

나열된 사용자의 비밀번호 해시

또한 이 API는 사용자/서비스 계정이 firebaseauth.configs.getHashConfig 권한이 있는 요청 OAuth 액세스 토큰을 생성하는 데 사용되는 경우 비밀번호 사용자의 Firebase 인증 백엔드에서 해싱한 passwordSalt 및 passwordHash를 반환합니다. 그렇지 않으면 passwordHash 및 passwordSalt가 설정되지 않습니다.

비밀번호 해시의 민감한 특성으로 인해 Firebase Admin SDK 서비스 계정에는 기본적으로 firebaseauth.configs.getHashConfig 권한이 없습니다. 사용자 서비스 계정에 권한을 직접 추가할 수 없지만 커스텀 IAM 역할을 만들어 [https://cloud.google.com/iam/docs/creating-custom-roles?hl=ko] 간접적으로 권한을 추가할 수 있습니다.

커스텀 IAM 역할을 만들려면 다음 안내를 따르세요.

Google Cloud 콘솔의 IAM 및 관리자 패널에서 역할 페이지로 이동합니다.
페이지 상단의 드롭다운에서 프로젝트를 선택합니다.
역할 만들기를 클릭합니다.
권한 추가를 클릭합니다.
firebaseauth.configs.getHashConfig 권한을 검색하고 해당 체크박스를 선택합니다.
추가를 클릭합니다.
만들기를 클릭하여 새 역할 만들기를 마칩니다.

IAM 페이지의 사용자/서비스 계정에 만든 커스텀 역할을 추가합니다.

IAM 및 관리자 패널에서 IAM을 선택합니다.
구성원 목록에서 서비스 또는 사용자 계정을 선택하여 수정합니다.
다른 역할 추가를 클릭합니다.
이전에 만든 새 커스텀 역할을 검색합니다.
저장을 클릭합니다.

경고: firebaseauth.configs.getHashConfig 권한을 추가하는 수단으로 Editor 역할을 사용하지 마세요. 이 강력한 역할은 의도한 범위를 벗어난 권한을 제공합니다.

도움이 되었나요?

의견 보내기