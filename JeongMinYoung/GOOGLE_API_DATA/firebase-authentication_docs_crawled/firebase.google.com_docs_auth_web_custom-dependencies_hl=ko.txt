Source URL: https://firebase.google.com/docs/auth/web/custom-dependencies?hl=ko
Title: 인증 종속 항목 맞춤설정

의견 보내기

인증 종속 항목 맞춤설정

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

모듈식으로 설계한 Firebase JS SDK를 사용하면 앱을 빌드하는 방법을 훨씬 더 효과적으로 제어할 수 있습니다. 이러한 유연성 덕분에 플랫폼에 대한 종속 항목을 맞춤설정하고 필요하지 않은 기능을 제거하여 번들 크기를 최적화할 수 있습니다.

인증 라이브러리를 초기화하는 방법에는 getAuth() 함수와 initializeAuth() 함수를 사용하는 두 가지 방법이 있습니다. 첫 번째 getAuth() 함수를 사용하는 방법에서는 인증 라이브러리가 제공하는 모든 기능을 활용하기 위해 앱에 필요한 모든 항목을 제공합니다. 단점은 앱에서 사용하지 않을 가능성이 있는 다량의 코드를 가져온다는 것입니다. 또한 대상 플랫폼에서 지원되지 않는 코드까지 가져오기 때문에 오류가 발생할 수 있습니다. 이러한 문제를 방지하려면 종속 항목 맵을 사용하는 initializeAuth() 함수를 사용하면 됩니다. getAuth() 함수는 지정된 모든 종속 항목과 함께 initializeAuth()를 호출합니다.
설명을 위해 아래에는 브라우저 환경에서 getAuth()와 동등한 코드가 나와 있습니다.
import {initializeAuth, browserLocalPersistence, browserPopupRedirectResolver, browserSessionPersistence, indexedDBLocalPersistence} from "firebase/auth";
import {initializeApp} from "firebase/app";

import {initializeApp} from "firebase/app";

import {initializeApp} from "firebase/app";

import {initializeApp} from "firebase/app";

initializeAuth()의 종속 항목에 browserPopupRedirectResolver를 제공했다면 signInWithRedirect() 호출에 세 번째 매개변수가 필요하지 않았을 것입니다. 그러나 이 종속 항목을 signInWithRedirect() 호출로 직접 이동하면 초기화 초기에 성능 저하가 사라집니다. 종속 항목을 이동하면 장단점이 있지만, 중요한 것은 라이브러리를 수동으로 초기화하여 이러한 장단점을 취사 결정할 수 있다는 것입니다.

커스텀 초기화를 사용하는 경우

요약하면, 커스텀 초기화를 사용하면 앱의 인증 SDK 사용을 훨씬 더 세부적으로 제어할 수 있습니다. 표준 getAuth() 함수는 시작하는 데 유용하며 대부분의 사용 사례에 적합합니다. 대부분의 앱에는 getAuth()만 있으면 됩니다. 하지만 다음과 같은 여러 가지 이유로 수동 종속 항목 관리로 전환하고 싶거나 전환해야 하는 경우가 있습니다.

번들 크기와 로드 시간이 매우 중요한 앱의 경우 커스텀 인증 초기화로 데이터 크기를 줄일 수 있습니다. 또한 초기화 시간 대신 사용 시간으로 종속 항목을 이동하여 초기 로드 시간을 줄일 수 있습니다.
DOM 외의 컨텍스트(예: 웹 및 서비스 워커)에서 실행되는 코드의 경우 오류를 방지하기 위해 initializeAuth()를 사용해야 합니다.

의견 보내기