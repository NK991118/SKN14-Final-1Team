Source URL: https://firebase.google.com/docs/auth/web/account-linking?hl=ko
Title: 자바스크립트에서 계정에 여러 인증 제공업체 연결하기

의견 보내기

자바스크립트에서 계정에 여러 인증 제공업체 연결하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

중요: 일부 프로젝트에서 linkWithCredentials()가 제대로 작동하지 않는 알려진 문제 [https://github.com/firebase/firebase-js-sdk/issues/7675]가 있습니다. 해결 방법과 수정 상태는 문제 보고서에서 확인하세요.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.
사용자가 로그인할 때 어떤 인증 제공업체를 사용하든 동일한 Firebase 사용자 ID로 본인 확인이 가능합니다. 예를 들어 비밀번호로 로그인한 사용자가 Google 계정을 연결하면 나중에 비밀번호와 Google 계정 중 어느 방법으로든 로그인할 수 있습니다. 또는 익명 사용자가 Facebook 계정을 연결하면 나중에 Facebook으로 로그인해서 앱을 계속 사용할 수 있습니다.

시작하기 전에

앱에 두 가지 이상의 인증 제공업체(익명 인증 포함)에 대한 지원을 추가하세요.

사용자 계정에 제휴 인증 제공업체의 사용자 인증 정보 연결

기존 사용자 계정에 Google 또는 Facebook과 같은 인증 제공업체의 사용자 인증 정보를 연결하는 방법은 다음과 같습니다.

원하는 인증 제공업체 또는 인증 방법을 사용해 사용자를 로그인 처리합니다.
사용자 계정에 연결할 제공업체에 해당하는 AuthProvider 객체를 가져옵니다. 예를 들면 다음과 같습니다.

Web
import { GoogleAuthProvider, FacebookAuthProvider, TwitterAuthProvider, GithubAuthProvider } from "firebase/auth";

import { getAuth, linkWithPopup, GoogleAuthProvider } from "firebase/auth";
auth.currentUser.linkWithPopup(provider).then((result) => {
import { getAuth, linkWithRedirect, GoogleAuthProvider } from "firebase/auth";
.then(/* ... */)
.catch(/* ... */);auth_link_with_redirect.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/link-multiple-accounts/auth_link_with_redirect.js#L8-L14]

Web
auth.currentUser.linkWithRedirect(provider)
.then(/* ... */)
.catch(/* ... */);link-multiple-accounts.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/link-multiple-accounts.js#L85-L87]

사용자는 로그인한 후 내 페이지로 다시 리디렉션됩니다. 그러면 페이지가 로드될 때 getRedirectResult를 호출하여 로그인 결과를 검색할 수 있습니다.

Web
import { getRedirectResult } from "firebase/auth";
getRedirectResult(auth).then((result) => {
auth.getRedirectResult().then((result) => {
if (result.credential) {
import { getAuth, signInWithCredential, linkWithCredential, OAuthProvider } from "firebase/auth";

.then((linkResult) => {

.then((linkResult) => {
import { EmailAuthProvider } from "firebase/auth";

import { getAuth, linkWithCredential } from "firebase/auth";

.then((usercred) => {
auth.currentUser.linkWithCredential(credential)
.then((usercred) => {
import { getAuth, unlink } from "firebase/auth";

user.unlink(providerId).then(() => {