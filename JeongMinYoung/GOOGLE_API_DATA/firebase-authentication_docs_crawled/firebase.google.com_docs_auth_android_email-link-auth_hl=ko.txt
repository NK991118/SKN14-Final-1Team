Source URL: https://firebase.google.com/docs/auth/android/email-link-auth?hl=ko
Title: Android에서 이메일 링크를 사용하여 Firebase에 인증

의견 보내기

Android에서 이메일 링크를 사용하여 Firebase에 인증

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

참고: Android SDK v23.2.0 및 iOS SDK 11.8.0 이전의 SDK 버전에서 이메일 링크 인증 및 작업의 기존 구현은 2025년 8월 25일에 종료되는 Firebase 동적 링크를 사용합니다.

이 가이드는 이후 SDK 버전의 새로운 솔루션을 참조하도록 업데이트되었습니다.

자세한 내용과 마이그레이션 안내는 Dynamic Links 지원 중단 FAQ [https://firebase.google.com/support/dynamic-links-faq?hl=ko#impacts-on-email-link-authentication]를 참조하세요.

Firebase Authentication을 사용하면 로그인 링크를 이메일로 전송해서 사용자가 클릭하여 로그인하도록 할 수 있습니다. 이 과정에서 사용자의
이메일 주소도 확인됩니다.

이메일로 로그인하는 경우 다음과 같은 많은 이점이 있습니다.

편리한 가입 및 로그인
여러 애플리케이션에서 비밀번호 재사용에 따른 위험이 적음(재사용하면 아무리 보안등급이 높은 비밀번호라 해도 보안이 취약해질 수 있음)
사용자를 인증하는 동시에 사용자가 이메일 주소의 합법적인
소유자인지 확인 가능
액세스 가능한 이메일 계정만 있으면 로그인 가능 전화번호 또는
소셜 미디어 계정 소유를 필요로 하지 않음
사용자가 모바일 기기에서 번거롭게 비밀번호를 입력하거나
기억할 필요 없이 안전하게 로그인 가능
이전에 이메일 식별자(비밀번호 또는 제휴)로 로그인한 기존 사용자는 이메일만 사용하여 로그인하도록 업그레이드 가능. 일례로 사용자가
비밀번호를 기억하지 못하더라도 비밀번호를 재설정하지 않고 계속
로그인할 수 있습니다.

시작하기 전에

Android 프로젝트 설정

아직 추가하지 않았다면 Android 프로젝트에 Firebase를 추가 [https://firebase.google.com/docs/android/setup?hl=ko]합니다.

모듈(앱 수준) Gradle 파일(일반적으로 <project>/<app-module>/build.gradle.kts 또는 <project>/<app-module>/build.gradle)에서 Android용 Firebase Authentication 라이브러리의 종속 항목을 추가합니다. 라이브러리 버전 관리 제어에는 Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하는 것이 좋습니다.

또한 Firebase Authentication을 설정하는 과정에서 앱에 Google Play 서비스 SDK를 추가해야 합니다.

dependencies {
BoM을 사용하지 않고 Firebase 라이브러리 종속 항목을 추가합니다.

Firebase BoM을 사용하지 않도록 선택한 경우에는 종속 항목 줄에 각 Firebase 라이브러리 버전을 지정해야 합니다.
앱에서 여러 Firebase 라이브러리를 사용하는 경우 모든 버전이 호환되도록 BoM을 사용하여 라이브러리 버전을 관리하는 것이 좋습니다.

dependencies {
Firebase 프로젝트에서 이메일 링크 로그인 사용 설정

이메일 링크로 사용자를 로그인 처리하려면 우선 Firebase 프로젝트에서 이메일 제공업체 및 이메일 링크 로그인 방법을 사용 설정해야 합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 이메일/비밀번호 제공업체를 사용 설정합니다. 이메일
링크 로그인을 사용하려면 이메일/비밀번호 로그인이 사용 설정되어야 합니다.
같은 섹션에서 이메일 링크(비밀번호가 없는 로그인) 로그인을
사용 설정합니다.
저장을 클릭합니다.

사용자의 이메일 주소로 인증 링크 전송

이 인증 과정을 시작하려면 사용자에게 이메일 주소를 제공하도록 요청하는 인터페이스를 제시하고 sendSignInLinkToEmail을 호출하여 Firebase가 사용자의 이메일에 인증 링크를 전송하도록 요청합니다.

Firebase에 이메일 링크를 만드는 방법에 대한 안내를 제공하는 ActionCodeSettings [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/ActionCodeSettings?hl=ko] 객체를 만듭니다. 다음 필드를 설정합니다.

url: 삽입할 딥 링크 및 함께 전달할 추가 상태입니다.
승인된 도메인의 Firebase Console 목록에서 링크의 도메인을 허용 목록에 추가해야 하며 로그인 방법 탭(인증 -> 로그인 방법)으로 이동하여 확인할 수 있습니다. 사용자 기기에 앱이 설치되어 있지 않고 앱을 설치할 수 없는 경우에 인증 링크는 사용자를 이 URL로 리디렉션합니다.

중요: 2025년 4월 28일 이후에 생성된 프로젝트에서는 Firebase Authentication에 더 이상 기본적으로 localhost가 승인된 도메인으로 포함되지 않습니다. 프로덕션 프로젝트에서는 localhost를 사용하지 않는 것이 좋습니다. localhost를 승인하는 경우 설정 페이지의 승인된 도메인에서 도메인 추가를 클릭하여 수동으로 추가할 수 있습니다.

androidPackageName 및 iOSBundleId: Firebase Authentication이 Android 또는 Apple 기기에서 열리는 웹 전용 링크 또는 모바일 링크를 만들어야 하는지 결정하는 데 도움이 됩니다.
handleCodeInApp: true로 설정합니다. 다른 대역 외 이메일 작업(비밀번호 재설정 및 이메일 인증)과 달리 이 로그인 작업은 항상 앱에서 완료해야 합니다. 그 이유는 인증 과정 마지막에 사용자가 로그인하고 사용자의 인증 상태를 앱에서 유지해야 하기 때문입니다.
linkDomain: 프로젝트에 대해 커스텀 Hosting 링크 도메인이 정의된 경우 지정된 모바일 앱에서 링크를 열 때 사용할 도메인을 지정합니다. 그러지 않으면 기본 도메인이 자동으로 선택됩니다(예: PROJECT_ID.firebaseapp.com).
dynamicLinkDomain: 지원 중단되었습니다. 이 파라미터를 지정하지 마세요.

Kotlin
val actionCodeSettings = actionCodeSettings {
setIOSBundleId("com.example.ios")
setAndroidPackageName(
"com.example.android",
true, // installIfNotAvailable
"12", // minimumVersion
ActionCodeSettings actionCodeSettings =
ActionCodeSettings.newBuilder()
"12"    /* minimumVersion */)
.build();MainActivity.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L336-L348]

ActionCodeSettings에 대해 자세히 알아보려면 이메일 작업의 상태 전달 [https://firebase.google.com/docs/auth/android/passing-state-in-email-actions?hl=ko#passing_statecontinue_url_in_email_actions] 섹션을 참조하세요.
사용자에게 이메일 주소 입력을 요청합니다.
사용자의 이메일에 인증 링크를 전송하고 사용자가 같은 기기에서 이메일 로그인을 완료할 경우를 대비해 사용자의 이메일을 저장합니다.

Kotlin
Firebase.auth.sendSignInLinkToEmail(email, actionCodeSettings)
Log.d(TAG, "Email sent.")
FirebaseAuth auth = FirebaseAuth.getInstance();
auth.sendSignInLinkToEmail(email, actionCodeSettings)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "Email sent.");
Android 앱에서 로그인 완료

Firebase Authentication에서는 Firebase Hosting을 사용하여 모바일 기기로 이메일 링크를 보냅니다. 모바일 애플리케이션을 통해 로그인을 완료하는 경우
애플리케이션에서 수신 애플리케이션 링크를 감지하고 이 링크에 포함된 딥 링크를
파싱한 다음 로그인을 완료하도록 구성해야 합니다. 자세한 내용은 Android App Links 문서 [https://developer.android.com/training/app-links?hl=ko]를 참조하세요.

Firebase Hosting 구성

Firebase Authentication은 모바일 애플리케이션에서 열릴 링크를 보낼 때 Firebase Hosting [https://firebase.google.com/docs/hosting?hl=ko] 도메인을 사용합니다.
기본 Firebase Hosting 도메인이 이미 구성되어 있습니다.

Firebase Hosting 도메인을 구성합니다.

Firebase Console에서 호스팅 [https://console.firebase.google.com/project/_/hosting/sites?hl=ko] 섹션을 엽니다.

모바일 애플리케이션에서 열리는 이메일 링크에 기본 도메인을 사용하려면 기본 사이트로 이동하여 기본 Hosting 도메인을 기록합니다. 기본 Hosting 도메인의 형식은 일반적으로 다음과 같습니다.
PROJECT_ID.firebaseapp.com.

수신 링크를 가로채도록 앱을 구성할 때 이 값이 필요합니다.
이메일 링크에 커스텀 도메인을 사용하려면 Firebase Hosting에 도메인을 등록 [https://firebase.google.com/docs/hosting/custom-domain?hl=ko]하여 링크의 도메인으로 사용할 수 있습니다.

Android 애플리케이션을 구성합니다.

Android 애플리케이션에서 이 링크를 처리하려면 Firebase Console 프로젝트 설정에서 앱의 패키지 이름을 지정해야 합니다. 또한 애플리케이션 인증서의 SHA-1 및 SHA-256을 제공해야 합니다.

이러한 링크를 특정 활동으로 리디렉션하려면 AndroidManifest.xml 파일에 인텐트 필터를 구성해야 합니다. 인텐트 필터가 도메인의 이메일 링크를 인식합니다. AndroidManifest.xml 파일은 다음과 같습니다.
<intent-filter android:autoVerify="true">
<action android:name="android.intent.action.VIEW" />
<category android:name="android.intent.category.BROWSABLE" />
<category android:name="android.intent.category.DEFAULT" />
<data
android:scheme="https"
android:host="<PROJECT_ID>.firebaseapp.com or your custom domain"
android:pathPrefix="/__/auth/links" />
</intent-filter>

사용자가 지정한 스키마 및 호스트와 /__/auth/links 경로가 포함된 호스팅 링크를 열면 앱에서 이 인텐트 필터로 링크를 처리 [https://developer.android.com/training/app-links?hl=ko]하는 활동을 시작합니다.

링크 확인 및 로그인

위에 설명된 대로 링크를 수신하면 이메일 링크 인증을 위한 링크인지 확인하고 로그인을 완료합니다.

Kotlin
val auth = Firebase.auth
val intent = intent
val emailLink = intent.data.toString()

Log.d(TAG, "Successfully signed in with email link!")
val result = task.result
Log.e(TAG, "Error signing in with email link", task.exception)
FirebaseAuth auth = FirebaseAuth.getInstance();
Intent intent = getIntent();
String emailLink = intent.getData().toString();

String email = "someemail@domain.com";

.addOnCompleteListener(new OnCompleteListener<AuthResult>() {
@Override
public void onComplete(@NonNull Task<AuthResult> task) {
if (task.isSuccessful()) {
Log.d(TAG, "Successfully signed in with email link!");
AuthResult result = task.getResult();
Log.e(TAG, "Error signing in with email link", task.getException());

Firebase.auth.currentUser!!.linkWithCredential(credential)
Log.d(TAG, "Successfully linked emailLink credential!")
val result = task.result
Log.e(TAG, "Error linking emailLink credential", task.exception)
AuthCredential credential =
EmailAuthProvider.getCredentialWithLink(email, emailLink);

.addOnCompleteListener(new OnCompleteListener<AuthResult>() {
@Override
public void onComplete(@NonNull Task<AuthResult> task) {
if (task.isSuccessful()) {
Log.d(TAG, "Successfully linked emailLink credential!");
AuthResult result = task.getResult();
Log.e(TAG, "Error linking emailLink credential", task.getException());

Firebase.auth.currentUser!!.reauthenticateAndRetrieveData(credential)
Log.e(TAG, "Error reauthenticating", task.exception)
AuthCredential credential =
EmailAuthProvider.getCredentialWithLink(email, emailLink);

.addOnCompleteListener(new OnCompleteListener<AuthResult>() {
@Override
public void onComplete(@NonNull Task<AuthResult> task) {
if (task.isSuccessful()) {
Log.e(TAG, "Error reauthenticating", task.getException());
Firebase Authentication Android SDK v23.2.0 이상 및 Firebase BoM v33.9.0 이상에 대체 솔루션이 게시되었습니다.

앱에서 이전 스타일 링크를 사용하는 경우 새 Firebase Hosting 기반 시스템으로 앱을 마이그레이션 [https://firebase.google.com/docs/auth/android/email-link-migration?hl=ko]해야 합니다.

지원 중단됨: 이메일-비밀번호 로그인과 이메일 링크 로그인 구별

2023년 9월 15일 이후에 프로젝트를 만든 경우 이메일 열거 보호가 기본적으로 사용 설정됩니다. 이 기능은 프로젝트의 사용자 계정 보안을 개선하지만, 이전에 식별자 우선 인증 과정을 구현하는 데 권장되었던 fetchSignInMethodsForEmail() 메서드는 사용 중지됩니다.

프로젝트에서 이메일 열거 보호를 사용 중지할 수 있지만 그렇게 하지 않는 것이 좋습니다.

자세한 내용은 이메일 열거 보호 [https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection?hl=ko]에 대한 문서를 참조하세요.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 FirebaseUser [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseUser?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/android/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth?hl=ko#signOut()]을 호출합니다.

Kotlin
Firebase.auth.signOut()MainActivity.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L415-L415]

Java
FirebaseAuth.getInstance().signOut();MainActivity.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L501-L501]

의견 보내기