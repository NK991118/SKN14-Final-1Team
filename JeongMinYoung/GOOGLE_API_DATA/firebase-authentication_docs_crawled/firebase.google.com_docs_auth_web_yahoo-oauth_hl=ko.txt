Source URL: https://firebase.google.com/docs/auth/web/yahoo-oauth?hl=ko
Title: 자바스크립트에서 Yahoo를 사용하여 인증

의견 보내기

자바스크립트에서 Yahoo를 사용하여 인증

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Firebase SDK를 사용하면 엔드 투 엔드 로그인 과정을 실행하는 앱에 일반 OAuth 로그인을 통합할 수 있어 사용자가 Yahoo와 같은 OAuth 제공업체를 통해 Firebase로 인증할 수 있습니다.

시작하기 전에

사용자가 Yahoo 계정을 통해 로그인하도록 하려면 우선 Firebase 프로젝트에서 Yahoo를 로그인 제공업체로 사용 설정해야 합니다.

자바스크립트 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/web/setup?hl=ko].
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 Yahoo 제공업체를 사용 설정합니다.
해당 제공업체의 개발자 콘솔에서 제공되는 클라이언트 ID 및 클라이언트 보안 비밀번호를 제공업체 구성에 추가합니다.

Yahoo OAuth 클라이언트를 등록하려면 Yahoo에 웹 애플리케이션을 등록하는 방법 [https://developer.yahoo.com/oauth2/guide/openid_connect/getting_started.html]에 대한 Yahoo 개발자 문서를 따릅니다.
OpenID Connect API 권한 2개(profile 및 email)를 선택해야 합니다.
이러한 제공업체에 앱을 등록할 때 프로젝트의 *.firebaseapp.com 도메인을 앱의 리디렉션 도메인으로 등록해야 합니다.

저장을 클릭합니다.

Firebase SDK로 로그인 과정 처리

웹 앱을 빌드하는 경우 Firebase JavaScript SDK로 전체 로그인 과정을 처리하면 가장 손쉽게 Yahoo 계정을 통해 Firebase로 사용자를 인증할 수 있습니다.

Firebase JavaScript SDK로 로그인 과정을 처리하려면 다음 단계를 따르세요.

제공업체 ID OAuthProvider을 사용하여 OAuthProvider의 인스턴스를 생성합니다.

Web
import { OAuthProvider } from "firebase/auth";

provider.setCustomParameters({
provider.setCustomParameters({
Firebase에서 요구하는 매개변수는 setCustomParameters()와 함께 전달할 수 없습니다. 이러한 매개변수에는 client_id, redirect_uri, response_type, scope, state가 있습니다.
선택사항: 인증 제공업체에서 요청하고자 하는 profile 및 email 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다. 애플리케이션에서 Yahoo API의 비공개 사용자 데이터에 대한 액세스가 필요한 경우 Yahoo 개발자 콘솔의 API 권한에서 Yahoo API에 대한 권한을 요청해야 합니다. 요청받은 OAuth 범위는 앱의 API 권한에서 사전 구성된 범위와 정확하게 일치해야 합니다. 예를 들어 사용자 연락처에 읽기/쓰기 액세스 권한이 요청되고 앱의 API 권한에서 사전 구성되었다면 읽기 전용 OAuth 범위 sdct-r 대신 sdct-w를 전달해야 합니다. 그렇지 않으면 과정이 실패하고 최종 사용자에게 오류가 표시됩니다.

Web
OAuth 제공업체 객체를 사용해 Firebase로 인증합니다. 팝업 창을 띄우거나 로그인 페이지로 리디렉션하여 사용자가 Yahoo 계정에 로그인하도록 유도할 수 있습니다. 휴대기기의 경우 리디렉션을 사용할 것을 권장합니다.

팝업 창을 사용해 로그인하려면 다음과 같이 signInWithPopup을 호출합니다.

Web
import { getAuth, signInWithPopup, OAuthProvider } from "firebase/auth";

.then((result) => {
firebase.auth().signInWithPopup(provider)
.then((result) => {

사용자가 로그인을 완료하고 페이지로 돌아간 후에 getRedirectResult를 호출하여 로그인 결과를 가져올 수 있습니다.

Web
import { getAuth, signInWithRedirect } from "firebase/auth";

firebase.auth().signInWithRedirect(provider);yahoo-oauth.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/yahoo-oauth.js#L54-L54]

성공적으로 완료되면 제공업체에 연결된 OAuth ID 토큰 및 액세스 토큰을 반환되는 firebase.auth.UserCredential 객체에서 검색할 수 있습니다.

OAuth 액세스 토큰을 사용하면 Yahoo API [https://developer.yahoo.com/oauth2/guide/apirequests/]를 호출할 수 있습니다.

예를 들어 기본 프로필 정보를 가져오려면 다음 REST API를 호출할 수 있습니다.

curl -i -H "Authorization: Bearer ACCESS_TOKEN" https://social.yahooapis.com/v1/user/YAHOO_USER_UID/profile?format=json

여기서 YAHOO_USER_UID는 firebase.auth().currentUser.providerData[0].uid 필드 또는 result.additionalUserInfo.profile에서 검색할 수 있는 Yahoo 사용자의 ID입니다.
위의 예시는 로그인 과정에 중점을 두고 있지만 linkWithPopup/linkWithRedirect를 사용하여 Yahoo 제공업체를 기존 사용자에 연결할 수도 있습니다. 예를 들어 여러 제공업체를 동일한 사용자에 연결하여 그 중 하나로 로그인하도록 허용할 수 있습니다.

Web
import { getAuth, linkWithPopup, OAuthProvider } from "firebase/auth";

.then((result) => {
.then((result) => {
import { getAuth, reauthenticateWithPopup, OAuthProvider } from "firebase/auth";

.then((result) => {
.then((result) => {

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 이메일 주소당 계정 1개를 사용 설정한 경우 다른 Firebase 사용자의 제공업체(예: Google)에 이미 존재하는 이메일을 사용하여 Yahoo와 같은 제공업체에 로그인을 시도하면 AuthCredential 객체(Yahoo 사용자 인증 정보)와 함께 auth/account-exists-with-different-credential 오류가 발생합니다. 사용자가 원하는 제공업체에 로그인하려면 먼저 기존 제공업체(예: Google)에 로그인한 다음 신규 제공업체의 AuthCredential(Yahoo 사용자 인증 정보)에 연결해야 합니다.

팝업 모드

signInWithPopup을 사용하는 경우 다음 예시와 같은 코드를 사용해 auth/account-exists-with-different-credential 오류를 처리할 수 있습니다.

import {
getAuth,
linkWithCredential,
signInWithPopup,
OAuthProvider,
Chrome 확장 프로그램에서 Firebase로 인증

Chrome 확장 프로그램 앱을 빌드하는 경우에는 오프스크린 문서 가이드 [https://firebase.google.com/docs/auth/web/chrome-extension?hl=ko#use_offscreen_documents]를 참조하세요.

Yahoo 로그인을 위한 리디렉션 도메인 맞춤설정

프로젝트를 만들 때 Firebase에서는 프로젝트의 고유한 하위 도메인(https://my-app-12345.firebaseapp.com)을 프로비저닝합니다.

이 도메인은 OAuth 로그인을 위한 리디렉션 메커니즘으로도 사용됩니다. 이 도메인은 지원되는 모든 OAuth 제공업체에 대해 허용되어야 합니다. 하지만 이로 인해 사용자는 애플리케이션으로 다시 리디렉션되기 전에 Yahoo에 로그인하는 과정에서 이 도메인을 볼 수 있습니다(예: 다음으로 이동: https://my-app-12345.firebaseapp.com).

하위 도메인이 표시되지 않게 하려면 Firebase Hosting으로 커스텀 도메인을 설정하면 됩니다.

Hosting용 도메인 설정 [https://firebase.google.com/docs/hosting/custom-domain?hl=ko]의 1~3단계를 따릅니다. 도메인 소유권을 확인하면 Hosting에서 커스텀 도메인의 SSL 인증서를 프로비저닝합니다.
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 승인된 도메인 목록에 커스텀 도메인 auth.custom.domain.com을 추가합니다.
Yahoo 개발자 콘솔 또는 OAuth 설정 페이지에서 커스텀 도메인 https://auth.custom.domain.com/__/auth/handler에서 액세스할 수 있는 리디렉션 페이지의 URL을 허용 목록에 추가합니다.
자바스크립트 라이브러리를 초기화할 때는 authDomain 필드를 사용하여 커스텀 도메인을 지정합니다.var config = {
apiKey: '...',

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트에 저장되며 사용자의 로그인 방법과 무관하게 프로젝트 내의 모든 앱에서 사용자 본인 확인에 사용할 수 있습니다.

앱에서 사용자의 인증 상태를 파악할 때 권장하는 방법은 Auth 객체에 관찰자를 설정하는 것입니다. 그러면 User 객체로부터 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/web/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/web/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/js/auth?hl=ko#signout]을 호출합니다.

Web
import { getAuth, signOut } from "firebase/auth";

firebase.auth().signOut().then(() => {