Source URL: https://firebase.google.com/docs/auth/ios/anonymous-auth?hl=ko
Title: Apple 플랫폼에서 익명으로 Firebase에 인증

의견 보내기

Apple 플랫폼에서 익명으로 Firebase에 인증

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Firebase Authentication을 사용하면 임시 익명 계정을 생성 및 사용하여 Firebase에 인증할 수 있습니다. 이 임시 익명 계정을 통해 아직 앱에 가입하지 않은 사용자들도 보안 규칙으로 보호받는 데이터를 사용할 수 있습니다. 익명 사용자가 앱에 가입하기로 결정하면 이 사용자의 로그인 인증 정보를 해당 익명 계정에 연결 [https://firebase.google.com/docs/auth/ios/account-linking?hl=ko]하여 사용자가 추후 세션에서도 보호받는 데이터를 계속 사용하도록 할 수 있습니다.

시작하기 전에

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Add Packages(패키지 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk.git

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firebase Authentication 라이브러리를 선택합니다.

타겟 빌드 설정의 Other Linker Flags(기타 링커 플래그) 섹션에 -ObjC 플래그를 추가합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

아직 Firebase 프로젝트에 앱을 연결하지 않았다면 Firebase Console [https://console.firebase.google.com/?hl=ko]에서 연결합니다.
다음과 같이 익명 인증을 사용 설정합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 페이지에서 익명 로그인 방법을 사용 설정합니다.
선택사항: 프로젝트를 Firebase Authentication with Identity Platform [https://firebase.google.com/auth?hl=ko#identity-platform]으로 업그레이드한 경우 자동 정리를 사용 설정할 수 있습니다. 이 설정을 사용하면 30일이 지난 익명 계정은 자동으로 삭제됩니다. 자동 정리가 사용 설정된 프로젝트에서는 익명 인증이 더 이상 사용량 한도 또는 결제 할당량에 포함되지 않습니다. 자동 정리 [https://firebase.google.com/docs/auth/ios/anonymous-auth?hl=ko#auto-cleanup]를 참조하세요.

Firebase에 익명으로 인증

로그아웃 상태의 사용자가 Firebase에 인증이 필요한 앱 기능을 사용할 때 다음 절차를 밟으면 사용자를 익명으로 로그인시킬 수 있습니다.

UIApplicationDelegate로 FirebaseCore 모듈과 앱 대리자가 사용하는 다른 Firebase 모듈 [https://firebase.google.com/docs/ios/setup?hl=ko#available-pods]을 가져옵니다.
예를 들어 Cloud Firestore와 Authentication을 사용하려면 다음을 따르세요.

SwiftUI
import SwiftUI
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
Objective-C
@import FirebaseCore;
@import FirebaseFirestore;
@import FirebaseAuth;
FirebaseApp.configure()

Swift
FirebaseApp.configure()

Objective-C

SwiftUI를 사용하는 경우 앱 대리자를 만들고 UIApplicationDelegateAdaptor 또는 NSApplicationDelegateAdaptor를 통해 App 구조체에 연결해야 합니다. 앱 대리자 재구성도 중지해야 합니다. 자세한 내용은 SwiftUI 안내 [https://firebase.google.com/docs/ios/learn-more?hl=ko#swiftui]를 참조하세요.

SwiftUI
@main
struct YourApp: App {
ContentView()
Auth.auth().signInAnonymously { authResult, error in
Objective-C
[[FIRAuth auth] signInAnonymouslyWithCompletion:^(FIRAuthDataResult * _Nullable authResult,
NSError * _Nullable error) {
guard let user = authResult?.user else { return }
Objective-C
FIRUser *user = authResult.user;
BOOL isAnonymous = user.anonymous;  // YES
NSString *uid = user.uid;

프로젝트 악용을 방지하기 위해 Firebase에서는 짧은 시간 동안 같은 IP 주소에서 이메일/비밀번호 및 익명 방식으로 애플리케이션에 새로 가입할 수 있는 횟수를 제한합니다. Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 이 할당량의 한시적 변경을 요청하거나 예약할 수 있습니다.

익명 계정을 영구 계정으로 전환

익명 사용자가 앱에 가입하면 사용자가 가입 전에 하던 작업을 신규 계정에서 이어서 하게 할 수 있습니다. 예를 들면 사용자가 가입 전에 장바구니에 담은 물품이 신규 계정의 장바구니에 나타나도록 할 수 있습니다. 그러려면 다음 절차를 완료하세요.

사용자가 가입하면 해당 사용자가 선택한 인증 제공업체의 로그인 과정을 진행하되 FIRAuth.signInWith [https://firebase.google.com/docs/reference/ios/firebaseauth/interface_f_i_r_auth?hl=ko] 메서드 호출 전까지만 진행합니다. 예를 들어 사용자의 Google ID 토큰, Facebook 액세스
토큰 또는 이메일 주소와 비밀번호를 가져옵니다.

다음과 같이 새로운 인증 제공업체의 FIRAuthCredential을 가져옵니다.

Google 로그인

Swift
guard
Objective-C
FIRAuthCredential *credential =
[FIRGoogleAuthProvider credentialWithIDToken:result.user.idToken.tokenString
Facebook 로그인

Swift
Objective-C
FIRAuthCredential *credential = [FIRFacebookAuthProvider
Objective-C
FIRAuthCredential *credential =
[FIREmailAuthProvider credentialWithEmail:email
user.link(with: credential) { authResult, error in
Objective-C
[[FIRAuth auth].currentUser linkWithCredential:credential
completion:^(FIRAuthDataResult *result, NSError *_Nullable error) {