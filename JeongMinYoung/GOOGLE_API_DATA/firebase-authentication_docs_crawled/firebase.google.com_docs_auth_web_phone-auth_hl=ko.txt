Source URL: https://firebase.google.com/docs/auth/web/phone-auth?hl=ko
Title: 자바스크립트를 사용하여 전화번호로 Firebase에 인증하기

의견 보내기

자바스크립트를 사용하여 전화번호로 Firebase에 인증하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Firebase Authentication을 사용하면 사용자의 전화로 SMS 메시지를 전송하여 로그인하는 것이 가능합니다. 사용자는 SMS 메시지에 포함된 일회용 코드를 사용하여 로그인합니다.

앱에 전화번호 로그인을 추가하는 가장 쉬운 방법은 FirebaseUI [https://github.com/firebase/firebaseui-web/]를 사용하는 것입니다. 여기에는 비밀번호 기반 및 제휴 로그인뿐만 아니라 전화번호 로그인의 과정을 구현하는 삽입형 로그인 위젯이 포함됩니다. 이 문서에서는 Firebase SDK를 사용하여 전화번호 로그인 과정을 구현하는 방법을 설명합니다.

Google은 Firebase를 비롯한 Google 서비스 전반에서 스팸 및 악용 사례를 방지하기 위해 최종 사용자가 인증용으로 제공하는 전화번호를 전송하고 저장합니다. 개발자는 Firebase Authentication 전화번호 로그인 서비스를 사용하기 전에 최종 사용자로부터 적절한 동의를 얻어야 합니다.

시작하기 전에

아직 복사하지 않았다면 JavaScript 프로젝트에 Firebase 추가 [https://firebase.google.com/docs/web/setup?hl=ko]의 설명대로 Firebase Console [https://console.firebase.google.com/?hl=ko]의 초기화 스니펫을 프로젝트에 복사합니다.

보안 문제

전화번호만 사용하는 인증은 편리하기는 하지만, 전화번호 소유권은 사용자 간에 쉽게 이전될 수 있으므로 다른 방식보다 보안성이 떨어집니다. 또한 기기에 여러 사용자 프로필이 있는 경우 SMS 메시지를 받을 수 있는 사람이라면 누구든지 기기의 전화번호로 계정에 로그인할 수 있습니다.

앱에서 전화번호 기반 로그인을 사용하는 경우 더 안전한 로그인 방법을
함께 제공해야 하고, 전화번호 로그인을 사용하면 보안이 약화된다는
점을 사용자에게 알려야 합니다.

Firebase 프로젝트에서 전화번호 로그인 사용 설정

SMS 메시지로 사용자를 로그인 처리하려면 우선 Firebase 프로젝트에서 전화번호 로그인 방법을 사용 설정해야 합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 페이지에서 전화번호 로그인 방법을 사용 설정합니다.

같은 페이지에서, OAuth 리디렉션 도메인 섹션에 앱을 호스팅할
도메인이 나열되지 않은 경우 도메인을 추가합니다. 전화 인증을 목적으로 localhost는 호스팅된 도메인으로 허용되지 않습니다.

reCAPTCHA 인증기 설정

전화번호로 사용자를 로그인 처리하려면 우선 Firebase의 reCAPTCHA
인증기를 설정해야 합니다. Firebase는 전화번호 인증 요청이 앱의 허용 도메인 중 하나에서 전송되었는지 확인하는 등 reCAPTCHA를 통해 악용을 방지합니다.

reCAPTCHA 클라이언트를 직접 설정할 필요는 없습니다. Firebase SDK의 RecaptchaVerifier 객체를 사용하면 Firebase에서 필요한 클라이언트 키와 보안 비밀을 자동으로 만들고 처리합니다.

RecaptchaVerifier 객체는 보통 사용자 작업 없이 사용자를 인증할 수 있는 보이지 않는 reCAPTCHA [https://www.google.com/recaptcha/intro/invisible.html?hl=ko]뿐만 아니라 항상 사용자가 개입해야 통과할 수 있는 reCAPTCHA 위젯도 지원합니다.

기본 렌더링된 reCAPTCHA는 reCAPTCHA를 렌더링하기 전에
Auth 인스턴스에 언어 코드를
업데이트하여 사용자 환경 설정에 따라 현지화될 수 있습니다. 앞서 언급된 현지화는 사용자에게 전송되는 인증 코드가 포함된 SMS 메시지에도 적용됩니다.

Web
import { getAuth } from "firebase/auth";

firebase.auth().languageCode = 'it';
import { getAuth, RecaptchaVerifier } from "firebase/auth";

표시되는 reCAPTCHA 위젯을 사용하려면 페이지에 위젯을 포함할 요소를 만들고 RecaptchaVerifier 객체를 만들면서 컨테이너의 ID를 지정합니다. 예를 들면 다음과 같습니다.

Web
import { getAuth, RecaptchaVerifier } from "firebase/auth";

RecaptchaVerifier 객체에 사용자가 reCAPTCHA를 완료할 때 또는 사용자가 양식을 제출하기 전에 reCAPTCHA가 만료될 때 호출되는 콜백 함수를 선택적으로 설정할 수 있습니다.

Web
import { getAuth, RecaptchaVerifier } from "firebase/auth";

recaptchaVerifier.render().then((widgetId) => {
recaptchaVerifier.render().then((widgetId) => {

Web
import { getAuth, signInWithPhoneNumber } from "firebase/auth";

.then((confirmationResult) => {
.then((confirmationResult) => {
grecaptcha.reset(window.recaptchaWidgetId);

Firebase는 악용을 방지하고자 단일 전화번호로 일정 기간 내에 보낼 수 있는 SMS 메시지 수를 제한합니다.
이 한도를 초과하면 전화번호 인증 요청이 제한될 수 있습니다.
개발 중에 이 문제가 발생하면 테스트에 다른 전화번호를 사용하거나 나중에 요청을 다시 시도하세요.

인증 코드로 사용자 로그인 처리

signInWithPhoneNumber 호출이 성공하면 사용자에게 SMS 메시지로 받은 인증 코드를 입력하라는 메시지를 표시합니다. 그런 다음 signInWithPhoneNumber의 처리 핸들러(즉, then 블록)에 전달된 ConfirmationResult 객체의 confirm 메서드에 코드를 전달하여 사용자를 로그인 처리합니다. 예를 들면 다음과 같습니다.

Web

중간 AuthCredential 객체 가져오기

사용자 계정의 AuthCredential 객체를 가져와야 하는 경우 confirm을 호출하는 대신 확인 결과의 인증 코드 및 인증 코드를 PhoneAuthProvider.credential에
전달합니다.var credential = firebase.auth.PhoneAuthProvider.credential(confirmationResult.verificationId, code);

그런 다음 인증 정보를 사용하여 사용자를 로그인 처리할 수 있습니다.

firebase.auth().signInWithCredential(credential);

가상 전화번호로 테스트

Firebase Console을 통해 개발용 가상 전화번호를 설정할 수 있습니다. 가상 전화번호로 테스트하면 다음과 같은 이점이 있습니다.

사용 할당량을 소비하지 않고 전화번호 인증을 테스트할 수 있습니다.
실제 SMS 메시지를 보내지 않고 전화번호 인증을 테스트할 수 있습니다.제한 없이 동일한 전화번호로 연속 테스트를 실행할 수 있습니다. 앱 스토어 검토 절차 중에 검토자가 동일한 전화번호를 테스트에 사용하게 될 경우 번호가 거부될 위험이 최소화됩니다.
별도의 노력 없이도 개발 환경에서 쉽게 테스트할 수 있습니다. 예를 들어 Google Play 서비스 없이 iOS 시뮬레이터 또는 Android Emulator에서 개발할 수 있습니다.프로덕션 환경에서 실제 전화번호에 일반적으로 적용되는 보안 검사에 의해 차단되지 않고 통합 테스트를 작성할 수 있습니다.

가상 전화번호는 다음 요구사항을 충족해야 합니다.

실제로 존재하지 않는 가상의 전화번호여야 합니다.
Firebase Authentication에서는 실제 사용자가 사용하는 기존 전화번호를 테스트 전화번호로 설정할 수 없습니다.
전화번호를 만드는 방법 중 하나는 555로 시작하는 번호(예: +1 650-555-3434)를 미국 테스트 전화번호로 사용하는 것입니다.
길이 및 기타 조건에 맞게 전화번호 형식을 올바르게 지정해야 합니다. 테스트 전화번호도 실제 사용자의 전화번호와 동일한 유효성 검사를 거칩니다.
개발용으로 최대 10개의 전화번호를 추가할 수 있습니다.
다른 사람이 추측하기 어려운 테스트 전화번호와 코드를 사용하고 자주 변경합니다.

가상 전화번호 및 인증 코드 생성

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
전화 제공업체를 아직 사용 설정하지 않은 경우 로그인 방법 탭에서 사용 설정합니다.
테스트용 전화번호 아코디언 메뉴를 엽니다.
테스트할 전화번호(예: +1 650-555-3434)를 입력합니다.
해당 번호에 사용할 6자리 인증 코드(예: 654321)를 입력합니다.
번호를 추가합니다. 필요한 경우 해당 행 위에 마우스를 가져가서 휴지통 아이콘을 클릭하면 전화번호와 코드를 삭제할 수 있습니다.

수동 테스트

애플리케이션에서 직접 가상 전화번호를 사용할 수 있습니다. 따라서 할당량 문제나 제한 없이 개발 단계 중에 직접 테스트를 수행할 수 있습니다.
또한 Google Play 서비스를 설치하지 않고 iOS 시뮬레이터 또는 Android 에뮬레이터에서 바로 테스트할 수 있습니다.

가상 전화번호를 입력하고 인증 코드를 보내도 실제 SMS 메시지가 전송되지 않습니다. 그 대신 이전에 구성한 인증 코드를 입력하여 로그인을 완료해야 합니다.

로그인이 완료되면 해당 전화번호로 Firebase 사용자가 생성됩니다. 사용자는 실제 전화번호 사용자와 동일한 행동과 속성을 가지며 동일한 방식으로 Realtime Database/Cloud Firestore 및 기타 서비스에 액세스할 수 있습니다. 이 절차 중에 발급된 ID 토큰에는 실제 전화번호 사용자와 같은 서명이 있습니다.

가상 전화번호의 ID 토큰에 실제 전화번호 사용자와 같은 서명이 있으므로 가상 전화번호를 안전하게 저장하고 지속적으로 재활용해야 합니다.

액세스 권한을 좀 더 제한하려는 경우 사용할 수 있는 다른 방법은 가상 전화번호 사용자에게 커스텀 클레임을 통해 테스트 역할을 설정 [https://firebase.google.com/docs/auth/admin/custom-claims?hl=ko]하여 허위 사용자로 구분하는 것입니다.

통합 테스트

Firebase Authentication은 직접 테스트 외에도 전화 인증 테스트용 통합 테스트를 작성할 수 있는 API를 제공합니다. 이러한 API는 웹에서 reCAPTCHA 요구사항을, iOS에서 백그라운드 푸시 알림을 중지하여 앱 인증을 사용 중지합니다. 따라서 이러한 흐름에서 테스트를 자동화하고 더 쉽게 구현할 수 있습니다. 또한 Android에서 즉시 인증 흐름을 테스트하는 기능도 제공합니다.

프로덕션 앱에서 앱 인증이 사용 중지되거나 가상 전화번호가 프로덕션 앱에 하드코딩되어서는 안 됩니다.

웹에서 firebase.auth.RecaptchaVerifier를 렌더링하기 전에 appVerificationDisabledForTesting을 true로 설정합니다. reCAPTCHA가 자동으로 확인되어 직접 처리하지 않고도 전화번호를 전달할 수 있습니다. reCAPTCHA를 사용 중지하더라도 실제 전화번호를 사용하면 로그인에 실패하게 됩니다. 이 API로는 가상 전화번호만 사용할 수 있습니다.

.then(function (confirmationResult) {
import { getAuth, signOut } from "firebase/auth";

firebase.auth().signOut().then(() => {