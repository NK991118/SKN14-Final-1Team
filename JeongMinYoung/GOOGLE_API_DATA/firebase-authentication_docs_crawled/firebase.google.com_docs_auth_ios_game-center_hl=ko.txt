Source URL: https://firebase.google.com/docs/auth/ios/game-center?hl=ko
Title: Game Center를 사용하여 인증

의견 보내기

Game Center를 사용하여 인증

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Game Center를 사용하여 Firebase 기반으로 개발된 Apple 플랫폼 게임에 플레이어가 로그인하도록 할 수 있습니다. Game Center를 사용하여 Firebase에 로그인하려면 우선 로컬 플레이어가 Game Center에 로그인했는지 확인한 다음 GameCenterAuthProvider 객체를 사용하여 Firebase 사용자 인증 정보를 생성합니다. 이 인증 정보를 사용하여 Firebase에 인증할 수 있습니다.

시작하기 전에

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Add Packages(패키지 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk.git

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firebase Authentication 라이브러리를 선택합니다.

타겟 빌드 설정의 Other Linker Flags(기타 링커 플래그) 섹션에 -ObjC 플래그를 추가합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

지원 중단됨: Apple에서 playerID 필드를 지원 중단 [https://developer.apple.com/documentation/gamekit/gkplayer/1521127-playerid/]했습니다. Firebase Apple 플랫폼 SDK는 버전 10.5.0 이상부터 gamePlayerID 및 teamPlayerID를 사용합니다. SDK 버전 10.5.0 이상으로 업그레이드하면 playerID를 사용하는 기존 통합이 대신 gamePlayerID 및 teamPlayerID를 사용하도록 업데이트됩니다. 기존 Game Center 로그인 통합을 SDK 버전 10.5.0 이상으로 업그레이드하면 되돌릴 수 없습니다. 자세한 내용은 메서드: accounts.signInWithGameCenter [https://cloud.google.com/identity-platform/docs/reference/rest/v1/accounts/signInWithGameCenter?hl=ko]를 참조하세요.
그런 다음 몇 가지 구성 단계를 따릅니다.

Firebase로 Apple 앱을 등록해야 합니다. 즉, 앱의 번들 ID를 App Store ID 및 팀 ID 등과 같은 선택적인 추가 정보와 함께 등록 섹션에 입력합니다. 이 정보는 로그인을 완료하기 전에 Game Center 사용자 인증 정보의 잠재고객을 안전하게 확인하는 데 필요합니다.

Game Center를 Firebase프로젝트의 로그인 제공업체로 사용 설정합니다.Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 Game Center 로그인 제공업체를 사용 설정합니다.

게임에 Game Center 로그인 통합

먼저, 게임에서 아직 Game Center를 사용하지 않는다면 Apple 개발자 사이트의 Incorporating Game Center into Your Game(Game Center를 게임에 통합) [https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/GameKit_Guide/GameCenterOverview/GameCenterOverview.html#//apple_ref/doc/uid/TP40008304-CH5-SW22] 및 Authenticating a Local Player on the Device(기기에서 로컬 플레이어 인증) [https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/GameKit_Guide/Users/Users.html#//apple_ref/doc/uid/TP40008304-CH8-SW19] 안내를 따르세요.

iTunes Connect에 제공하는 번들 ID가 Firebase 프로젝트에 앱을 연결할 때 사용한 번들 ID와 일치하는지 확인합니다.

Game Center 통합의 일부로 Game Center 인증 프로세스의 여러 지점에서 호출되는 인증 핸들러를 정의합니다. 이 핸들러에서 플레이어가 Game Center로 로그인했는지 확인합니다. 그런 경우 계속해서 Firebase에 로그인할 수 있습니다.

Swift
Objective-C
__weak GKLocalPlayer *localPlayer = [GKLocalPlayer localPlayer];
localPlayer.authenticateHandler = ^(UIViewController *gcAuthViewController,
NSError *error) {
if (gcAuthViewController != nil) {
Firebase에 인증

로컬 플레이어가 Game Center로 로그인했음을 확인한 후 GameCenterAuthProvider.getCredential()로 AuthCredential 객체를 만들고 이 객체를 signIn(with:)에 전달하여 플레이어를 게임에 로그인시킵니다.

Swift
Objective-C
Objective-C
FIRUser *user = [FIRAuth auth].currentUser;
if (user) {
NSString *playerName = user.displayName;

NSString *uid = user.uid;
Firebase 실시간 데이터베이스와 Cloud Storage 보안 규칙의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 사용해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

사용자의 Game Center 플레이어 정보를 가져오거나 Game Center
서비스에 액세스하려면 Game Kit [https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/GameKit_Guide/Introduction/Introduction.html]에서 제공하는 API를 사용하세요.

Firebase에서 사용자를 로그아웃시키려면 Auth.signOut()을 호출합니다.

Swift
Objective-C
NSError *signOutError;
BOOL status = [[FIRAuth auth] signOut:&signOutError];
if (!status) {
NSLog(@"Error signing out: %@", signOutError);
return;