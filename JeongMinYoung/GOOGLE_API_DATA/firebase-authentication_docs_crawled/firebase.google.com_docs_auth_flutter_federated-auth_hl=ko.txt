Source URL: https://firebase.google.com/docs/auth/flutter/federated-auth?hl=ko
Title: 제휴 ID 및 소셜 로그인

의견 보내기

제휴 ID 및 소셜 로그인

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

소셜 인증은 다단계 인증 흐름으로, 사용자를 계정에 로그인 처리하거나 기존 계정과 연결할 수 있게 해줍니다.

네이티브 플랫폼과 웹은 모두 사용자 인증 정보를 만든 후 signInWithCredential 또는 linkWithCredential 메서드에 전달할 수 있게 지원합니다. 웹 플랫폼에서는 팝업 또는 리디렉션을 통해 인증 프로세스를 트리거할 수 있습니다.

Google

Firebase에서 Google 로그인을 사용할 때는 대부분의 구성이 이미 설정되어 있지만 머신의 SHA1 키를 Android에서 사용 가능하도록 구성할 필요가 있습니다. 인증 문서 [https://developers.google.com/android/guides/client-auth?hl=ko]에서 키를 생성하는 방법을 확인할 수 있습니다.

Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 'Google' 로그인 제공업체가 사용 설정되어 있어야 합니다.

사용자가 이미 계정에 수동으로 등록된 후에 Google로 로그인하면 신뢰할 수 있는 제공업체의 Firebase 인증 개념으로 인해 인증 제공업체가 Google로 자동 변경됩니다. 자세한 내용은 여기 [https://groups.google.com/g/firebase-talk/c/ms_NVQem_Cw/m/8g7BFk1IAAAJ?hl=ko]에서 확인할 수 있습니다.

iOS+ 및 Android네이티브 플랫폼에서 인증 흐름을 트리거하려면 서드 파티 라이브러리가 필요합니다.

공식 google_sign_in [https://pub.dev/packages/google_sign_in] 플러그인을 설치합니다.

설치되면 로그인 흐름을 트리거하고 새 사용자 인증 정보를 만듭니다.
import 'package:google_sign_in/google_sign_in.dart';

Future<UserCredential> signInWithGoogle() async {

GoogleAuthProvider googleProvider = GoogleAuthProvider();

googleProvider.addScope('https://www.googleapis.com/auth/contacts.readonly');
googleProvider.setCustomParameters({
'login_hint': 'user@example.com'
Future<UserCredential> signInWithGoogle() async {
GoogleAuthProvider googleProvider = GoogleAuthProvider();

googleProvider.addScope('https://www.googleapis.com/auth/contacts.readonly');
googleProvider.setCustomParameters({
'login_hint': 'user@example.com'

Google Play 게임즈(Android만 해당)

Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 'Play 게임즈' 로그인 제공업체가 사용 설정되어 있어야 합니다.
Play 게임즈 Firebase 프로젝트 설정 [https://firebase.google.com/docs/auth/android/play-games?hl=ko#set-up-firebase-project]에 대한 안내를 따르세요.

Firebase 앱에서 Play 게임즈 서비스 구성 안내 [https://firebase.google.com/docs/auth/android/play-games?hl=ko#configure-play-games-with-firebase-info]를 따르세요.

Android
Future<void> _signInWithPlayGames() async {
final playGamesCredential = PlayGamesAuthProvider.credential(
.signInWithCredential(playGamesCredential);

시작하기 전에 Facebook 개발자 앱 [https://developers.facebook.com/apps/]을 설정하고 설정 절차에 따라 Facebook 로그인을 사용 설정합니다.

Facebook 앱 ID와 보안 비밀이 설정된 Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 'Facebook' 로그인 제공업체가 사용 설정되어 있어야 합니다.

iOS+ 및 Android네이티브 플랫폼에서 Facebook SDK를 설치하고 인증 흐름을 트리거하려면 서드 파티 라이브러리가 필요합니다.

flutter_facebook_auth [https://pub.dev/packages/flutter_facebook_auth] 플러그인을 설치합니다.

Android 및 iOS Facebook SDK 모두가 올바르게 초기화되었는지 확인하려면 플러그인 문서의 단계를 따라야 합니다. 완료되면 로그인 흐름을 트리거하고 Facebook 사용자 인증 정보를 만든 후 사용자를 로그인 처리합니다.
import 'package:flutter_facebook_auth/flutter_facebook_auth.dart';

Future<UserCredential> signInWithFacebook() async {

Firebase Console의 OAuth 리디렉션 URI가 Facebook 앱에 유효한 OAuth 리디렉션 URI로 추가되어 있는지 확인합니다.
FacebookAuthProvider facebookProvider = FacebookAuthProvider();

facebookProvider.addScope('email');
facebookProvider.setCustomParameters({
'display': 'popup',
Future<UserCredential> signInWithFacebook() async {
FacebookAuthProvider facebookProvider = FacebookAuthProvider();

facebookProvider.addScope('email');
facebookProvider.setCustomParameters({
'display': 'popup',

iOS+시작하기 전에 Apple로 로그인을 구성 [https://firebase.google.com/docs/auth/ios/apple?hl=ko#configure-sign-in-with-apple]하고 Apple을 로그인 제공업체로 사용 설정 [https://firebase.google.com/docs/auth/ios/apple?hl=ko#enable-apple-as-a-sign-in-provider]합니다.

그런 다음 Runner 앱에 'Apple로 로그인' 기능이 있는지 확인합니다.
Android
시작하기 전에 Apple로 로그인을 구성 [https://firebase.google.com/docs/auth/android/apple?hl=ko#configure_sign_in_with_apple]하고 Apple을 로그인 제공업체로 사용 설정 [https://firebase.google.com/docs/auth/android/apple?hl=ko#enable-apple-as-a-sign-in-provider]합니다.
웹시작하기 전에 Apple로 로그인을 구성 [https://firebase.google.com/docs/auth/web/apple?hl=ko#configure-sign-in-with-apple]하고 Apple을 로그인 제공업체로 사용 설정 [https://firebase.google.com/docs/auth/web/apple?hl=ko#enable-apple-as-a-sign-in-provider]합니다.
import 'package:firebase_auth/firebase_auth.dart';

Future<UserCredential> signInWithApple() async {
final appleProvider = AppleAuthProvider();
if (kIsWeb) {
await FirebaseAuth.instance.signInWithPopup(appleProvider);
Apple 플랫폼 로그인만 해당

iOS+ 플랫폼에서는 다음 방법을 사용하여 Apple에 로그인할 수도 있습니다.
String rawNonce = createNonce();
String hashSHA256String = createHashSHA256String(rawNonce);
String idToken = await getIdToken();

final fullName = AppleFullPersonName(
familyName: 'Name',
givenName: 'Your',
idToken,
rawNonce,
fullName,

await FirebaseAuth.instance.signInWithCredential(credential);

Apple 인증 토큰 취소

Apple 플랫폼에서 Apple에 로그인하면 revokeTokenWithAuthorizationCode() API를 사용하여 Apple 인증 토큰을 취소하는 데 사용할 수 있는 승인 코드가 반환됩니다.
import 'package:firebase_auth/firebase_auth.dart';

Future<UserCredential> signInWithApple() async {
final appleProvider = AppleAuthProvider();

UserCredential userCredential = await FirebaseAuth.instance.signInWithPopup(appleProvider);
String? authCode = userCredential.additionalUserInfo?.authorizationCode;
Apple Game Center(Apple만 해당)

Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 'Game Center' 로그인 제공업체가 사용 설정되었는지 확인합니다.
Game Center Firebase 프로젝트 설정 [https://firebase.google.com/docs/auth/ios/game-center?hl=ko#before_you_begin]에 대한 안내를 따르세요.

Firebase Game Center 사용자 인증 정보를 발급하고 Firebase를 통해 로그인하려면 먼저 Game Center에 로그인해야 합니다. 이를 수행하는 방법은 다음 안내를 참조하세요 [https://firebase.google.com/docs/auth/ios/game-center?hl=ko#integrate_game_center_sign-in_into_your_game].

iOS+
Future<void> _signInWithGameCenter() async {
final credential = GameCenterAuthProvider.credential();
await FirebaseAuth.instance
.signInWithCredential(credential);

iOS+시작하기 전에 iOS용 Microsoft 로그인을 구성 [https://firebase.google.com/docs/auth/ios/microsoft-oauth?hl=ko#before_you_begin]하고 실행기에 커스텀 URL 스킴(1단계) [https://firebase.google.com/docs/auth/ios/microsoft-oauth?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]을 추가합니다.
Android
시작하기 전에 Android용 Microsoft 로그인을 구성 [https://firebase.google.com/docs/auth/android/microsoft-oauth?hl=ko#before_you_begin]하세요.

앱의 SHA-1 디지털 지문을 추가해야 합니다.
웹시작하기 전에 웹용 Microsoft 로그인을 구성 [https://firebase.google.com/docs/auth/web/microsoft-oauth?hl=ko#configure-sign-in-with-apple]하세요.
import 'package:firebase_auth/firebase_auth.dart';

Future<UserCredential> signInWithMicrosoft() async {
final microsoftProvider = MicrosoftAuthProvider();
if (kIsWeb) {
await FirebaseAuth.instance.signInWithPopup(microsoftProvider);

Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 '트위터' 로그인 제공업체가 사용 설정되었고 API 키와 API 비밀번호가 설정되었는지 확인합니다. 트위터 앱 구성 [https://apps.twitter.com/]의 앱 설정 페이지에서 Firebase OAuth 리디렉션 URI(예: my-app-12345.firebaseapp.com/__/auth/handler)가 승인 콜백 URL로 설정되어 있는지 확인합니다.

앱에 따라 승격된 API 액세스 [https://developer.twitter.com/en/portal/products/elevated]를 요청해야 할 수도 있습니다.

iOS+iOS 가이드 1단계 [https://firebase.google.com/docs/auth/ios/twitter-login?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]에 설명된 대로 커스텀 URL 스킴을 구성해야 합니다.
Android아직 앱의 SHA-1 디지털 지문을 지정하지 않았다면 Firebase Console의 설정 페이지 [https://console.firebase.google.com/project/_/settings/general/?hl=ko]에서 지정합니다. 앱의 SHA-1 디지털 지문을 얻는 방법에 대한 자세한 내용은 클라이언트 인증 [https://developers.google.com/android/guides/client-auth?hl=ko]을 참조하세요.
웹즉시 사용할 수 있습니다.
import 'package:firebase_auth/firebase_auth.dart';

Future<void> _signInWithTwitter() async {
TwitterAuthProvider twitterProvider = TwitterAuthProvider();

if (kIsWeb) {
await FirebaseAuth.instance.signInWithPopup(twitterProvider);

GitHub 개발자 설정 [https://github.com/settings/developers]에 OAuth 앱이 설정되어 있고, Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에 'GitHub' 로그인 제공업체가 사용 설정되어 있으며, 클라이언트 ID와 보안 비밀이 설정되어 있고, GitHub 앱에 콜백 URL이 설정되어 있는지 확인합니다.

iOS+ 및 Android네이티브 플랫폼의 경우 google-services.json 및 GoogleService-Info.plist를 추가해야 합니다.

iOS의 경우 iOS 가이드 1단계에 설명된 대로 [https://firebase.google.com/docs/auth/ios/github-auth?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk] 맞춤 URL 스킴을 추가합니다.
Future<UserCredential> signInWithGitHub() async {
GithubAuthProvider githubProvider = GithubAuthProvider();

return await FirebaseAuth.instance.signInWithProvider(githubProvider);
GitHub 제공업체를 만들고 signInWithPopup 메서드에 사용자 인증 정보를 제공합니다. 그러면 사용자에게 GitHub 애플리케이션에 로그인하도록 요청하는 새 창이 트리거됩니다.
Future<UserCredential> signInWithGitHub() async {
GithubAuthProvider githubProvider = GithubAuthProvider();

Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 'Yahoo' 로그인 제공업체가 사용 설정되어 있고 API 키와 API 비밀번호가 설정되어 있어야 합니다. 또한 Firebase OAuth 리디렉션 URI(예: my-app-12345.firebaseapp.com/__/auth/handler)가 앱의 Yahoo 개발자 네트워크 구성에서 리디렉션 URI로 설정되어 있는지 확인합니다.

iOS+시작하기 전에 iOS용 Yahoo 로그인을 구성 [https://firebase.google.com/docs/auth/ios/yahoo-oauth?hl=ko#before_you_begin]하고 실행기에 커스텀 URL 스킴(1단계) [https://firebase.google.com/docs/auth/ios/yahoo-oauth?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]을 추가합니다.
Android
시작하기 전에 Android용 Yahoo 로그인을 구성 [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#before_you_begin]하세요.

앱의 SHA-1 디지털 지문을 추가해야 합니다.
웹즉시 사용할 수 있습니다.
import 'package:firebase_auth/firebase_auth.dart';

Future<UserCredential> signInWithYahoo() async {
final yahooProvider = YahooAuthProvider();
if (kIsWeb) {
await _auth.signInWithPopup(yahooProvider);
OAuth 액세스 토큰 사용

AuthProvider를 사용하면 다음 요청을 통해 제공업체와 연결된 액세스 토큰을 가져올 수 있습니다.
final appleProvider = AppleAuthProvider();

final user = await FirebaseAuth.instance.signInWithProvider(appleProvider);
final accessToken = user.credential?.accessToken;

final appleProvider = AppleAuthProvider();

if (kIsWeb) {
await FirebaseAuth.instance.currentUser?.linkWithPopup(appleProvider);

if (kIsWeb) {
await FirebaseAuth.instance.currentUser?.reauthenticateWithPopup(appleProvider);