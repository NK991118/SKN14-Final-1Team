Source URL: https://firebase.google.com/docs/auth/android/github-auth?hl=ko
Title: Android에서 GitHub를 사용하여 인증하기

의견 보내기

Android에서 GitHub를 사용하여 인증하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Firebase SDK를 통해 엔드 투 엔드 로그인 과정을 실행하는 앱에 웹 기반의 일반 OAuth 로그인을 통합하여 사용자가 GitHub 계정을 사용하여 Firebase로 인증하도록 할 수 있습니다.

시작하기 전에

사용자가 GitHub 계정을 통해 로그인하도록 하려면 우선 Firebase 프로젝트에서 GitHub를 로그인 제공업체로 사용 설정해야 합니다.

아직 추가하지 않았다면 Android 프로젝트에 Firebase를 추가 [https://firebase.google.com/docs/android/setup?hl=ko]합니다.
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 GitHub 제공업체를 사용 설정합니다.
해당 제공업체의 개발자 콘솔에서 제공되는 클라이언트 ID 및 클라이언트 보안 비밀번호를 제공업체 구성에 추가합니다.

GitHub에서 개발자 애플리케이션으로 앱을 등록 [https://github.com/settings/applications/new]하고 앱의 OAuth 2.0 클라이언트 ID와 클라이언트 보안 비밀번호를 가져옵니다.
GitHub 앱 구성 [https://github.com/settings/developers]의 앱 설정 페이지에서 Firebase OAuth 리디렉션 URI(예: my-app-12345.firebaseapp.com/__/auth/handler)가 승인 콜백 URL로 설정되어 있는지 확인합니다.

저장을 클릭합니다.

모듈(앱 수준) Gradle 파일(일반적으로 <project>/<app-module>/build.gradle.kts 또는 <project>/<app-module>/build.gradle)에서 Android용 Firebase Authentication 라이브러리의 종속 항목을 추가합니다. 라이브러리 버전 관리 제어에는 Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하는 것이 좋습니다.

dependencies {
BoM을 사용하지 않고 Firebase 라이브러리 종속 항목을 추가합니다.

Firebase BoM을 사용하지 않도록 선택한 경우에는 종속 항목 줄에 각 Firebase 라이브러리 버전을 지정해야 합니다.
앱에서 여러 Firebase 라이브러리를 사용하는 경우 모든 버전이 호환되도록 BoM을 사용하여 라이브러리 버전을 관리하는 것이 좋습니다.

dependencies {
Firebase SDK로 로그인 과정 처리하기

Android 앱을 빌드하는 경우 Firebase Android SDK로 전체 로그인 과정을 처리하면 가장 손쉽게 GitHub 계정을 통해 Firebase로 사용자를 인증할 수 있습니다.

Firebase Android SDK로 로그인 과정을 처리하려면 다음 단계를 따릅니다.

제공업체 ID github.com을 사용하여 빌더로 OAuthProvider의 인스턴스를 생성합니다.

Kotlin
val provider = OAuthProvider.newBuilder("github.com")GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L35-L35]
Java
OAuthProvider.Builder provider = OAuthProvider.newBuilder("github.com");GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L35-L35]

선택사항: OAuth 요청과 함께 전송하고자 하는 커스텀 OAuth 매개변수를 추가로 지정합니다.

Kotlin
Firebase에서 요구하는 매개변수는 setCustomParameters()와 함께 전달할 수 없으며, 이러한 매개변수에는 client_id, response_type, redirect_uri, state, scope, response_mode가 있습니다.
선택사항: 인증 제공업체에서 요청하고자 하는 기본 프로필 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다. 애플리케이션에서 GitHub API의 비공개 사용자 데이터에 대한 액세스가 필요한 경우 GitHub 개발자 콘솔의 API 권한에서 GitHub API에 대한 액세스 권한을 요청해야 합니다. 요청받은 OAuth 범위는 앱의 API 권한으로 사전 구성된 범위와 정확하게 일치해야 합니다.

Kotlin
List<String> scopes =
new ArrayList<String>() {
add("user:email");
val pendingResultTask = firebaseAuth.pendingAuthResult
if (pendingResultTask != null) {
Task<AuthResult> pendingResultTask = firebaseAuth.getPendingAuthResult();
if (pendingResultTask != null) {
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
firebaseAuth
.startActivityForSignInWithProvider(activity, provider.build())
firebaseAuth
.startActivityForSignInWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
firebaseUser
.startActivityForLinkWithProvider(activity, provider.build())
FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();

firebaseUser
.startActivityForLinkWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {

Kotlin
firebaseUser
.startActivityForReauthenticateWithProvider(activity, provider.build())
FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();

firebaseUser
.startActivityForReauthenticateWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
Firebase.auth.signOut()MainActivity.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L415-L415]

Java
FirebaseAuth.getInstance().signOut();MainActivity.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L501-L501]

의견 보내기