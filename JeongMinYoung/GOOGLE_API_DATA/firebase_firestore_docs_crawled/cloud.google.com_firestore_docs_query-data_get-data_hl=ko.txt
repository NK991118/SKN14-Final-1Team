Source URL: https://cloud.google.com/firestore/docs/query-data/get-data?hl=ko
Title: 데이터 가져오기

의견 보내기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

데이터 가져오기

Firestore에 저장된 데이터 검색 방법에는 세 가지가 있습니다. 문서, 문서 컬렉션 또는 쿼리 결과에 다음 메서드 중 하나를 사용할 수 있습니다.

메서드를 호출하여 데이터를 한 번 가져옵니다.
데이터 변경 이벤트를 수신하는 리스너를 설정합니다.
데이터 번들 [https://firebase.google.com/docs/firestore/bundles?hl=ko]을 통해 외부 소스에서 Firestore 스냅샷 데이터를 일괄 로드합니다. 자세한 내용은 번들 문서를 참조하세요.

리스너를 설정하면 Firestore는 리스너에 데이터의 초기
스냅샷을 전송하고, 문서가 변경될 때마다 스냅샷을 전송하게 됩니다.참고: 코드 샘플에서는 여러 언어를 다루지만 샘플을 설명하는 텍스트는 웹 메서드 이름을 참조합니다.시작하기 전에

Firestore 빠른 시작 [https://cloud.google.com/firestore/docs/quickstarts?hl=ko] 중 하나를 따라 Firestore 데이터베이스를 만듭니다.

Firestore 초기화

Firestore의 인스턴스를 초기화합니다.

웹 버전 9

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

import "firebase/firestore";

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

import FirebaseCore
import FirebaseFirestore
FirebaseApp.configure()

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

@import FirebaseCore;
@import FirebaseFirestore;

FIRFirestore *defaultFirestore = [FIRFirestore firestore];AppDelegate.m [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/objc/firestore-smoketest-objc/AppDelegate.m#L32-L32]

KotlinAndroid
db = FirebaseFirestore.instance;

자바

import com.google.cloud.firestore.Firestore [https://cloud.google.com/java/docs/reference/google-cloud-firestore/latest/com.google.cloud.firestore.Firestore.html?hl=ko];
import com.google.cloud.firestore.FirestoreOptions [https://cloud.google.com/java/docs/reference/google-cloud-firestore/latest/com.google.cloud.firestore.FirestoreOptions.html?hl=ko];

FirestoreOptions firestoreOptions =
FirestoreOptions.getDefaultInstance().toBuilder()
.setProjectId(projectId)
.setCredentials(GoogleCredentials.getApplicationDefault())
.build();
Firestore db = firestoreOptions.getService();Quickstart.java [https://github.com/googleapis/java-firestore/blob/e3aafbe5c7e8d3286aca360174cb086f4d409803/samples/snippets/src/main/java/com/example/firestore/Quickstart.java#L47-L52]

Python

from google.cloud import firestore

# The `project` parameter is optional and represents which project the client
# will act on behalf of. If not supplied, the client falls back to the default
# project inferred from the environment.
db = firestore.Client [https://cloud.google.com/python/docs/reference/firestore/latest/google.cloud.firestore_v1.client.Client.html?hl=ko](project="my-project-id")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L26-L33]

Python(비동기)

from google.cloud import firestore

# The `project` parameter is optional and represents which project the client
# will act on behalf of. If not supplied, the client falls back to the default
# project inferred from the environment.
db = firestore.AsyncClient [https://cloud.google.com/python/docs/reference/firestore/latest/google.cloud.firestore_v1.async_client.AsyncClient.html?hl=ko](project="my-project-id")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L22-L27]

C++

import (
"context"
"flag"
"fmt"
"log"

"google.golang.org/api/iterator"

"cloud.google.com/go/firestore"

func createClient(ctx context.Context) *firestore.Client {

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

use Google\Cloud\Firestore\FirestoreClient;

/**
* Initialize Cloud Firestore with default project ID.
*/
function setup_client_create(string $projectId = null)
printf('Created Cloud Firestore client with default project ID.' . PHP_EOL);
printf('Created Cloud Firestore client with project ID: %s' . PHP_EOL, $projectId);
using Firebase.Firestore;
using Firebase.Extensions;
FirebaseFirestore db = FirebaseFirestore.DefaultInstance;

C#

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

FirestoreDb db = FirestoreDb.Create(project);

require "google/cloud/firestore"

# The `project_id` parameter is optional and represents which project the
# client will act on behalf of. If not supplied, the client falls back to the
# default project inferred from the environment.
firestore = Google::Cloud::Firestore.new project_id: project_id

puts "Created Cloud Firestore client with given project ID."quickstart.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/quickstart.rb#L19-L26]

예시 데이터

우선 도시에 관한 데이터를 작성하고 다양한 방식으로 이 데이터를 불러오는 방법에 대해 살펴보세요.

웹 버전 9
import { collection, doc, setDoc } from "firebase/firestore";

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

"name": "San Francisco",
"state": "CA",
"country": "USA",
"capital": false,
"population": 860000,
"regions": ["west_coast", "norcal"]
])
citiesRef.document("LA").setData([
"name": "Los Angeles",
"state": "CA",
"country": "USA",
"capital": false,
"population": 3900000,
"regions": ["west_coast", "socal"]
])
citiesRef.document("DC").setData([
"name": "Washington D.C.",
"country": "USA",
"capital": true,
"population": 680000,
"regions": ["east_coast"]
])
citiesRef.document("TOK").setData([
"name": "Tokyo",
"country": "Japan",
"capital": true,
"population": 9000000,
"regions": ["kanto", "honshu"]
])
citiesRef.document("BJ").setData([
"name": "Beijing",
"country": "China",
"capital": true,
"population": 21500000,
"regions": ["jingjinji", "hebei"]
])ViewController.swift [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/swift/firestore-smoketest/ViewController.swift#L628-L666]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRCollectionReference *citiesRef = [self.db collectionWithPath:@"cities"];
[[citiesRef documentWithPath:@"SF"] setData:@{
@"name": @"San Francisco",
@"state": @"CA",
@"country": @"USA",
@"capital": @(NO),
@"population": @860000,
@"regions": @[@"west_coast", @"norcal"]
KotlinAndroid
val cities = db.collection("cities")

val data1 = hashMapOf(
"name" to "San Francisco",
"state" to "CA",
"country" to "USA",
"capital" to false,
"population" to 860000,
"regions" to listOf("west_coast", "norcal"),
cities.document("SF").set(data1)

val data2 = hashMapOf(
"name" to "Los Angeles",
"state" to "CA",
"country" to "USA",
"capital" to false,
"population" to 3900000,
"regions" to listOf("west_coast", "socal"),
cities.document("LA").set(data2)

val data3 = hashMapOf(
"name" to "Washington D.C.",
"state" to null,
"country" to "USA",
"capital" to true,
"population" to 680000,
"regions" to listOf("east_coast"),
cities.document("DC").set(data3)

val data4 = hashMapOf(
"name" to "Tokyo",
"state" to null,
"country" to "Japan",
"capital" to true,
"population" to 9000000,
"regions" to listOf("kanto", "honshu"),
cities.document("TOK").set(data4)

val data5 = hashMapOf(
"name" to "Beijing",
"state" to null,
"country" to "China",
"capital" to true,
"population" to 21500000,
"regions" to listOf("jingjinji", "hebei"),
cities.document("BJ").set(data5)DocSnippets.kt [https://github.com/firebase/snippets-android/blob/0f9300dc99f19e2a8108b4b2a97b86812299703b/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L721-L771]

자바Android
CollectionReference cities = db.collection("cities");

Map<String, Object> data1 = new HashMap<>();
data1.put("name", "San Francisco");
data1.put("state", "CA");
data1.put("country", "USA");
data1.put("capital", false);
data1.put("population", 860000);
data1.put("regions", Arrays.asList("west_coast", "norcal"));
cities.document("SF").set(data1);

Map<String, Object> data2 = new HashMap<>();
data2.put("name", "Los Angeles");
data2.put("state", "CA");
data2.put("country", "USA");
data2.put("capital", false);
data2.put("population", 3900000);
data2.put("regions", Arrays.asList("west_coast", "socal"));
cities.document("LA").set(data2);

Map<String, Object> data3 = new HashMap<>();
data3.put("name", "Washington D.C.");
data3.put("state", null);
data3.put("country", "USA");
data3.put("capital", true);
data3.put("population", 680000);
data3.put("regions", Arrays.asList("east_coast"));
cities.document("DC").set(data3);

Map<String, Object> data4 = new HashMap<>();
data4.put("name", "Tokyo");
data4.put("state", null);
data4.put("country", "Japan");
data4.put("capital", true);
data4.put("population", 9000000);
data4.put("regions", Arrays.asList("kanto", "honshu"));
cities.document("TOK").set(data4);

Map<String, Object> data5 = new HashMap<>();
data5.put("name", "Beijing");
data5.put("state", null);
data5.put("country", "China");
data5.put("capital", true);
data5.put("population", 21500000);
data5.put("regions", Arrays.asList("jingjinji", "hebei"));
cities.document("BJ").set(data5);DocSnippets.java [https://github.com/firebase/snippets-android/blob/0f9300dc99f19e2a8108b4b2a97b86812299703b/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L930-L975]

Dart
final cities = db.collection("cities");
final data1 = <String, dynamic>{
"name": "San Francisco",
"state": "CA",
"country": "USA",
"capital": false,
"population": 860000,
"regions": ["west_coast", "norcal"]

final data2 = <String, dynamic>{
"name": "Los Angeles",
"state": "CA",
"country": "USA",
"capital": false,
"population": 3900000,
"regions": ["west_coast", "socal"],

final data3 = <String, dynamic>{
"name": "Washington D.C.",
"state": null,
"country": "USA",
"capital": true,
"population": 680000,
"regions": ["east_coast"]

final data4 = <String, dynamic>{
"name": "Tokyo",
"state": null,
"country": "Japan",
"capital": true,
"population": 9000000,
"regions": ["kanto", "honshu"]

final data5 = <String, dynamic>{
"name": "Beijing",
"state": null,
"country": "China",
"capital": true,
"population": 21500000,
"regions": ["jingjinji", "hebei"],
CollectionReference cities = db.collection("cities");
List<ApiFuture<WriteResult>> futures = new ArrayList<>();
futures.add(
cities
.document("SF")
.set(
new City(
"San Francisco",
"CA",
"USA",
false,
860000L,
Arrays.asList("west_coast", "norcal"))));
futures.add(
cities
.document("LA")
.set(
new City(
"Los Angeles",
"CA",
"USA",
false,
3900000L,
Arrays.asList("west_coast", "socal"))));
futures.add(
cities
.document("DC")
.set(
new City(
"Washington D.C.", null, "USA", true, 680000L, Arrays.asList("east_coast"))));
futures.add(
cities
.document("TOK")
.set(
new City(
"Tokyo", null, "Japan", true, 9000000L, Arrays.asList("kanto", "honshu"))));
futures.add(
cities
.document("BJ")
.set(
new City(
"Beijing",
null,
"China",
true,
21500000L,
Arrays.asList("jingjinji", "hebei"))));
class City:
def __init__(self, name, state, country, capital=False, population=0, regions=[]):
self.name = name
self.state = state
self.country = country
self.capital = capital
self.population = population
self.regions = regions

@staticmethod
def from_dict(source):
# ...

def to_dict(self):
# ...

def __repr__(self):
return f"City(\
name={self.name}, \
country={self.country}, \
population={self.population}, \
capital={self.capital}, \
regions={self.regions}\
)"
cities_ref = db.collection("cities")
cities_ref.document("BJ").set(
City("Beijing", None, "China", True, 21500000, ["hebei"]).to_dict()
cities_ref.document("SF").set(
City(
"San Francisco", "CA", "USA", False, 860000, ["west_coast", "norcal"]
).to_dict()
cities_ref.document("LA").set(
City(
"Los Angeles", "CA", "USA", False, 3900000, ["west_coast", "socal"]
).to_dict()
cities_ref.document("DC").set(
City("Washington D.C.", None, "USA", True, 680000, ["east_coast"]).to_dict()
cities_ref.document("TOK").set(
City("Tokyo", None, "Japan", True, 9000000, ["kanto", "honshu"]).to_dict()
)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L152-L171]

Python(비동기)

cities_ref = db.collection("cities")
await cities_ref.document("BJ").set(
City("Beijing", None, "China", True, 21500000, ["hebei"]).to_dict()
await cities_ref.document("SF").set(
City(
"San Francisco", "CA", "USA", False, 860000, ["west_coast", "norcal"]
).to_dict()
await cities_ref.document("LA").set(
City(
"Los Angeles", "CA", "USA", False, 3900000, ["west_coast", "socal"]
).to_dict()
await cities_ref.document("DC").set(
City("Washington D.C.", None, "USA", True, 680000, ["east_coast"]).to_dict()
await cities_ref.document("TOK").set(
City("Tokyo", None, "Japan", True, 9000000, ["kanto", "honshu"]).to_dict()
)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L148-L167]

C++
CollectionReference cities = db->Collection("cities");

cities.Document("SF").Set({
FieldValue::String("norcal")})},

import (
"context"

"cloud.google.com/go/firestore"

func prepareRetrieve(ctx context.Context, client *firestore.Client) error {
cities := []struct {
id string
c  City

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$citiesRef = $db->collection('samples/php/cities');
$citiesRef->document('SF')->set([
'name' => 'San Francisco',
'state' => 'CA',
'country' => 'USA',
'capital' => false,
'population' => 860000,
'density' => 18000,
]);
$citiesRef->document('LA')->set([
'name' => 'Los Angeles',
'state' => 'CA',
'country' => 'USA',
'capital' => false,
'population' => 3900000,
'density' => 8000,
]);
$citiesRef->document('DC')->set([
'name' => 'Washington D.C.',
'state' => null,
'country' => 'USA',
'capital' => true,
'population' => 680000,
'density' => 11000,
]);
$citiesRef->document('TOK')->set([
'name' => 'Tokyo',
'state' => null,
'country' => 'Japan',
'capital' => true,
'population' => 9000000,
'density' => 16000,

]);
$citiesRef->document('BJ')->set([
'name' => 'Beijing',
'state' => null,
'country' => 'China',
'capital' => true,
'population' => 21500000,
'density' => 3500,
]);
printf('Added example cities data to the cities collection.' . PHP_EOL);

Unity
CollectionReference citiesRef = db.Collection("cities");
citiesRef.Document("SF").SetAsync(new Dictionary<string, object>(){

C#

CollectionReference citiesRef = db.Collection("cities");
await citiesRef.Document("SF").SetAsync(new Dictionary<string, object>(){

cities_ref = firestore.col collection_path
cities_ref.doc("SF").set(
name:       "San Francisco",
state:      "CA",
country:    "USA",
capital:    false,
population: 860_000
name:       "Los Angeles",
state:      "CA",
country:    "USA",
capital:    false,
population: 3_900_000
name:       "Washington D.C.",
state:      nil,
country:    "USA",
capital:    true,
population: 680_000
name:       "Tokyo",
state:      nil,
country:    "Japan",
capital:    true,
population: 9_000_000
name:       "Beijing",
state:      nil,
country:    "China",
capital:    true,
population: 21_500_000

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *docRef =
[[self.db collectionWithPath:@"cities"] documentWithPath:@"SF"];
[docRef getDocumentWithCompletion:^(FIRDocumentSnapshot *snapshot, NSError *error) {
if (snapshot.exists) {
NSLog(@"Document data: %@", snapshot.data);
NSLog(@"Document does not exist");
KotlinAndroid
val docRef = db.collection("cities").document("SF")
docRef.get()
Log.d(TAG, "No such document")
Log.d(TAG, "get failed with ", exception)
DocumentReference docRef = db.collection("cities").document("SF");
docRef.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
@Override
public void onComplete(@NonNull Task<DocumentSnapshot> task) {
if (task.isSuccessful()) {
DocumentSnapshot document = task.getResult();
if (document.exists()) {
Log.d(TAG, "DocumentSnapshot data: " + document.getData());
Log.d(TAG, "No such document");
Log.d(TAG, "get failed with ", task.getException());
final docRef = db.collection("cities").doc("SF");
docRef.get().then(
(DocumentSnapshot doc) {
final data = doc.data() as Map<String, dynamic>;
DocumentReference docRef = db.collection("cities").document("SF");
ApiFuture<DocumentSnapshot> future = docRef.get();
DocumentSnapshot document = future.get();
if (document.exists()) {
System.out.println("Document data: " + document.getData());
System.out.println("No such document!");

doc_ref = db.collection("cities").document("SF")

doc = doc_ref.get()
if doc.exists:
print(f"Document data: {doc.to_dict()}")
else:
print("No such document!")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L217-L223]

Python(비동기)

doc_ref = db.collection("cities").document("SF")

doc = await doc_ref.get()
if doc.exists:
print(f"Document data: {doc.to_dict()}")
else:
print("No such document!")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L212-L218]

C++
DocumentReference doc_ref = db->Collection("cities").Document("SF");
doc_ref.Get().OnCompletion([](const Future<DocumentSnapshot>& future) {
if (future.error() == Error::kErrorOk) {

import (
"context"
"fmt"

"cloud.google.com/go/firestore"

func docAsMap(ctx context.Context, client *firestore.Client) (map[string]interface{}, error) {
dsnap, err := client.Collection("cities").Doc("SF").Get(ctx)
if err != nil {
return nil, err

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$docRef = $db->collection('samples/php/cities')->document('SF');
$snapshot = $docRef->snapshot();

if ($snapshot->exists()) {
printf('Document data:' . PHP_EOL);
print_r($snapshot->data());
DocumentReference docRef = db.Collection("cities").Document("SF");
docRef.GetSnapshotAsync().ContinueWithOnMainThread(task =>
DocumentSnapshot snapshot = task.Result;
if (snapshot.Exists) {
Debug.Log(String.Format("Document data for {0} document:", snapshot.Id));
Dictionary<string, object> city = snapshot.ToDictionary();
foreach (KeyValuePair<string, object> pair in city) {
Debug.Log(String.Format("{0}: {1}", pair.Key, pair.Value));
Debug.Log(String.Format("Document {0} does not exist!", snapshot.Id));

DocumentReference docRef = db.Collection("cities").Document("SF");
DocumentSnapshot snapshot = await docRef.GetSnapshotAsync();
if (snapshot.Exists)
Dictionary<string, object> city = snapshot.ToDictionary();
foreach (KeyValuePair<string, object> pair in city)

doc_ref  = firestore.doc "#{collection_path}/SF"
snapshot = doc_ref.get
if snapshot.exists?
puts "#{snapshot.document_id} data: #{snapshot.data}."
else
puts "Document #{snapshot.document_id} does not exist!"
endget_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/get_data.rb#L80-L86]

참고: docRef가 참조하는 위치에 문서가 없으면 결과 document는 비어 있게 되고 여기서 exists를 호출하면 false가 반환됩니다.소스 옵션

오프라인에서 작동되는 플랫폼의 경우 source 옵션을 설정하여 get 호출이 오프라인 캐시를 사용하는 방법을 제어할 수 있습니다.

기본적으로 get 호출은 데이터베이스에서 최신 문서 스냅샷 가져오기를 시도합니다. 오프라인 작동이 지원되는 플랫폼에서 클라이언트 라이브러리가 네트워크를 사용할 수 없거나 요청 시간이 초과되면 오프라인 캐시를 사용합니다.

get() 호출에서 source 옵션을 지정하면 기본 동작을 변경할 수 있습니다. 데이터베이스에서만 가져와서 오프라인 캐시를 무시하거나 오프라인 캐시에서만 가져올 수 있습니다. 예를 들면 다음과 같습니다.

웹 버전 9
import { doc, getDocFromCache } from "firebase/firestore";

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *docRef =
[[self.db collectionWithPath:@"cities"] documentWithPath:@"SF"];

NSLog(@"Cached document data: %@", snapshot.data);
NSLog(@"Document does not exist in cache: %@", error);
KotlinAndroid
val docRef = db.collection("cities").document("SF")

Log.d(TAG, "Cached document data: ${document?.data}")
DocumentReference docRef = db.collection("cities").document("SF");

Source source = Source.CACHE;

DocumentSnapshot document = task.getResult();
Log.d(TAG, "Cached document data: " + document.getData());
Log.d(TAG, "Cached get failed: ", task.getException());
final docRef = db.collection("cities").doc("SF");

Python SDK에서는 지원되지 않습니다.

C++
DocumentReference doc_ref = db->Collection("cities").Document("SF");
Source source = Source::kCache;
doc_ref.Get(source).OnCompletion([](const Future<DocumentSnapshot>& future) {
if (future.error() == Error::kErrorOk) {
Node.js SDK에서는 지원되지 않습니다.

Go
Go SDK에서는 지원되지 않습니다.

PHP
PHP SDK에서는 지원되지 않습니다.

Unity
Unity SDK에서는 지원되지 않습니다.

C#
C# SDK에서는 지원되지 않습니다.

Ruby
Ruby SDK에서는 지원되지 않습니다.

커스텀 객체

이전 예시에서는 문서의 내용을 맵으로 가져왔지만, 일부 언어는 커스텀 객체 유형을 사용하는 것이 더 편리할 수 있습니다. 데이터 추가 [https://cloud.google.com/firestore/native/docs/manage-data/add-data?hl=ko] 가이드에서 각 도시를 정의하는 데 필요한 City 클래스를 정의했습니다. 다음과 같이 문서를 City 객체로 되돌릴 수 있습니다.

커스텀 객체를 사용하려면 클래스에 FirestoreDataConverter [https://firebase.google.com/docs/reference/js/firestore_.firestoredataconverter?hl=ko] 함수를 정의해야 합니다. 예를 들면 다음과 같습니다.

웹 버전 9

트리 쉐이킹 작업이 가능한 웹 v9 모듈형 SDK에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 버전 8에서 업그레이드 [https://firebase.google.com/docs/web/modular-upgrade?hl=ko]하세요.
class City {
constructor (name, state, country ) {
this.name = name;
this.state = state;
this.country = country;
this.state = state;
this.country = country;

.withConverter(cityConverter)
.get().then((doc) => {
if (doc.exists){

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Swift에서 자동 유형 직렬화를 지원하려면 유형이 코딩 가능한 프로토콜 [https://developer.apple.com/documentation/swift/codable]을 준수해야 합니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C에서는 이 작업을 수동으로 수행해야 합니다.
FIRDocumentReference *docRef =
[[self.db collectionWithPath:@"cities"] documentWithPath:@"BJ"];
[docRef getDocumentWithCompletion:^(FIRDocumentSnapshot *snapshot, NSError *error) {
FSTCity *city = [[FSTCity alloc] initWithDictionary:snapshot.data];
if (city != nil) {
NSLog(@"City: %@", city);
NSLog(@"Document does not exist");
KotlinAndroid
val docRef = db.collection("cities").document("BJ")
docRef.get().addOnSuccessListener { documentSnapshot ->
val city = documentSnapshot.toObject<City>()
DocumentReference docRef = db.collection("cities").document("BJ");
docRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
@Override
public void onSuccess(DocumentSnapshot documentSnapshot) {
City city = documentSnapshot.toObject(City.class);
커스텀 객체를 사용하려면 클래스에 Firestore 데이터 변환 함수를 정의해야 합니다. 예를 들면 다음과 같습니다.
class City {
final String? name;
final String? state;
final String? country;
final bool? capital;
final int? population;
final List<String>? regions;

City({
this.name,
this.state,
this.country,
this.capital,
this.population,
this.regions,
DocumentSnapshot<Map<String, dynamic>> snapshot,
SnapshotOptions? options,
) {
final data = snapshot.data();
return City(
name: data?['name'],
state: data?['state'],
country: data?['country'],
capital: data?['capital'],
population: data?['population'],
regions:
data?['regions'] is Iterable ? List.from(data?['regions']) : null,
fromFirestore: City.fromFirestore,
toFirestore: (City city, _) => city.toFirestore(),
final docSnap = await ref.get();
final city = docSnap.data(); // Convert to City object
if (city != null) {
print(city);
DocumentReference docRef = db.collection("cities").document("BJ");
ApiFuture<DocumentSnapshot> future = docRef.get();
DocumentSnapshot document = future.get();
City city = null;
if (document.exists()) {
System.out.println(city);
System.out.println("No such document!");

doc_ref = db.collection("cities").document("BJ")

doc = doc_ref.get()
city = City.from_dict(doc.to_dict())
print(city)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L230-L234]

Python(비동기)

doc_ref = db.collection("cities").document("BJ")

doc = await doc_ref.get()
city = City.from_dict(doc.to_dict())
print(city)snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L225-L229]

C++
Node.js는 자바스크립트 객체를 사용합니다.

Go

import (
"context"
"fmt"

"cloud.google.com/go/firestore"

func docAsEntity(ctx context.Context, client *firestore.Client) (*City, error) {
dsnap, err := client.Collection("cities").Doc("BJ").Get(ctx)
if err != nil {
return nil, err

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$docRef = $db->collection('samples/php/cities')->document('SF');
$snapshot = $docRef->snapshot();
$city = City::fromArray($snapshot->data());

if ($snapshot->exists()) {
printf('Document data:' . PHP_EOL);
print((string) $city);
DocumentReference docRef = db.Collection("cities").Document("BJ");

docRef.GetSnapshotAsync().ContinueWith((task) =>
Debug.Log(String.Format("Document data for {0} document:", snapshot.Id));
City city = snapshot.ConvertTo<City>();
Debug.Log(String.Format("Name: {0}", city.Name));
Debug.Log(String.Format("State: {0}", city.State));
Debug.Log(String.Format("Country: {0}", city.Country));
Debug.Log(String.Format("Capital: {0}", city.Capital));
Debug.Log(String.Format("Population: {0}", city.Population));
Debug.Log(String.Format("Document {0} does not exist!", snapshot.Id));

DocumentReference docRef = db.Collection("cities").Document("BJ");
DocumentSnapshot snapshot = await docRef.GetSnapshotAsync();
if (snapshot.Exists)
City city = snapshot.ConvertTo<City>();
Ruby에는 적용되지 않습니다.

컬렉션에서 여러 문서 가져오기

컬렉션의 문서를 쿼리하여 하나의 요청으로 여러 문서를 검색할 수도 있습니다. 예를 들어 where()를 사용하여 특정 조건을 충족하는 모든 문서를 쿼리하고 get()을 사용하여 결과를 가져올 수 있습니다.

웹 버전 9
import { collection, query, where, getDocs } from "firebase/firestore";

.get()
.then((querySnapshot) => {
querySnapshot.forEach((doc) => {

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

do {
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[[self.db collectionWithPath:@"cities"] queryWhereField:@"capital" isEqualTo:@(YES)]
getDocumentsWithCompletion:^(FIRQuerySnapshot *snapshot, NSError *error) {
if (error != nil) {
NSLog(@"Error getting documents: %@", error);
NSLog(@"%@ => %@", document.documentID, document.data);
KotlinAndroid
db.collection("cities")
.whereEqualTo("capital", true)
.get()
.whereEqualTo("capital", true)
.get()
.addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
@Override
public void onComplete(@NonNull Task<QuerySnapshot> task) {
if (task.isSuccessful()) {
for (QueryDocumentSnapshot document : task.getResult()) {
Log.d(TAG, document.getId() + " => " + document.getData());
Log.d(TAG, "Error getting documents: ", task.getException());
db.collection("cities").where("capital", isEqualTo: true).get().then(
(querySnapshot) {
print("Successfully completed");
for (var docSnapshot in querySnapshot.docs) {
print('${docSnapshot.id} => ${docSnapshot.data()}');
ApiFuture<QuerySnapshot> future = db.collection("cities").whereEqualTo("capital", true).get();
List<QueryDocumentSnapshot> documents = future.get().getDocuments();
for (DocumentSnapshot document : documents) {
System.out.println(document.getId() + " => " + document.toObject(City.class));

# Note: Use of CollectionRef stream() is prefered to get()
docs = (
db.collection("cities")
.where(filter=FieldFilter("capital", "==", True))
.stream()

for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L241-L249]

Python(비동기)

# Note: Use of CollectionRef stream() is prefered to get()
docs = (
db.collection("cities")
.where(filter=FieldFilter("capital", "==", True))
.stream()

async for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L236-L244]

C++
db->Collection("cities")
.WhereEqualTo("capital", FieldValue::Boolean(true))
.Get()
.OnCompletion([](const Future<QuerySnapshot>& future) {
if (future.error() == Error::kErrorOk) {
for (const DocumentSnapshot& document :
future.result()->documents()) {

import (
"context"
"fmt"

"cloud.google.com/go/firestore"
"google.golang.org/api/iterator"

func multipleDocs(ctx context.Context, client *firestore.Client) error {
fmt.Println("All capital cities:")
iter := client.Collection("cities").Where [https://cloud.google.com/go/docs/reference/cloud.google.com/go/firestore/latest/index.html?hl=ko#cloud_google_com_go_firestore_Query_Where]("capital", "==", true).Documents(ctx)
for {
doc, err := iter.Next()
if err == iterator.Done {
break

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$citiesRef = $db->collection('samples/php/cities');
$query = $citiesRef->where('capital', '=', true);
$documents = $query->documents();
foreach ($documents as $document) {
if ($document->exists()) {
printf('Document data for document %s:' . PHP_EOL, $document->id());
print_r($document->data());
printf(PHP_EOL);
Query capitalQuery = db.Collection("cities").WhereEqualTo("Capital", true);
capitalQuery.GetSnapshotAsync().ContinueWithOnMainThread(task => {
QuerySnapshot capitalQuerySnapshot = task.Result;
foreach (DocumentSnapshot documentSnapshot in capitalQuerySnapshot.Documents) {
Debug.Log(String.Format("Document data for {0} document:", documentSnapshot.Id));
Dictionary<string, object> city = documentSnapshot.ToDictionary();
foreach (KeyValuePair<string, object> pair in city) {
Debug.Log(String.Format("{0}: {1}", pair.Key, pair.Value));
Debug.Log("");

Query capitalQuery = db.Collection("cities").WhereEqualTo("Capital", true);
QuerySnapshot capitalQuerySnapshot = await capitalQuery.GetSnapshotAsync();
foreach (DocumentSnapshot documentSnapshot in capitalQuerySnapshot.Documents)
Dictionary<string, object> city = documentSnapshot.ToDictionary();
foreach (KeyValuePair<string, object> pair in city)

cities_ref = firestore.col collection_path

query = cities_ref.where "capital", "=", true

query.get do |city|
puts "#{city.document_id} data: #{city.data}."
endget_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/get_data.rb#L96-L102]

기본적으로 Firestore는 쿼리를 만족하는 모든 문서를 문서 ID에 따라 오름차순으로 검색하지만, 반환되는 데이터를 정렬하고 제한 [https://cloud.google.com/firestore/native/docs/query-data/order-limit-data?hl=ko]할 수 있습니다.

컬렉션의 모든 문서 가져오기

where() 필터를 완전히 생략하여 컬렉션의 모든 문서를 검색할 수도 있습니다.

웹 버전 9
import { collection, getDocs } from "firebase/firestore";

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

do {
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[self.db collectionWithPath:@"cities"]
getDocumentsWithCompletion:^(FIRQuerySnapshot *snapshot, NSError *error) {
if (error != nil) {
NSLog(@"Error getting documents: %@", error);
NSLog(@"%@ => %@", document.documentID, document.data);
KotlinAndroid
db.collection("cities")
.get()
.get()
.addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
@Override
public void onComplete(@NonNull Task<QuerySnapshot> task) {
if (task.isSuccessful()) {
for (QueryDocumentSnapshot document : task.getResult()) {
Log.d(TAG, document.getId() + " => " + document.getData());
Log.d(TAG, "Error getting documents: ", task.getException());
db.collection("cities").get().then(
(querySnapshot) {
print("Successfully completed");
for (var docSnapshot in querySnapshot.docs) {
print('${docSnapshot.id} => ${docSnapshot.data()}');
ApiFuture<QuerySnapshot> future = db.collection("cities").get();
List<QueryDocumentSnapshot> documents = future.get().getDocuments();
for (QueryDocumentSnapshot document : documents) {
System.out.println(document.getId() + " => " + document.toObject(City.class));

docs = db.collection("cities").stream()

for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L270-L273]

Python(비동기)

docs = db.collection("cities").stream()

async for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L265-L268]

C++
db->Collection("cities").Get().OnCompletion(
[](const Future<QuerySnapshot>& future) {
if (future.error() == Error::kErrorOk) {
for (const DocumentSnapshot& document :
future.result()->documents()) {

import (
"context"
"fmt"

"cloud.google.com/go/firestore"
"google.golang.org/api/iterator"

func allDocs(ctx context.Context, client *firestore.Client) error {
fmt.Println("All cities:")
iter := client.Collection("cities").Documents(ctx)
defer iter.Stop()
for {
doc, err := iter.Next()
if err == iterator.Done {
break

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$citiesRef = $db->collection('samples/php/cities');
$documents = $citiesRef->documents();
foreach ($documents as $document) {
if ($document->exists()) {
printf('Document data for document %s:' . PHP_EOL, $document->id());
print_r($document->data());
printf(PHP_EOL);
Query allCitiesQuery = db.Collection("cities");
allCitiesQuery.GetSnapshotAsync().ContinueWithOnMainThread(task =>
QuerySnapshot allCitiesQuerySnapshot = task.Result;
foreach (DocumentSnapshot documentSnapshot in allCitiesQuerySnapshot.Documents)
Debug.Log(String.Format("Document data for {0} document:", documentSnapshot.Id));
Dictionary<string, object> city = documentSnapshot.ToDictionary();
foreach (KeyValuePair<string, object> pair in city)
Debug.Log(String.Format("{0}: {1}", pair.Key, pair.Value));
Debug.Log("");

Query allCitiesQuery = db.Collection("cities");
QuerySnapshot allCitiesQuerySnapshot = await allCitiesQuery.GetSnapshotAsync();
foreach (DocumentSnapshot documentSnapshot in allCitiesQuerySnapshot.Documents)
Dictionary<string, object> city = documentSnapshot.ToDictionary();
foreach (KeyValuePair<string, object> pair in city)

cities_ref = firestore.col collection_path
cities_ref.get do |city|
puts "#{city.document_id} data: #{city.data}."
endget_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/get_data.rb#L112-L115]

하위 컬렉션의 모든 문서 가져오기

하위 컬렉션에서 모든 문서를 검색하려면 해당 하위 컬렉션의 전체 경로가 포함된 참조를 만듭니다.

웹 버전 9

트리 쉐이킹 작업이 가능한 웹 v9 모듈형 SDK에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 버전 8에서 업그레이드 [https://firebase.google.com/docs/web/modular-upgrade?hl=ko]하세요.
const { collection, getDocs } = require("firebase/firestore");
do {
Objective-C
[[self.db collectionWithPath:@"cities/SF/landmarks"]
getDocumentsWithCompletion:^(FIRQuerySnapshot *snapshot, NSError *error) {
if (error != nil) {
NSLog(@"Error getting documents: %@", error);
NSLog(@"%@ => %@", document.documentID, document.data);
KotlinAndroid
db.collection("cities")
.document("SF")
.collection("landmarks")
.get()
.document("SF")
.collection("landmarks")
.get()
.addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
@Override
public void onComplete(@NonNull Task<QuerySnapshot> task) {
if (task.isSuccessful()) {
for (QueryDocumentSnapshot document : task.getResult()) {
Log.d(TAG, document.getId() + " => " + document.getData());
Log.d(TAG, "Error getting documents: ", task.getException());
db.collection("cities").doc("SF").collection("landmarks").get().then(
(querySnapshot) {
print("Successfully completed");
for (var docSnapshot in querySnapshot.docs) {
print('${docSnapshot.id} => ${docSnapshot.data()}');
Python(비동기)
Firestore 서버 클라이언트 라이브러리의 listCollections() 메서드는 문서 참조의 모든 하위 컬렉션을 나열합니다.

모바일 또는 웹 클라이언트 라이브러리를 사용하여 컬렉션 목록을 검색할 수 없습니다.
신뢰할 수 있는 서버 환경에서 관리 작업의 일부로만 컬렉션 이름을
조회해야 합니다. 모바일 또는 웹 클라이언트 라이브러리에
이 기능이 필요하다면 하위 컬렉션 이름을 예측할 수 있도록 데이터를
재구성하는 것이 좋습니다.

웹
웹 클라이언트 라이브러리에서는 사용할 수 없습니다.

Swift

Swift 클라이언트 라이브러리에서는 사용할 수 없습니다.

Objective-C
Objective-C 클라이언트 라이브러리에서는 사용할 수 없습니다.

KotlinAndroid
Android 클라이언트 라이브러리에서는 사용할 수 없습니다.

자바Android
Android 클라이언트 라이브러리에서는 사용할 수 없습니다.

Dart

Flutter 클라이언트 라이브러리에서는 사용할 수 없습니다.

Java

Iterable<CollectionReference> collections =
db.collection("cities").document("SF").listCollections();

for (CollectionReference collRef : collections) {
System.out.println("Found subcollection with id: " + collRef.getId());

city_ref = db.collection("cities").document("SF")
collections = city_ref.collections()
for collection in collections:
for doc in collection.stream():
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L966-L970]

Python(비동기)

collections = db.collection("cities").document("SF").collections()
async for collection in collections:
async for doc in collection.stream():
print(f"{doc.id} => {doc.to_dict()}")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L798-L801]

C++
C++ 클라이언트 라이브러리에서는 사용할 수 없습니다.

Node.js

import (
"context"
"fmt"

"cloud.google.com/go/firestore"
"google.golang.org/api/iterator"

func getCollections(ctx context.Context, client *firestore.Client) error {
iter := client.Collection("cities").Doc("SF").Collections(ctx)
for {
collRef, err := iter.Next()
if err == iterator.Done {
break

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$cityRef = $db->collection('samples/php/cities')->document('SF');
$collections = $cityRef->collections();
foreach ($collections as $collection) {
printf('Found subcollection with id: %s' . PHP_EOL, $collection->id());

DocumentReference cityRef = db.Collection("cities").Document("SF");
IAsyncEnumerable<CollectionReference> subcollections = cityRef.ListCollectionsAsync();
IAsyncEnumerator<CollectionReference> subcollectionsEnumerator = subcollections.GetAsyncEnumerator(default);
while (await subcollectionsEnumerator.MoveNextAsync())
CollectionReference subcollectionRef = subcollectionsEnumerator.Current;

city_ref = firestore.doc "#{collection_path}/SF"
city_ref.cols do |col|
puts col.collection_id
endget_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/get_data.rb#L140-L143]

다양한 쿼리 유형 [https://cloud.google.com/firestore/native/docs/query-data/queries?hl=ko]에 대해 자세히 알아보세요.

오류 코드 및 데이터를 가져올 때 지연 시간 문제를 해결하는 방법에 대한 자세한 내용은 문제 해결 페이지 [https://cloud.google.com/firestore/docs/troubleshooting?hl=ko]를 참고하세요.

의견 보내기