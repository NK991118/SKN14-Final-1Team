Source URL: https://firebase.google.com/docs/auth/ios/facebook-login?hl=ko
Title: Apple 플랫폼에서 Facebook 로그인을 사용하여 인증

의견 보내기

Apple 플랫폼에서 Facebook 로그인을 사용하여 인증

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Facebook 로그인 또는 Facebook Limited 로그인을 앱에 통합하여 사용자가 Facebook 계정으로 Firebase 인증을 받도록 설정할 수 있습니다.

시작하기 전에

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Add Packages(패키지 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk.git

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firebase Authentication 라이브러리를 선택합니다.

타겟 빌드 설정의 Other Linker Flags(기타 링커 플래그) 섹션에 -ObjC 플래그를 추가합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

그런 다음 몇 가지 구성 단계를 수행합니다.

Facebook for Developers [https://developers.facebook.com/] 사이트에서 내 앱의 앱 ID와 앱 비밀번호를 가져옵니다.
다음과 같이 Facebook 로그인을 사용 설정합니다.
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 Facebook 로그인 방법을 사용 설정하고 Facebook에서 받은 앱 ID와 앱 비밀번호를 지정합니다.
Facebook for Developers [https://developers.facebook.com/] 사이트의 Facebook 앱 설정 페이지에서 제품 설정 > Facebook 로그인 구성에 개발자의 OAuth 리디렉션 URI(예: my-app-12345.firebaseapp.com/__/auth/handler)가 OAuth 리디렉션 URI 중 하나로 표시되어 있는지 확인합니다.

Facebook 로그인 구현

'기본' Facebook 로그인을 사용하려면 다음 단계를 완료하세요. 또는 다음 섹션에서와 같이 Facebook Limited 로그인을 사용할 수 있습니다.

개발자 문서 [https://developers.facebook.com/docs/facebook-login/ios]를 참고해 앱에 Facebook 로그인을 통합합니다. FBSDKLoginButton 객체를 초기화할 때 로그인 및 로그아웃 이벤트를 받을 대리자를 설정합니다. 예를 들면 다음과 같습니다.

Swift

Objective-C
FBSDKLoginButton *loginButton = [[FBSDKLoginButton alloc] init];
loginButton.delegate = self;

대리자에서 didCompleteWithResult:error:를 구현합니다.

Swift
func loginButton(_ loginButton: FBSDKLoginButton!, didCompleteWith result: FBSDKLoginManagerLoginResult!, error: Error!) {
if let error = error {
print(error.localizedDescription)
return
Objective-C
- (void)loginButton:(FBSDKLoginButton *)loginButton
didCompleteWithResult:(FBSDKLoginManagerLoginResult *)result
error:(NSError *)error {
if (error == nil) {
NSLog(error.localizedDescription);
import SwiftUI
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
Objective-C
@import FirebaseCore;
@import FirebaseFirestore;
@import FirebaseAuth;
FirebaseApp.configure()

Swift
FirebaseApp.configure()

Objective-C

SwiftUI를 사용하는 경우 앱 대리자를 만들고 UIApplicationDelegateAdaptor 또는 NSApplicationDelegateAdaptor를 통해 App 구조체에 연결해야 합니다. 앱 대리자 재구성도 중지해야 합니다. 자세한 내용은 SwiftUI 안내 [https://firebase.google.com/docs/ios/learn-more?hl=ko#swiftui]를 참조하세요.

SwiftUI
@main
struct YourApp: App {
ContentView()
Objective-C
FIRAuthCredential *credential = [FIRFacebookAuthProvider
Facebook Limited 로그인 구현

'기본' Facebook 로그인 대신 Facebook Limited 로그인을 사용하려면 다음 단계를 완료하세요.

개발자 문서 [https://developers.facebook.com/docs/facebook-login/limited-login/ios]를 참고해 앱에 Facebook Limited 로그인을 통합합니다.

로그인 요청마다 고유한 임의 문자열인 'nonce'가 생성되며 이 문자열은 앱의 인증 요청에 대한 응답으로 ID 토큰이 명시적으로 부여되었는지 확인하는 데 사용됩니다. 재생 공격을 방지하는 데 이 단계가 중요합니다.

다음 예시와 같이 SecRandomCopyBytes(_:_:_)를 사용하여 암호로 보호된 nonce를 생성할 수 있습니다.

Swift
private func randomNonceString(length: Int = 32) -> String {
precondition(length > 0)
"Unable to generate nonce. SecRandomCopyBytes failed with OSStatus \(errorCode)"
Array("0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._")

Objective-C
NSAssert(length > 0, @"Expected nonce to have positive length");
NSString *characterSet = @"0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._";
NSMutableString *result = [NSMutableString string];
NSInteger remainingLength = length;

while (remainingLength > 0) {
NSMutableArray *randoms = [NSMutableArray arrayWithCapacity:16];
for (NSInteger i = 0; i < 16; i++) {
uint8_t random = 0;
int errorCode = SecRandomCopyBytes(kSecRandomDefault, 1, &random);
NSAssert(errorCode == errSecSuccess, @"Unable to generate nonce: OSStatus %i", errorCode);

[randoms addObject:@(random)];
[result appendFormat:@"%C", character];
remainingLength--;
@available(iOS 13, *)
private func sha256(_ input: String) -> String {
Objective-C
- (NSString *)stringBySha256HashingString:(NSString *)input {
CC_SHA256(string, (CC_LONG)strlen(string), result);

NSMutableString *hashed = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];
for (NSInteger i = 0; i < CC_SHA256_DIGEST_LENGTH; i++) {
[hashed appendFormat:@"%02x", result[i]];
FBSDKLoginButton을 설정할 때 로그인 및 로그아웃 이벤트를 받을 대리인을 설정하고 추적 모드를 FBSDKLoginTrackingLimited로 설정한 후 nonce를 연결합니다. 예를 들면 다음과 같습니다.

Swift
func setupLoginButton() {
loginButton.delegate = self
loginButton.loginTracking = .limited
loginButton.nonce = sha256(nonce)
Objective-C
- (void)setupLoginButton {
NSString *nonce = [self randomNonce:32];
self.currentNonce = nonce;
self.loginButton.delegate = self;
self.loginButton.loginTracking = FBSDKLoginTrackingLimited
self.loginButton.nonce = [self stringBySha256HashingString:nonce];
func loginButton(_ loginButton: FBSDKLoginButton!, didCompleteWith result: FBSDKLoginManagerLoginResult!, error: Error!) {
if let error = error {
print(error.localizedDescription)
return
Objective-C
- (void)loginButton:(FBSDKLoginButton *)loginButton
didCompleteWithResult:(FBSDKLoginManagerLoginResult *)result
error:(NSError *)error {
if (error == nil) {
NSLog(error.localizedDescription);
import SwiftUI
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
Objective-C
@import FirebaseCore;
@import FirebaseFirestore;
@import FirebaseAuth;
FirebaseApp.configure()

Swift
FirebaseApp.configure()

Objective-C

SwiftUI를 사용하는 경우 앱 대리자를 만들고 UIApplicationDelegateAdaptor 또는 NSApplicationDelegateAdaptor를 통해 App 구조체에 연결해야 합니다. 앱 대리자 재구성도 중지해야 합니다. 자세한 내용은 SwiftUI 안내 [https://firebase.google.com/docs/ios/learn-more?hl=ko#swiftui]를 참조하세요.

SwiftUI
@main
struct YourApp: App {
ContentView()
Objective-C
NSString *idTokenString = FBSDKAuthenticationToken.currentAuthenticationToken.tokenString;
NSString *rawNonce = self.currentNonce;
FIROAuthCredential *credential = [FIROAuthProvider credentialWithProviderID:@"facebook.com"
IDToken:idTokenString
Firebase 인증

마지막으로 Firebase 사용자 인증 정보를 사용해 Firebase에 인증합니다.

Swift
Auth.auth().signIn(with: credential) { authResult, error in
if let error = error {
displayNameString += " "
withMessage: "Select factor to sign in\n\(displayNameString)",
completionBlock: { userPressedOK, displayName in
PhoneAuthProvider.provider()
.verifyPhoneNumber(with: selectedHint!, uiDelegate: nil,
multiFactorSession: resolver
.session) { verificationID, error in
if error != nil {
print(
"Multi factor start sign in failed. Error: \(error.debugDescription)"
withMessage: "Verification code for \(selectedHint?.displayName ?? "")",
completionBlock: { userPressedOK, verificationCode in
"Multi factor finanlize sign in failed. Error: \(error.debugDescription)"
return
Objective-C
[[FIRAuth auth] signInWithCredential:credential
completion:^(FIRAuthDataResult * _Nullable authResult,
NSError * _Nullable error) {
if (isMFAEnabled && error && error.code == FIRAuthErrorCodeSecondFactorRequired) {
FIRMultiFactorResolver *resolver = error.userInfo[FIRAuthErrorUserInfoMultiFactorResolverKey];
NSMutableString *displayNameString = [NSMutableString string];
for (FIRMultiFactorInfo *tmpFactorInfo in resolver.hints) {
[displayNameString appendString:tmpFactorInfo.displayName];
[displayNameString appendString:@" "];
FIRPhoneMultiFactorInfo* selectedHint;
for (FIRMultiFactorInfo *tmpFactorInfo in resolver.hints) {
if ([displayName isEqualToString:tmpFactorInfo.displayName]) {
selectedHint = (FIRPhoneMultiFactorInfo *)tmpFactorInfo;
FIRPhoneAuthCredential *credential =
[[FIRPhoneAuthProvider provider] credentialWithVerificationID:verificationID
FIRMultiFactorAssertion *assertion = [FIRPhoneMultiFactorGenerator assertionWithCredential:credential];
[resolver resolveSignInWithAssertion:assertion completion:^(FIRAuthDataResult * _Nullable authResult, NSError * _Nullable error) {
if (error) {
[self showMessagePrompt:error.localizedDescription];
NSLog(@"Multi factor finanlize sign in succeeded.");
FIRUser *user = authResult.user;
Objective-C
NSError *signOutError;
BOOL status = [[FIRAuth auth] signOut:&signOutError];
if (!status) {
NSLog(@"Error signing out: %@", signOutError);
return;