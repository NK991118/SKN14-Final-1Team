Source URL: https://firebase.google.com/docs/auth/unity/password-auth?hl=ko
Title: Unity를 사용하여 비밀번호 기반 계정으로 Firebase에 인증
bookmark_border

의견 보내기

Unity를 사용하여 비밀번호 기반 계정으로 Firebase에 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#before_you_begin]Firebase.Auth.FirebaseAuth 클래스 액세스 [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#access_the_firebaseauthfirebaseauth_class]비밀번호 기반 계정 만들기 [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#create_a_password-based_account]이메일 주소와 비밀번호로 사용자 로그인 [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#sign_in_a_user_with_an_email_address_and_password]권장: 비밀번호 정책 설정 [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#policy]권장: 이메일 열거 보호 사용 설정 [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#enumeration-protection]다음 단계 [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#next_steps]

Firebase Authentication을 사용하면 사용자가 자신의 이메일 주소와 비밀번호를 통해 Firebase에 인증하고 앱에서 사용하는 비밀번호 기반 계정을 관리하게 할 수 있습니다.

시작하기 전에

Firebase Authentication [https://firebase.google.com/docs/reference/unity/namespace/firebase/auth?hl=ko]을 사용하려면 먼저 다음 작업을 해야 합니다.

Unity 프로젝트를 등록하고 Firebase를 사용하도록 구성합니다.

Unity 프로젝트에서 현재 Firebase를 사용하고 있다면 이미 등록되어 Firebase용으로 구성된 것입니다.
Unity 프로젝트가 없는 경우 샘플 앱 [https://github.com/google/mechahamster]을 다운로드하면 됩니다.

Firebase Unity SDK [https://firebase.google.com/download/unity?hl=ko](특히 FirebaseAuth.unitypackage)를 Unity 프로젝트에 추가합니다.

초기 설정 작업에 관한 자세한 안내는 Unity 프로젝트에 Firebase 추가 [https://firebase.google.com/docs/unity/setup?hl=ko#prerequisites]를 참조하세요.Unity 프로젝트에 Firebase를 추가할 때 Firebase Console [https://console.firebase.google.com/?hl=ko] 및 열려 있는 Unity 프로젝트 모두에서 작업을 수행해야 합니다. 예를 들어 Console에서 Firebase 구성 파일을 다운로드한 후 이 파일을 Unity 프로젝트로 이동하는 작업이 필요합니다.

Firebase.Auth.FirebaseAuth 클래스 액세스

FirebaseAuth 클래스는 모든 API 호출을 위한 게이트웨이입니다.

FirebaseAuth.DefaultInstance [https://firebase.google.com/docs/reference/unity/class/firebase/auth/firebase-auth?hl=ko#defaultinstance]를 통해 액세스할 수 있습니다.
Firebase.Auth.FirebaseAuth auth = Firebase.Auth.FirebaseAuth.DefaultInstance;

비밀번호 기반 계정 만들기

비밀번호가 있는 신규 사용자 계정을 생성하려면 앱의 로그인 코드에서 다음 절차를 완료합니다.

신규 사용자가 앱의 가입 양식을 사용해 가입하고 나면 필요에 따라 앱에서 계정 유효성 검사 절차를 완료합니다. 검사 항목의 예로는 신규 계정의 비밀번호를 정확하게 입력했는지, 비밀번호가 복잡성 조건을 충족하는지 등이 있습니다.
다음과 같이 신규 사용자의 이메일 주소와 비밀번호를 FirebaseAuth.CreateUserWithEmailAndPassword에 전달하여 신규 계정을 생성합니다.auth.CreateUserWithEmailAndPasswordAsync(email, password).ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("CreateUserWithEmailAndPasswordAsync was canceled.");
return;
Debug.LogError("CreateUserWithEmailAndPasswordAsync encountered an error: " + task.Exception);
return;
Firebase.Auth.AuthResult result = task.Result;
Debug.LogFormat("Firebase user created successfully: {0} ({1})",
result.User.DisplayName, result.User.UserId);
Debug.LogError("SignInWithEmailAndPasswordAsync was canceled.");
return;
Debug.LogError("SignInWithEmailAndPasswordAsync encountered an error: " + task.Exception);
return;
Firebase.Auth.AuthResult result = task.Result;
Debug.LogFormat("User signed in successfully: {0} ({1})",
result.User.DisplayName, result.User.UserId);
Firebase.Auth.EmailAuthProvider.GetCredential(email, password);
auth.SignInAndRetrieveDataWithCredentialAsync(credential).ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("SignInAndRetrieveDataWithCredentialAsync was canceled.");
return;
Debug.LogError("SignInAndRetrieveDataWithCredentialAsync encountered an error: " + task.Exception);
return;
Firebase.Auth.AuthResult result = task.Result;
Debug.LogFormat("User signed in successfully: {0} ({1})",
result.User.DisplayName, result.User.UserId);
Firebase Authentication 비밀번호 정책은 다음과 같은 비밀번호 요구사항을 지원합니다.

소문자 필요
대문자 필요
숫자 필요
영숫자가 아닌 문자 필요

다음 문자는 영숫자가 아닌 문자 요구사항을 충족합니다.
^ $ * . [ ] { } ( ) ? " ! @ # % & / \ , > < ' : ; | _ ~
비밀번호 최소 길이(6~30자, 기본값은 6)
비밀번호 최대 길이(최대 4,096자)

다음 두 가지 모드로 비밀번호 정책 적용을 사용 설정할 수 있습니다.

필수: 사용자가 정책을 준수하는 비밀번호로 업데이트할 때까지 가입 시도가 실패합니다.
알림: 사용자가 정책을 준수하지 않는 비밀번호를 사용하여 가입할 수 있습니다. 이 모드를 사용할 때는 클라이언트 측에서 사용자의 비밀번호가 정책을 준수하는지 확인하고 정책을 준수하지 않는 경우 사용자에게 비밀번호를 업데이트하라는 메시지를 어떤 방식으로든 표시해야 합니다.

신규 사용자는 항상 해당 정책에 따라 비밀번호를 선택해야 합니다.

활성 사용자가 있는 경우 비밀번호가 정책을 준수하지 않는 사용자의 액세스를 차단하려는 경우가 아니면 로그인 강제 업그레이드를 사용 설정하지 않는 것이 좋습니다. 대신 사용자가 현재 비밀번호로 로그인할 수 있게 해주고 비밀번호에 부족한 요구사항을 알리는 알림 모드를 사용하세요.

권장: 이메일 열거 보호 사용 설정

이메일 주소가 등록되어 있어야 하는데(예: 이메일 주소와 비밀번호로 로그인할 때) 등록되지 않은 경우 또는 이메일 주소를 사용해서는 안 되는데(예: 사용자의 이메일 주소를 변경할 때) 등록된 경우, 이메일 주소를 파라미터로 사용하는 일부 Firebase Authentication 메서드에서 특정 오류가 발생합니다.
이는 사용자에게 특정 조치를 제안하는 데 유용할 수 있지만 사용자가 등록한 이메일 주소를 악의적인 행위자가 발견하는 데 악용될 수도 있습니다.

이러한 위험을 완화하려면 Google Cloud gcloud 도구를 사용하여 프로젝트에 이메일 열거 보호 기능을 사용 설정 [https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection?hl=ko]하는 것이 좋습니다. 이 기능을 사용 설정하면 Firebase Authentication의 오류 보고 동작이 변경됩니다. 앱이 더 구체적인 오류에 의존하지 않는지 확인하세요.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다.
이 신규 계정은 Firebase 프로젝트에 저장되며 사용자의 로그인 방법과 무관하게 프로젝트 내의 모든 앱에서 사용자를 식별하는 데 사용할 수 있습니다.

앱의 Firebase.Auth.FirebaseUser [https://firebase.google.com/docs/reference/unity/class/firebase/auth/firebase-user?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다.

Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
string name = user.DisplayName;
string email = user.Email;
System.Uri photo_url = user.PhotoUrl;

도움이 되었나요?

의견 보내기