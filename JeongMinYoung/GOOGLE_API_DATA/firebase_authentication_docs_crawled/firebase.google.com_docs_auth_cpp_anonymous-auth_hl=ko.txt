Source URL: https://firebase.google.com/docs/auth/cpp/anonymous-auth?hl=ko
Title: C++를 사용하여 익명으로 Firebase에 인증하기

의견 보내기

C++를 사용하여 익명으로 Firebase에 인증하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Firebase Authentication을 사용하면 임시 익명 계정을 생성 및 사용하여 Firebase에 인증할 수 있습니다. 이 임시 익명 계정을 통해 아직 앱에 가입하지 않은 사용자들도 보안 규칙으로 보호받는 데이터를 사용할 수 있습니다. 익명 사용자가 앱에 가입하기로 결정하면 이 사용자의 로그인 인증 정보를 해당 익명 계정에 연결 [https://firebase.google.com/docs/auth/cpp/account-linking?hl=ko]하여 사용자가 추후 세션에서도 보호받는 데이터를 계속 사용하도록 할 수 있습니다.

시작하기 전에

C++ 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/cpp/setup?hl=ko#note_select_platform].

아직 Firebase 프로젝트에 앱을 연결하지 않았다면 Firebase Console [https://console.firebase.google.com/?hl=ko]에서 연결합니다.
다음과 같이 익명 인증을 사용 설정합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 페이지에서 익명 로그인 방법을 사용 설정합니다.
선택사항: 프로젝트를 Firebase Authentication with Identity Platform [https://firebase.google.com/auth?hl=ko#identity-platform]으로 업그레이드한 경우 자동 정리를 사용 설정할 수 있습니다. 이 설정을 사용하면 30일이 지난 익명 계정은 자동으로 삭제됩니다. 자동 정리가 사용 설정된 프로젝트에서는 익명 인증이 더 이상 사용량 한도 또는 결제 할당량에 포함되지 않습니다. 자동 정리 [https://firebase.google.com/docs/auth/cpp/anonymous-auth?hl=ko#auto-cleanup]를 참조하세요.

Firebase에 익명으로 인증

로그아웃 상태의 사용자가 Firebase의 인증이 필요한 앱 기능을 사용할 때 다음 절차를 밟으면 사용자를 익명으로 로그인시킬 수 있습니다.Auth 클래스는 모든 API 호출에 대한 게이트웨이입니다.
Auth 및 App 헤더 파일을 추가합니다.
#include "firebase/app.h"
#include "firebase/auth.h"

초기화 코드에서 firebase::App [https://firebase.google.com/docs/reference/cpp/class/firebase/app?hl=ko] 클래스를 만듭니다.#if defined(__ANDROID__)
firebase::App* app =
App과 Auth는 일대일 매핑 관계입니다.

프로그램에 정기적으로 실행되는 업데이트 루프(예: 초당 30회 또는 60회)가 있는 경우 다음과 같이 Auth::SignInAnonymouslyLastResult를 사용해 업데이트 시마다 한 번씩 결과를 확인할 수 있습니다.firebase::Future<firebase::auth::AuthResult> result =
auth->SignInAnonymouslyLastResult();
if (result.status() == firebase::kFutureStatusComplete) {
if (result.error() == firebase::auth::kAuthErrorNone) {
auth_result.user.display_name().c_str());
firebase::auth::Credential credential =
firebase::auth::GoogleAuthProvider::GetCredential(google_id_token,
nullptr);
Facebook 로그이
firebase::auth::Credential credential =

LinkWithCredential 호출이 성공하면 사용자의 신규 계정에서 익명 계정의 Firebase 데이터에 액세스할 수 있습니다.이 방법은 임의의 계정 2개를 연결 [https://firebase.google.com/docs/auth/cpp/account-linking?hl=ko]할 때도 사용할 수 있습니다.자동 정리

프로젝트를 Firebase Authentication with Identity Platform [https://firebase.google.com/docs/auth?hl=ko#identity-platform]으로 업그레이드한 경우 Firebase Console에서 자동 정리를 사용 설정할 수 있습니다. 이 기능을 사용 설정하면 Firebase에서 30일이 지난 익명 계정을 자동으로 삭제할 수 있습니다. 자동 정리가 사용 설정된 프로젝트에서는 익명 인증이 사용량 한도 또는 결제 할당량에 포함되지 않습니다.

자동 정리를 사용 설정한 후 만든 익명 계정은 생성 후 30일이 지나면 언제든지 자동으로 삭제될 수 있습니다.
기존 익명 계정은 자동 정리를 사용 설정한 후 30일이 지나면 자동으로 삭제될 수 있습니다.
자동 정리를 사용 중지해도 삭제 예약된 익명 계정은 삭제가 예약된 상태로 유지됩니다.
익명 계정을 로그인 방법에 연결하여 '업그레이드'할 경우 계정이 자동으로 삭제되지 않습니다.

이 기능을 사용 설정하기 전에 영향을 받는 사용자 수를 확인하고 프로젝트를 Firebase Authentication with Identity Platform [https://firebase.google.com/docs/auth?hl=ko#identity-platform]으로 업그레이드한 경우 Cloud Logging [https://cloud.google.com/logging/docs?hl=ko]에서 is_anon으로 필터링할 수 있습니다.

다음 단계

이제 사용자가 Firebase에 인증할 수 있으므로 Firebase 규칙 [https://firebase.google.com/docs/database/security?hl=ko#section-authorization]을 사용하여 Firebase 데이터베이스의 데이터에 대한 액세스를 제어할 수 있습니다.

의견 보내기