Source URL: https://cloud.google.com/firestore/docs/query-data/query-cursors?hl=ko
Title: 쿼리 커서로 데이터 페이지화
bookmark_border

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.

의견 보내기

이 페이지의 내용쿼리에 단순 커서 추가 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#add_a_simple_cursor_to_a_query]문서 스냅샷을 사용하여 쿼리 커서 정의 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#use_a_document_snapshot_to_define_the_query_cursor]쿼리 페이지화 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#paginate_a_query]여러 필드를 기준으로 커서 설정 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#set_cursor_based_on_multiple_fields]

쿼리 커서로 데이터 페이지화

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Firestore의 쿼리 커서를 사용하면 쿼리에 정의한 매개변수에 따라 쿼리에서 반환하는 데이터를 일정하게 분할할 수 있습니다.

쿼리 커서로 쿼리의 시작점과 끝점을 정의하여 다음을 수행할 수 있습니다.

데이터 중 일부를 반환합니다.
쿼리 결과를 페이지화합니다.

그러나 쿼리의 범위를 구체적으로 정의하려면 단순 쿼리 [https://cloud.google.com/firestore/native/docs/query-data/queries?hl=ko#simple_queries]에서 설명하는 where() 메서드를 사용해야 합니다.

쿼리에 단순 커서 추가

startAt() 또는 startAfter() 메서드를 사용하여 쿼리의 시작점을 정의합니다.
startAt() 메서드는 시작점을 포함하고, startAfter() 메서드는 시작점을 제외합니다.

예를 들어 쿼리에 startAt(A)을 사용하면 전체 알파벳이 반환됩니다.
startAfter(A)를 대신 사용하면 B-Z가 반환됩니다.

--- 탭: 웹 버전 9 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-9-modular] ---
[https://shell.cloud.google.com/cloudshell/editor?show=ide&cloudshell_git_repo=https://github.com/firebase/snippets-web&cloudshell_open_in_editor=snippets/firestore-next/test-firestore/order_and_start.js]
import { query, orderBy, startAt } from "firebase/firestore";

const q = query(citiesRef, orderBy("population"), startAt(1000000));
order_and_start.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/order_and_start.js#L8-L10]

--- 탭: 웹 버전 8 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-8-namespaced] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
[https://shell.cloud.google.com/cloudshell/editor?show=ide&cloudshell_git_repo=https://github.com/firebase/snippets-web&cloudshell_open_in_editor=firestore/test.firestore.js]
citiesRef.orderBy("population").startAt(1000000);
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L972-L972]

--- 탭: Swift [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
[https://shell.cloud.google.com/cloudshell/editor?show=ide&cloudshell_git_repo=https://github.com/firebase/snippets-ios&cloudshell_open_in_editor=firestore/swift/firestore-smoketest/ViewController.swift]
// Get all cities with population over one million, ordered by population.
db.collection("cities")
.order(by: "population")
.start(at: [1000000])
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L1155-L1158]

--- 탭: Objective-C [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Get all cities with population over one million, ordered by population.
[[[db collectionWithPath:@"cities"]
queryOrderedByField:@"population"]
queryStartingAtValues:@[ @1000000 ]];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L1073-L1076]

--- 탭: Kotlin [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#kotlin-android] ---
// Get all cities with a population >= 1,000,000, ordered by population,
db.collection("cities")
.orderBy("population")
.startAt(1000000)
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L956-L959]

마찬가지로 endAt() 또는 endBefore() 메서드를 사용하여 쿼리 결과에 대한 끝점을 정의합니다.

--- 탭: 웹 버전 9 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-9-modular] ---
[https://shell.cloud.google.com/cloudshell/editor?show=ide&cloudshell_git_repo=https://github.com/firebase/snippets-web&cloudshell_open_in_editor=snippets/firestore-next/test-firestore/order_and_end.js]
import { query, orderBy, endAt } from "firebase/firestore";

const q = query(citiesRef, orderBy("population"), endAt(1000000));
order_and_end.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/order_and_end.js#L8-L10]

--- 탭: 웹 버전 8 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-8-namespaced] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
citiesRef.orderBy("population").endAt(1000000);
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L979-L979]

--- 탭: Swift [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Get all cities with population less than one million, ordered by population.
db.collection("cities")
.order(by: "population")
.end(at: [1000000])
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L1162-L1165]

--- 탭: Objective-C [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Get all cities with population less than one million, ordered by population.
[[[db collectionWithPath:@"cities"]
queryOrderedByField:@"population"]
queryEndingAtValues:@[ @1000000 ]];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L1079-L1082]

--- 탭: Kotlin [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#kotlin-android] ---
// Get all cities with a population <= 1,000,000, ordered by population,
db.collection("cities")
.orderBy("population")
.endAt(1000000)
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L963-L966]

문서 스냅샷을 사용하여 쿼리 커서 정의

문서 스냅샷을 쿼리 커서의 시작점이나 끝점으로 쿼리 절에
전달할 수도 있습니다. 문서 스냅샷의 값은 쿼리 커서의 값으로
사용됩니다.

예를 들어 여러 도시와 인구로 구성된 데이터 세트 중 '샌프란시스코' 문서의
스냅샷을 만듭니다. 그런 다음 이 문서 스냅샷을 인구 쿼리 커서의
시작점으로 사용합니다. 이렇게 하면 문서 스냅샷에 정의된 San Francisco의 인구보다 인구가 더 많거나 같은 도시가 모두 반환됩니다.

--- 탭: 웹 버전 9 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-9-modular] ---
import { collection, doc, getDoc, query, orderBy, startAt } from "firebase/firestore";
const citiesRef = collection(db, "cities");

const docSnap = await getDoc(doc(citiesRef, "SF"));

// Get all cities with a population bigger than San Francisco
const biggerThanSf = query(citiesRef, orderBy("population"), startAt(docSnap));
// ...
start_doc.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/start_doc.js#L8-L15]

--- 탭: 웹 버전 8 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-8-namespaced] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
var citiesRef = db.collection("cities");

return citiesRef.doc("SF").get().then((doc) => {
// Get all cities with a population bigger than San Francisco
var biggerThanSf = citiesRef
.orderBy("population")
.startAt(doc);

// ...
});
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L985-L994]

--- 탭: Swift [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
db.collection("cities")
.document("SF")
.addSnapshotListener { (document, error) in
guard let document = document else {
print("Error retreving cities: \(error.debugDescription)")
return
}

// Get all cities with a population greater than or equal to San Francisco.
let sfSizeOrBigger = db.collection("cities")
.order(by: "population")
.start(atDocument: document)
}
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L1173-L1185]

--- 탭: Objective-C [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
[[[db collectionWithPath:@"cities"] documentWithPath:@"SF"]
addSnapshotListener:^(FIRDocumentSnapshot *snapshot, NSError *error) {
if (snapshot == nil) {
NSLog(@"Error retreiving cities: %@", error);
return;
}
// Get all cities with a population greater than or equal to San Francisco.
FIRQuery *sfSizeOrBigger = [[[db collectionWithPath:@"cities"]
queryOrderedByField:@"population"]
queryStartingAtDocument:snapshot];
}];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L1092-L1102]

--- 탭: Kotlin [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#kotlin-android] ---
// Get the data for "San Francisco"
db.collection("cities").document("SF")
.get()
.addOnSuccessListener { documentSnapshot ->
// Get all cities with a population bigger than San Francisco.
val biggerThanSf = db.collection("cities")
.orderBy("population")
.startAt(documentSnapshot)

// ...
}
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L970-L980]

쿼리 페이지화

쿼리 커서를 limit() 메서드와 결합하여 쿼리를 페이지화합니다.
예를 들어 일괄 처리 분량의 마지막 문서를 다음 일괄 처리 분량의 커서 시작점으로 사용합니다.

--- 탭: 웹 버전 9 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-9-modular] ---
import { collection, query, orderBy, startAfter, limit, getDocs } from "firebase/firestore";

// Query the first page of docs
const first = query(collection(db, "cities"), orderBy("population"), limit(25));
const documentSnapshots = await getDocs(first);

// Get the last visible document
const lastVisible = documentSnapshots.docs[documentSnapshots.docs.length-1];
console.log("last", lastVisible);

// Construct a new query starting at this document,
// get the next 25 cities.
const next = query(collection(db, "cities"),
orderBy("population"),
startAfter(lastVisible),
limit(25));
paginate.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/paginate.js#L8-L23]

--- 탭: 웹 버전 8 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-8-namespaced] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
var first = db.collection("cities")
.orderBy("population")
.limit(25);

return first.get().then((documentSnapshots) => {
// Get the last visible document
var lastVisible = documentSnapshots.docs[documentSnapshots.docs.length-1];
console.log("last", lastVisible);

// Construct a new query starting at this document,
// get the next 25 cities.
var next = db.collection("cities")
.orderBy("population")
.startAfter(lastVisible)
.limit(25);
});
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L1016-L1031]

--- 탭: Swift [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Construct query for first 25 cities, ordered by population
let first = db.collection("cities")
.order(by: "population")
.limit(to: 25)

first.addSnapshotListener { (snapshot, error) in
guard let snapshot = snapshot else {
print("Error retreving cities: \(error.debugDescription)")
return
}

guard let lastSnapshot = snapshot.documents.last else {
// The collection is empty.
return
}

// Construct a new query starting after this document,
// retrieving the next 25 cities.
let next = db.collection("cities")
.order(by: "population")
.start(afterDocument: lastSnapshot)

// Use the query for pagination.
// ...
}
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L1193-L1217]

--- 탭: Objective-C [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
FIRQuery *first = [[[db collectionWithPath:@"cities"]
queryOrderedByField:@"population"]
queryLimitedTo:25];
[first addSnapshotListener:^(FIRQuerySnapshot *snapshot, NSError *error) {
if (snapshot == nil) {
NSLog(@"Error retreiving cities: %@", error);
return;
}
if (snapshot.documents.count == 0) { return; }
FIRDocumentSnapshot *lastSnapshot = snapshot.documents.lastObject;

// Construct a new query starting after this document,
// retreiving the next 25 cities.
FIRQuery *next = [[[db collectionWithPath:@"cities"]
queryOrderedByField:@"population"]
queryStartingAfterDocument:lastSnapshot];
// Use the query for pagination.
// ...
}];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L1110-L1128]

--- 탭: Kotlin [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#kotlin-android] ---
// Construct query for first 25 cities, ordered by population
val first = db.collection("cities")
.orderBy("population")
.limit(25)

first.get()
.addOnSuccessListener { documentSnapshots ->
// ...

// Get the last visible document
val lastVisible = documentSnapshots.documents[documentSnapshots.size() - 1]

// Construct a new query starting at this document,
// get the next 25 cities.
val next = db.collection("cities")
.orderBy("population")
.startAfter(lastVisible)
.limit(25)

// Use the query for pagination
// ...
}
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L984-L1005]

여러 필드를 기준으로 커서 설정

(문서 스냅샷이 아닌) 필드 값을 기준으로 커서를 사용할 경우 필드를 더 추가하여 커서 위치를 더욱 정확하게 지정할 수 있습니다. 이 방법은 데이터 세트에 커서 필드의 값이 동일한 문서가 여러 개 있어 커서 위치가 불분명할 때 특히 유용합니다.
커서에 추가 필드 값을 추가하여 시작점 또는 끝점을 추가로 지정하면 모호성을 줄일 수 있습니다.

예를 들어 미국의 'Springfield'라는 도시를 모두 포함하는 데이터 세트에서
쿼리가 'Springfield'에서 시작되도록 설정하면 시작점이 여러 개
생깁니다.

| 도시 |
| --- |
| 이름 | 주 |
| Springfield | Massachusetts |
| Springfield | Missouri |
| Springfield | Wisconsin |

커서 절에 '주'를 2차 조건으로 추가하면 Springfield의 시작점을 더 구체적으로 지정할 수 있습니다.

--- 탭: 웹 버전 9 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-9-modular] ---
// Will return all Springfields
import { collection, query, orderBy, startAt } from "firebase/firestore";
const q1 = query(collection(db, "cities"),
orderBy("name"),
orderBy("state"),
startAt("Springfield"));

// Will return "Springfield, Missouri" and "Springfield, Wisconsin"
const q2 = query(collection(db, "cities"),
orderBy("name"),
orderBy("state"),
startAt("Springfield", "Missouri"));
start_multiple_orderby.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/start_multiple_orderby.js#L8-L19]

--- 탭: 웹 버전 8 [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#%EC%9B%B9-%EB%B2%84%EC%A0%84-8-namespaced] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
// Will return all Springfields
db.collection("cities")
.orderBy("name")
.orderBy("state")
.startAt("Springfield");

// Will return "Springfield, Missouri" and "Springfield, Wisconsin"
db.collection("cities")
.orderBy("name")
.orderBy("state")
.startAt("Springfield", "Missouri");
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L1000-L1010]

--- 탭: Swift [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Will return all Springfields
db.collection("cities")
.order(by: "name")
.order(by: "state")
.start(at: ["Springfield"])

// Will return "Springfield, Missouri" and "Springfield, Wisconsin"
db.collection("cities")
.order(by: "name")
.order(by: "state")
.start(at: ["Springfield", "Missouri"])
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L1225-L1235]

--- 탭: Objective-C [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Will return all Springfields
[[[[db collectionWithPath:@"cities"]
queryOrderedByField:@"name"]
queryOrderedByField:@"state"]
queryStartingAtValues:@[ @"Springfield" ]];
// Will return "Springfield, Missouri" and "Springfield, Wisconsin"
[[[[db collectionWithPath:@"cities"]
queryOrderedByField:@"name"]
queryOrderedByField:@"state"]
queryStartingAtValues:@[ @"Springfield", @"Missouri" ]];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L1138-L1147]

--- 탭: Kotlin [https://cloud.google.com/firestore/native/docs/query-data/query-cursors?hl=ko#kotlin-android] ---
// Will return all Springfields
db.collection("cities")
.orderBy("name")
.orderBy("state")
.startAt("Springfield")

// Will return "Springfield, Missouri" and "Springfield, Wisconsin"
db.collection("cities")
.orderBy("name")
.orderBy("state")
.startAt("Springfield", "Missouri")
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L1009-L1019]

도움이 되었나요?

의견 보내기