Source URL: https://cloud.google.com/firestore/docs/quickstart-servers?hl=ko
Title: 서버 클라이언트 라이브러리를 사용하여 Firestore 데이터베이스 만들기

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.

의견 보내기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

서버 클라이언트 라이브러리를 사용하여 Firestore 데이터베이스 만들기

이 빠른 시작에서는 C#, Go, 자바, Node.js, PHP, Python 또는 Ruby 서버 클라이언트 라이브러리를 사용하여 Firestore를 설정하고, 데이터를 추가하고, 데이터를 읽는 방법을 설명합니다.

시작하기 전에

Sign in to your Google Cloud account. If you're new to
Google Cloud, create an account [https://console.cloud.google.com/freetrial?hl=ko] to evaluate how our products perform in
real-world scenarios. New customers also get $300 in free credits to
run, test, and deploy workloads.

In the Google Cloud console, on the project selector page,
select or create a Google Cloud project.

Note: If you don't plan to keep the
resources that you create in this procedure, create a project instead of
selecting an existing project. After you finish these steps, you can
delete the project, removing all resources associated with the project.

Go to project selector [https://console.cloud.google.com/projectselector2/home/dashboard?hl=ko]

In the Google Cloud console, on the project selector page,
select or create a Google Cloud project.

Note: If you don't plan to keep the
resources that you create in this procedure, create a project instead of
selecting an existing project. After you finish these steps, you can
delete the project, removing all resources associated with the project.

Go to project selector [https://console.cloud.google.com/projectselector2/home/dashboard?hl=ko]

Firestore와 App Engine:
동일한 프로젝트에서 Firestore와 Datastore를 모두 사용할 수는 없습니다. 이렇게 하면 App Engine을 사용하는 앱이 영향을 받을 수 있습니다. Datastore를 사용해야 하는 경우 Firestore를 다른 프로젝트에서 사용해 보세요.

기본 모드 데이터베이스에서 기본 모드로 Firestore 만들기

새 프로젝트인 경우 Firestore 데이터베이스 인스턴스를 만들어야 합니다.

Firestore 뷰어로 이동합니다 [https://console.cloud.google.com/firestore/data?hl=ko].
데이터베이스 서비스 선택 화면에서 기본 모드의 Firestore를 선택합니다.
Firestore 위치 [https://cloud.google.com/firestore/docs/locations?hl=ko#types]를 선택합니다.

위치를 선택할 수 없다면 프로젝트의 '기본 Google Cloud 리소스의 위치' [https://cloud.google.com/firestore/docs/locations?hl=ko#default-cloud-location]가 이미 설정된 것입니다. 일부 프로젝트 리소스 (예: 기본 Firestore 인스턴스)는 공통 위치 종속 항목을 공유하며, 위치는 프로젝트 생성 중이나 이 위치 종속 항목을 공유하는 다른 서비스를 설정할 때 설정할 수 있습니다.
데이터베이스 만들기를 클릭합니다.

Firestore 프로젝트를 만들면 Cloud API Manager [https://console.cloud.google.com/projectselector/apis/api/firestore.googleapis.com/overview?hl=ko]에서도 API가 사용 설정됩니다.

인증 설정

클라이언트 라이브러리를 실행하려면 우선 서비스 계정을 만들고 환경 변수를 설정하여 인증 [https://cloud.google.com/docs/authentication/production?hl=ko]을 설정해야 합니다.

Provide authentication credentials to your application code by setting the
environment variable GOOGLE_APPLICATION_CREDENTIALS. This
variable applies only to your current shell session. If you want the variable
to apply to future shell sessions, set the variable in your shell startup file,
for example in the ~/.bashrc or ~/.profile file.

Linux 또는 macOS

export GOOGLE_APPLICATION_CREDENTIALS="KEY_PATH"
Replace KEY_PATH with the path of the JSON file that contains your credentials.

For example:

export GOOGLE_APPLICATION_CREDENTIALS="/home/user/Downloads/service-account-file.json"

Windows

For PowerShell:

$env:GOOGLE_APPLICATION_CREDENTIALS="KEY_PATH"
Replace KEY_PATH with the path of the JSON file that contains your credentials.

For example:

$env:GOOGLE_APPLICATION_CREDENTIALS="C:\Users\username\Downloads\service-account-file.json"

For command prompt:

set GOOGLE_APPLICATION_CREDENTIALS=KEY_PATH
Replace KEY_PATH with the path of the JSON file that contains your credentials.

앱에 서버 클라이언트 라이브러리 추가

필요한 종속 항목과 클라이언트 라이브러리를 앱에 추가합니다.

자바

앱에 Firestore 자바 라이브러리를 추가합니다.

Maven 사용:
<dependencyManagement>
<dependencies>
<dependency>
<groupId>com.google.cloud</groupId>
<artifactId>libraries-bom</artifactId>
<version>26.65.0</version>
<type>pom</type>
<scope>import</scope>
</dependency>
</dependencies>
</dependencyManagement>

<dependencies>
<dependency>
<groupId>com.google.cloud</groupId>
<artifactId>google-cloud-firestore</artifactId>
</dependency>pom.xml [https://github.com/googleapis/java-firestore/blob/02c1372447e22b3e635f5997ce9a6113144b3734/samples/snippets/pom.xml#L32-L48]

Gradle을 사용하거나 BOM 없이 설정하는 경우 자바용 Firestore 클라이언트 README [https://github.com/googleapis/java-firestore/tree/main#quickstart]를 참조하세요.

IDE 사용:
VS Code, IntelliJ, Eclipse를 사용하는 경우 다음과 같은 IDE 플러그인을 사용하여 클라이언트 라이브러리를 프로젝트에 추가할 수 있습니다.

VS Code용 Cloud Code [https://cloud.google.com/code/docs/vscode/client-libraries?hl=ko]
IntelliJ용 Cloud Code [https://cloud.google.com/code/docs/intellij/client-libraries?hl=ko]
Eclipse용 Cloud Tools [https://cloud.google.com/eclipse/docs/libraries?hl=ko]

이 플러그인은 서비스 계정의 키 관리와 같은 추가 기능을 제공합니다. 자세한 내용은 각 플러그인의 문서를 참조하세요.

Python

앱에 Firestore Python 라이브러리를 추가합니다.
참고: 가상 Python 환경 [https://virtualenv.pypa.io/en/stable/]을 사용하여 Firestore Python 라이브러리를 설치하는 것이 좋습니다.
pip install virtualenv
virtualenv env
source env/bin/activate

pip install --upgrade google-cloud-firestore

Node.js
앱에 Firestore Node.js 라이브러리를 추가합니다.
npm install --save @google-cloud/firestore

Go
Firestore Go 라이브러리를 설치합니다.
go get cloud.google.com/go/firestore
앱에 Firestore Go 라이브러리를 추가합니다.
import "cloud.google.com/go/firestore"

PHP

클라이언트 라이브러리를 사용하는 데 필요한 PHP용 gRPC 확장 프로그램 [https://cloud.google.com/php/grpc?hl=ko]을 설치하고 사용 설정합니다.

앱에 Firestore PHP 라이브러리를 추가합니다.
composer require google/cloud-firestore

C#

.csproj 파일의 앱에 Firestore C# 라이브러리를 추가합니다.
<ItemGroup>
<PackageReference Include="Google.Cloud.Firestore" Version="1.1.0-beta01" />
</ItemGroup>

Program.cs 파일에 다음을 추가합니다.
using Google.Cloud.Firestore;

Ruby

Gemfile의 앱에 Firestore Ruby 라이브러리를 추가합니다.
gem "google-cloud-firestore"

다음을 사용하여 Gemfile의 종속 항목을 설치합니다.bundle install

기본 모드에서 Firestore 초기화

Firestore의 인스턴스를 초기화합니다.

자바
import com.google.cloud.firestore.Firestore [https://cloud.google.com/java/docs/reference/google-cloud-firestore/latest/com.google.cloud.firestore.Firestore.html?hl=ko];
import com.google.cloud.firestore.FirestoreOptions [https://cloud.google.com/java/docs/reference/google-cloud-firestore/latest/com.google.cloud.firestore.FirestoreOptions.html?hl=ko];
FirestoreOptions firestoreOptions =
FirestoreOptions.getDefaultInstance().toBuilder()
.setProjectId(projectId)
.setCredentials(GoogleCredentials.getApplicationDefault())
.build();
Firestore db = firestoreOptions.getService();Quickstart.java [https://github.com/googleapis/java-firestore/blob/02c1372447e22b3e635f5997ce9a6113144b3734/samples/snippets/src/main/java/com/example/firestore/Quickstart.java#L47-L52]

Python
from google.cloud import firestore

# The `project` parameter is optional and represents which project the client
# will act on behalf of. If not supplied, the client falls back to the default
# project inferred from the environment.
db = firestore.Client [https://cloud.google.com/python/docs/reference/firestore/latest/google.cloud.firestore_v1.client.Client.html?hl=ko](project="my-project-id")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/2947b35a1923eb7b78c53897b3e6f8191d75ec3a/firestore/cloud-client/snippets.py#L26-L33]

Python(비동기)
from google.cloud import firestore

# The `project` parameter is optional and represents which project the client
# will act on behalf of. If not supplied, the client falls back to the default
# project inferred from the environment.
db = firestore.AsyncClient [https://cloud.google.com/python/docs/reference/firestore/latest/google.cloud.firestore_v1.async_client.AsyncClient.html?hl=ko](project="my-project-id")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/2947b35a1923eb7b78c53897b3e6f8191d75ec3a/firestore/cloud-async-client/snippets.py#L22-L27]

Node.js

const Firestore = require('@google-cloud/firestore');

const db = new Firestore({
projectId: 'YOUR_PROJECT_ID',
keyFilename: '/path/to/keyfile.json',
});

Go
import (
"context"
"flag"
"fmt"
"log"

"google.golang.org/api/iterator"

"cloud.google.com/go/firestore"
)

func createClient(ctx context.Context) *firestore.Client {
// Sets your Google Cloud Platform project ID.
projectID := "YOUR_PROJECT_ID"

client, err := firestore.NewClient(ctx, projectID)
if err != nil {
log.Fatalf("Failed to create client: %v", err)
}
// Close client when done with
// defer client.Close()
return client
}
main.go [https://github.com/GoogleCloudPlatform/golang-samples/blob/fca235597624bdc9e851909cc8b3e1ffa21b5f36/firestore/firestore_quickstart/main.go#L40-L48]

PHP
use Google\Cloud\Firestore\FirestoreClient;

/**
* Initialize Cloud Firestore with default project ID.
*/
function setup_client_create(string $projectId = null)
{
// Create the Cloud Firestore client
if (empty($projectId)) {
// The `projectId` parameter is optional and represents which project the
// client will act on behalf of. If not supplied, the client falls back to
// the default project inferred from the environment.
$db = new FirestoreClient();
printf('Created Cloud Firestore client with default project ID.' . PHP_EOL);
} else {
$db = new FirestoreClient([
'projectId' => $projectId,
]);
printf('Created Cloud Firestore client with project ID: %s' . PHP_EOL, $projectId);
}
}setup_client_create.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/f6d38646d78e298490ac14c803fce1ee4cc36808/firestore/src/setup_client_create.php#L27-L47]

C#

FirestoreDb db = FirestoreDb.Create(project);
Console.WriteLine("Created Cloud Firestore client with project ID: {0}", project);Program.cs [https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/e34d55a2072b9e6f45437c3cef8f39342e190859/firestore/api/Quickstart/Program.cs#L37-L38]

Ruby
require "google/cloud/firestore"

# The `project_id` parameter is optional and represents which project the
# client will act on behalf of. If not supplied, the client falls back to the
# default project inferred from the environment.
firestore = Google::Cloud::Firestore [https://cloud.google.com/ruby/docs/reference/google-cloud-firestore-admin-v1/latest/Google-Cloud-Firestore.html?hl=ko].new [https://cloud.google.com/ruby/docs/reference/google-cloud-firestore/latest/Google-Cloud-Firestore.html?hl=ko] project_id: project_id

puts "Created Cloud Firestore client with given project ID."quickstart.rb [https://github.com/googleapis/google-cloud-ruby/blob/9c6e8ed0dae6eec5cbec758f0a9406407f18ed8b/google-cloud-firestore/samples/quickstart.rb#L19-L26]

데이터 추가

Firestore는 컬렉션에 저장되는 문서에 데이터를 저장합니다.
문서에 데이터를 처음 추가할 때 Firestore는 암시적으로 컬렉션과 문서를 만듭니다. 컬렉션이나 문서를 명시적으로 만들 필요가 없습니다.

다음 예시 코드를 사용해 새 컬렉션과 문서를 만듭니다.

Java

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

DocumentReference docRef = db.collection("users").document("alovelace");
// Add document data  with id "alovelace" using a hashmap
Map<String, Object> data = new HashMap<>();
data.put("first", "Ada");
data.put("last", "Lovelace");
data.put("born", 1815);
//asynchronously write data
ApiFuture<WriteResult> result = docRef.set(data);
// ...
// result.get() blocks on response
System.out.println("Update time : " + result.get().getUpdateTime());

Python

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

doc_ref = db.collection("users").document("alovelace")
doc_ref.set({"first": "Ada", "last": "Lovelace", "born": 1815})

Python(Async)

doc_ref = db.collection("users").document("alovelace")
await doc_ref.set({"first": "Ada", "last": "Lovelace", "born": 1815})

Node.js

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

const docRef = db.collection('users').doc('alovelace');

await docRef.set({
first: 'Ada',
last: 'Lovelace',
born: 1815
});

Go

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

_, _, err := client.Collection("users").Add(ctx, map[string]interface{}{
"first": "Ada",
"last":  "Lovelace",
"born":  1815,
})
if err != nil {
log.Fatalf("Failed adding alovelace: %v", err)
}

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$docRef = $db->collection('samples/php/users')->document('alovelace');
$docRef->set([
'first' => 'Ada',
'last' => 'Lovelace',
'born' => 1815
]);
printf('Added data to the lovelace document in the users collection.' . PHP_EOL);

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

DocumentReference docRef = db.Collection("users").Document("alovelace");
Dictionary<string, object> user = new Dictionary<string, object>
{
{ "First", "Ada" },
{ "Last", "Lovelace" },
{ "Born", 1815 }
};
await docRef.SetAsync(user);

Ruby

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

doc_ref = firestore.doc "#{collection_path}/alovelace"

doc_ref.set(
{
first: "Ada",
last:  "Lovelace",
born:  1815
}
)

puts "Added data to the alovelace document in the users collection."

이제 users 컬렉션에 다른 문서를 추가합니다. 첫 번째 문서에는 나타나지 않는 키-값 쌍(중간 이름)이 문서에 포함된다는 점에 유의하세요. 컬렉션의 문서에는 다른 정보 집합이 포함될 수 있습니다.

Java

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

DocumentReference docRef = db.collection("users").document("aturing");
// Add document data with an additional field ("middle")
Map<String, Object> data = new HashMap<>();
data.put("first", "Alan");
data.put("middle", "Mathison");
data.put("last", "Turing");
data.put("born", 1912);

ApiFuture<WriteResult> result = docRef.set(data);
System.out.println("Update time : " + result.get().getUpdateTime());

Python

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

doc_ref = db.collection("users").document("aturing")
doc_ref.set({"first": "Alan", "middle": "Mathison", "last": "Turing", "born": 1912})

Python(Async)

doc_ref = db.collection("users").document("aturing")
await doc_ref.set(
{"first": "Alan", "middle": "Mathison", "last": "Turing", "born": 1912}
)

Node.js

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

const aTuringRef = db.collection('users').doc('aturing');

await aTuringRef.set({
'first': 'Alan',
'middle': 'Mathison',
'last': 'Turing',
'born': 1912
});

Go

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

_, _, err = client.Collection("users").Add(ctx, map[string]interface{}{
"first":  "Alan",
"middle": "Mathison",
"last":   "Turing",
"born":   1912,
})
if err != nil {
log.Fatalf("Failed adding aturing: %v", err)
}

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$docRef = $db->collection('samples/php/users')->document('aturing');
$docRef->set([
'first' => 'Alan',
'middle' => 'Mathison',
'last' => 'Turing',
'born' => 1912
]);
printf('Added data to the aturing document in the users collection.' . PHP_EOL);

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

DocumentReference docRef = db.Collection("users").Document("aturing");
Dictionary<string, object> user = new Dictionary<string, object>
{
{ "First", "Alan" },
{ "Middle", "Mathison" },
{ "Last", "Turing" },
{ "Born", 1912 }
};
await docRef.SetAsync(user);

Ruby

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

doc_ref = firestore.doc "#{collection_path}/aturing"

doc_ref.set(
{
first:  "Alan",
middle: "Mathison",
last:   "Turing",
born:   1912
}
)

puts "Added data to the aturing document in the users collection."

데이터 읽기

Firestore에 추가한 데이터를 빠르게 확인하려면 Firebase Console [https://console.firebase.google.com/project/_/firestore/data?hl=ko]의 데이터 뷰어를 사용합니다.

get 메서드를 사용하여 전체 컬렉션을 검색할 수도 있습니다.

Java

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

// asynchronously retrieve all users
ApiFuture<QuerySnapshot> query = db.collection("users").get();
// ...
// query.get() blocks on response
QuerySnapshot querySnapshot = query.get();
List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
for (QueryDocumentSnapshot document : documents) {
System.out.println("User: " + document.getId());
System.out.println("First: " + document.getString("first"));
if (document.contains("middle")) {
System.out.println("Middle: " + document.getString("middle"));
}
System.out.println("Last: " + document.getString("last"));
System.out.println("Born: " + document.getLong("born"));
}

Python

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

users_ref = db.collection("users")
docs = users_ref.stream()

for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")

Python(Async)

users_ref = db.collection("users")
docs = users_ref.stream()

async for doc in docs:
print(f"{doc.id} => {doc.to_dict()}")

Node.js

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

const snapshot = await db.collection('users').get();
snapshot.forEach((doc) => {
console.log(doc.id, '=>', doc.data());
});

Go

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

iter := client.Collection("users").Documents(ctx)
for {
doc, err := iter.Next()
if err == iterator.Done {
break
}
if err != nil {
log.Fatalf("Failed to iterate: %v", err)
}
fmt.Println(doc.Data())
}

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$usersRef = $db->collection('samples/php/users');
$snapshot = $usersRef->documents();
foreach ($snapshot as $user) {
printf('User: %s' . PHP_EOL, $user->id());
printf('First: %s' . PHP_EOL, $user['first']);
if (!empty($user['middle'])) {
printf('Middle: %s' . PHP_EOL, $user['middle']);
}
printf('Last: %s' . PHP_EOL, $user['last']);
printf('Born: %d' . PHP_EOL, $user['born']);
printf(PHP_EOL);
}
printf('Retrieved and printed out all documents from the users collection.' . PHP_EOL);

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

CollectionReference usersRef = db.Collection("users");
QuerySnapshot snapshot = await usersRef.GetSnapshotAsync();
foreach (DocumentSnapshot document in snapshot.Documents)
{
Console.WriteLine("User: {0}", document.Id);
Dictionary<string, object> documentDictionary = document.ToDictionary();
Console.WriteLine("First: {0}", documentDictionary["First"]);
if (documentDictionary.ContainsKey("Middle"))
{
Console.WriteLine("Middle: {0}", documentDictionary["Middle"]);
}
Console.WriteLine("Last: {0}", documentDictionary["Last"]);
Console.WriteLine("Born: {0}", documentDictionary["Born"]);
Console.WriteLine();
}

Ruby

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

users_ref = firestore.col collection_path
users_ref.get do |user|
puts "#{user.document_id} data: #{user.data}."
end

다음 단계

다음 주제를 자세히 알아보세요.

데이터 모델 [https://cloud.google.com/firestore/native/docs/data-model?hl=ko] - 계층적 데이터와 하위 컬렉션을 비롯한 Firestore에서 데이터가 구조화되는 방식을 자세히 알아보세요.
데이터 추가 [https://cloud.google.com/firestore/native/docs/manage-data/add-data?hl=ko] - Firestore에서 데이터를 만들고 업데이트하는 방법을 자세히 알아보세요.
데이터 가져오기 [https://cloud.google.com/firestore/native/docs/query-data/get-data?hl=ko] - 데이터를 검색하는 방법을 자세히 알아보세요.
단순 쿼리 및 복합 쿼리 실행 [https://cloud.google.com/firestore/native/docs/query-data/queries?hl=ko] - 단순 쿼리 및 복합 쿼리 실행 방법을 알아보세요.
쿼리 순서 지정 및 제한 [https://cloud.google.com/firestore/native/docs/query-data/order-limit-data?hl=ko] - 쿼리에서 반환된 데이터의 순서를 지정하고 제한하는 방법을 알아보세요.

의견 보내기