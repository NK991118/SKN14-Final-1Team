Source URL: https://firebase.google.com/docs/firestore/quickstart?hl=ko
Title: Cloud Firestore 시작하기
bookmark_border

이제 MongoDB 호환성을 갖춘 Cloud Firestore Enterprise 버전을 사용할 수 있습니다. 자세히 알아보기 [https://firebase.google.com/docs/firestore/enterprise/mongodb-compatibility-overview?hl=ko]

의견 보내기

Cloud Firestore 시작하기

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용Cloud Firestore 데이터베이스 만들기 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#create]개발 환경 설정 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#set_up_your_development_environment](선택사항) Firebase Local Emulator Suite으로 프로토타입 제작 및 테스트 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#optional_prototype_and_test_with]Cloud Firestore 초기화 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#initialize]데이터 추가 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#add_data]데이터 읽기 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#read_data]데이터 보안 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#secure_your_data]동영상 튜토리얼 보기 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#watch_a_video_tutorial]다음 단계 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#next_steps]

이 빠른 시작에서는 Cloud Firestore를 설정하고 데이터를 추가한 후 Firebase Console에서 방금 추가한 데이터를 보는 방법을 보여줍니다.

Cloud Firestore 데이터베이스 만들기

Firebase 프로젝트를 아직 만들지 않았다면 Firebase Console [https://console.firebase.google.com/?hl=ko]에서 프로젝트 추가를 클릭한 후 화면에 표시된 안내를 따라 Firebase 프로젝트를 만들거나 기존 Google Cloud 프로젝트에 Firebase 서비스를 추가합니다.
Firebase Console에서 프로젝트를 엽니다. 왼쪽 패널에서 빌드를 펼친 다음 Firestore 데이터베이스 [https://console.firebase.google.com/project/_/firestore/?hl=ko]를 선택합니다.
데이터베이스 만들기를 클릭합니다.
데이터베이스의 위치 [https://firebase.google.com/docs/firestore/locations?hl=ko#types]를 선택합니다.

위치를 선택할 수 없다면 프로젝트의 '기본 Google Cloud 리소스의 위치' [https://firebase.google.com/docs/firestore/locations?hl=ko#default-cloud-location]가 이미 설정된 것입니다. 일부 프로젝트 리소스(예: 기본 Cloud Firestore 인스턴스)는 공통 위치 종속 항목을 공유하며, 위치는 프로젝트 생성 중이나 이 위치 종속 항목을 공유하는 다른 서비스를 설정할 때 설정할 수 있습니다.
Cloud Firestore Security Rules의 시작 모드를 선택합니다.

테스트 모드
모바일 및 웹 클라이언트 라이브러리를 시작할 때 유용하지만 모든 사용자가 데이터를 읽고 덮어쓸 수 있습니다. 테스트 완료 후 데이터 보안 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#secure_your_data] 섹션을 검토해야 합니다.
웹, Apple 플랫폼 또는 Android SDK를 시작하려면 테스트 모드를 선택하세요.
프로덕션 모드
모바일 및 웹 클라이언트의 모든 읽기 및 쓰기를 거부합니다.
인증된 애플리케이션 서버(C#, Go, 자바, Node.js, PHP, Python, Ruby)에서는 사용자의 데이터베이스에 계속 액세스할 수 있습니다.
C#, Go, Java, Node.js, PHP, Python 또는 Ruby 서버 클라이언트 라이브러리를 시작하려면 프로덕션 모드를 선택하세요.

Cloud Firestore Security Rules의 초기 집합이 기본 Cloud Firestore 데이터베이스에 적용됩니다. 프로젝트에 데이터베이스를 여러 개 만드는 경우 각 데이터베이스에 Cloud Firestore Security Rules를 배포할 수 있습니다.
만들기를 클릭합니다.

Cloud Firestore 및 App Engine:
동일한 프로젝트에서 Cloud Firestore와 Datastore를 모두 사용할 수는 없습니다. 이렇게 하면 App Engine을 사용하는 앱이 영향을 받을 수 있습니다. 다른 프로젝트에서 Cloud Firestore를 사용해 보세요.

Cloud Firestore를 사용 설정하면 Cloud API Manager [https://console.cloud.google.com/projectselector/apis/api/firestore.googleapis.com/overview?hl=ko]의 API도 사용 설정됩니다.

개발 환경 설정

필요한 종속 항목 및 클라이언트 라이브러리를 앱에 추가하세요.

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-modular-api] ---
안내에 따라 Firebase를 웹 앱에 추가 [https://firebase.google.com/docs/web/setup?sdk_version=v9&hl=ko]합니다.
Cloud Firestore SDK는 npm 패키지로도 제공됩니다.
npm install firebase@12.2.1 --save
Firebase와 Cloud Firestore를 모두 가져와야 합니다.
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
간소화된 Firestore 라이브러리를 찾고 있고 간단한 REST/CRUD 기능만 필요하신가요? npm을 통해서만 사용할 수 있는 Firestore Lite SDK [https://firebase.google.com/docs/firestore/solutions/firestore-lite?hl=ko]를 사용해 보세요.

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-namespaced-api] ---
안내에 따라 Firebase를 웹 앱에 추가 [https://firebase.google.com/docs/web/setup?hl=ko]합니다.
Firebase와 Cloud Firestore 라이브러리를 앱에 추가합니다.
<script src="https://www.gstatic.com/firebasejs/12.2.1/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/12.2.1/firebase-firestore-compat.js"></script>
Cloud Firestore SDK는 npm 패키지로도 제공됩니다.
npm install firebase@12.2.1 --save
Firebase와 Cloud Firestore를 모두 수동으로 요청해야 합니다.
import firebase from "firebase/compat/app";
// Required for side-effects
import "firebase/firestore";

--- 탭: iOS+ [https://firebase.google.com/docs/firestore/quickstart?hl=ko#ios+] ---
안내에 따라 Firebase를 Apple 앱에 추가 [https://firebase.google.com/docs/ios/setup?hl=ko]합니다.
Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.
설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.
앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Swift Packages(Swift 패키지) > Add Package Dependency(패키지 종속 항목 추가)로 이동합니다.
메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.
https://github.com/firebase/firebase-ios-sdk

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.
Firestore 라이브러리를 선택합니다.
완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

--- 탭: Android [https://firebase.google.com/docs/firestore/quickstart?hl=ko#android] ---
```
dependencies {
// Import the BoM for the Firebase platform
implementation(platform("com.google.firebase:firebase-bom:34.2.0"))

// Declare the dependency for the Cloud Firestore library
// When using the BoM, you don't specify versions in Firebase library dependencies
implementation("com.google.firebase:firebase-firestore")
}
```

--- 탭: Dart [https://firebase.google.com/docs/firestore/quickstart?hl=ko#dart-flutter] ---
아직 구성하지 않았다면 Flutter 앱에서 Firebase를 구성하고 초기화 [https://firebase.google.com/docs/flutter/setup?hl=ko]합니다.
Flutter 프로젝트 루트에서 다음 명령어를 실행하여 플러그인을 설치합니다.
flutter pub add cloud_firestore
완료되면 Flutter 애플리케이션을 다시 빌드합니다.
flutter run
선택사항: 사전 컴파일된 프레임워크를 포함하여 iOS 및 macOS 빌드 시간을 개선합니다.
현재 iOS용 Firestore SDK는 Xcode에서 빌드하는 데 5분 이상 걸릴 수 있는 코드를 사용합니다. 빌드 시간을 크게 줄이려면 Podfile의 target 'Runner' do 블록에 다음 줄을 추가하여 사전 컴파일된 버전을 사용하면 됩니다.
target 'Runner' do
use_frameworks!
use_modular_headers!

pod 'FirebaseFirestore',
:git => 'https://github.com/invertase/firestore-ios-sdk-frameworks.git',
:tag => 'IOS_SDK_VERSION'

flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
target 'RunnerTests' do
inherit! :search_paths
end
end
IOS_SDK_VERSION을 firebase_core의 firebase_sdk_version.rb [https://github.com/firebase/flutterfire/blob/master/packages/firebase_core/firebase_core/ios/firebase_sdk_version.rb#L3] 파일에 지정된 Firebase iOS SDK 버전으로 바꿉니다. firebase_core의 최신 버전을 사용하지 않는 경우 로컬 Pub 패키지 캐시(일반적으로 ~/.pub-cache)에서 이 파일을 찾습니다.
또한 CocoaPods를 1.9.1 이상으로 업그레이드했는지 확인합니다.
gem install cocoapods
자세한 내용은 GitHub의 문제 [https://github.com/FirebaseExtended/flutterfire/issues/2751]를 참조하세요.

(선택사항) Firebase Local Emulator Suite으로 프로토타입 제작 및 테스트

모바일 개발자를 대상으로 앱이 Cloud Firestore에서 데이터를 읽고 쓰는 방법에 대해 설명하기 전에 Cloud Cloud Firestore 기능을 프로토타입으로 제작하고 테스트하는 데 사용할 수 있는 도구 모음인 Firebase Local Emulator Suite를 소개하려 합니다. 다양한 데이터 모델을 사용해 보거나, 보안 규칙을 최적화하거나, 백엔드와 상호작용할 수 있는 가장 비용 효율적인 방법을 찾는 경우 실시간 서비스를 배포하지 않고 로컬에서 작업할 수 있다는 것은 획기적인 아이디어입니다.

Cloud Firestore 에뮬레이터는 Local Emulator Suite의 일부이며 앱에서 에뮬레이션된 데이터베이스 콘텐츠와 구성은 물론 필요에 따라 에뮬레이션된 프로젝트 리소스(함수, 기타 데이터베이스, 보안 규칙)와 상호작용할 수 있게 해줍니다.

Cloud Firestore 에뮬레이터를 사용하려면 다음 몇 단계만 거치면 됩니다.

에뮬레이터에 연결하려면 앱의 테스트 구성에 코드 줄을 추가합니다.
로컬 프로젝트 디렉터리의 루트에서 firebase emulators:start를 실행합니다.
평소와 같이 Cloud Firestore 플랫폼 SDK를 사용하여 앱의 프로토타입 코드에서 호출합니다.

자세한 내용은 Cloud Firestore 및 Cloud Functions 관련 둘러보기 [https://firebase.google.com/docs/emulator-suite/connect_and_prototype?database=Firestore&hl=ko]를 참조하세요. Local Emulator Suite 소개 [https://firebase.google.com/docs/emulator-suite?hl=ko]도 살펴보세요.

Cloud Firestore 초기화

Cloud Firestore의 인스턴스를 초기화합니다.

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-modular-api] ---
```
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

// TODO: Replace the following with your app's Firebase project configuration
// See: https://support.google.com/firebase/answer/7015592
const firebaseConfig = {

FIREBASE_CONFIGURATION
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize Cloud Firestore and get a reference to the service
const db = getFirestore(app);
```

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-namespaced-api] ---
```
import firebase from "firebase/app";
import "firebase/firestore";

// TODO: Replace the following with your app's Firebase project configuration
// See: https://support.google.com/firebase/answer/7015592
const firebaseConfig = {

FIREBASE_CONFIGURATION
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Initialize Cloud Firestore and get a reference to the service
const db = firebase.firestore();
```

--- 탭: Swift [https://firebase.google.com/docs/firestore/quickstart?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
import FirebaseCore
import FirebaseFirestore
FirebaseApp.configure()

let db = Firestore.firestore()
AppDelegate.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/AppDelegate.swift#L31-L33]

--- 탭: Objective-C [https://firebase.google.com/docs/firestore/quickstart?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
@import FirebaseCore;
@import FirebaseFirestore;

// Use Firebase library to configure APIs
[FIRApp configure];

FIRFirestore *defaultFirestore = [FIRFirestore firestore];
AppDelegate.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/AppDelegate.m#L32-L32]

--- 탭: Kotlin [https://firebase.google.com/docs/firestore/quickstart?hl=ko#kotlin-android] ---
// Access a Cloud Firestore instance from your Activity
val db = Firebase.firestore
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L108-L108]

데이터 추가

Cloud Firestore는 컬렉션에 저장되는 문서에 데이터를 저장합니다.
문서에 데이터를 처음 추가할 때 Cloud Firestore는 암시적으로 컬렉션과 문서를 만듭니다. 컬렉션이나 문서를 명시적으로
만들 필요가 없습니다.

다음 예시 코드를 사용해 새 컬렉션과 문서를 만듭니다.

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-modular-api] ---
import { collection, addDoc } from "firebase/firestore";

try {
const docRef = await addDoc(collection(db, "users"), {
first: "Ada",
last: "Lovelace",
born: 1815
});
console.log("Document written with ID: ", docRef.id);
} catch (e) {
console.error("Error adding document: ", e);
}
add_ada_lovelace.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/add_ada_lovelace.js#L8-L19]

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-namespaced-api] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
db.collection("users").add({
first: "Ada",
last: "Lovelace",
born: 1815
})
.then((docRef) => {
console.log("Document written with ID: ", docRef.id);
})
.catch((error) => {
console.error("Error adding document: ", error);
});
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L125-L135]

--- 탭: Swift [https://firebase.google.com/docs/firestore/quickstart?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Add a new document with a generated ID
do {
let ref = try await db.collection("users").addDocument(data: [
"first": "Ada",
"last": "Lovelace",
"born": 1815
])
print("Document added with ID: \(ref.documentID)")
} catch {
print("Error adding document: \(error)")
}
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L158-L168]

--- 탭: Objective-C [https://firebase.google.com/docs/firestore/quickstart?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Add a new document with a generated ID
__block FIRDocumentReference *ref =
[[self.db collectionWithPath:@"users"] addDocumentWithData:@{
@"first": @"Ada",
@"last": @"Lovelace",
@"born": @1815
} completion:^(NSError * _Nullable error) {
if (error != nil) {
NSLog(@"Error adding document: %@", error);
} else {
NSLog(@"Document added with ID: %@", ref.documentID);
}
}];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L92-L104]

--- 탭: Kotlin [https://firebase.google.com/docs/firestore/quickstart?hl=ko#kotlin-android] ---
// Create a new user with a first and last name
val user = hashMapOf(
"first" to "Ada",
"last" to "Lovelace",
"born" to 1815,
)

// Add a new document with a generated ID
db.collection("users")
.add(user)
.addOnSuccessListener { documentReference ->
Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
}
.addOnFailureListener { e ->
Log.w(TAG, "Error adding document", e)
}
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L136-L151]

이제 users 컬렉션에 다른 문서를 추가합니다. 첫 번째 문서에는 나타나지 않는 키-값 쌍(중간 이름)이 문서에 포함된다는 점에 유의하세요. 컬렉션의 문서에는 다른 정보 집합이 포함될 수 있습니다.

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-modular-api] ---
// Add a second document with a generated ID.
import { addDoc, collection } from "firebase/firestore";

try {
const docRef = await addDoc(collection(db, "users"), {
first: "Alan",
middle: "Mathison",
last: "Turing",
born: 1912
});

console.log("Document written with ID: ", docRef.id);
} catch (e) {
console.error("Error adding document: ", e);
}
add_alan_turing.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/add_alan_turing.js#L8-L22]

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-namespaced-api] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
// Add a second document with a generated ID.
db.collection("users").add({
first: "Alan",
middle: "Mathison",
last: "Turing",
born: 1912
})
.then((docRef) => {
console.log("Document written with ID: ", docRef.id);
})
.catch((error) => {
console.error("Error adding document: ", error);
});
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L155-L167]

--- 탭: Swift [https://firebase.google.com/docs/firestore/quickstart?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Add a second document with a generated ID.
do {
let ref = try await db.collection("users").addDocument(data: [
"first": "Alan",
"middle": "Mathison",
"last": "Turing",
"born": 1912
])
print("Document added with ID: \(ref.documentID)")
} catch {
print("Error adding document: \(error)")
}
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L174-L185]

--- 탭: Objective-C [https://firebase.google.com/docs/firestore/quickstart?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
// Add a second document with a generated ID.
__block FIRDocumentReference *ref =
[[self.db collectionWithPath:@"users"] addDocumentWithData:@{
@"first": @"Alan",
@"middle": @"Mathison",
@"last": @"Turing",
@"born": @1912
} completion:^(NSError * _Nullable error) {
if (error != nil) {
NSLog(@"Error adding document: %@", error);
} else {
NSLog(@"Document added with ID: %@", ref.documentID);
}
}];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L110-L123]

--- 탭: Kotlin [https://firebase.google.com/docs/firestore/quickstart?hl=ko#kotlin-android] ---
// Create a new user with a first, middle, and last name
val user = hashMapOf(
"first" to "Alan",
"middle" to "Mathison",
"last" to "Turing",
"born" to 1912,
)

// Add a new document with a generated ID
db.collection("users")
.add(user)
.addOnSuccessListener { documentReference ->
Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
}
.addOnFailureListener { e ->
Log.w(TAG, "Error adding document", e)
}
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L157-L173]

데이터 읽기

Firebase Console [https://console.firebase.google.com/project/_/firestore/data?hl=ko]의 데이터 뷰어를 사용하여 Cloud Firestore에 추가한 데이터를 빠르게 확인합니다.

'get' 메서드를 사용해 전체 컬렉션을 가져올 수도 있습니다.

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-modular-api] ---
import { collection, getDocs } from "firebase/firestore";

const querySnapshot = await getDocs(collection(db, "users"));
querySnapshot.forEach((doc) => {
console.log(`${doc.id} => ${doc.data()}`);
});
get_all_users.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/get_all_users.js#L8-L13]

--- 탭: Web [https://firebase.google.com/docs/firestore/quickstart?hl=ko#web-namespaced-api] ---
트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
db.collection("users").get().then((querySnapshot) => {
querySnapshot.forEach((doc) => {
console.log(`${doc.id} => ${doc.data()}`);
});
});
test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L143-L147]

--- 탭: Swift [https://firebase.google.com/docs/firestore/quickstart?hl=ko#swift] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
do {
let snapshot = try await db.collection("users").getDocuments()
for document in snapshot.documents {
print("\(document.documentID) => \(document.data())")
}
} catch {
print("Error getting documents: \(error)")
}
ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L191-L198]

--- 탭: Objective-C [https://firebase.google.com/docs/firestore/quickstart?hl=ko#objective-c] ---
참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.
[[self.db collectionWithPath:@"users"]
getDocumentsWithCompletion:^(FIRQuerySnapshot * _Nullable snapshot,
NSError * _Nullable error) {
if (error != nil) {
NSLog(@"Error getting documents: %@", error);
} else {
for (FIRDocumentSnapshot *document in snapshot.documents) {
NSLog(@"%@ => %@", document.documentID, document.data);
}
}
}];
ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L129-L139]

--- 탭: Kotlin [https://firebase.google.com/docs/firestore/quickstart?hl=ko#kotlin-android] ---
db.collection("users")
.get()
.addOnSuccessListener { result ->
for (document in result) {
Log.d(TAG, "${document.id} => ${document.data}")
}
}
.addOnFailureListener { exception ->
Log.w(TAG, "Error getting documents.", exception)
}
DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L179-L188]

데이터 보안

웹, Android 또는 Apple 플랫폼 SDK를 사용하는 경우 Firebase 인증 [https://firebase.google.com/docs/auth/?hl=ko] 및 Cloud Firestore Security Rules [https://firebase.google.com/docs/firestore/security/get-started?hl=ko]를 사용하여 Cloud Firestore의 데이터에 보안을 적용합니다.

다음은 시작하는 데 사용할 수 있는 기본 규칙 세트입니다. Console의 규칙 탭 [https://console.firebase.google.com/project/_/firestore/rules?hl=ko]에서 보안 규칙을 수정할 수 있습니다.

--- 탭: 인증 필요 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#%EC%9D%B8%EC%A6%9D-%ED%95%84%EC%9A%94] ---
```
// Allow read/write access to a document keyed by the user's UID
service cloud.firestore {
match /databases/{database}/documents {
match /users/{uid} {
allow read, write: if request.auth != null && request.auth.uid == uid;
}
}
}
```

--- 탭: 프로덕션 모드 [https://firebase.google.com/docs/firestore/quickstart?hl=ko#%ED%94%84%EB%A1%9C%EB%8D%95%EC%85%98-%EB%AA%A8%EB%93%9C] ---
```
// Deny read/write access to all users under any conditions
service cloud.firestore {
match /databases/{database}/documents {
match /{document=**} {
allow read, write: if false;
}
}
}
```
웹, Android 또는 iOS 앱을 프로덕션에 배포하기 전에 앱 클라이언트만 Cloud Firestore 데이터에 액세스할 수 있도록 하는 단계를 수행합니다.
앱 체크 [https://firebase.google.com/docs/app-check?hl=ko] 문서를 참조하세요.

서버 SDK 중 하나를 사용하는 경우 Identity and Access Management [https://cloud.google.com/firestore/docs/security/iam?hl=ko](IAM)를 사용하여 Cloud Firestore의 데이터에 보안을 적용합니다.

동영상 튜토리얼 보기

Cloud Firestore 모바일 클라이언트 라이브러리 시작에 대한 자세한 안내는 다음 동영상 튜토리얼을 참조하세요.

그 밖에도 많은 동영상을 Firebase YouTube 채널 [https://www.youtube.com/firebase?hl=ko]에서 확인할 수 있습니다.

다음 단계

다음 주제를 자세히 알아보세요.

Codelabs - Android [https://codelabs.developers.google.com/codelabs/firestore-android?hl=ko], iOS [https://codelabs.developers.google.com/codelabs/firestore-ios?hl=ko] 또는 웹 [https://codelabs.developers.google.com/codelabs/firestore-web?hl=ko]용 Codelab의 안내를 따라 실제 앱에서 Cloud Firestore를 사용하는 방법을 알아보세요.
데이터 모델 [https://firebase.google.com/docs/firestore/data-model?hl=ko] - 계층적 데이터와 하위 컬렉션을 비롯한 Cloud Firestore에서 데이터가 구조화되는 방식을 자세히 알아보세요.
데이터 추가 [https://firebase.google.com/docs/firestore/manage-data/add-data?hl=ko] - Cloud Firestore에서 데이터를 만들고 업데이트하는 방법을 자세히 알아보세요.
데이터 가져오기 [https://firebase.google.com/docs/firestore/query-data/get-data?hl=ko] - 데이터를 검색하는 방법을 자세히 알아보세요.
단순 쿼리 및 복합 쿼리 실행 [https://firebase.google.com/docs/firestore/query-data/queries?hl=ko] - 단순 쿼리 및 복합 쿼리 실행 방법을 알아보세요.
쿼리 순서 지정 및 제한 [https://firebase.google.com/docs/firestore/query-data/order-limit-data?hl=ko] - 쿼리에서 반환된 데이터의 순서를 지정하고 제한하는 방법을 알아보세요.

도움이 되었나요?

의견 보내기