Source URL: https://firebase.google.com/docs/firestore/use-pitr?hl=ko
Title: PITR(point-in-time recovery) 작업

이제 MongoDB 호환성을 갖춘 Cloud Firestore Enterprise 버전을 사용할 수 있습니다. 자세히 알아보기 [https://firebase.google.com/docs/firestore/enterprise/mongodb-compatibility-overview?hl=ko]

의견 보내기

PITR(point-in-time recovery) 작업

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

| Cloud Firestore Standard 버전 및 Cloud Firestore Enterprise 버전에 해당합니다. |
| --- |

이 페이지에서는 PITR(point-in-time recovery)을 사용하여 MongoDB 호환성을 갖춘 Cloud Firestore에서 데이터를 보관하고 복구하는 방법을 설명합니다.

PITR 개념을 이해하려면 PITR(point-in-time recovery) [https://firebase.google.com/docs/firestore/enterprise/pitr?hl=ko]을 참조하세요.

권한

PITR 설정을 관리하는 데 필요한 권한을 얻으려면 관리자에게 PITR을 사용 설정할 프로젝트에 대한 다음 IAM 역할을 부여해 달라고 요청하세요.

Cloud Datastore 소유자(roles/datastore.owner)

맞춤 역할의 경우 다음 권한이 부여되었는지 확인합니다.

데이터베이스를 만들 때 PITR 사용 설정: datastore.databases.create
기존 데이터베이스에서 PITR 설정 업데이트: datastore.databases.update,datastore.databases.list
PITR 데이터에서 읽기 수행: datastore.databases.get,datastore.entities.get,datastore.entities.list
PITR 데이터 내보내기: datastore.databases.export
PITR 데이터 가져오기: datastore.databases.import
데이터베이스 클론: datastore.databases.clone

시작하기 전에

PITR을 사용하기 전에 다음 사항에 유의하세요.

PITR을 사용 설정한 직후에는 7일 전 데이터를 읽을 수 없습니다.
데이터베이스를 만들 때 PITR을 사용 설정하려면 gcloud firestore databases create 명령어를 사용해야 합니다. 데이터베이스를 만드는 동안 Google Cloud 콘솔을 사용하여 PITR을 사용 설정할 수 없습니다.
MongoDB 호환성을 갖춘 Cloud Firestore는 PITR을 사용 설정한 후부터 버전을 보관합니다.
PITR을 사용 중지한 후에는 PITR 기간의 PITR 데이터를 읽을 수 없습니다.
PITR을 중지한 직후에 다시 사용 설정하면 이전 PITR 데이터를 더 이상 사용할 수 없습니다. PITR을 사용 중지하기 전에 생성된 모든 PITR 데이터는 PITR 만료일 이후에 삭제됩니다.
실수로 지난 1시간 동안의 데이터를 삭제하고 PITR이 사용 중지된 경우, 삭제 후 1시간 이내에 PITR을 사용 설정하여 데이터를 복원할 수 있습니다.
만료된 PITR 데이터에 대해 수행된 모든 읽기는 실패합니다.

PITR 사용 설정

PITR을 사용하기 전에 Google Cloud 프로젝트에 결제를 사용 설정 [https://cloud.google.com/billing/docs/how-to/modify-project?hl=ko#enable_billing_for_a_project]합니다.
결제가 사용 설정된 Google Cloud 프로젝트에서만 PITR 기능을 사용할 수 있습니다.

데이터베이스에 PITR을 사용 설정하려면 다음 안내를 따르세요.

콘솔
Google Cloud 콘솔에서 데이터베이스 페이지로 이동합니다.

데이터베이스로 이동 [https://console.cloud.google.com/firestore/databases?hl=ko]
데이터베이스 목록에서 필요한 데이터베이스를 선택합니다.
탐색 메뉴에서 재해 복구를 클릭합니다.
수정을 클릭하여 설정을 수정합니다.
PITR(point-in-time recovery) 사용 설정 체크박스를 선택한 다음 저장을 클릭합니다.

PITR을 사용 설정하면 스토리지 비용이 발생합니다. 자세한 내용은 가격 책정 [https://firebase.google.com/docs/firestore/pricing?hl=ko]을 참조하세요.

PITR을 사용 중지하려면 Google Cloud 콘솔의 재해 복구 페이지에서 PITR(point-in-time recovery) 사용 설정 체크박스를 선택 해제합니다.
gcloud데이터베이스를 만드는 동안 다음과 같이 gcloud firestore databases create [https://cloud.google.com/sdk/gcloud/reference/firestore/databases/create?hl=ko] 및 --enable-ptir 명령어로 PITR을 사용 설정합니다.

gcloud firestore databases create\
--location=LOCATION\
--database=DATABASE_ID\
--type=firestore-native\
--enable-pitr

값을 다음과 같이 바꿉니다.

LOCATION - 데이터베이스를 만들 위치
DATABASE_ID - 데이터베이스 ID로 설정

다음과 같이 gcloud firestore databases update [https://cloud.google.com/sdk/gcloud/reference/firestore/databases/update?hl=ko] 명령어를 사용하여 PITR을 사용 중지할 수 있습니다.
gcloud firestore databases update\
--database=DATABASE_ID\
--no-enable-pitr

값을 다음과 같이 바꿉니다.

DATABASE_ID - 데이터베이스 ID 또는 (default)로 설정

보관 기간 및 가장 초기 버전 시간 가져오기

콘솔
Google Cloud 콘솔에서 데이터베이스 페이지로 이동합니다.

데이터베이스로 이동 [https://console.cloud.google.com/firestore/databases?hl=ko]
데이터베이스 목록에서 필요한 데이터베이스를 선택합니다.
탐색 메뉴에서 재해 복구를 클릭합니다.
설정 섹션에서 보관 기간 및 가장 초기 버전 시간을 확인합니다.

보관 기간: MongoDB 호환성을 갖춘 Cloud Firestore에서 데이터베이스의 모든 데이터 버전을 보관하는 기간입니다. 값은 PITR이 사용 중지된 경우 1시간, PITR이 사용 설정된 경우 7일입니다.
가장 초기 버전 시간: PITR 기간에서 이전 버전의 데이터를 읽을 수 있는 가장 이른 타임스탬프입니다. 이 값은 MongoDB 호환성을 갖춘 Cloud Firestore에 의해 지속적으로 업데이트되고 쿼리될 때 비활성 상태가 됩니다. 이 값을 사용하여 데이터를 복구하는 경우, 값이 쿼리된 순간부터 복구를 시작하는 순간까지의 기간을 고려해야 합니다.
PITR(point-in-time recovery): PITR이 사용 설정된 경우 Enabled가 표시됩니다. PITR이 사용 중지되면 Disabled가 표시됩니다.

gcloud다음과 같이 gcloud firestore databases describe [https://cloud.google.com/sdk/gcloud/reference/firestore/databases/describe?hl=ko] 명령어를 실행합니다.
gcloud firestore databases describe --database=DATABASE_ID

DATABASE_ID를 데이터베이스 ID 또는 '(default)'로 바꿉니다.

출력은 다음과 같습니다.
appEngineIntegrationMode: ENABLED
concurrencyMode: PESSIMISTIC
createTime: '2021-03-24T17:02:35.234Z'
deleteProtectionState: DELETE_PROTECTION_DISABLED
earliestVersionTime: '2023-06-12T16:17:25.222474Z'
etag: IIDayqOevv8CMNTvyNK4uv8C
keyPrefix: s
locationId: nam5
name: projects/PROJECT_ID/databases/DATABASE_ID
pointInTimeRecoveryEnablement: POINT_IN_TIME_RECOVERY_DISABLED
type: FIRESTORE_NATIVE
uid: 5230c382-dcd2-468f-8cb3-2a1acfde2b32
updateTime: '2021-11-17T17:48:22.171180Z'
versionRetentionPeriod: 3600s

각 항목의 의미는 다음과 같습니다.

earliestVersionTime - 저장된 가장 이른 PITR 데이터의 타임스탬프입니다.
pointInTimeRecoveryEnablement: PITR이 사용 설정된 경우 POINT_IN_TIME_RECOVERY_ENABLED가 표시됨. PITR이 사용 중지되면 POINT_IN_TIME_RECOVERY_DISABLED가 표시되거나 pointInTimeRecoveryEnablement 필드가 표시되지 않을 수 있습니다.
versionRetentionPeriod - PITR 데이터가 유지되는 기간(밀리초)입니다. 값은 PITR이 사용 중지된 경우 1시간, PITR이 사용 설정된 경우 7일입니다.

PITR 데이터 읽기

클라이언트 라이브러리, REST API 메서드 또는 FirestoreIO Apache Beam 커넥터를 사용하여 PITR 데이터를 읽을 수 있습니다.

클라이언트 라이브러리참고: 서버 클라이언트 라이브러리(Go, Java, Node.js, PHP)의 PITR 데이터에서 읽을 수 있습니다.
모바일 및 웹 SDK, 즉 Android, iOS, 웹은 지원되지 않습니다.
자바
PITR 데이터를 읽으려면 ReadOnly 트랜잭션을 사용해야 합니다. 읽기에서 readTime을 직접 지정할 수 없습니다.
자세한 내용은 트랜잭션 및 일괄 쓰기 [https://firebase.google.com/docs/firestore/enterprise/manage-data/transactions?hl=ko]를 참조하세요.
Firestore firestore = …

TransactionOptions options =
TransactionOptions.createReadOnlyOptionsBuilder()
.setReadTime(
com.google.protobuf.Timestamp.newBuilder()
.setSeconds(1684098540L)
.setNanos(0))
.build();

ApiFuture<Void> futureTransaction = firestore.runTransaction(
transaction -> {
// Does a snapshot read document lookup
final DocumentSnapshot documentResult =
transaction.get(documentReference).get();

// Executes a snapshot read query
final QuerySnapshot queryResult =
transaction.get(query).get();
},
options);

// Blocks on transaction to complete
futureTransaction.get();

노드
PITR 데이터를 읽으려면 ReadOnly 트랜잭션을 사용해야 합니다. 읽기에서 readTime을 직접 지정할 수 없습니다.
자세한 내용은 트랜잭션 및 일괄 쓰기 [https://firebase.google.com/docs/firestore/enterprise/manage-data/transactions?hl=ko]를 참조하세요.
const documentSnapshot = await firestore.runTransaction(
updateFunction => updateFunction.get(documentRef),
{readOnly: true, readTime: new Firestore.Timestamp(1684098540, 0)}
);

const querySnapshot = await firestore.runTransaction(
updateFunction => updateFunction.get(query),
{readOnly: true, readTime: new Firestore.Timestamp(1684098540, 0)}
);

REST APIPITR 읽기는 MongoDB 호환성을 갖춘 모든 Cloud Firestore 읽기 메서드(get [https://firebase.google.com/docs/firestore/enterprise/reference/rest/v1/projects.databases.documents/get?hl=ko], list [https://firebase.google.com/docs/firestore/enterprise/reference/rest/v1/projects.databases.documents/list?hl=ko], batchGet [https://firebase.google.com/docs/firestore/enterprise/reference/rest/v1/projects.databases.documents/batchGet?hl=ko], listCollectionIds [https://firebase.google.com/docs/firestore/enterprise/reference/rest/v1/projects.databases.documents/listCollectionIds?hl=ko], listDocuments [https://firebase.google.com/docs/firestore/enterprise/reference/rest/v1/projects.databases.documents/listDocuments?hl=ko], runQuery [https://firebase.google.com/docs/firestore/enterprise/reference/rest/v1/projects.databases.documents/runQuery?hl=ko], runAggregationQuery [https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents/runAggregationQuery?hl=ko], partitionQuery [https://firebase.google.com/docs/firestore/enterprise/reference/rest/v1/projects.databases.documents/partitionQuery?hl=ko])에서 지원됩니다.

REST 메서드를 사용하여 읽기를 수행하려면 다음 옵션 중 하나를 사용해 보세요.

읽기 메서드 요청에서 readTime 값을 readOptions 메서드에 지원되는 PITR 타임스탬프로 전달합니다. PITR 타임스탬프는 지난 1시간 이내의 마이크로초 정밀도의 타임스탬프이거나 지난 1시간 이후의 1분 타임스탬프일 수 있지만 earliestVersionTime보다 빠를 수는 없습니다.
여러 PITR 읽기의 경우 ReadOnly 트랜잭션 [https://cloud.google.com/java/docs/reference/google-cloud-firestore/latest/com.google.cloud.firestore?hl=ko#transactionoptions]의 일부로 readTime 매개변수를 BeginTransaction 메서드와 함께 사용합니다.

Apache BeamMongoDB 호환성을 갖춘 Cloud FirestoreIO Apache Beam 커넥터를 사용하면 Dataflow로 MongoDB 호환성을 갖춘 Cloud Firestore 데이터베이스에서 대규모로 문서를 읽거나 쓸 수 있습니다.

PITR 읽기는 MongoDB 호환성을 갖춘 Cloud FirestoreIO 커넥터의 다음 읽기 메서드에서 지원됩니다. 이러한 읽기 메서드는 PITR 읽기에 사용할 수 있는 withReadTime(@Nullable Instant readTime) 메서드를 지원합니다.

FirestoreV1.BatchGetDocuments [https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1.BatchGetDocuments.Builder.html]
FirestoreV1.ListCollectionIds [https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1.ListCollectionIds.Builder.html]
FirestoreV1.ListDocuments [https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1.ListDocuments.Builder.html]
FirestoreV1.PartitionQuery [https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1.PartitionQuery.Builder.html]
FirestoreV1.RunQuery [https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1.RunQuery.Builder.html]

자바
일괄 읽기 또는 쓰기 작업에 다음 코드를 Dataflow 파이프라인 코드 예시 [https://firebase.google.com/docs/firestore/enterprise/dataflow-connector?hl=ko]와 함께 사용할 수 있습니다. 이 예시에서는 PITR 읽기에 withReadTime(@Nullable Instant readTime) 메서드를 사용합니다.
Instant readTime = Instant.ofEpochSecond(1684098540L);

PCollection<Document> documents =
pipeline
.apply(Create.of(collectionId))
.apply(
new FilterDocumentsQuery(
firestoreOptions.getProjectId(), firestoreOptions.getDatabaseId()))
.apply(FirestoreIO.v1().read().runQuery().withReadTime(readTime).withRpcQosOptions(rpcQosOptions).build())
...

Dataflow 파이프라인의 readTime 예시 전체 목록은 GitHub 저장소 [https://github.com/apache/beam/blob/master/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/it/BaseFirestoreIT.java]를 참조하세요.

데이터베이스에서 클론

프리뷰

- Database cloning

이 기능에는 서비스별 약관 [https://firebase.google.com/terms/service-terms?hl=ko#1]의 일반 서비스 약관 섹션에 있는 'GA 이전 제공 서비스 약관'이 적용됩니다.

GA 이전 기능은 '있는 그대로' 제공되며 지원이 제한될 수 있습니다.

자세한 내용은 출시 단계 설명 [https://firebase.google.com/products?hl=ko#product-launch-stages]을 참조하세요.

선택한 타임스탬프의 기존 데이터베이스를 새 데이터베이스로 클론할 수 있습니다.

클론된 데이터베이스는 소스 데이터베이스와 동일한 위치에 생성되는 새 데이터베이스입니다.

클론을 만들기 위해 Cloud Firestore는 소스 데이터베이스의 PITR(point-in-time recovery) 데이터 [https://firebase.google.com/docs/firestore/enterprise/pitr?hl=ko]를 사용합니다. 클론된 데이터베이스에는 모든 데이터와 색인이 포함됩니다.
기본적으로 클론된 데이터베이스는 Google의 기본 암호화 또는 CMEK 암호화 [https://firebase.google.com/docs/firestore/enterprise/use-cmek?hl=ko]를 사용하여 소스 데이터베이스와 동일한 방식으로 암호화됩니다. 다른 암호화 유형을 지정하거나 CMEK 암호화에 다른 키를 사용할 수 있습니다.
타임스탬프는 1분 단위이며 PITR 기간 [https://firebase.google.com/docs/firestore/enterprise/pitr?hl=ko#pitr_window]에 정의된 기간 내의 과거 시점을 지정합니다.

데이터베이스에 PITR이 사용 설정된 경우 지난 7일 이내의 분을 선택합니다(PITR이 사용 설정된 지 7일 이내인 경우 그보다 짧은 시간).
PITR이 사용 설정되어 있지 않으면 지난 1시간 이내의 아무 분이나 선택할 수 있습니다.
데이터베이스 설명 [https://firebase.google.com/docs/firestore/use-pitr?hl=ko#get-period]에서 선택할 수 있는 가장 이른 타임스탬프를 확인할 수 있습니다.

참고: 데이터베이스를 클론하려면 Google 계정에 datastore.databases.clone IAM 권한 [https://firebase.google.com/docs/firestore/use-pitr?hl=ko#permissions]이 있어야 합니다.
콘솔

Firebase 콘솔은 데이터베이스 클론을 지원하지 않습니다. Google Cloud CLI의 안내에 따라 데이터베이스를 클론할 수 있습니다.

참고: 클론된 데이터베이스는 소스 데이터베이스와 동일한 암호화 구성을 갖습니다. 클론된 데이터베이스에 다른 암호화 구성을 지정하려면 Google Cloud CLI 명령어를 사용하면 됩니다.
gcloud gcloud alpha firestore databases clone [https://cloud.google.com/sdk/gcloud/reference/alpha/firestore/databases/clone?hl=ko] 명령어를 사용하여 데이터베이스를 클론합니다.
gcloud alpha firestore databases clone \
--source-database='SOURCE_DATABASE' \
--snapshot-time='PITR_TIMESTAMP' \
--destination-database='DESTINATION_DATABASE_ID'

다음을 바꿉니다.

SOURCE_DATABASE: 클론하려는 기존 데이터베이스의 데이터베이스 이름입니다. 이름은 projects/PROJECT_ID/databases/SOURCE_DATABASE_ID 형식을 사용합니다.
PITR_TIMESTAMP: 분 단위의 RFC 3339 형식 [https://tools.ietf.org/html/rfc3339] PITR 타임스탬프 [https://firebase.google.com/docs/firestore/use-pitr?hl=ko#get-period]입니다. 예를 들면 2025-06-01T10:20:00.00Z 또는 2025-06-01T10:30:00.00-07:00입니다.
DESTINATION_DATABASE_ID: 새로 클론된 데이터베이스의 데이터베이스 ID [https://firebase.google.com/docs/firestore/create-databases?hl=ko#database_id]입니다. 이 데이터베이스 ID는 기존 데이터베이스와 연결되어서는 안 됩니다.

예를 들면 다음과 같습니다.
gcloud alpha firestore databases clone \
--source-database='projects/example-project/databases/(default)' \
--snapshot-time='2025-06-01T10:20:00.00Z' \
--destination-database='projects/example-project/databases/example-dest-db'

클론된 데이터베이스의 암호화 구성 변경

기본적으로 클론된 데이터베이스는 소스 데이터베이스와 동일한 암호화 구성을 갖습니다. 암호화 구성을 변경하려면 --encryption-type 인수를 사용합니다.

(기본값) use-source-encryption: 소스 데이터베이스와 동일한 암호화 구성을 사용합니다.
google-default-encryption: Google의 기본 암호화를 사용합니다.
customer-managed-encryption: CMEK 암호화를 사용합니다. --kms-key-name 인수에 키 ID [https://cloud.google.com/kms/docs/getting-resource-ids?hl=ko#getting_the_id_for_a_key_and_version]를 지정합니다.

다음 예시에서는 클론된 데이터베이스의 CMEK 암호화를 구성하는 방법을 보여줍니다.
gcloud alpha firestore databases clone \
--source-database='projects/example-project/databases/(default)' \
--snapshot-time='2025-06-01T10:20:00.00Z' \
--destination-database='projects/example-project/databases/example-dest-db' \
--encryption-type='customer-managed-encryption' \
--kms-key-name='projects/example-project/locations/us-central1/keyRings/example-key-ring/cryptoKeys/example-key'

PITR 데이터에서 내보내기 및 가져오기

gcloud firestore export [https://cloud.google.com/sdk/gcloud/reference/firestore/export?hl=ko] 명령어를 사용하여 PITR 데이터에서 Cloud Storage로 데이터베이스를 내보낼 수 있습니다. 타임스탬프가 지난 7일 이내의 1분 타임스탬프이고 earliestVersionTime 이후인 PITR 데이터를 내보낼 수 있습니다. 데이터가 더 이상 지정된 타임스탬프에 없으면 내보내기 작업이 실패합니다.

PITR 내보내기 작업은 모든 문서 내보내기 및 특정 컬렉션 내보내기를 포함한 모든 필터를 지원합니다.

snapshot-time 파라미터를 선택한 복구 타임스탬프로 지정하여 데이터베이스를 내보냅니다.

gcloud다음 명령어를 실행하여 데이터베이스를 버킷으로 내보냅니다.

gcloud firestore export gs://BUCKET_NAME_PATH \
--snapshot-time=PITR_TIMESTAMP \
--collection-ids=COLLECTION_IDS \
--namespace-ids=NAMESPACE_IDS

각 항목의 의미는 다음과 같습니다.

BUCKET_NAME_PATH - 내보내기 파일이 저장되는 경로 프리픽스(선택사항)가 있는 유효한 Cloud Storage 버킷
PITR_TIMESTAMP - 분 단위의 PITR 타임스탬프입니다(예: 2023-05-26T10:20:00.00Z 또는 2023-10-19T10:30:00.00-07:00).
COLLECTION_IDS - 컬렉션 ID 또는 컬렉션 그룹 ID의 목록입니다(예: 'specific-collection-group1','specific-collection-group2').
NAMESPACE_IDS - 네임스페이스 ID 목록입니다(예: 'customer','orders').

PITR 데이터를 내보내기 전에 다음 사항에 유의하세요.

RFC 3339 형식 [https://tools.ietf.org/html/rfc3339]으로 타임스탬프를 지정합니다.
예를 들면 2023-05-26T10:20:00.00Z 또는 2023-10-19T10:30:00.00-07:00입니다.
지정한 타임스탬프가 지난 7일 이내의 1분 타임스탬프여야 하지만 earliestVersionTime 이전이어야 합니다. 지정된 타임스탬프에 데이터가 더 이상 존재하지 않으면 오류가 발생합니다. 타임스탬프는 지정된 시간이 지난 1시간 이내인 경우에도 1분이어야 합니다.
실패한 PITR 내보내기에 대해서는 요금이 청구되지 않습니다.

데이터베이스로 가져옵니다.

모든 문서 가져오기 [https://firebase.google.com/docs/firestore/enterprise/export-import?hl=ko#import_all_documents_from_an_export]의 단계에 따라 내보낸 데이터베이스를 가져옵니다. 데이터베이스에 이미 문서가 있으면 덮어쓰게 됩니다.

의견 보내기