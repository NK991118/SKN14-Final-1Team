Source URL: https://firebase.google.com/docs/firestore/enterprise/query-explain?hl=ko
Title: Query Explain을 사용하여 쿼리 실행 분석

이제 MongoDB 호환성을 갖춘 Cloud Firestore Enterprise 버전을 사용할 수 있습니다. 자세히 알아보기 [https://firebase.google.com/docs/firestore/enterprise/mongodb-compatibility-overview?hl=ko]

의견 보내기

Query Explain을 사용하여 쿼리 실행 분석

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

| Cloud Firestore Enterprise 버전에만 해당합니다. |
| --- |

이 페이지에서는 쿼리를 실행할 때 쿼리 실행 정보를 가져오는 방법을 설명합니다.

Query Explain 사용

Query Explain을 사용하여 쿼리가 실행되는 방식을 파악할 수 있습니다.
이를 통해 쿼리를 최적화 [https://firebase.google.com/docs/firestore/enterprise/optimize-query-performance?hl=ko]하는 데 사용할 수 있는 세부정보가 제공됩니다.

Google Cloud 콘솔 또는 explain 명령어를 통해 Query Explain을 사용할 수 있습니다.

분석

Query Explain의 출력에는 요약 통계와 실행 트리라는 두 가지 주요 구성요소가 포함됩니다.
다음 쿼리를 예로 들어보겠습니다.
db.order.aggregate(
[
{ "$match": { "user_id": 1234 } },
{ "$sort": { "date_placed": 1 } }
]
)

요약 통계

설명된 출력의 상단에는 실행 통계 요약이 포함되어 있습니다.
이러한 통계를 사용하여 쿼리의 지연 시간 또는 비용이 높은지 확인할 수 있습니다. 또한 쿼리가 메모리 한도 [https://firebase.google.com/docs/firestore/enterprise/quotas?hl=ko]에 얼마나 근접했는지 알 수 있는 메모리 통계도 포함되어 있습니다.
Billing Metrics:
read units: 1

Execution Metrics:
request peak memory usage: 4.00 KiB (4,096 B)
results returned: 1

실행 트리

실행 트리는 쿼리 실행을 일련의 노드로 설명합니다. 하단 노드(리프 노드)는 스토리지 레이어에서 데이터를 가져오고, 이 데이터는 트리를 따라 올라가 쿼리 응답을 생성합니다.

각 실행 노드에 대한 자세한 내용은 실행 참조 [https://firebase.google.com/docs/firestore/enterprise/query-explain-reference?hl=ko]를 참조하세요.

이 정보를 사용하여 쿼리를 최적화하는 방법에 대한 자세한 내용은 쿼리 실행 최적화 [https://firebase.google.com/docs/firestore/enterprise/optimize-query-performance?hl=ko]를 참조하세요.

다음은 실행 트리의 예입니다.
• Compute
|  $out_1: map_set($record_1, "__id__", $__id___1, "__key__", $__key___1, "__row_id__", $__row_id___1, "__$0__", $__$0___2)
|  is query result: true
|
|  Execution:
|   records returned: 1
|
└── • Compute
|  $__$0___2: UNSET
|
|  Execution:
|   records returned: 1
|
└── • Compute
|  $__key___1: UNSET
|  $__row_id___1: UNSET
|
|  Execution:
|   records returned: 1
|
└── • Compute
|  $__id___1: _id($record_1.__key__)
|
|  Execution:
|   records returned: 1
|
└── • MajorSort
|  fields: [$v_5 ASC]
|  output: [$record_1]
|
|  Execution:
|   records returned: 1
|   peak memory usage: 4.00 KiB (4,096 B)
|
└── • Compute
|  $v_5: array_get($v_4, 0L)
|
|  Execution:
|   records returned: 1
|
└── • Compute
|  $v_4: sortPaths(array($record_1.date_placed), [date_placed ASC])
|
|  Execution:
|   records returned: 1
|
└── • Filter
|  expression: $eq($user_id_1, 1,234)
|
|  Execution:
|   records returned: 1
|
└── • TableScan
source: **/my_collection
order: STABLE
properties: * - { __create_time__, __update_time__ }
output record: $record_1
output bindings: {$user_id_1=user_id}
variables: [$record_1, $user_id_1]

Execution:
records returned: 1
records scanned: 1

다음 단계

실행 트리 노드에 대해 알아보려면 쿼리 실행 참조 [https://firebase.google.com/docs/firestore/enterprise/query-explain-reference?hl=ko]를 참조하세요.
쿼리를 최적화하는 방법에 대해 알아보려면 쿼리 실행 최적화 [https://firebase.google.com/docs/firestore/enterprise/optimize-query-performance?hl=ko]를 참조하세요.

의견 보내기