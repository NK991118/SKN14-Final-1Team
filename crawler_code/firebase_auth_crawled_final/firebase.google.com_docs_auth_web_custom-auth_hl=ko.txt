Source URL: https://firebase.google.com/docs/auth/web/custom-auth?hl=ko
Title: 자바스크립트에서 커스텀 인증 시스템을 사용하여 Firebase에 인증
bookmark_border

의견 보내기

자바스크립트에서 커스텀 인증 시스템을 사용하여 Firebase에 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/web/custom-auth?hl=ko#before-you-begin]Firebase에 인증 [https://firebase.google.com/docs/auth/web/custom-auth?hl=ko#authenticate-with-firebase]다음 단계 [https://firebase.google.com/docs/auth/web/custom-auth?hl=ko#next-steps]

사용자가 정상적으로 로그인할 때 커스텀 서명 토큰을 발행하도록 인증 서버를 수정하면 Firebase Authentication에 커스텀 인증 시스템을 통합할 수 있습니다. 그러면 앱이 이 토큰을 받아 Firebase 인증에 사용합니다.

시작하기 전에

자바스크립트 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/web/setup?hl=ko].

다음과 같이 프로젝트의 서버 키를 가져옵니다.

프로젝트 설정의 서비스 계정 [https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk?hl=ko]
페이지로 이동합니다.
서비스 계정 페이지의 Firebase Admin SDK 섹션 하단에서
새 비공개 키 생성을 클릭합니다.
새 서비스 계정의 공개 키/비공개 키 쌍이 자동으로 컴퓨터에
저장됩니다. 이 파일을 인증 서버에 복사합니다.

Firebase에 인증

사용자가 앱에 로그인하면 사용자의 로그인 인증 정보(예: 사용자 이름과 비밀번호)를 인증 서버로 전송하세요. 서버가 사용자 인증 정보를 확인하여 정보가 유효하면 커스텀 토큰 [https://firebase.google.com/docs/auth/admin/create-custom-tokens?hl=ko]을 반환합니다.

인증 서버에서 커스텀 토큰을 받은 후 다음과 같이 이 토큰을 signInWithCustomToken에 전달하여 사용자를 로그인 처리합니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/custom-auth?hl=ko#web-modular-api] ---
import { getAuth, signInWithCustomToken } from "firebase/auth";

const auth = getAuth();
signInWithCustomToken(auth, token)
.then((userCredential) => {
// Signed in
const user = userCredential.user;
// ...
})
.catch((error) => {
const errorCode = error.code;
const errorMessage = error.message;
// ...
});
auth_sign_in_custom.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/custom/auth_sign_in_custom.js#L8-L21]

--- 탭: Web [https://firebase.google.com/docs/auth/web/custom-auth?hl=ko#web-namespaced-api] ---
firebase.auth().signInWithCustomToken(token)
.then((userCredential) => {
// Signed in
var user = userCredential.user;
// ...
})
.catch((error) => {
var errorCode = error.code;
var errorMessage = error.message;
// ...
});
custom.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/custom.js#L10-L20]

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트에 저장되며 사용자의 로그인 방법과 무관하게 프로젝트 내의 모든 앱에서 사용자 본인 확인에 사용할 수 있습니다.

앱에서 사용자의 인증 상태를 파악할 때 권장하는 방법은 Auth 객체에 관찰자를 설정하는 것입니다. 그러면 User 객체로부터 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/web/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/web/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/js/auth?hl=ko#signout]을 호출합니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/custom-auth?hl=ko#web-modular-api] ---
import { getAuth, signOut } from "firebase/auth";

const auth = getAuth();
signOut(auth).then(() => {
// Sign-out successful.
}).catch((error) => {
// An error happened.
});
auth_sign_out.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/index/auth_sign_out.js#L8-L15]

--- 탭: Web [https://firebase.google.com/docs/auth/web/custom-auth?hl=ko#web-namespaced-api] ---
firebase.auth().signOut().then(() => {
// Sign-out successful.
}).catch((error) => {
// An error happened.
});
index.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/index.js#L33-L37]

의견 보내기