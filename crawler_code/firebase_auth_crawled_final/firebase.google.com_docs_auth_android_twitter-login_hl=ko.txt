Source URL: https://firebase.google.com/docs/auth/android/twitter-login?hl=ko
Title: Android에서 Twitter를 사용하여 인증
bookmark_border

의견 보내기

Android에서 Twitter를 사용하여 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#before_you_begin]Firebase SDK로 로그인 과정 처리 [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]다음 단계 [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#next_steps]

엔드 투 엔드 로그인 과정을 수행하도록 Firebase SDK를 사용하여 앱에 웹 기반의 일반 OAuth 로그인을 통합하면 사용자가 Twitter 계정을 사용하여 Firebase에 인증할 수 있습니다.

시작하기 전에

사용자가 Twitter 계정을 통해 로그인하도록 하려면 우선 Firebase 프로젝트에서 Twitter를 로그인 제공업체로 사용 설정해야 합니다.

아직 추가하지 않았다면 Android 프로젝트에 Firebase를 추가 [https://firebase.google.com/docs/android/setup?hl=ko]합니다.
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 Twitter 제공업체를 사용 설정합니다.
해당 제공업체의 개발자 콘솔에서 제공되는 API 키와 API 비밀번호를 제공업체 구성에 추가합니다.Twitter에서 개발자 애플리케이션으로 앱을 등록 [https://apps.twitter.com/]하고 앱의 OAuth API 키와 API 비밀번호를 가져옵니다.
Twitter 앱 구성 [https://apps.twitter.com/]의 앱 설정 페이지에서 Firebase OAuth 리디렉션 URI(예: my-app-12345.firebaseapp.com/__/auth/handler)가 승인 콜백 URL로 설정되어 있는지 확인합니다.

저장을 클릭합니다.

모듈(앱 수준) Gradle 파일(일반적으로 <project>/<app-module>/build.gradle.kts 또는 <project>/<app-module>/build.gradle)에서 Android용 Firebase Authentication 라이브러리의 종속 항목을 추가합니다. 라이브러리 버전 관리 제어에는 Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하는 것이 좋습니다.

dependencies {
// Import the BoM for the Firebase platform
implementation(platform("com.google.firebase:firebase-bom:34.2.0"))

// Add the dependency for the Firebase Authentication library
// When using the BoM, you don't specify versions in Firebase library dependencies
implementation("com.google.firebase:firebase-auth")
}

Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하면 앱에서 항상 호환되는 Firebase Android 라이브러리 버전만 사용합니다.

(대안)
BoM을 사용하지 않고 Firebase 라이브러리 종속 항목을 추가합니다.

Firebase BoM을 사용하지 않도록 선택한 경우에는 종속 항목 줄에 각 Firebase 라이브러리 버전을 지정해야 합니다.
앱에서 여러 Firebase 라이브러리를 사용하는 경우 모든 버전이 호환되도록 BoM을 사용하여 라이브러리 버전을 관리하는 것이 좋습니다.

dependencies {
// Add the dependency for the Firebase Authentication library
// When NOT using the BoM, you must specify versions in Firebase library dependencies
implementation("com.google.firebase:firebase-auth:24.0.1")
}

아직 앱의 SHA-1 디지털 지문을 지정하지 않았다면 Firebase Console의 설정 페이지 [https://console.firebase.google.com/project/_/settings/general/?hl=ko]에서 지정합니다. 앱의 SHA-256 디지털 지문을 얻는 방법에 대한 자세한 내용은 클라이언트 인증 [https://developers.google.com/android/guides/client-auth?hl=ko]을 참조하세요.

Firebase SDK로 로그인 과정 처리

Android 앱을 빌드하는 경우 Twitter 계정을 사용하여 Firebase에 사용자를 인증하는 가장 손쉬운 방법은 Firebase Android SDK로 전체 로그인 과정을 처리하는 것입니다.

Firebase Android SDK로 로그인 과정을 처리하려면 다음 단계를 따릅니다.

제공업체 ID Twitter.com을 사용하여 빌더로 OAuthProvider의 인스턴스를 생성합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#kotlin-android] ---
val provider = OAuthProvider.newBuilder("twitter.com")
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L24-L24]

--- 탭: Java [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#java-android] ---
OAuthProvider.Builder provider = OAuthProvider.newBuilder("twitter.com");
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L24-L24]
선택사항: OAuth 요청과 함께 전송하고자 하는 커스텀 OAuth 매개변수를 추가로 지정합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#kotlin-android] ---
// Localize to French.
provider.addCustomParameter("lang", "fr")
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L28-L29]

--- 탭: Java [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#java-android] ---
// Localize to French.
provider.addCustomParameter("lang", "fr");
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L28-L29]
Twitter가 지원하는 매개변수 정보는 Twitter OAuth 문서 [https://www.google.com/url?q=https%3A%2F%2Fdeveloper.twitter.com%2Fen%2Fdocs%2Fbasics%2Fauthentication%2Fguides%2Fauthorizing-a-request&%3Busg=AFQjCNG0rNdIaYnGfs5odh4bN7brggMOoA&hl=ko]를 참조하세요.
Firebase에서 요구하는 매개변수는 setCustomParameters()와 함께 전달할 수 없습니다. 이러한 매개변수에는 client_id, response_type, redirect_uri, state, scope, response_mode가 있습니다.
OAuth 제공업체 객체를 사용해 Firebase에 인증합니다. 다른 FirebaseAuth 작업과 달리 이 작업은 커스텀 Chrome 탭 [https://developer.chrome.com/multidevice/android/customtabs?hl=ko]을 팝업으로 표시하여 UI를 제어합니다.
이로 인해 작업에서 UI를 시작할 때, 연결한 OnSuccessListener 및 OnFailureListener가 즉각 분리되므로 이들 리스너에서 활동을 참조하면 안 됩니다.

우선 이미 응답을 수신했는지를 확인해야 합니다. 이 방법으로 로그인하면 활동이 백그라운드에서 진행되므로, 로그인 과정 중에 시스템에서 다시 회수될 수 있습니다. 이 경우 사용자가 다시 시도하지 않도록 하려면 결과가 이미 존재하는지 확인해야 합니다.

대기 중인 결과가 있는지 확인하려면 다음과 같이 getPendingAuthResult를 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#kotlin-android] ---
val pendingResultTask = firebaseAuth.pendingAuthResult
if (pendingResultTask != null) {
// There's something already here! Finish the sign-in for your user.
pendingResultTask
.addOnSuccessListener {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
.addOnFailureListener {
// Handle failure.
}
} else {
// There's no pending result so you need to start the sign-in flow.
// See below.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L118-L137]

--- 탭: Java [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#java-android] ---
Task<AuthResult> pendingResultTask = firebaseAuth.getPendingAuthResult();
if (pendingResultTask != null) {
// There's something already here! Finish the sign-in for your user.
pendingResultTask
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
} else {
// There's no pending result so you need to start the sign-in flow.
// See below.
}
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L151-L178]
로그인 과정을 시작하려면 다음과 같이 startActivityForSignInWithProvider를 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#kotlin-android] ---
firebaseAuth
.startActivityForSignInWithProvider(activity, provider.build())
.addOnSuccessListener {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
.addOnFailureListener {
// Handle failure.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L143-L156]

--- 탭: Java [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#java-android] ---
firebaseAuth
.startActivityForSignInWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L184-L205]
성공적으로 완료되면 제공업체에 연결된 OAuth 액세스 토큰을 반환되는 OAuthCredential 객체에서 검색할 수 있습니다.

OAuth 액세스 토큰을 사용하면 Twitter API [https://developer.twitter.com/apps/building-oauth-apps/authorizing-oauth-apps/]를 호출할 수 있습니다.

예를 들어 기본 프로필 정보를 가져오려면 Authorization 헤더에 액세스 토큰을 전달하여 REST API를 호출하면 됩니다.
위의 예시는 로그인 과정에 중점을 두고 있지만 startActivityForLinkWithProvider를 사용하여 Twitter 제공업체를 기존 사용자에 연결할 수도 있습니다. 예를 들어 여러 제공업체를 동일한 사용자에 연결하여 그 중 하나로 로그인하도록 허용할 수 있습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#kotlin-android] ---
// The user is already signed-in.
val firebaseUser = firebaseAuth.currentUser!!
firebaseUser
.startActivityForLinkWithProvider(activity, provider.build())
.addOnSuccessListener {
// Provider credential is linked to the current user.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// authResult.getCredential().getAccessToken().
// The OAuth secret can be retrieved by calling:
// authResult.getCredential().getSecret().
}
.addOnFailureListener {
// Handle failure.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L162-L177]

--- 탭: Java [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#java-android] ---
// The user is already signed-in.
FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();

firebaseUser
.startActivityForLinkWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// Provider credential is linked to the current user.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// authResult.getCredential().getAccessToken().
// The OAuth secret can be retrieved by calling:
// authResult.getCredential().getSecret().
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L211-L235]
startActivityForReauthenticateWithProvider에서도 동일한 패턴을 사용하여, 최근 로그인한 적이 있어야 진행할 수 있는 민감한 작업에서 새로운 사용자 인증 정보를 가져올 수 있습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#kotlin-android] ---
// The user is already signed-in.
val firebaseUser = firebaseAuth.currentUser!!
firebaseUser
.startActivityForReauthenticateWithProvider(activity, provider.build())
.addOnSuccessListener {
// User is re-authenticated with fresh tokens and
// should be able to perform sensitive operations
// like account deletion and email or password
// update.
}
.addOnFailureListener {
// Handle failure.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L183-L195]

--- 탭: Java [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#java-android] ---
// The user is already signed-in.
FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();

firebaseUser
.startActivityForReauthenticateWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// User is re-authenticated with fresh tokens and
// should be able to perform sensitive operations
// like account deletion and email or password
// update.
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L241-L262]

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 FirebaseUser [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseUser?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/android/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth?hl=ko#signOut()]을 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#kotlin-android] ---
Firebase.auth.signOut()
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L415-L415]

--- 탭: Java [https://firebase.google.com/docs/auth/android/twitter-login?hl=ko#java-android] ---
FirebaseAuth.getInstance().signOut();
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L501-L501]

도움이 되었나요?

의견 보내기