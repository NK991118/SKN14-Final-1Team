Source URL: https://firebase.google.com/docs/auth/ios/start?hl=ko
Title: Apple 플랫폼에서 Firebase 인증 시작하기
bookmark_border

의견 보내기

Apple 플랫폼에서 Firebase 인증 시작하기

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용Firebase에 앱 연결 [https://firebase.google.com/docs/auth/ios/start?hl=ko#connect_your_app_to_firebase]앱에 Firebase Authentication 추가 [https://firebase.google.com/docs/auth/ios/start?hl=ko#add_to_your_app](선택사항) Firebase Local Emulator Suite으로 프로토타입 제작 및 테스트 [https://firebase.google.com/docs/auth/ios/start?hl=ko#optional_prototype_and_test_with]Firebase SDK 초기화 [https://firebase.google.com/docs/auth/ios/start?hl=ko#initialize_the_firebase_sdk]인증 상태 수신 대기 [https://firebase.google.com/docs/auth/ios/start?hl=ko#listen_for_authentication_state]신규 사용자 가입 [https://firebase.google.com/docs/auth/ios/start?hl=ko#sign_up_new_users]기존 사용자 로그인 [https://firebase.google.com/docs/auth/ios/start?hl=ko#sign_in_existing_users]사용자 정보 가져오기 [https://firebase.google.com/docs/auth/ios/start?hl=ko#get_user_information]다음 단계 [https://firebase.google.com/docs/auth/ios/start?hl=ko#next_steps]

Firebase Authentication을 사용하면 사용자가 앱에 로그인할 때 이메일 주소와 비밀번호를 통한 로그인 방법이나 Google 로그인, Facebook 로그인과 같은 제휴 ID 공급업체를 통한 로그인 등 1개 이상의 로그인 방법을 사용하여 로그인할 수 있습니다. 이 튜토리얼에서는 Firebase Authentication을 시작할 수 있도록 앱에 이메일 주소와 비밀번호를 통한 로그인을 추가하는 방법을 보여줍니다.

Firebase에 앱 연결

Firebase SDK를 설치합니다 [https://firebase.google.com/docs/ios/setup?hl=ko].
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 Firebase 프로젝트에 앱을 추가합니다.

앱에 Firebase Authentication 추가

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Add Packages(패키지 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk.git

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firebase Authentication 라이브러리를 선택합니다.

타겟 빌드 설정의 Other Linker Flags(기타 링커 플래그) 섹션에 -ObjC 플래그를 추가합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

중요: Mac 앱의 경우 SDK가 키체인에 사용자 항목을 저장할 권한을 갖도록 키체인 공유 기능을 사용 설정합니다. 자세한 내용은 FAQ 가이드 [https://firebase.google.com/docs/ios/troubleshooting-faq?hl=ko#macos-keychain-sharing]를 참조하세요.

(선택사항) Firebase Local Emulator Suite으로 프로토타입 제작 및 테스트

앱에서 사용자를 인증하는 방법을 설명하기 전에 Authentication 기능의 프로토타입을 제작하고 테스트하는 데 사용할 수 있는 도구 모음인 Firebase Local Emulator Suite을 소개하겠습니다. 사용할 인증 기술과 제공업체를 결정하거나, Authentication 및 Firebase Security Rules을 사용하는 공개 및 비공개 데이터가 포함된 다양한 데이터 모델을 사용해 보거나, 로그인 UI 디자인의 프로토타입을 제작하는 경우 라이브 서비스를 배포하지 않고 로컬에서 작업할 수 있다는 것은 획기적인 아이디어입니다.

Authentication 에뮬레이터는 Local Emulator Suite의 일부이며 앱에서 에뮬레이션된 데이터베이스 콘텐츠와 구성은 물론 필요에 따라 에뮬레이션된 프로젝트 리소스(함수, 기타 데이터베이스, 보안 규칙)와 상호작용할 수 있게 해줍니다.

Authentication 에뮬레이터를 사용하려면 다음 몇 단계만 거치면 됩니다.

에뮬레이터에 연결하려면 앱의 테스트 구성에 코드 줄을 추가합니다.
로컬 프로젝트 디렉터리의 루트에서 firebase emulators:start를 실행합니다.
대화형 프로토타입 제작에는 Local Emulator Suite UI를, 비대화형 테스트에는 Authentication 에뮬레이터 REST API를 사용합니다.

자세한 안내는 Authentication 에뮬레이터에 앱 연결 [https://firebase.google.com/docs/emulator-suite/connect_auth?hl=ko]을 참조하세요.
자세한 내용은 Local Emulator Suite 소개 [https://firebase.google.com/docs/emulator-suite?hl=ko]를 참조하세요.

이제 사용자 인증 방법을 계속 살펴보겠습니다.

Firebase SDK 초기화

우선 앱 대리자에서 Firebase SDK를 가져옵니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/start?hl=ko#swift] ---
```
import FirebaseCore
AppDelegate.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/AppDelegate.swift#L20-L20]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/start?hl=ko#objective-c] ---
```
@import FirebaseCore;
AppDelegate.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/AppDelegate.m#L21-L21]
```
그런 다음 application:didFinishLaunchingWithOptions: 메서드에서 FirebaseApp 객체를 초기화합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/start?hl=ko#swift] ---
```
// Use Firebase library to configure APIs
FirebaseApp.configure()
AppDelegate.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/AppDelegate.swift#L40-L41]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/start?hl=ko#objective-c] ---
```
// Use Firebase library to configure APIs
[FIRApp configure];
AppDelegate.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/AppDelegate.m#L34-L35]
```
인증 상태 수신 대기

각각의 앱 뷰에서 앱에 로그인한 사용자에 대한 정보를 얻기 위해 FIRAuth 객체와 리스너를 연결합니다. 이 리스너는 사용자의 로그인 상태가 변경될 때마다 호출됩니다.

뷰 컨트롤러의 viewWillAppear 메서드에서 리스너를 연결합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/start?hl=ko#swift] ---
```
handle = Auth.auth().addStateDidChangeListener { auth, user in
// ...
}
MainViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/MainViewController.swift#L505-L510]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/start?hl=ko#objective-c] ---
```
self.handle = [[FIRAuth auth]
addAuthStateDidChangeListener:^(FIRAuth *_Nonnull auth, FIRUser *_Nullable user) {
// ...
}];
MainViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/MainViewController.m#L575-L581]
```
뷰 컨트롤러의 viewWillDisappear 메서드에서 리스너를 분리합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/start?hl=ko#swift] ---
```
Auth.auth().removeStateDidChangeListener(handle!)
MainViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/MainViewController.swift#L523-L523]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/start?hl=ko#objective-c] ---
```
[[FIRAuth auth] removeAuthStateDidChangeListener:_handle];
MainViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/MainViewController.m#L604-L604]
```
신규 사용자 가입

신규 사용자가 자신의 이메일 주소와 비밀번호를 사용해 앱에 가입할 수 있는 양식을 만듭니다. 사용자가 양식을 작성하면 사용자가 입력한 이메일 주소와 비밀번호의 유효성을 검사한 후 createUser 메서드에 전달합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/start?hl=ko#swift] ---
```
Auth.auth().createUser(withEmail: email, password: password) { authResult, error in
// ...
}
EmailViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/EmailViewController.swift#L173-L184]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/start?hl=ko#objective-c] ---
```
[[FIRAuth auth] createUserWithEmail:email
password:password
completion:^(FIRAuthDataResult * _Nullable authResult,
NSError * _Nullable error) {
// ...
}];
EmailViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/EmailViewController.m#L170-L184]
```
기존 사용자 로그인

기존 사용자가 자신의 이메일 주소와 비밀번호를 사용해 로그인할 수 있는 양식을 만듭니다. 사용자가 양식을 작성하면 signIn 메서드를 호출합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/start?hl=ko#swift] ---
```
Auth.auth().signIn(withEmail: email, password: password) { [weak self] authResult, error in
guard let strongSelf = self else { return }
// ...
}
EmailViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/EmailViewController.swift#L37-L99]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/start?hl=ko#objective-c] ---
```
[[FIRAuth auth] signInWithEmail:self->_emailField.text
password:self->_passwordField.text
completion:^(FIRAuthDataResult * _Nullable authResult,
NSError * _Nullable error) {
// ...
}];
EmailViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/EmailViewController.m#L36-L89]
```
사용자 정보 가져오기

사용자가 로그인되면 사용자에 대한 정보를 가져올 수 있습니다. 예를 들어 인증 상태 리스너 [https://firebase.google.com/docs/auth/ios/start?hl=ko#listen_for_authentication_state]에서 다음을 수행합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/start?hl=ko#swift] ---
```
if let user = user {
// The user's ID, unique to the Firebase project.
// Do NOT use this value to authenticate with your backend server,
// if you have one. Use getTokenWithCompletion:completion: instead.
let uid = user.uid
let email = user.email
let photoURL = user.photoURL
var multiFactorString = "MultiFactor: "
for info in user.multiFactor.enrolledFactors {
multiFactorString += info.displayName ?? "[DispayName]"
multiFactorString += " "
}
// ...
}
MainViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/MainViewController.swift#L590-L636]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/start?hl=ko#objective-c] ---
```
if (user) {
// The user's ID, unique to the Firebase project.
// Do NOT use this value to authenticate with your backend server,
// if you have one. Use getTokenWithCompletion:completion: instead.
NSString *email = user.email;
NSString *uid = user.uid;
NSMutableString *multiFactorString = [NSMutableString stringWithFormat:@"MultiFactor: "];
for (FIRMultiFactorInfo *info in user.multiFactor.enrolledFactors) {
[multiFactorString appendString:info.displayName];
[multiFactorString appendString:@" "];
}
NSURL *photoURL = user.photoURL;
// ...
}
MainViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/MainViewController.m#L647-L688]
```
다음 단계

다른 ID 공급업체 및 익명 게스트 계정에 대한 지원을 추가하는 방법을 알아보세요.

Google 로그인 [https://firebase.google.com/docs/auth/ios/google-signin?hl=ko]
Facebook 로그인 [https://firebase.google.com/docs/auth/ios/facebook-login?hl=ko]
Twitter 로그인 [https://firebase.google.com/docs/auth/ios/twitter-login?hl=ko]
GitHub 로그인 [https://firebase.google.com/docs/auth/ios/github-auth?hl=ko]
익명 로그인 [https://firebase.google.com/docs/auth/ios/anonymous-auth?hl=ko]

도움이 되었나요?

의견 보내기