Source URL: https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko
Title: Android에서 Yahoo를 통해 인증
bookmark_border

의견 보내기

Android에서 Yahoo를 통해 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#before_you_begin]Firebase SDK로 로그인 과정 처리 [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]고급: 수동으로 로그인 과정 처리 [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#advanced:-handle-the-sign-in-flow-manually]다음 단계 [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#next_steps]

Firebase SDK를 통해 전체 로그인 과정을 수행하는 앱에 웹 기반의 일반 OAuth 로그인을 통합하여 사용자가 Yahoo와 같은 OAuth 제공업체를 통해 Firebase로 인증하도록 할 수 있습니다.

시작하기 전에

사용자가 Yahoo 계정을 통해 로그인하도록 하려면 우선 Firebase 프로젝트에서 Yahoo를 로그인 제공업체로 사용 설정해야 합니다.

Android 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/android/setup?hl=ko].
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 Yahoo 제공업체를 사용 설정합니다.
해당 제공업체의 개발자 콘솔에서 제공되는 클라이언트 ID 및 클라이언트 보안 비밀번호를 제공업체 구성에 추가합니다.

Yahoo OAuth 클라이언트를 등록하려면 Yahoo에 웹 애플리케이션을 등록하는 방법 [https://developer.yahoo.com/oauth2/guide/openid_connect/getting_started.html]에 대한 Yahoo 개발자 문서를 따릅니다.
OpenID Connect API 권한 2개(profile 및 email)를 선택해야 합니다.
이러한 제공업체에 앱을 등록할 때 프로젝트의 *.firebaseapp.com 도메인을 앱의 리디렉션 도메인으로 등록해야 합니다.

저장을 클릭합니다.
아직 앱의 SHA-1 디지털 지문을 지정하지 않았다면 Firebase Console의 설정 페이지 [https://console.firebase.google.com/project/_/settings/general/?hl=ko]에서 지정합니다. 앱의 SHA-256 디지털 지문을 얻는 방법에 대한 자세한 내용은 클라이언트 인증 [https://developers.google.com/android/guides/client-auth?hl=ko]을 참조하세요.

Firebase SDK로 로그인 과정 처리

Android 앱을 빌드하는 경우 Firebase Android SDK로 전체 로그인 과정을 처리하면 가장 손쉽게 Yahoo 계정을 통해 Firebase에 사용자를 인증할 수 있습니다.

Firebase Android SDK로 로그인 과정을 처리하려면 다음 단계를 따릅니다.

제공업체 ID yahoo.com을 사용하여 빌더로 OAuthProvider의 인스턴스를 생성합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
val provider = OAuthProvider.newBuilder("yahoo.com")
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L81-L81]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
OAuthProvider.Builder provider = OAuthProvider.newBuilder("yahoo.com");
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L94-L94]
선택사항: OAuth 요청과 함께 전송하고자 하는 커스텀 OAuth 매개변수를 추가로 지정합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
// Prompt user to re-authenticate to Yahoo.
provider.addCustomParameter("prompt", "login")

// Localize to French.
provider.addCustomParameter("language", "fr")
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L85-L89]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
// Prompt user to re-authenticate to Yahoo.
provider.addCustomParameter("prompt", "login");

// Localize to French.
provider.addCustomParameter("language", "fr");
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L99-L103]
Yahoo가 지원하는 매개변수 정보는 Yahoo OAuth 문서 [https://developer.yahoo.com/oauth2/guide/openid_connect/getting_started.html]를 참조하세요.
Firebase에서 요구하는 매개변수는 setCustomParameters()와 함께 전달할 수 없습니다. 이러한 매개변수에는 client_id, redirect_uri, response_type, scope, state가 있습니다.
선택사항: 인증 제공업체에서 요청하고자 하는 profile 및 email 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다. 애플리케이션에서 Yahoo API의 비공개 사용자 데이터에 대한 액세스가 필요한 경우 Yahoo 개발자 콘솔의 API 권한에서 Yahoo API에 대한 권한을 요청해야 합니다. 요청받은 OAuth 범위는 앱의 API 권한에서 사전 구성된 범위와 정확하게 일치해야 합니다. 예를 들어 사용자 연락처에 읽기/쓰기 액세스 권한이 요청되고 앱의 API 권한에서 사전 구성되었다면 읽기 전용 OAuth 범위 sdct-r 대신 sdct-w를 전달해야 합니다. 그렇지 않으면 과정이 실패하고 최종 사용자에게 오류가 표시됩니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
// Request read access to a user's email addresses.
// This must be preconfigured in the app's API permissions.
provider.scopes = listOf("mail-r", "sdct-w")
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L93-L95]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
// Request read access to a user's email addresses.
// This must be preconfigured in the app's API permissions.
List<String> scopes =
new ArrayList<String>() {
{
// Request access to Yahoo Mail API.
add("mail-r");
// This must be preconfigured in the app's API permissions.
add("sdct-w");
}
};
provider.setScopes(scopes);
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L108-L119]
자세한 내용은 Yahoo 범위 문서 [https://developer.yahoo.com/oauth2/guide/yahoo_scopes/]를 참조하세요.
OAuth 제공업체 객체를 사용해 Firebase에 인증합니다. 다른 FirebaseAuth 작업과 달리 이 작업은 커스텀 Chrome 탭 [https://developer.chrome.com/multidevice/android/customtabs?hl=ko]을 팝업으로 표시하여 UI를 관리합니다.
따라서 작업에서 UI를 시작할 때 연결된 OnSuccessListeners 및 OnFailureListeners가 즉각 분리되므로 이들 메서드에 활동을 참조하지 마세요.

우선 이미 응답을 수신했는지를 확인해야 합니다. 이 방법으로 로그인하면 활동이 백그라운드에서 진행되므로, 로그인 과정 중에 시스템에서 다시 회수될 수 있습니다. 이 경우 사용자가 다시 시도하지 않도록 하려면 결과가 이미 존재하는지 확인해야 합니다.

대기 중인 결과가 있는지 확인하려면 다음과 같이 getPendingAuthResult를 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
val pendingResultTask = firebaseAuth.pendingAuthResult
if (pendingResultTask != null) {
// There's something already here! Finish the sign-in for your user.
pendingResultTask
.addOnSuccessListener {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
.addOnFailureListener {
// Handle failure.
}
} else {
// There's no pending result so you need to start the sign-in flow.
// See below.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L118-L137]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
Task<AuthResult> pendingResultTask = firebaseAuth.getPendingAuthResult();
if (pendingResultTask != null) {
// There's something already here! Finish the sign-in for your user.
pendingResultTask
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
} else {
// There's no pending result so you need to start the sign-in flow.
// See below.
}
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L151-L178]
로그인 과정을 시작하려면 다음과 같이 startActivityForSignInWithProvider를 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
firebaseAuth
.startActivityForSignInWithProvider(activity, provider.build())
.addOnSuccessListener {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
.addOnFailureListener {
// Handle failure.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L143-L156]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
firebaseAuth
.startActivityForSignInWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// User is signed in.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// ((OAuthCredential)authResult.getCredential()).getAccessToken().
// The OAuth secret can be retrieved by calling:
// ((OAuthCredential)authResult.getCredential()).getSecret().
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L184-L205]
성공적으로 완료되면 제공업체에 연결된 OAuth 액세스 토큰을 반환되는 OAuthCredential 객체에서 가져올 수 있습니다.

OAuth 액세스 토큰을 사용하면 Yahoo API [https://developer.yahoo.com/oauth2/guide/apirequests/]를 호출할 수 있습니다.

여기서 YAHOO_USER_UID는 firebaseAuth.getCurrentUser().getProviderData().get(0).getUid() 필드 또는 authResult.getAdditionalUserInfo().getProfile()에서 검색할 수 있는 Yahoo 사용자의 ID입니다.
위의 예시는 로그인 과정에 중점을 두고 있지만 startActivityForLinkWithProvider를 사용하여 Yahoo 제공업체를 기존 사용자에 연결할 수도 있습니다. 예를 들어 여러 제공업체를 동일한 사용자에 연결하여 그 중 하나로 로그인하도록 허용할 수 있습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
// The user is already signed-in.
val firebaseUser = firebaseAuth.currentUser!!
firebaseUser
.startActivityForLinkWithProvider(activity, provider.build())
.addOnSuccessListener {
// Provider credential is linked to the current user.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// authResult.getCredential().getAccessToken().
// The OAuth secret can be retrieved by calling:
// authResult.getCredential().getSecret().
}
.addOnFailureListener {
// Handle failure.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L162-L177]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
// The user is already signed-in.
FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();

firebaseUser
.startActivityForLinkWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// Provider credential is linked to the current user.
// IdP data available in
// authResult.getAdditionalUserInfo().getProfile().
// The OAuth access token can also be retrieved:
// authResult.getCredential().getAccessToken().
// The OAuth secret can be retrieved by calling:
// authResult.getCredential().getSecret().
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L211-L235]
startActivityForReauthenticateWithProvider에서도 동일한 패턴을 사용하여 최근 로그인한 적이 있어야 진행할 수 있는 중요한 작업에서 새로운 사용자 인증 정보를 가져올 수 있습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
// The user is already signed-in.
val firebaseUser = firebaseAuth.currentUser!!
firebaseUser
.startActivityForReauthenticateWithProvider(activity, provider.build())
.addOnSuccessListener {
// User is re-authenticated with fresh tokens and
// should be able to perform sensitive operations
// like account deletion and email or password
// update.
}
.addOnFailureListener {
// Handle failure.
}
GenericIdpActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GenericIdpActivity.kt#L183-L195]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
// The user is already signed-in.
FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();

firebaseUser
.startActivityForReauthenticateWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// User is re-authenticated with fresh tokens and
// should be able to perform sensitive operations
// like account deletion and email or password
// update.
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
GenericIdpActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/GenericIdpActivity.java#L241-L262]

고급: 수동으로 로그인 과정 처리

OAuth 액세스 토큰 기반의 사용자 인증 정보를 사용하여 직접 로그인할 수 있는 다른 Firebase 지원 OAuth 제공업체(예: Google, Facebook, Twitter)와 달리, Firebase 인증 서버에서 Yahoo OAuth 액세스 토큰의 사용자를 인증할 수 없으므로 Firebase 인증은 Yahoo와 같은 제공업체에 대해 동일한 인증 기능을 지원하지 못합니다.
이는 중요한 보안 요구사항으로, 한 프로젝트(공격자)에서 확보한 Yahoo OAuth 액세스 토큰을 사용하여 다른 프로젝트(피해자)에 로그인할 수 있는 재전송 공격에 애플리케이션과 웹사이트가 노출될 수 있습니다.
대신 Firebase 인증은 Firebase Console에 구성된 OAuth 클라이언트 ID와 보안 비밀을 사용하여 전체 OAuth 과정과 승인 코드 교환을 처리할 수 있는 기능을 제공합니다. 승인 코드는 특정 클라이언트 ID/보안 비밀과 함께 사용되어야 하므로, 한 프로젝트에서 확보한 승인 코드는 다른 프로젝트에 사용할 수 없습니다.

지원되지 않는 환경에서 이러한 제공업체를 사용해야 하는 경우 서드 파티 OAuth 라이브러리 및 Firebase 커스텀 인증 [https://firebase.google.com/docs/auth/admin/create-custom-tokens?hl=ko]을 사용해야 합니다. 서드 파티 라이브러리는 제공업체 인증에 필요하고 Firebase 커스텀 인증은 제공업체의 사용자 인증 정보를 커스텀 토큰으로 교환할 때 필요합니다.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 FirebaseUser [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseUser?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/android/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth?hl=ko#signOut()]을 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#kotlin-android] ---
Firebase.auth.signOut()
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L415-L415]

--- 탭: Java [https://firebase.google.com/docs/auth/android/yahoo-oauth?hl=ko#java-android] ---
FirebaseAuth.getInstance().signOut();
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L501-L501]

도움이 되었나요?

의견 보내기