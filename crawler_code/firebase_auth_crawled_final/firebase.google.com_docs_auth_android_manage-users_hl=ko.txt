Source URL: https://firebase.google.com/docs/auth/android/manage-users?hl=ko
Title: Firebase에서 사용자 관리하기
bookmark_border

의견 보내기

Firebase에서 사용자 관리하기

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용사용자 생성 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#create_a_user]현재 로그인한 사용자 가져오기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#get_the_currently_signed-in_user]사용자 프로필 가져오기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#get_a_users_profile]제공업체의 사용자 프로필 정보 가져오기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#get_a_users_provider-specific_profile_information]사용자 프로필 업데이트 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#update_a_users_profile]사용자 이메일 주소 설정 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#set_a_users_email_address]사용자에게 인증 메일 보내기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#send_a_user_a_verification_email]사용자 비밀번호 설정 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#set_a_users_password]비밀번호 재설정 이메일 보내기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#send_a_password_reset_email]사용자 삭제하기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#delete_a_user]사용자 재인증하기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#re-authenticate_a_user]사용자 계정 가져오기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#import_user_accounts]

사용자 생성

Firebase 프로젝트에서 신규 사용자를 생성할 때는 createUserWithEmailAndPassword [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#create_a_password-based_account] 메서드를 호출하는 방법과 Google 로그인 [https://firebase.google.com/docs/auth/android/google-signin?hl=ko] 또는 Facebook 로그인 [https://firebase.google.com/docs/auth/android/facebook-login?hl=ko]과 같은 제휴 ID 공급업체를 이용해 사용자의 최초 로그인을 처리하는 방법이 있습니다.

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '사용자' 페이지에서 비밀번호 인증을 사용하는 신규 사용자를 생성할 수도 있습니다.

현재 로그인한 사용자 가져오기

현재 사용자를 가져올 때 권장하는 방법은 getCurrentUser 메서드를 호출하는 것입니다.
로그인한 사용자가 없으면 getCurrentUser는 null을 반환합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser
if (user != null) {
// User is signed in
} else {
// No user is signed in
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L44-L49]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
if (user != null) {
// User is signed in
} else {
// No user is signed in
}
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L66-L71]

getCurrentUser가 null이 아닌 FirebaseUser를 반환하지만 기본 토큰이 유효하지 않은 경우가 있습니다. 예를 들어 사용자가 다른 기기에서 삭제되었는데 로컬 토큰을 새로고침하지 않은 경우가 여기에 해당합니다. 이 경우 유효한 사용자 getCurrentUser를 가져올 수 있지만, 인증 리소스에 대한 후속 호출이 실패합니다.

인증 객체의 초기화가 완료되지 않은 경우에도 getCurrentUser가 null을 반환할 수 있습니다.

AuthStateListener [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth.AuthStateListener?hl=ko]를 연결하면 기본 토큰의 상태가 변경될 때마다 콜백이 호출됩니다. 이를 통해
위에서 설명한 것과 같은 특이한 사례에 대처할 수 있습니다.

사용자 프로필 가져오기

사용자의 프로필 정보를 가져오려면 FirebaseUser 인스턴스의 접근자 메서드를 사용합니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser
user?.let {
// Name, email address, and profile photo Url
val name = it.displayName
val email = it.email
val photoUrl = it.photoUrl

// Check if user's email is verified
val emailVerified = it.isEmailVerified

// The user's ID, unique to the Firebase project. Do NOT use this value to
// authenticate with your backend server, if you have one. Use
// FirebaseUser.getIdToken() instead.
val uid = it.uid
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L55-L69]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
if (user != null) {
// Name, email address, and profile photo Url
String name = user.getDisplayName();
String email = user.getEmail();
Uri photoUrl = user.getPhotoUrl();

// Check if user's email is verified
boolean emailVerified = user.isEmailVerified();

// The user's ID, unique to the Firebase project. Do NOT use this value to
// authenticate with your backend server, if you have one. Use
// FirebaseUser.getIdToken() instead.
String uid = user.getUid();
}
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L77-L91]

제공업체의 사용자 프로필 정보 가져오기

사용자에게 연결된 로그인 제공업체로부터 프로필 정보를 가져오려면 getProviderData 메서드를 사용합니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser
user?.let {
for (profile in it.providerData) {
// Id of the provider (ex: google.com)
val providerId = profile.providerId

// UID specific to the provider
val uid = profile.uid

// Name, email address, and profile photo Url
val name = profile.displayName
val email = profile.email
val photoUrl = profile.photoUrl
}
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L75-L89]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
if (user != null) {
for (UserInfo profile : user.getProviderData()) {
// Id of the provider (ex: google.com)
String providerId = profile.getProviderId();

// UID specific to the provider
String uid = profile.getUid();

// Name, email address, and profile photo Url
String name = profile.getDisplayName();
String email = profile.getEmail();
Uri photoUrl = profile.getPhotoUrl();
}
}
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L97-L111]

사용자 프로필 업데이트

사용자의 표시 이름 및 프로필 사진 URL 등의 기본 프로필 정보를 업데이트할 때는 updateProfile 메서드를 사용합니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser

val profileUpdates = userProfileChangeRequest {
displayName = "Jane Q. User"
photoUri = Uri.parse("https://example.com/jane-q-user/profile.jpg")
}

user!!.updateProfile(profileUpdates)
.addOnCompleteListener { task ->
if (task.isSuccessful) {
Log.d(TAG, "User profile updated.")
}
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L95-L107]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

UserProfileChangeRequest profileUpdates = new UserProfileChangeRequest.Builder()
.setDisplayName("Jane Q. User")
.setPhotoUri(Uri.parse("https://example.com/jane-q-user/profile.jpg"))
.build();

user.updateProfile(profileUpdates)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User profile updated.");
}
}
});
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L117-L132]

사용자 이메일 주소 설정

updateEmail 메서드로 사용자의 이메일 주소를 설정할 수 있습니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser

user!!.updateEmail("user@example.com")
.addOnCompleteListener { task ->
if (task.isSuccessful) {
Log.d(TAG, "User email address updated.")
}
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L113-L120]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

user.updateEmail("user@example.com")
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User email address updated.");
}
}
});
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L138-L148]
중요: 사용자의 이메일 주소를 설정하려면 사용자가 최근에 로그인한 적이 있어야 합니다.
사용자 재인증하기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#re-authenticate_a_user]를 참조하세요.
사용자에게 인증 메일 보내기

sendEmailVerification 메서드로 사용자에게 주소 인증 메일을 보낼 수 있습니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser

user!!.sendEmailVerification()
.addOnCompleteListener { task ->
if (task.isSuccessful) {
Log.d(TAG, "Email sent.")
}
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L140-L147]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseAuth auth = FirebaseAuth.getInstance();
FirebaseUser user = auth.getCurrentUser();

user.sendEmailVerification()
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "Email sent.");
}
}
});
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L171-L182]

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '이메일 템플릿' 페이지에서 이메일 템플릿을 맞춤설정할 수 있습니다.
Firebase 고객센터의 이메일 템플릿 [https://support.google.com/firebase/answer/7000714?hl=ko] 항목을 참조하세요.

인증 메일을 보낼 때 연결 URL [https://firebase.google.com/docs/auth/android/passing-state-in-email-actions?hl=ko]을
통해 상태를 전달하여 앱으로 다시 리디렉션할
수도 있습니다.

또한 이메일을 보내기 전에 인증 인스턴스의 언어 코드를 업데이트하면
인증 메일을 현지화할 수 있습니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
auth.setLanguageCode("fr")
// To apply the default app language instead of explicitly setting it.
// auth.useAppLanguage()
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L173-L175]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
auth.setLanguageCode("fr");
// To apply the default app language instead of explicitly setting it.
// auth.useAppLanguage();
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L211-L213]

사용자 비밀번호 설정

updatePassword 메서드로 사용자의 비밀번호를 설정할 수 있습니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser
val newPassword = "SOME-SECURE-PASSWORD"

user!!.updatePassword(newPassword)
.addOnCompleteListener { task ->
if (task.isSuccessful) {
Log.d(TAG, "User password updated.")
}
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L126-L134]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
String newPassword = "SOME-SECURE-PASSWORD";

user.updatePassword(newPassword)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User password updated.");
}
}
});
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L154-L165]
중요: 사용자의 비밀번호를 설정하려면 사용자가 최근에 로그인한 적이 있어야 합니다. 사용자 재인증하기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#re-authenticate_a_user]를 참조하세요.
비밀번호 재설정 이메일 보내기

sendPasswordResetEmail 메서드로 사용자에게 비밀번호 재설정 이메일을 보낼 수 있습니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val emailAddress = "user@example.com"

Firebase.auth.sendPasswordResetEmail(emailAddress)
.addOnCompleteListener { task ->
if (task.isSuccessful) {
Log.d(TAG, "Email sent.")
}
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L181-L188]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseAuth auth = FirebaseAuth.getInstance();
String emailAddress = "user@example.com";

auth.sendPasswordResetEmail(emailAddress)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "Email sent.");
}
}
});
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L219-L230]

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '이메일 템플릿' 페이지에서 이메일 템플릿을 맞춤설정할 수 있습니다.
Firebase 고객센터의 이메일 템플릿 [https://support.google.com/firebase/answer/7000714?hl=ko] 항목을 참조하세요.

비밀번호 재설정 이메일을 보낼 때 연결 URL [https://firebase.google.com/docs/auth/android/passing-state-in-email-actions?hl=ko]을 통해 상태를 전달하여 앱으로 다시 리디렉션할 수도 있습니다.

또한 이메일을 보내기 전에 인증 인스턴스의 언어 코드를 업데이트하면
비밀번호 재설정 이메일을 현지화할 수 있습니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
auth.setLanguageCode("fr")
// To apply the default app language instead of explicitly setting it.
// auth.useAppLanguage()
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L173-L175]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
auth.setLanguageCode("fr");
// To apply the default app language instead of explicitly setting it.
// auth.useAppLanguage();
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L211-L213]

또한 Firebase Console에서 비밀번호 재설정 이메일을 보낼 수도 있습니다.

사용자 삭제하기

delete 메서드로 사용자 계정을 삭제할 수 있습니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser!!

user.delete()
.addOnCompleteListener { task ->
if (task.isSuccessful) {
Log.d(TAG, "User account deleted.")
}
}
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L194-L201]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

user.delete()
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User account deleted.");
}
}
});
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L236-L246]
중요: 사용자를 삭제하려면 사용자가 최근에 로그인한 적이 있어야 합니다. 사용자 재인증하기 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#re-authenticate_a_user]를 참조하세요.
또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '사용자' 페이지에서 사용자를 삭제할 수도 있습니다.

사용자 재인증하기

계정 삭제 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#delete_a_user], 기본 이메일 주소 설정 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#set_a_users_email_address], 비밀번호 변경 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#set_a_users_password]과 같이 보안에 민감한 작업을 하려면 사용자가 최근에 로그인한 적이 있어야 합니다. 이런 작업을 수행할 때 사용자가 너무 오래 전에 로그인했다면 작업이 실패하고 FirebaseAuthRecentLoginRequiredException [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuthRecentLoginRequiredException?hl=ko]이 발생합니다.
이때에는 사용자에게 새로운 로그인 인증 정보를 받은 다음 이 정보를 reauthenticate에 전달하여 사용자를 재인증해야 합니다. 예를 들면 다음과 같습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#kotlin-android] ---
val user = Firebase.auth.currentUser!!

// Get auth credentials from the user for re-authentication. The example below shows
// email and password credentials but there are multiple possible providers,
// such as GoogleAuthProvider or FacebookAuthProvider.
val credential = EmailAuthProvider
.getCredential("user@example.com", "password1234")

// Prompt the user to re-provide their sign-in credentials
user.reauthenticate(credential)
.addOnCompleteListener { Log.d(TAG, "User re-authenticated.") }
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L207-L217]

--- 탭: Java [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#java-android] ---
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

// Get auth credentials from the user for re-authentication. The example below shows
// email and password credentials but there are multiple possible providers,
// such as GoogleAuthProvider or FacebookAuthProvider.
AuthCredential credential = EmailAuthProvider
.getCredential("user@example.com", "password1234");

// Prompt the user to re-provide their sign-in credentials
user.reauthenticate(credential)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
Log.d(TAG, "User re-authenticated.");
}
});
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L252-L267]

사용자 계정 가져오기

Firebase CLI의 auth:import [https://firebase.google.com/docs/cli/auth-import?hl=ko] 명령어를 사용하여 파일에서 Firebase 프로젝트로 사용자 계정을 가져올 수 있습니다. 예를 들면 다음과 같습니다.
firebase auth:import users.json --hash-algo=scrypt --rounds=8 --mem-cost=14

도움이 되었나요?

의견 보내기