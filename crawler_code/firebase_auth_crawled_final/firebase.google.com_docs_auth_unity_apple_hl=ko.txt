Source URL: https://firebase.google.com/docs/auth/unity/apple?hl=ko
Title: Apple 및 Unity를 사용하여 인증
bookmark_border

의견 보내기

Apple 및 Unity를 사용하여 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#before-you-begin]Apple Developer Program 가입 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#join-the-apple-developer-program]Apple로 로그인 구성 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#configure-sign-in-with-apple]Apple을 로그인 제공업체로 사용 설정 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#enable-apple-as-a-sign-in-provider]Apple의 익명처리된 데이터 요구사항 준수 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#comply-with-apple-anonymized-data-requirements]Firebase.Auth.FirebaseAuth 클래스 액세스 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#access_the_firebaseauthfirebaseauth_class]Firebase SDK로 로그인 흐름 처리하기 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]Apple 플랫폼 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#on-apple-platforms]Android [https://firebase.google.com/docs/auth/unity/apple?hl=ko#on-android]Apple Notes로 로그인 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#sign-in-with-apple-notes]다음 단계 [https://firebase.google.com/docs/auth/unity/apple?hl=ko#next-steps]

Firebase SDK를 통해 엔드 투 엔드 OAuth 2.0 로그인 과정을 실행하여 사용자가 Apple ID를 사용해 Firebase에 인증하도록 할 수 있습니다.

중요: Apple로 로그인하려면 사용자는 다음을 충족해야 합니다.

2단계 인증(2FA)이 사용 설정된 Apple ID가 있어야 합니다.
Apple 기기에서 iCloud에 로그인되어 있어야 합니다.

Apple로 로그인 사용 방법 [https://support.apple.com/en-us/HT210318]을 참조하세요. Apple로 로그인과의 통합을 테스트하려면 다음 요구사항도 충족해야 합니다.

시작하기 전에

사용자가 Apple 계정을 통해 로그인하도록 하려면 우선 Apple의 개발자 사이트에서 Apple로 로그인을 구성하고 Firebase 프로젝트에서 로그인 제공업체를 Apple로 사용 설정합니다.

Apple Developer Program 가입
Apple로 로그인은 Apple Developer Program [https://developer.apple.com/programs/]의 멤버만 구성할 수 있습니다.

Apple로 로그인 구성
Firebase 프로젝트에서 Apple 로그인을 사용 설정하고 올바르게 구성해야 합니다.
Apple Developer 구성은 Android 및 Apple 플랫폼에 따라 다릅니다.
먼저 iOS+ [https://firebase.google.com/docs/auth/ios/apple?hl=ko#configure-sign-in-with-apple] 또는 Android [https://firebase.google.com/docs/auth/android/apple?hl=ko#configure-sign-in-with-apple] 가이드의 'Apple로 로그인 구성' 섹션을 완료한 후에 계속 진행하세요.

Apple을 로그인 제공업체로 사용 설정

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다. 로그인 방법 탭에서 Apple 제공업체를 사용 설정합니다.

Apple 로그인 제공업체 설정을 구성합니다. Apple 플랫폼에서만 앱을 배포하는 경우 서비스 ID, Apple Team ID, 비공개 키, 키 ID 필드는 비워두면 됩니다.

Android 기기에 대한 지원이 필요한 경우: Android 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/android/setup?hl=ko]. Firebase Console에서 앱을 설정할 때 앱의 SHA-1 서명을 등록해야 합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다. 로그인 방법 탭에서 Apple 제공업체를 사용 설정합니다.  이전 섹션에서 만든 서비스 ID를 지정합니다. OAuth 코드 흐름 구성 섹션에서도 Apple 팀 ID와 이전 섹션에서 만든 비공개 키 및 키 ID를 지정합니다.

Apple의 익명처리된 데이터 요구사항 준수

Apple로 로그인에는 사용자가 로그인할 때 이메일 주소 등의 데이터를 익명처리할 수 있는 옵션이 제공됩니다. 이 옵션을 선택한 사용자는 privaterelay.appleid.com 도메인의 이메일 주소를 갖게 됩니다. 앱에서 Apple로 로그인을 사용하는 경우 이 익명처리된 Apple ID에 대한 Apple의 관련 개발자 정책 또는 약관을 모두 준수해야 합니다.

또한 개인 식별 정보를 익명처리된 Apple ID와 연결하려면 먼저 사용자 동의를 받아야 합니다. Firebase 인증 사용에는 다음 작업이 포함될 수 있습니다.

이메일 주소와 익명처리된 Apple ID 연결
전화번호와 익명처리된 Apple ID 연결
익명처리되지 않은 소셜 사용자 인증 정보(Facebook, Google 등)와 익명처리된 Apple ID 연결

위 목록은 추후 변경되거나 추가될 수 있습니다. 개발자 계정의 Membership(멤버십) 섹션에서 Apple Developer Program License Agreement(Apple Developer Program 라이선스 계약)를 참조하여 앱이 Apple의 요구사항을 충족하는지 확인하세요.

Firebase.Auth.FirebaseAuth 클래스 액세스

FirebaseAuth 클래스는 모든 API 호출을 위한 게이트웨이입니다.

FirebaseAuth.DefaultInstance [https://firebase.google.com/docs/reference/unity/class/firebase/auth/firebase-auth?hl=ko#defaultinstance]를 통해 액세스할 수 있습니다.
Firebase.Auth.FirebaseAuth auth = Firebase.Auth.FirebaseAuth.DefaultInstance;

Firebase SDK로 로그인 흐름 처리하기

Apple 및 Android 플랫폼은 Apple로 로그인하는 절차가 각기 다릅니다.

Apple 플랫폼

Unity의 Apple 로그인 애셋 스토리지 패키지 [https://blogs.unity3d.com/2019/09/19/support-for-apple-sign-in/]와 같은 제3자 플러그인을 설치하여 Apple 로그인 nonce와 토큰 생성을 처리합니다.
Firebase 작업에 사용하도록 원시 문자열 상태로 생성된 임의의 nonce 문자열을 연결하기 위해 코드를 변경해야 할 수 있습니다(즉, nonce의 SHA256 다이제스트 양식이 생성되기 전에 사본 저장).
결과 토큰 문자열과 원래의 nonce를 사용하여 Firebase 사용자 인증 정보를 만들고 Firebase에 로그인합니다.
Firebase.Auth.Credential credential =
Firebase.Auth.OAuthProvider.GetCredential("apple.com", appleIdToken, rawNonce, null);
auth.SignInAndRetrieveDataWithCredentialAsync(credential).ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("SignInAndRetrieveDataWithCredentialAsync was canceled.");
return;
}
if (task.IsFaulted) {
Debug.LogError("SignInAndRetrieveDataWithCredentialAsync encountered an error: " + task.Exception);
return;
}

Firebase.Auth.AuthResult result = task.Result;
Debug.LogFormat("User signed in successfully: {0} ({1})",
result.User.DisplayName, result.User.UserId);
});
최근 로그인한 적이 있어야 진행할 수 있는 중요한 작업에 대해 새로운 사용자 인증 정보를 검색하는 데 사용할 수 있는 ReauthenticateAsync와 동일한 패턴을 사용할 수 있습니다.  자세한 내용은 사용자 관리 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko]를 참조하세요.
Apple 플랫폼에서 Apple 로그인으로 연결할 때 기존 Firebase 계정이 이미 Apple 계정에 연결되었다는 오류가 발생할 수 있습니다. 이 경우 표준 Firebase.FirebaseException 대신 Firebase.Auth.FirebaseAccountLinkException이 발생합니다. 이 경우 예외에는 FirebaseAuth.SignInAndRetrieveDataWithCredentialAsync를 통해 Apple에 연결된 사용자를 로그인하는 데 사용할 수 있는 UserInfo.UpdatedCredential 속성(유효한 경우)이 포함됩니다.
업데이트된 사용자 인증 정보는 로그인 작업을 위해 nonce로 새로운 Apple 로그인 토큰을 생성할 필요가 없습니다.
auth.CurrentUser.LinkWithCredentialAsync(
Firebase.Auth.OAuthProvider.GetCredential("apple.com", idToken, rawNonce, null))
.ContinueWithOnMainThread( task => {
if (task.IsCompletedSuccessfully) {
// Link Success
} else {
if (task.Exception != null) {
foreach (Exception exception in task.Exception.Flatten().InnerExceptions) {
Firebase.Auth.FirebaseAccountLinkException firebaseEx =
exception as Firebase.Auth.FirebaseAccountLinkException;
if (firebaseEx != null && firebaseEx.UserInfo.UpdatedCredential.IsValid()) {
// Attempt to sign in with the updated credential.
auth.SignInAndRetrieveDataWithCredentialAsync(firebaseEx.UserInfo.UpdatedCredential).
ContinueWithOnMainThread( authResultTask => {
// Handle Auth result.
});
} else {
Debug.Log("Link with Apple failed:" + firebaseEx );
}
} // end for loop
}
}
});

Android

Android에서는 Firebase SDK를 통해 엔드 투 엔드 로그인 과정을 실행하는 앱에 웹 기반의 일반 OAuth 로그인을 통합하여 Firebase에 사용자를 인증합니다.

Firebase SDK로 로그인 과정을 처리하려면 다음 단계를 따르세요.

Apple에 적합한 제공업체 ID로 구성된 FederatedOAuthProviderData의 인스턴스를 만듭니다.
Firebase.Auth.FederatedOAuthProviderData providerData =
new Firebase.Auth.FederatedOAuthProviderData();

providerData.ProviderId = "apple.com";

선택사항: 인증 제공업체에서 요청하고자 하는 기본값 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다.
providerData.Scopes = new List<string>();
providerData.Scopes.Add("email");
providerData.Scopes.Add("name");

선택사항: Apple의 로그인 화면을 영어가 아닌 다른 언어로 표시하려면 locale 매개변수를 설정하세요. 지원되는 언어는 Apple로 로그인 문서 [https://developer.apple.com/documentation/signinwithapplejs/incorporating_sign_in_with_apple_into_other_platforms#3332112]를 참조하세요.
providerData.CustomParameters = new Dictionary<string,string>;

// Localize to French.
providerData.CustomParameters.Add("language", "fr");

제공업체 데이터가 구성되었으면 이를 사용하여 FederatedOAuthProvider를 만듭니다.
// Construct a FederatedOAuthProvider for use in Auth methods.
Firebase.Auth.FederatedOAuthProvider provider =
new Firebase.Auth.FederatedOAuthProvider();
provider.SetProviderData(providerData);

인증 제공업체 객체를 사용해 Firebase에 인증합니다. 이는 다른 FirebaseAuth 작업과 달리 사용자가 인증 정보를 입력할 수 있는 웹 보기를 표시하여 UI를 제어합니다.

로그인 과정을 시작하려면 다음과 같이 signInWithProvider를 호출합니다.
auth.SignInWithProviderAsync(provider).ContinueOnMainThread(task => {
if (task.IsCanceled) {
Debug.LogError("SignInWithProviderAsync was canceled.");
return;
}
if (task.IsFaulted) {
Debug.LogError("SignInWithProviderAsync encountered an error: " +
task.Exception);
return;
}

Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User signed in successfully: {0} ({1})",
user.DisplayName, user.UserId);
});

최근 로그인한 적이 있어야 진행할 수 있는 중요한 작업에 대해 새로운 사용자 인증 정보를 검색하는 데 사용할 수 있는 ReauthenticateWithProvider와 동일한 패턴을 사용할 수 있습니다.
user.ReauthenticateWithProviderAsync(provider).ContinueOnMainThread(task => {
if (task.IsCanceled) {
Debug.LogError("ReauthenticateWithProviderAsync was canceled.");
return;
}
if (task.IsFaulted) {
Debug.LogError(
"ReauthenticateWithProviderAsync encountered an error: " +
task.Exception);
return;
}

Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User reauthenticated successfully: {0} ({1})",
user.DisplayName, user.UserId);
});

또한 LinkWithCredentialAsync()을 사용하여 여러 ID 공급업체를 기존 계정에 연결할 수 있습니다.

Apple에서는 개발자가 사용자의 Apple 계정을 다른 데이터에 연결하기 전에 사용자에게 명시적인 동의를 얻도록 요청합니다.

예를 들어 Facebook 계정을 현재 Firebase 계정에 연결하려면 사용자가 Facebook에 로그인할 때 얻은 액세스 토큰을 사용하세요.
// Initialize a Facebook credential with a Facebook access token.

Firebase.Auth.Credential credential =
Firebase.Auth.FacebookAuthProvider.GetCredential(facebook_token);

// Assuming the current user is an Apple user linking a Facebook provider.
user.LinkWithCredentialAsync(credential)
.ContinueWithOnMainThread( task => {
if (task.IsCanceled) {
Debug.LogError("LinkWithCredentialAsync was canceled.");
return;
}
if (task.IsFaulted) {
Debug.LogError("LinkWithCredentialAsync encountered an error: "
+ task.Exception);
return;
}

Firebase.Auth.AuthResult result = task.Result;
Firebase.Auth.FirebaseUser user = result.User;
Debug.LogFormat("User linked successfully: {0} ({1})",
user.DisplayName, user.UserId);
});

Apple Notes로 로그인

Firebase 인증에서 지원하는 다른 제공업체와 달리, Apple은 사진 URL을 제공하지 않습니다.

또한 사용자가 자신의 이메일을 앱에 공유하지 않으면 Apple은 이 사용자의 고유 이메일 주소(xyz@privaterelay.appleid.com 형식)를 프로비저닝하여 개발자 앱으로 공유합니다. 비공개 이메일 릴레이 서비스를 구성한 경우 Apple은 익명처리된 주소로 전송된 이메일을 사용자의 실제 이메일 주소로 전달합니다.

Apple은 사용자가 처음 로그인할 때만 표시 이름 등의 사용자 정보를 앱에 공유합니다. 일반적으로 Firebase는 사용자가 Apple 계정으로 처음 로그인할 때 표시 이름을 저장하며, 이 표시 이름은 auth.CurrentUser.DisplayName을 사용하여 가져올 수 있습니다.
하지만 이전에 Firebase 대신 Apple을 사용하여 사용자를 앱에 로그인하도록 했으면 Apple은 Firebase에 사용자의 표시 이름을 제공하지 않습니다.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트에 저장되며 사용자의 로그인 방법과 무관하게 프로젝트 내의 모든 앱에서 사용자 본인 확인에 사용할 수 있습니다.

앱의 Firebase.Auth.FirebaseUser 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko]를 참조하세요.

Firebase 실시간 데이터베이스와 Cloud Storage 보안 규칙의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

도움이 되었나요?

의견 보내기