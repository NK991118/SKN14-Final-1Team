Source URL: https://cloud.google.com/firestore/docs/manage-data/delete-data?hl=ko
Title: 문서 및 필드 삭제

의견 보내기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

문서 및 필드 삭제

다음 예시는 문서, 필드, 컬렉션을 삭제하는 방법을 보여줍니다.

문서 삭제

문서를 삭제하려면 다음과 같은 언어별 delete() 메서드를 사용합니다.

웹 버전 9
deleteDoc() 메서드를 사용합니다.
import { doc, deleteDoc } from "firebase/firestore";

await deleteDoc(doc(db, "cities", "DC"));delete_document.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/delete_document.js#L8-L10]

웹 버전 8
delete() 메서드를 사용합니다.
db.collection("cities").doc("DC").delete().then(() => {
delete() 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

do {
try await db.collection("cities").document("DC").delete()
print("Document successfully removed!")
Objective-C
deleteDocumentWithCompletion: 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[[self.db collectionWithPath:@"cities"] documentWithPath:@"DC"]
deleteDocumentWithCompletion:^(NSError * _Nullable error) {
if (error != nil) {
NSLog(@"Error removing document: %@", error);
NSLog(@"Document successfully removed!");
KotlinAndroid
delete() 메서드를 사용합니다.
db.collection("cities").document("DC")
.delete()
db.collection("cities").document("DC")
.delete()
.addOnSuccessListener(new OnSuccessListener<Void>() {
@Override
public void onSuccess(Void aVoid) {
Log.d(TAG, "DocumentSnapshot successfully deleted!");
Log.w(TAG, "Error deleting document", e);
delete() 메서드를 사용합니다.
db.collection("cities").doc("DC").delete().then(
(doc) => print("Document deleted"),
onError: (e) => print("Error updating document $e"),
);firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L355-L358]

자바
delete() 메서드를 사용합니다.

ApiFuture<WriteResult> writeResult = db.collection("cities").document("DC").delete();
delete() 메서드를 사용합니다.

db.collection("cities").document("DC").delete()snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L826-L826]

Python(비동기)
delete() 메서드를 사용합니다.

await db.collection("cities").document("DC").delete()snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L680-L680]

C++
Delete() 메서드를 사용합니다.
db->Collection("cities").Document("DC").Delete().OnCompletion(
[](const Future<void>& future) {
if (future.error() == Error::kErrorOk) {
delete() 메서드를 사용합니다.

Delete() 메서드를 사용합니다.

import (
"context"
"log"

"cloud.google.com/go/firestore"

func deleteDoc(ctx context.Context, client *firestore.Client) error {
_, err := client.Collection("cities").Doc("DC").Delete(ctx)
if err != nil {
delete() 메서드를 사용합니다.

$db->collection('samples/php/cities')->document('DC')->delete();data_delete_doc.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/8a7d6cc0fb91ce79a9c333088cdfce226b13069c/firestore/src/data_delete_doc.php#L40-L40]

Unity
DeleteAsync() 메서드를 사용합니다.
DocumentReference cityRef = db.Collection("cities").Document("DC");
cityRef.DeleteAsync();

C#
DeleteAsync() 메서드를 사용합니다.

DocumentReference cityRef = db.Collection("cities").Document("DC");
await cityRef.DeleteAsync();Program.cs [https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/1f64cab92543aa6daaa1ba04f073e4f1cf239047/firestore/api/DeleteData/Program.cs#L38-L39]

Ruby
delete() 메서드를 사용합니다.

city_ref = firestore.doc "#{collection_path}/DC"
city_ref.deletedelete_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/delete_data.rb#L24-L25]

경고: 문서를 삭제해도 하위 컬렉션은 삭제되지 않습니다.
문서를 삭제해도 Firestore는 하위 컬렉션 내 문서를 자동으로 삭제하지 않습니다. 따라서 참조를 통해 하위 컬렉션 문서에 액세스할 수 있습니다.
예를 들어 /mycoll/mydoc에서 상위 문서를 삭제했더라도 /mycoll/mydoc/mysubcoll/mysubdoc 경로에 있는 문서에 액세스할 수 있습니다.

존재하지 않는 상위 문서가 Console에 나타나는 경우 [https://cloud.google.com/firestore/native/docs/using-console?hl=ko#non-existent_ancestor_documents]에도 쿼리나 스냅샷에는 표시되지 않습니다.

문서를 삭제할 때 하위 컬렉션의 문서까지 삭제하려면 수동으로 삭제해야 합니다. 자세한 내용은 컬렉션 삭제 [https://cloud.google.com/firestore/native/docs/manage-data/delete-data?hl=ko#collections]를 참조하세요.

필드 삭제

문서에서 특정 필드를 삭제하려면 문서를 업데이트할 때 다음과 같은 언어별 FieldValue.delete() 메서드를 사용합니다.

웹 버전 9
deleteField() 메서드를 사용합니다.
import { doc, updateDoc, deleteField } from "firebase/firestore";

FieldValue.delete() 메서드를 사용합니다.
FieldValue.delete() 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

do {

try await db.collection("cities").document("BJ").updateData([
"capital": FieldValue.delete(),
])
print("Document successfully updated")
Objective-C
fieldValueForDelete: 메서드를 사용합니다.

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[[self.db collectionWithPath:@"cities"] documentWithPath:@"BJ"] updateData:@{
@"capital": [FIRFieldValue fieldValueForDelete]
NSLog(@"Error updating document: %@", error);
NSLog(@"Document successfully updated");
KotlinAndroid
FieldValue.delete() 메서드를 사용합니다.
val docRef = db.collection("cities").document("BJ")

"capital" to FieldValue.delete(),

docRef.update(updates).addOnCompleteListener { }DocSnippets.kt [https://github.com/firebase/snippets-android/blob/0f9300dc99f19e2a8108b4b2a97b86812299703b/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L1102-L1109]

자바Android
FieldValue.delete() 메서드를 사용합니다.
DocumentReference docRef = db.collection("cities").document("BJ");

Map<String,Object> updates = new HashMap<>();
updates.put("capital", FieldValue.delete());

docRef.update(updates).addOnCompleteListener(new OnCompleteListener<Void>() {
FieldValue.delete() 메서드를 사용합니다.
final docRef = db.collection("cities").doc("BJ");

FieldValue.delete() 메서드를 사용합니다.

DocumentReference docRef = db.collection("cities").document("BJ");
Map<String, Object> updates = new HashMap<>();
updates.put("capital", FieldValue.delete());
ApiFuture<WriteResult> writeResult = docRef.update(updates);
System.out.println("Update time : " + writeResult.get());ManageDataSnippets.java [https://github.com/googleapis/java-firestore/blob/e3aafbe5c7e8d3286aca360174cb086f4d409803/samples/snippets/src/main/java/com/example/firestore/snippets/ManageDataSnippets.java#L286-L291]

Python
firestore.DELETE_FIELD 메서드를 사용합니다.

city_ref = db.collection("cities").document("BJ")
city_ref.update({"capital": firestore.DELETE_FIELD})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L833-L834]

Python(비동기)
firestore.DELETE_FIELD 메서드를 사용합니다.

city_ref = db.collection("cities").document("BJ")
await city_ref.update({"capital": firestore.DELETE_FIELD})snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L687-L688]

C++
FieldValue::Delete() 메서드를 사용합니다.
DocumentReference doc_ref = db->Collection("cities").Document("BJ");
doc_ref.Update({{"capital", FieldValue::Delete()}})
.OnCompletion([](const Future<void>& future) { /*...*/ });snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L408-L410]

Node.js
FieldValue.delete() 메서드를 사용합니다.

firestore.Delete 메서드를 사용합니다.

import (
"context"
"log"

"cloud.google.com/go/firestore"

func deleteField(ctx context.Context, client *firestore.Client) error {
_, err := client.Collection("cities").Doc("BJ").Update(ctx, []firestore.Update{
Path:  "capital",
Value: firestore.Delete [https://cloud.google.com/go/docs/reference/cloud.google.com/go/firestore/latest/index.html?hl=ko#cloud_google_com_go_firestore_Delete_ServerTimestamp],
FieldValue::deleteField() 메서드를 사용합니다.

$cityRef = $db->collection('samples/php/cities')->document('BJ');
$cityRef->update([
['path' => 'capital', 'value' => FieldValue::deleteField()]
]);data_delete_field.php [https://github.com/GoogleCloudPlatform/php-docs-samples/blob/8a7d6cc0fb91ce79a9c333088cdfce226b13069c/firestore/src/data_delete_field.php#L41-L44]

Unity
FieldValue.Delete 메서드를 사용합니다.
DocumentReference cityRef = db.Collection("cities").Document("BJ");
Dictionary<string, object> updates = new Dictionary<string, object>
FieldValue.Delete 메서드를 사용합니다.

DocumentReference cityRef = db.Collection("cities").Document("BJ");
Dictionary<string, object> updates = new Dictionary<string, object>
firestore.field_delete 메서드를 사용합니다.

city_ref = firestore.doc "#{collection_path}/BJ"
city_ref.update({ capital: firestore.field_delete })delete_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/delete_data.rb#L36-L37]

컬렉션 삭제

Firestore에서 전체 컬렉션 또는 하위 컬렉션을 삭제하려면 컬렉션 또는 하위 컬렉션에 포함된 모든 문서를 검색(읽기)하여 삭제합니다. 이 프로세스에는 읽기 및 삭제 비용이 모두 발생합니다. 컬렉션의 규모가 큰 경우 문서를 조금씩 나누어 삭제하면 메모리 부족 오류를 방지할 수 있습니다. 전체 컬렉션 또는 하위 컬렉션이 삭제될 때까지 이 과정을 반복하세요.

컬렉션을 삭제하려면 제한되지 않은 개별 삭제 요청 수를 조정해야
합니다. 전체 컬렉션은 신뢰할 수 있는 서버
환경에서만 삭제하세요. 모바일 또는 웹 클라이언트에서도 컬렉션을 삭제할 수 있지만, 이 경우 보안 및 성능에 부정적인 영향을 미칩니다.

아래의 스니펫은 다소 단순화되어 있으므로 오류 처리, 보안, 하위 컬렉션 삭제 또는 성능 극대화에 대해서는 다루지 않습니다. 프로덕션 환경에서 컬렉션을 삭제하는 한 가지 추천 방법에 대한 자세한 내용은 컬렉션 및 하위 컬렉션 삭제 [https://cloud.google.com/firestore/native/docs/solutions/delete-collections?hl=ko]를 참조하세요.

웹

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

KotlinAndroid
클라이언트에서 컬렉션 삭제는 권장되지 않습니다.

Java

/**
* Delete a collection in batches to avoid out-of-memory errors. Batch size may be tuned based on
* document size (atmost 1MB) and application requirements.
*/
void deleteCollection(CollectionReference collection, int batchSize) {
try {
ApiFuture<QuerySnapshot> future = collection.limit(batchSize).get();
int deleted = 0;
List<QueryDocumentSnapshot> documents = future.get().getDocuments();
for (QueryDocumentSnapshot document : documents) {
System.err.println("Error deleting collection : " + e.getMessage());

def delete_collection(coll_ref, batch_size):
if batch_size == 0:
return

docs = coll_ref.list_documents(page_size=batch_size)
deleted = 0

for doc in docs:
print(f"Deleting doc {doc.id} => {doc.get().to_dict()}")
doc.delete()
deleted = deleted + 1

if deleted >= batch_size:
return delete_collection(coll_ref, batch_size)
snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-client/snippets.py#L842-L856]

Python(비동기)

async def delete_collection(coll_ref, batch_size):
docs = coll_ref.limit(batch_size).stream()
deleted = 0

async for doc in docs:
print(f"Deleting doc {doc.id} => {doc.to_dict()}")
await doc.reference.delete()
deleted = deleted + 1

if deleted >= batch_size:
return delete_collection(coll_ref, batch_size)
snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/ef29ddd43c1e15bf25703c7991fe95392e951425/firestore/cloud-async-client/snippets.py#L696-L707]

C++

async function deleteCollection(db, collectionPath, batchSize) {
return;

import (
"context"
"fmt"
"io"

"cloud.google.com/go/firestore"
"google.golang.org/api/iterator"

func deleteCollection(w io.Writer, projectID, collectionName string,
batchSize int) error {

numDeleted++
return nil

function data_delete_collection(string $projectId, string $collectionName, int $batchSize)
$collectionReference = $db->collection($collectionName);
$documents = $collectionReference->limit($batchSize)->documents();
while (!$documents->isEmpty()) {
foreach ($documents as $document) {
printf('Deleting document %s' . PHP_EOL, $document->id());
$document->reference()->delete();

private static async Task DeleteCollection(CollectionReference collectionReference, int batchSize)
QuerySnapshot snapshot = await collectionReference.Limit(batchSize).GetSnapshotAsync();
IReadOnlyList<DocumentSnapshot> documents = snapshot.Documents;
while (documents.Count > 0)
foreach (DocumentSnapshot document in documents)
documents = snapshot.Documents;

cities_ref = firestore.col collection_path
query      = cities_ref

query.get do |document_snapshot|
puts "Deleting document #{document_snapshot.document_id}."
document_ref = document_snapshot.ref
document_ref.delete
enddelete_data.rb [https://github.com/googleapis/google-cloud-ruby/blob/b053bba99aea863341b7a1c260e508c79f8eeb0a/google-cloud-firestore/samples/delete_data.rb#L48-L55]

Firebase CLI를 사용한 데이터 삭제

Firebase CLI [https://firebase.google.com/docs/cli?hl=ko]를 사용해 문서 및 컬렉션을 삭제할 수도 있습니다. 데이터를 삭제하려면 다음 명령어를 사용하세요.
참고: Firebase CLI를 사용하여 데이터를 삭제하면 읽기 및 삭제 비용이 발생합니다. 자세한 내용은 가격 책정 [https://firebase.google.com/docs/firestore/pricing?hl=ko#pricing_by_location]을 참조하세요.firebase firestore:delete [options] <<path>>

Console을 사용한 데이터 삭제

Console의 Firestore 페이지에서 문서 및 컬렉션을 삭제 [https://cloud.google.com/firestore/native/docs/using-console?hl=ko#delete_data]할 수 있습니다.
Console에서 문서를 삭제하면 하위 컬렉션을 포함하여 해당 문서의 모든 중첩된 데이터가 삭제됩니다.
참고: Firebase CLI를 사용하여 데이터를 삭제하면 읽기 및 삭제 비용이 발생합니다. 자세한 내용은 가격 책정 [https://firebase.google.com/docs/firestore/pricing?hl=ko#pricing_by_location]을 참조하세요.
TTL 정책을 사용하여 데이터 삭제

TTL 정책은 특정 필드를 특정 컬렉션 그룹의 문서 만료 시간으로 지정합니다. TTL 삭제 작업은 문서 삭제 비용에 포함됩니다.

TTL 설정에 대한 자세한 내용은 TTL 정책으로 데이터 보관 관리 [https://cloud.google.com/firestore/native/docs/ttl?hl=ko]를 참조하세요.

오류 코드 및 데이터 삭제 시 지연 시간 문제를 해결하는 방법에 대한 자세한 내용은 문제해결 페이지 [https://cloud.google.com/firestore/docs/troubleshooting?hl=ko]를 참고하세요.

Dataflow를 사용하여 데이터 삭제

Dataflow는 Firestore 데이터베이스에서 일괄 작업을 수행할 수 있는 유용한 도구입니다. Dataflow용 Firestore 커넥터 소개 블로그 게시물 [https://cloud.google.com/blog/topics/developers-practitioners/using-firestore-and-apache-beam-data-processing?hl=ko]에는 컬렉션 그룹의 모든 문서를 삭제하는 예시가 나와 있습니다.

관리형 일괄 삭제 사용

Firestore는 하나 이상의 컬렉션 그룹을 일괄 삭제하는 기능을 지원합니다.
자세한 내용은 데이터 일괄 삭제 [https://cloud.google.com/firestore/native/docs/manage-data/bulk-delete?hl=ko]를 참고하세요.

의견 보내기