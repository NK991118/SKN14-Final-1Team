Source URL: https://cloud.google.com/firestore/docs/query-data/indexing?hl=ko
Title: 색인 관리

의견 보내기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

색인 관리

Firestore를 사용하면 모든 쿼리에 색인을 요청하므로 쿼리 성능이 보장됩니다. 대부분의 기본 쿼리에 필요한 색인은 자동으로 생성 [https://cloud.google.com/firestore/docs/concepts/index-overview?hl=ko#single-field-indexes]됩니다. 앱을 사용하고 테스트할 때 Cloud Firestore는 오류 메세지를 생성합니다. 이는 앱에 필요한 추가 색인을 만드는 데 유용합니다. 이 페이지에서는 단일 필드 [https://cloud.google.com/firestore/docs/concepts/index-overview?hl=ko#single-field_indexes], 복합 [https://cloud.google.com/firestore/docs/concepts/index-overview?hl=ko#composite_indexes], [벡터][벡터] 색인을 관리하는 방법을 설명합니다.

오류 메시지를 통해 누락된 색인 생성

기존 색인에 매핑되지 않는 범위 절이 포함된 복합 쿼리를 시도하면 오류가 발생합니다. 오류 메시지에는 Firebase Console에서 누락된 색인을 만드는 직접 링크가 포함됩니다.
참고: Firebase Console 또는 Google Cloud Platform Console을 통해 Firestore를 관리할 수 있지만 이러한 링크는 항상 Firebase Console에서 열립니다.
생성된 링크를 따라 Firebase Console로 이동하고 자동으로 입력된 정보를 검토한 후 만들기를 클릭합니다.
참고: 배열과 맵이 아닌 필드의 경우, 필드와 정렬이 관련이 없더라도 오름차순 또는 내림차순 정렬을 선택해야 합니다. 이 선택은 쿼리에 포함된 등식 결과에 영향을 주지 않습니다.
벡터 색인이 필요한 경우 누락된 벡터 색인을 만드는 Google Cloud CLI 명령어가 오류 메시지에 포함됩니다. 명령어를 실행하여 누락된 색인을 만듭니다.
참고: 현재 Firebase Console 또는 Google Cloud Platform Console에서는 벡터 색인을 만들 수 없습니다.
역할 및 권한

Firestore에서 색인을 만들려면 먼저 다음 역할 중 하나를 할당받아야 합니다.
참고: 다음 역할은 Identity and Access Management(IAM)를 통해 관리됩니다. 역할 및 관련 권한에 대한 자세한 내용은 사전 정의된 역할 [https://cloud.google.com/firestore/docs/security/iam?hl=ko#predefined_roles]을 참조하세요.

roles/datastore.owner
roles/datastore.indexAdmin
roles/editor
roles/owner

커스텀 역할을 정의한 경우 다음 권한을 모두 할당하여 색인을 만듭니다.

datastore.indexes.create
datastore.indexes.delete
datastore.indexes.get
datastore.indexes.list
datastore.indexes.update

Google Cloud Platform Console 사용

Google Cloud Platform Console에서 단일 필드 색인 생성 예외와 복합 색인을 관리할 수 있습니다.

복합 색인 만들기

GCP Console에서 새 복합 색인을 수동으로 만들려면 다음 안내를 따르세요.

Google Cloud 콘솔에서 데이터베이스 페이지로 이동합니다.

데이터베이스로 이동 [https://console.cloud.google.com/firestore/databases?hl=ko]
데이터베이스 목록에서 필요한 데이터베이스를 선택합니다.
탐색 메뉴에서 색인을 클릭한 다음 복합 탭을 클릭합니다.
색인 만들기를 클릭합니다.
컬렉션 ID를 입력합니다. 색인을 생성할 필드의 이름과 각 필드의 색인 모드를 추가합니다.
색인 저장을 클릭합니다.

새 색인이 복합 색인 목록에 표시되고 Firestore에서 색인 생성을 시작합니다. 색인 생성이 완료되면 색인 옆에 녹색 체크표시가 나타납니다.

복합 색인 삭제

복합 색인을 삭제하려면 다음 안내를 따르세요.

Google Cloud 콘솔에서 데이터베이스 페이지로 이동합니다.

데이터베이스로 이동 [https://console.cloud.google.com/firestore/databases?hl=ko]
데이터베이스 목록에서 필요한 데이터베이스를 선택합니다.
탐색 메뉴에서 색인을 클릭한 다음 복합 탭을 클릭합니다.
복합 색인 목록에서 삭제할 색인의 더보기 버튼 more_vert를 클릭합니다. 삭제를 클릭합니다.
알림에서 색인 삭제를 클릭하여 이 색인을 삭제할지 여부를 확인합니다.

단일 필드 색인 예외 추가

단일 필드 색인 예외를 사용하면 컬렉션의 특정 필드에서 자동 색인 설정 [https://cloud.google.com/firestore/docs/concepts/index-overview?hl=ko#single-field-indexes]을 재정의할 수 있습니다. Console에서 단일 필드 예외를 추가할 수 있습니다.

Google Cloud 콘솔에서 데이터베이스 페이지로 이동합니다.

데이터베이스로 이동 [https://console.cloud.google.com/firestore/databases?hl=ko]
데이터베이스 목록에서 필요한 데이터베이스를 선택합니다.
탐색 메뉴에서 색인을 클릭한 후 단일 필드 탭을 클릭합니다.
예외 추가를 클릭합니다.
컬렉션 ID와 필드 경로를 입력합니다.
이 필드의 새 색인 생성 설정을 선택합니다. 이 필드에 자동으로 업데이트되는 오름차순, 내림차순, 배열 포함 단일 필드 색인을 사용 설정하거나 중지합니다.
예외 저장을 클릭합니다.

컬렉션 수준 예외 추가

컬렉션 ID 아래의 모든 필드에 적용되는 단일 필드 색인 예외를 정의하려면 다음 단계를 따르세요.

예외 추가를 클릭합니다.
컬렉션 그룹에 컬렉션 ID를 입력하고 필드 경로를 *로 설정합니다.

컬렉션 그룹의 모든 필드에 적용할 색인 생성 예외를 선택합니다.
예외 저장을 클릭합니다.

단일 필드 색인 예외 삭제

단일 필드 색인 예외를 삭제하려면 다음 안내를 따르세요.

Google Cloud 콘솔에서 데이터베이스 페이지로 이동합니다.

데이터베이스로 이동 [https://console.cloud.google.com/firestore/databases?hl=ko]
데이터베이스 목록에서 필요한 데이터베이스를 선택합니다.
탐색 메뉴에서 색인을 클릭한 후 단일 필드 탭을 클릭합니다.
단일 필드 색인 예외 목록에서 삭제할 예외의 더보기 버튼 more_vert을 클릭합니다. 삭제를 클릭합니다.
알림에서 삭제를 클릭하여 이 예외를 삭제할 것인지 확인합니다.

단일 필드 예외를 삭제하면 지정된 필드 또는 하위 필드가 상속된 색인 생성 설정을 사용합니다. 문서 필드는 데이터베이스의 자동 색인 설정으로 돌아갑니다. 매핑된 하위 필드는 자동 색인 설정을 상속하기 전에 상위 필드의 예외를 상속합니다.

Firebase CLI 사용

Firebase CLI [https://firebase.google.com/docs/cli?hl=ko]를 사용하여 색인을 배포할 수도 있습니다.
시작하려면 프로젝트 디렉터리에서 firebase init firestore를 실행하면 됩니다.
설정하는 동안 Firebase CLI에서 기본 색인을 사용한 올바른 형식의 JSON 파일을 생성합니다. 파일을 수정해 색인을 추가하고 firebase deploy 명령어를 사용해 배포합니다.

Firestore 색인과 규칙만 배포하려면 --only firestore 플래그를 추가합니다.

Firebase Console에서 색인을 수정할 경우 로컬 색인 파일도 업데이트해야 합니다. JSON 색인 정의 참조 [https://firebase.google.com/docs/reference/firestore/indexes/?hl=ko]를 참조하세요.

Terraform 사용

데이터베이스에서 색인 만들기

Firestore 데이터베이스에는 단일 필드 색인과 복합 색인이 모두 포함될 수 있습니다. Terraform 구성 파일을 수정하여 데이터베이스의 색인을 만들 수 있습니다.
단일 필드 색인과 복합 색인은 고유한 Terraform 리소스 유형을 사용합니다(google_firestore_index [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/firestore_index] 및 google_firestore_field [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/firestore_field]).

Firestore Native 모드와 Datastore 모드 색인이 모두 지원됩니다.

단일 필드 색인

다음 Terraform 구성 파일 예시에서는 chatrooms 컬렉션의 name 필드에 대한 단일 필드 색인을 만듭니다.

firestore.tf

resource "random_id" "variable"{
byte_length = 8
database = "database-id"
collection = "chatrooms_${random_id.variable.hex}"
field = "name"

index_config {
indexes {
order = "ASCENDING"
query_scope = "COLLECTION_GROUP"
database-id를 데이터베이스 ID로 바꿉니다.

복합 색인

다음 Terraform 구성 파일 예시에서는 chatrooms 컬렉션의 name 필드와 description 필드 조합에 대한 복합 색인을 만듭니다.

firestore.tf

resource "google_firestore_index" "composite-index" {
project = "project-id"
database = "database-id"

collection = "chatrooms"

fields {
field_path = "name"
order      = "ASCENDING"
order      = "DESCENDING"
database-id를 데이터베이스 ID로 바꿉니다.

벡터 색인

다음 Terraform 구성 파일 예시에서는 chatrooms 컬렉션의 embedding 필드에 대한 벡터 색인을 만듭니다.

firestore.tf

resource "google_firestore_index" "vector-index" {
project = "project-id"
database = "database-id"
collection = "chatrooms"

fields {
field_path = "__name__"
order = "ASCENDING"
vector_config {
dimension = 128
flat {}
database-id를 데이터베이스 ID로 바꿉니다.

Datastore 모드 색인

Terraform을 사용하여 데이터 스토어 모드 색인을 만들 수도 있습니다.

datastore.tf

resource "google_firestore_index" "datastore-mode-index" {
project = "project-id"
database = "database-id"

collection = "chatrooms"

fields {
field_path = "name"
order      = "ASCENDING"
order      = "DESCENDING"
api_scope   = "DATASTORE_MODE_API"

google_datastore_index 리소스는 지원 중단되었으며 terraform-provider-google 버전 6.0.0 이상에서는 사용할 수 없습니다.

이전에 google_datastore_index 리소스를 사용했다면 google_firestore_index로 마이그레이션할 수 있습니다.
다음 단계에 따라 이전할 수 있습니다.

등가 google_firestore_index 리소스를 작성합니다.
기존 Datastore 모드 색인을 새 리소스로 가져옵니다.
이전 google_datastore_index 리소스에 대한 참조를 삭제합니다.
Terraform 상태에서 이전 google_datastore_index 리소스를 삭제합니다.
terraform apply를 실행하여 변경사항을 적용합니다.

자세한 안내는 다음과 같습니다.

기존 google_datastore_index 리소스를 기반으로 대체 google_firestore_index를 작성합니다. 필요한 변경사항은 아래 [https://cloud.google.com/firestore/native/docs/query-data/indexing?hl=ko#translate-your-index]를 참고하세요.

색인의 Firestore 리소스 경로를 확인합니다.
export INDEX_RESOURCE_PATH=$(echo '"projects/${google_datastore_index.datastore-index-resource-name.project}/databases/(default)/collectionGroups/${google_datastore_index.datastore-index-resource-name.kind}/indexes/${google_datastore_index.datastore-index-resource-name.index_id}"' | terraform console | tr -d '"')

datastore-index-resource-name을 기존 리소스의 Terraform 이름으로 바꿉니다.

위에서 만든 google_firestore_index 리소스에 기존 Datastore 모드 색인을 가져옵니다.
terraform import google_firestore_index.firestore-index-resource-name $INDEX_RESOURCE_PATH

firestore-index-resource-name을 기존 리소스의 Terraform 이름으로 바꿉니다.

Firestore 색인 리소스 가져오기에 관한 자세한 내용은 google_firestore_index 참조 문서 [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/firestore_index#import]를 참고하세요.

Terraform 구성 파일에서 기존 google_datastore_index 리소스를 삭제합니다.

Terraform 상태에서 기존 google_datastore_index 리소스를 삭제합니다.
terraform state rm google_datastore_index.datastore-index-resource-name

리소스 삭제에 관한 자세한 내용은 Terraform의 리소스 삭제 [https://developer.hashicorp.com/terraform/language/resources/syntax#removing-resources] 페이지를 참고하세요.

terraform plan를 실행합니다. 출력을 확인하여 리소스를 만들거나 폐기하지 않는지 확인합니다.

출력을 검사하여 가져오기가 성공적으로 완료되었는지 확인합니다. 출력에 변경된 필드가 표시되면 변경사항이 의도한 것인지 확인합니다. 출력에 다음과 유사한 줄이 포함된 경우 다음을 수행합니다.

google_firestore_index.firestore-index-resource-name must be replaced

Terraform 구성 파일을 검사하여 오류가 있는지 확인합니다.
경고: 교체가 필요한 색인 리소스 또는 삭제되는 색인 리소스가 표시되면 terraform apply를 실행하지 마세요. 이렇게 하면 색인이 손실되어 애플리케이션의 다운타임이 발생할 수 있습니다.
Terraform 계획 출력에 만족하면 다음을 실행합니다.
terraform apply

색인 번역

google_datastore_index 리소스를 상응하는 google_firestore_index 리소스로 변환하려면 리소스를 복사하고 다음과 같이 변경합니다.

google_datastore_index를 google_firestore_index로 바꿉니다.
인수 이름 kind을 collection로 바꾸되 인수 값은 동일하게 유지합니다.
인수 이름 ancestor을 query_scope로 바꿉니다. 인수 값 ALL_ANCESTORS를 COLLECTION_RECURSIVE로 바꾸고 다른 값은 COLLECTION_GROUP로 바꿉니다. ancestor 인수가 없으면 값이 COLLECTION_GROUP인 query_scope 인수를 추가합니다.
값이 DATASTORE_MODE_API인 api_scope 인수를 추가합니다.
properties의 각 인스턴스를 상응하는 fields 인스턴스로 바꿉니다. name의 각 인스턴스를 field_path로 바꾸고 direction의 각 인스턴스를 order로 바꿉니다.

예를 들어 다음 google_datastore_index 리소스를 살펴보세요.

datastore.tf

resource "google_datastore_index" "legacy" {
kind = "foo"

properties {
name = "property_a"
direction = "ASCENDING"
direction = "ASCENDING"

collection = "foo"

api_scope = "DATASTORE_MODE_API"

fields {
field_path = "property_a"
order  = "ASCENDING"
order = "ASCENDING"

그러나 describe 명령어에 작업 이름을 지정할 때 프리픽스를 생략할 수 있습니다.

모든 장기 실행 작업 나열

장기 실행 작업을 나열하려면 gcloud firestore operations list [https://cloud.google.com/sdk/gcloud/reference/firestore/operations/list?hl=ko] 명령어를 사용합니다. 이 명령어는 진행 중인 작업과 최근에 완료된 작업을 나열합니다.
작업은 완료 후 며칠 동안 나열됩니다.

gcloud firestore operations list

작업 상태 확인

장기 실행 작업을 모두 나열하는 대신 단일 작업의 세부정보를 나열할 수 있습니다.

gcloud firestore operations describe operation-name

완료 시간 예상

작업이 실행되면 state 필드 [https://cloud.google.com/firestore/native/docs/reference/rpc/google.firestore.admin.v1?hl=ko#state] 값을 통해 작업의 전체 상태를 확인할 수 있습니다.

또한 장기 실행 작업 상태를 요청하면 workEstimated 및 workCompleted 측정항목이 반환됩니다. 이러한 측정항목은 문서 수에 따라 반환됩니다. workEstimated는 작업에서 처리할 것으로 예상되는 총 문서 수를 나타냅니다. workCompleted는 현재까지 처리된 문서 수를 나타냅니다. 작업이 완료되면 workCompleted에 실제로 처리된 총 문서 수가 반영되며 이는 workEstimated 값과 다를 수 있습니다.

workCompleted를 workEstimated로 나누면 예상 진행도를 대략적으로 추정할 수 있습니다. 이 예상치는 통계 수집 지연으로 인해 부정확할 수 있습니다.

예를 들어 색인 빌드의 진행 상태는 다음과 같습니다.

"operations": [
"name": "projects/project-id/operations/AyAyMDBiM2U5NTgwZDAtZGIyYi0zYjc0LTIzYWEtZjg1ZGdWFmZWQHEjF0c2Flc3UtcmV4ZWRuaS1uaW1kYRUKSBI",
"metadata": {
"@type": "type.googleapis.com/google.firestore.admin.v1.IndexOperationMetadata",
"common": {
"operationType": "CREATE_INDEX",
"startTime": "2020-06-23T16:52:25.697539Z",
"state": "PROCESSING"