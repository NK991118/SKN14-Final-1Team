Source URL: https://cloud.google.com/firestore/docs/data-model?hl=ko
Title: 데이터 모델

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.

의견 보내기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

데이터 모델

Firestore는 NoSQL 문서 중심의 데이터베이스입니다. SQL Database와 달리 테이블이나 행이 없으며, 컬렉션으로 정리되는
문서에 데이터를 저장합니다.

각 문서에는 키-값 쌍이 있습니다. Firestore는 작은 문서가 많이 있는 컬렉션을 저장하는 데 최적화되어 있습니다.

모든 문서는 컬렉션에 저장되어야 합니다. 문서는 하위 컬렉션과 중첩 개체를 포함할 수 있으며, 둘 다 모두 문자열과 같은 기본형 필드나 목록과 같은 복합 객체를 포함할 수 있습니다.

컬렉션과 문서는 Firestore에서 암시적으로 생성됩니다.
데이터를 컬렉션 내의 문서에 할당하기만 하면 됩니다. 컬렉션이나 문서가 없으면 Firestore가 이를 자동으로 만듭니다.

문서

Firestore의 스토리지 단위는 문서입니다. 문서는 값에 매핑되는 필드가 포함된 간단한 레코드입니다. 각 문서는 이름으로 식별됩니다.

사용자 alovelace를 나타내는 문서는 다음과 같이 구성될 수 있습니다.

class alovelace

first : "Ada"
last : "Lovelace"
born : 1815

참고: Firestore는 부울, 숫자, 문자열, 지리 좌표, 바이너리 blob, 타임스탬프 등의 다양한 데이터 유형 값을 지원합니다. 배열을 사용하거나 '맵'이라고 하는 중첩 객체를 사용하여 문서 내에서 데이터를 구조화할 수도 있습니다.
문서의 복잡한 중첩된 객체를 맵이라고 합니다. 예를 들어 위의 예시에서 사용자 이름을 다음과 같이 맵으로 구조화할 수 있습니다.

class alovelace

name :
first : "Ada"
last : "Lovelace"
born : 1815

문서가 JSON과 매우 비슷해졌는데, 사실 기본적으로는 JSON과 유사합니다.
문서가 추가적인 데이터 유형을 지원하고 크기가 1MB로 제한되는 등의 몇 가지 차이점이 있기는 하지만, 일반적으로는 문서를 간단한 JSON 레코드로 취급해도 무방합니다.

컬렉션

문서는 단순히 문서의 컨테이너인 컬렉션에 저장됩니다. 예를 들어 각각 문서로 표현되는 여러 사용자를 포함하는 users 컬렉션이 있을 수 있습니다.

collections_bookmark users

class alovelace

first : "Ada"
last : "Lovelace"
born : 1815
class aturing

first : "Alan"
last : "Turing"
born : 1912

Firestore는 스키마를 사용하지 않으므로 각 문서에 어떤 필드를 넣을지와 각 필드에 어떤 유형의 데이터를 저장할지는 완전히 사용자의 재량입니다.
같은 컬렉션에 포함된 여러 문서는 서로 다른 필드를 포함하거나 서로 다른 유형의 데이터를 필드에 저장할 수 있습니다. 그러나 문서를 보다 쉽게
쿼리할 수 있도록 여러 문서에서 동일한 필드와 데이터 유형을 사용하는 것이
좋습니다.

컬렉션은 오로지 문서만 포함합니다. 값이 있는 원시 필드를 직접 포함할 수 없고 다른 컬렉션을 포함할 수도 없습니다. Firestore에서 보다 복잡한 데이터를 구조화하는 방법은 계층적 데이터 [https://cloud.google.com/firestore/native/docs/data-model?hl=ko#hierarchical-data]를 참조하세요.

컬렉션 내의 문서 이름은 고유합니다. 사용자 ID와 같은 고유한 키를 제공하거나 Firestore에서 임의 ID를 자동으로 만들도록 할 수 있습니다.

컬렉션을 '생성' 또는 '삭제'할 필요는 없습니다. 컬렉션에
첫 번째 문서를 만들면 컬렉션이 생성됩니다. 컬렉션의 모든 문서를
삭제하면 컬렉션도 삭제됩니다.

참조

Firestore의 모든 문서는 데이터베이스 내 위치에 따라 고유하게 식별됩니다. 앞의 예시의 alovelace 문서는 users 컬렉션에 속했습니다. 코드에서 이 위치를 참조하려면 위치를 가리키는 참조를 만드세요.

웹 버전 9
import { doc } from "firebase/firestore";

const alovelaceDocumentRef = doc(db, 'users', 'alovelace');doc_reference.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/doc_reference.js#L8-L10]

웹 버전 8

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
var alovelaceDocumentRef = db.collection('users').doc('alovelace');test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L195-L195]

Swift

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

let alovelaceDocumentRef = db.collection("users").document("alovelace")ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L227-L227]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *alovelaceDocumentRef =
[[self.db collectionWithPath:@"users"] documentWithPath:@"alovelace"];ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L170-L171]

KotlinAndroid
val alovelaceDocumentRef = db.collection("users").document("alovelace")DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L213-L213]

자바Android
DocumentReference alovelaceDocumentRef = db.collection("users").document("alovelace");DocSnippets.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L259-L259]

Dart
final alovelaceDocumentRef = db.collection("users").doc("alovelace");firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L85-L85]

자바

// Reference to a document with id "alovelace" in the collection "users"
DocumentReference document = db.collection("users").document("alovelace");References.java [https://github.com/googleapis/java-firestore/blob/02c1372447e22b3e635f5997ce9a6113144b3734/samples/snippets/src/main/java/com/example/firestore/snippets/References.java#L52-L53]

Python

a_lovelace_ref = db.collection("users").document("alovelace")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-client/snippets.py#L280-L280]

Python(비동기)

a_lovelace_ref = db.collection("users").document("alovelace")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-async-client/snippets.py#L275-L275]

C++
DocumentReference alovelace_document_reference =
db->Collection("users").Document("alovelace");snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L45-L46]

Node.js

const alovelaceDocumentRef = db.collection('users').doc('alovelace');index.js [https://github.com/firebase/snippets-node/blob/f1869eeb97c2bbb713aff3deb5a67666da7bcb6b/firestore/main/index.js#L132-L132]

Go

import (
"cloud.google.com/go/firestore"
)

func createDocReference(client *firestore.Client) {

alovelaceRef := client.Collection("users").Doc("alovelace")

_ = alovelaceRef
}
retrieve_data_reference_document.go [https://github.com/GoogleCloudPlatform/golang-samples/blob/1420c71e05f2a1aef5eb07e90da7294ffe82a75c/firestore/retrieve_data_reference_document.go#L18-L29]

PHP

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$document = $db->collection('samples/php/users')->document('alovelace');

Unity
DocumentReference documentRef = db.Collection("users").Document("alovelace");

C#

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

DocumentReference documentRef = db.Collection("users").Document("alovelace");

Ruby

document_ref = firestore.col("users").doc("alovelace")data_model.rb [https://github.com/googleapis/google-cloud-ruby/blob/17e1723270824384f648d9a49a2edd6f6647ff6f/google-cloud-firestore/samples/data_model.rb#L22-L22]

참조는 데이터베이스의 특정 위치를 가리키는 간단한 객체입니다. 해당 위치에 데이터가 있는지 여부에 관계없이 참조를
만들 수 있으며, 참조를 만들어도 네트워크 작업이 수행되지 않습니다.

컬렉션을 가리키는 참조를 만들 수도 있습니다.

웹 버전 9
import { collection } from "firebase/firestore";

const usersCollectionRef = collection(db, 'users');collection_reference.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/collection_reference.js#L8-L10]

웹 버전 8

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
var usersCollectionRef = db.collection('users');test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L201-L201]

Swift

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

let usersCollectionRef = db.collection("users")ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L232-L232]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRCollectionReference *usersCollectionRef = [self.db collectionWithPath:@"users"];ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L175-L175]

KotlinAndroid
val usersCollectionRef = db.collection("users")DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L219-L219]

자바Android
CollectionReference usersCollectionRef = db.collection("users");DocSnippets.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L265-L265]

Dart
final usersCollectionRef = db.collection("users");firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L89-L89]

자바

// Reference to the collection "users"
CollectionReference collection = db.collection("users");References.java [https://github.com/googleapis/java-firestore/blob/02c1372447e22b3e635f5997ce9a6113144b3734/samples/snippets/src/main/java/com/example/firestore/snippets/References.java#L39-L40]

Python

users_ref = db.collection("users")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-client/snippets.py#L288-L288]

Python(비동기)

users_ref = db.collection("users")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-async-client/snippets.py#L283-L283]

C++
CollectionReference users_collection_reference = db->Collection("users");snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L50-L50]

Node.js

const usersCollectionRef = db.collection('users');index.js [https://github.com/firebase/snippets-node/blob/f1869eeb97c2bbb713aff3deb5a67666da7bcb6b/firestore/main/index.js#L136-L136]

Go

import (
"cloud.google.com/go/firestore"
)

func createCollectionReference(client *firestore.Client) {
usersRef := client.Collection("users")

_ = usersRef
}
retrieve_data_reference_collection.go [https://github.com/GoogleCloudPlatform/golang-samples/blob/1420c71e05f2a1aef5eb07e90da7294ffe82a75c/firestore/retrieve_data_reference_collection.go#L18-L28]

PHP

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$collection = $db->collection('samples/php/users');

Unity
CollectionReference collectionRef = db.Collection("users");

C#

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

CollectionReference collectionRef = db.Collection("users");

Ruby

collection_ref = firestore.col "users"data_model.rb [https://github.com/googleapis/google-cloud-ruby/blob/17e1723270824384f648d9a49a2edd6f6647ff6f/google-cloud-firestore/samples/data_model.rb#L31-L31]

참고: 컬렉션 참조 및 문서 참조는 서로 구분되는 두 가지 참조 유형으로서 서로 다른 작업을 수행하는 데 사용할 수 있습니다. 예를 들어 컬렉션 참조를 사용하면 컬렉션의 문서를 쿼리할 수 있고, 문서 참조를 사용하면 개별 문서를 읽거나 쓸 수 있습니다.
편의상 경로 구성요소를 포워드 슬래시(/)로 구분한 문자열로 문서 또는 컬렉션의 경로를 지정해 참조를 만들 수도 있습니다. 예를 들어 alovelace 문서에 대한 참조를 만드는 방법은 다음과 같습니다.

웹 버전 9
import { doc } from "firebase/firestore";

const alovelaceDocumentRef = doc(db, 'users/alovelace');doc_reference_alternative.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/doc_reference_alternative.js#L8-L10]

웹 버전 8

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
var alovelaceDocumentRef = db.doc('users/alovelace');test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L207-L207]

Swift

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

let aLovelaceDocumentReference = db.document("users/alovelace")ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L244-L244]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *aLovelaceDocumentReference =
[self.db documentWithPath:@"users/alovelace"];ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L186-L187]

KotlinAndroid
val alovelaceDocumentRef = db.document("users/alovelace")DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L233-L233]

자바Android
DocumentReference alovelaceDocumentRef = db.document("users/alovelace");DocSnippets.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L279-L279]

Dart
final aLovelaceDocRef = db.doc("users/alovelace");firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L93-L93]

자바

// Reference to a document with id "alovelace" in the collection "users"
DocumentReference document = db.document("users/alovelace");References.java [https://github.com/googleapis/java-firestore/blob/02c1372447e22b3e635f5997ce9a6113144b3734/samples/snippets/src/main/java/com/example/firestore/snippets/References.java#L65-L66]

Python

a_lovelace_ref = db.document("users/alovelace")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-client/snippets.py#L296-L296]

Python(비동기)

a_lovelace_ref = db.document("users/alovelace")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-async-client/snippets.py#L291-L291]

C++
DocumentReference alovelace_document = db->Document("users/alovelace");snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L62-L62]

Node.js

const alovelaceDocumentRef = db.doc('users/alovelace');index.js [https://github.com/firebase/snippets-node/blob/f1869eeb97c2bbb713aff3deb5a67666da7bcb6b/firestore/main/index.js#L142-L142]

Go

import (
"cloud.google.com/go/firestore"
)

func createDocReferenceFromString(client *firestore.Client) {
// Reference to a document with id "alovelace" in the collection "users"
alovelaceRef := client.Doc("users/alovelace")

_ = alovelaceRef
}
retrieve_data_reference_document_path.go [https://github.com/GoogleCloudPlatform/golang-samples/blob/1420c71e05f2a1aef5eb07e90da7294ffe82a75c/firestore/retrieve_data_reference_document_path.go#L18-L29]

PHP

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$document = $db->document('users/alovelace');

Unity
DocumentReference documentRef = db.Document("users/alovelace");

C#

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

DocumentReference documentRef = db.Document("users/alovelace");

Ruby

document_path_ref = firestore.doc "users/alovelace"data_model.rb [https://github.com/googleapis/google-cloud-ruby/blob/17e1723270824384f648d9a49a2edd6f6647ff6f/google-cloud-firestore/samples/data_model.rb#L40-L40]

계층적 데이터

Firestore의 계층적 데이터 구조를 이해하도록 메시지와 채팅방을 갖춘 채팅 앱 예시를 가정해 보겠습니다.

다음과 같이 채팅방을 여러 개 저장하는 rooms라는 컬렉션을 만들 수 있습니다.

collections_bookmark rooms

class roomA

name : "my chat room"
class roomB

...

이제 채팅방이 생겼으므로 메시지를 저장할 방법을 결정해야 합니다. 채팅방 문서에 저장하지 않는 것이 좋습니다. Firestore의 문서는 가벼워야 하는데 채팅방에 매우 많은 메시지가 포함될 수 있기 때문입니다.
그러나 채팅방 문서에 하위 컬렉션을 추가로 만들 수 있습니다.

하위 컬렉션

이 시나리오에서 메시지를 저장하는 가장 좋은 방법은 하위 컬렉션을 사용하는 것입니다. 하위 컬렉션은 특정 문서와 관련된 컬렉션입니다.
참고: 컬렉션 그룹 쿼리 [https://cloud.google.com/firestore/native/docs/query-data/queries?hl=ko#collection-group-query]를 사용하면 컬렉션 ID가 동일한 하위 컬렉션 전체를 쿼리할 수 있습니다.
rooms 컬렉션의 모든 채팅방 문서에 messages라는 하위 컬렉션을 만들 수 있습니다.

collections_bookmark rooms

class roomA

name : "my chat room"

collections_bookmark
messages

class
message1

from : "alex"
msg : "Hello World!"
class
message2

...

class roomB

...

이 예시에서는 다음 코드를 사용하여 하위 컬렉션의 메시지에 대한 참조를 만들 수 있습니다.

웹 버전 9
import { doc } from "firebase/firestore";

const messageRef = doc(db, "rooms", "roomA", "messages", "message1");subcollection_reference.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/firestore-next/test-firestore/subcollection_reference.js#L8-L10]

웹 버전 8

트리 쉐이킹 작업이 가능한 모듈식 웹 API에 대해 자세히 알아보고 [https://firebase.google.com/docs/web/learn-more?hl=ko#modular-version] 네임스페이스화된 API에 비해 갖는 이점을 살펴보세요.
var messageRef = db.collection('rooms').doc('roomA')
.collection('messages').doc('message1');test.firestore.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/firestore/test.firestore.js#L213-L214]

Swift

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

let messageRef = db
.collection("rooms").document("roomA")
.collection("messages").document("message1")ViewController.swift [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/swift/firestore-smoketest/ViewController.swift#L237-L239]

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

FIRDocumentReference *messageRef =
[[[[self.db collectionWithPath:@"rooms"] documentWithPath:@"roomA"]
collectionWithPath:@"messages"] documentWithPath:@"message1"];ViewController.m [https://github.com/firebase/snippets-ios/blob/cdce007fedb3bb90dd3a70ce03066178236e1deb/firestore/objc/firestore-smoketest-objc/ViewController.m#L179-L181]

KotlinAndroid
val messageRef = db
.collection("rooms").document("roomA")
.collection("messages").document("message1")DocSnippets.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/kotlin/DocSnippets.kt#L225-L227]

자바Android
DocumentReference messageRef = db
.collection("rooms").document("roomA")
.collection("messages").document("message1");DocSnippets.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/firestore/app/src/main/java/com/google/example/firestore/DocSnippets.java#L271-L273]

Dart
final messageRef = db
.collection("rooms")
.doc("roomA")
.collection("messages")
.doc("message1");firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L99-L103]

자바

// Reference to a document in subcollection "messages"
DocumentReference document =
db.collection("rooms").document("roomA").collection("messages").document("message1");References.java [https://github.com/googleapis/java-firestore/blob/02c1372447e22b3e635f5997ce9a6113144b3734/samples/snippets/src/main/java/com/example/firestore/snippets/References.java#L78-L80]

Python

room_a_ref = db.collection("rooms").document("roomA")
message_ref = room_a_ref.collection("messages").document("message1")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-client/snippets.py#L305-L306]

Python(비동기)

room_a_ref = db.collection("rooms").document("roomA")
message_ref = room_a_ref.collection("messages").document("message1")snippets.py [https://github.com/GoogleCloudPlatform/python-docs-samples/blob/5426f6198e20bb76f4b0d005d2e2f26449b4f5d8/firestore/cloud-async-client/snippets.py#L300-L301]

C++
DocumentReference message_reference = db->Collection("rooms")
.Document("roomA")
.Collection("messages")
.Document("message1");snippets.cpp [https://github.com/firebase/snippets-cpp/blob/778b6bcc8e8e8fcabb1c2e3a8d11ab51a26aa77b/firestore/android/FirestoreSnippetsCpp/app/src/main/cpp/snippets.cpp#L55-L58]

Node.js

const messageRef = db.collection('rooms').doc('roomA')
.collection('messages').doc('message1');index.js [https://github.com/firebase/snippets-node/blob/f1869eeb97c2bbb713aff3deb5a67666da7bcb6b/firestore/main/index.js#L146-L147]

Go

import (
"cloud.google.com/go/firestore"
)

func createSubcollectionReference(client *firestore.Client) {
messageRef := client.Collection("rooms").Doc("roomA").
Collection("messages").Doc("message1")

_ = messageRef
}
retrieve_data_reference_subcollection.go [https://github.com/GoogleCloudPlatform/golang-samples/blob/1420c71e05f2a1aef5eb07e90da7294ffe82a75c/firestore/retrieve_data_reference_subcollection.go#L18-L29]

PHP

PHP

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

$document = $db
->collection('rooms')
->document('roomA')
->collection('messages')
->document('message1');

Unity
DocumentReference documentRef = db
.Collection("Rooms").Document("RoomA")
.Collection("Messages").Document("Message1");

C#

C#

Firestore에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
자세한 내용은 로컬 개발 환경의 인증 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.

DocumentReference documentRef = db
.Collection("Rooms").Document("RoomA")
.Collection("Messages").Document("Message1");

Ruby

message_ref = firestore.col("rooms").doc("roomA").col("messages").doc("message1")data_model.rb [https://github.com/googleapis/google-cloud-ruby/blob/17e1723270824384f648d9a49a2edd6f6647ff6f/google-cloud-firestore/samples/data_model.rb#L49-L49]

컬렉션과 문서가 교대로 나타나는 패턴에 주목하세요. 컬렉션과 문서는
항상 이 패턴을 따라야 합니다. 컬렉션에 속한 컬렉션이나 문서에 속한 문서는
참조할 수 없습니다.

하위 컬렉션을 사용하여 데이터를 계층적으로 구조화하면 데이터에 쉽게 액세스할 수 있습니다. roomA의 모든 메시지를 가져오려면 하위 컬렉션 messages에 대한 컬렉션 참조를 만들고 다른 컬렉션 참조와 같은 방식으로 상호작용하면 됩니다.

하위 컬렉션의 문서도 하위 컬렉션을 포함할 수 있으므로 데이터를 더 중첩할 수 있습니다. 데이터는 최대 100레벨 깊이까지 중첩할 수 있습니다.
경고: 문서를 삭제해도 하위 컬렉션은 삭제되지 않습니다.하위 컬렉션이 있는 문서를 삭제해도 하위 컬렉션은 삭제되지 않습니다. 예를 들어 coll/doc 문서가 더 이상 존재하지 않더라도 coll/doc/subcoll/subdoc에는 문서가 있을 수 있습니다. 상위 문서를 삭제할 때 하위 컬렉션의 문서도 삭제하려면 컬렉션 삭제 [https://cloud.google.com/firestore/native/docs/manage-data/delete-data?hl=ko#collections]에 설명된 대로 직접 삭제해야 합니다.

의견 보내기