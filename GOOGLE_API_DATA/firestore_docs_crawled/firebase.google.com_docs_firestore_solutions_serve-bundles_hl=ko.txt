Source URL: https://firebase.google.com/docs/firestore/solutions/serve-bundles?hl=ko
Title: CDN에서 번들된 Firestore 콘텐츠 제공

의견 보내기

CDN에서 번들된 Firestore 콘텐츠 제공

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

대부분의 애플리케이션에서는 페이지가 처음 로드될 때 모든 사용자에게 동일한 콘텐츠를 제공합니다. 예를 들어 뉴스 사이트에 최신 뉴스를 보여주거나 전자상거래 사이트에서 가장 잘 팔리는 상품을 보여주는 경우입니다.

이 콘텐츠가 Cloud Firestore에서 제공된다면 각 사용자는 애플리케이션을 로드할 때 동일한 결과를 위해 새 쿼리를 실행합니다. 이러한 결과는 사용자 간에 캐시되지 않으므로 애플리케이션은 필요한 것보다 느리고 비용이 많이 발생합니다.

솔루션: 번들

Cloud Firestore 번들을 사용하면 Firebase Admin SDK를 사용하여 백엔드의 일반적인 쿼리 결과에서 데이터 번들을 조합할 수 있으며 CDN에 캐시된 사전 계산된 blob을 제공할 수 있습니다. 이를 통해 사용자에게 훨씬 빠른 로드 환경을 제공하고 Cloud Firestore 쿼리 비용을 줄일 수 있습니다.

이 가이드에서는 Cloud Functions를 사용하여 번들을 생성하고 Firebase Hosting을 사용하여 번들 콘텐츠를 동적으로 캐싱하고 제공합니다. 번들에 대한 자세한 내용은 가이드 [https://firebase.google.com/docs/firestore/bundles?hl=ko]를 참조하세요.

먼저 간단한 공개 HTTP 함수를 만들어 최근 50개의 '뉴스'를 쿼리하고 결과를 번들로 제공합니다.

Node.js
exports.createBundle = functions.https.onRequest(async (request, response) => {

response.end(bundleBuffer);

package com.example;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.FirestoreBundle;
import com.google.cloud.firestore.Query.Direction;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.cloud.functions.HttpFunction;
import com.google.cloud.functions.HttpRequest;
import com.google.cloud.functions.HttpResponse;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;
import java.io.BufferedWriter;
import java.io.IOException;

public class ExampleFunction implements HttpFunction {

public static FirebaseApp initializeFirebase() throws IOException {
if (FirebaseApp.getApps().isEmpty()) {
FirebaseOptions options = FirebaseOptions.builder()
.setCredentials(GoogleCredentials.getApplicationDefault())
.setProjectId("YOUR-PROJECT-ID")
.build();

FirebaseApp.initializeApp(options);
FirebaseApp app = initializeFirebase();
Firestore db = FirestoreClient.getFirestore(app);

QuerySnapshot latestStories = db.collection("stories")
.orderBy("timestamp", Direction.DESCENDING)
.limit(50)
.get()
.get();

FirestoreBundle bundle = db.bundleBuilder("latest-stores")
.add("latest-stories-query", latestStories)
.build();

BufferedWriter writer = response.getWriter();
writer.write(new String(bundle.toByteBuffer().array()));
"hosting": {
import "firebase/firestore";
import "firebase/firestore/bundle" // This line enables bundle loading as a side effect.

async function fetchFromBundle() {