Source URL: https://cloud.google.com/firestore/docs/create-database-web-mobile-client-library?hl=ko
Title: 웹 또는 모바일 클라이언트 라이브러리를 사용하여 Firestore 데이터베이스 만들기

의견 보내기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

웹 또는 모바일 클라이언트 라이브러리를 사용하여 Firestore 데이터베이스 만들기

이 빠른 시작에서는 Android, Apple 플랫폼, 웹, Unity 또는 C++ 클라이언트 라이브러리를 사용하여 Firestore를 설정하고, 데이터를 추가하고, 데이터를 읽는 방법을 설명합니다.
참고: 이 빠른 시작에서는 Google Cloud 콘솔 대신 Firebase 콘솔을 사용합니다.

Firebase 프로젝트를 아직 만들지 않았다면 Firebase Console [https://console.firebase.google.com/?hl=ko]에서 프로젝트 추가를 클릭한 후 화면에 표시된 안내에 따라 Firebase 프로젝트를 만들거나 기존 Google Cloud 프로젝트에 Firebase 서비스를 추가합니다.
Firebase Console에서 프로젝트를 엽니다. 왼쪽 패널에서 빌드를 펼친 다음 Firestore 데이터베이스 [https://console.firebase.google.com/project/_/firestore/?hl=ko]를 선택합니다.
데이터베이스 만들기를 클릭합니다.
데이터베이스의 위치 [https://cloud.google.com/firestore/docs/locations?hl=ko#types]를 선택합니다.

위치를 선택할 수 없다면 프로젝트의 '기본 Google Cloud 리소스의 위치' [https://cloud.google.com/firestore/docs/locations?hl=ko#default-cloud-location]가 이미 설정된 것입니다. 일부 프로젝트 리소스 (예: 기본 Firestore 인스턴스)는 공통 위치 종속 항목을 공유하며, 위치는 프로젝트 생성 중이나 이 위치 종속 항목을 공유하는 다른 서비스를 설정할 때 설정할 수 있습니다.
Firestore 보안 규칙의 시작 모드를 선택합니다.

테스트 모드
모바일 및 웹 클라이언트 라이브러리를 시작할 때 유용하지만 모든 사용자가 데이터를 읽고 덮어쓸 수 있습니다. 테스트 완료 후 데이터 보안 [https://cloud.google.com/firestore/native/docs/create-database-web-mobile-client-library?hl=ko#secure_your_data] 섹션을 검토해야 합니다.
웹, Apple 플랫폼 또는 Android SDK를 시작하려면 테스트 모드를 선택하세요.
잠금 모드
모바일 및 웹 클라이언트의 모든 읽기 및 쓰기를 거부합니다.
인증된 애플리케이션 서버(C#, Go, 자바, Node.js, PHP, Python, Ruby)에서는 사용자의 데이터베이스에 계속 액세스할 수 있습니다.
C#, Go, 자바, Node.js, PHP, Python 또는 Ruby 서버 클라이언트 라이브러리를 시작하려면 잠금 모드를 선택하세요.

Firestore 보안 규칙의 초기 집합이 기본 Firestore 데이터베이스에 적용됩니다. 프로젝트에 여러 데이터베이스를 만드는 경우 각 데이터베이스에 Firestore 보안 규칙을 배포할 수 있습니다.
만들기를 클릭합니다.

Firestore와 App Engine:
동일한 App Engine 앱에서 Firestore와 Datastore를 모두 사용할 수는 없습니다. App Engine과 함께 Datastore를 사용해야 하는 경우 다른 프로젝트에서 Firestore를 사용하는 것이 좋습니다.

Firestore를 사용 설정하면 Cloud API Manager [https://console.cloud.google.com/projectselector/apis/api/firestore.googleapis.com/overview?hl=ko]의 API도 사용 설정됩니다.

개발 환경 설정

필요한 종속 항목 및 클라이언트 라이브러리를 앱에 추가하세요.

웹 버전 9

안내에 따라 Firebase를 웹 앱에 추가 [https://firebase.google.com/docs/web/setup?hl=ko]합니다.

Firebase와 Firestore를 모두 가져옵니다.
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

간소화된 Firestore 라이브러리를 찾고 있고 간단한 REST/CRUD 기능만 필요하신가요? npm을 통해서만 사용할 수 있는 Firestore Lite SDK [https://firebase.google.com/docs/firestore/solutions/firestore-lite?hl=ko]를 사용해 보세요.

웹 버전 8

안내에 따라 Firebase를 웹 앱에 추가 [https://firebase.google.com/docs/web/setup?hl=ko]합니다.

Firebase와 Firestore 라이브러리를 앱에 추가합니다.
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
Firestore SDK는 npm 패키지로도 제공됩니다.
npm install firebase@8.10.1 --save
Firebase와 Firestore를 모두 수동으로 요청해야 합니다.

Apple 플랫폼

안내에 따라 Firebase를 Apple 앱에 추가 [https://firebase.google.com/docs/ios/setup?hl=ko]합니다.

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Swift Packages(Swift 패키지) > Add Package Dependency(패키지 종속 항목 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firestore 라이브러리를 선택합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

Android

안내에 따라 Firebase를 Android 앱에 추가 [https://firebase.google.com/docs/android/setup?hl=ko]합니다.
모듈(앱 수준) Gradle 파일(일반적으로 app/build.gradle.kts 또는 app/build.gradle)에서 Android용 Firestore 라이브러리의 종속 항목을 선언합니다.
implementation("com.google.firebase:firebase-firestore:26.0.0")
앱에서 여러 Firebase 라이브러리를 사용하는 경우 앱의 Firebase 라이브러리 버전이 항상 호환되도록 Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하는 것이 좋습니다.
Kotlin 전용 라이브러리 모듈을 찾고 계신가요? 2023년 10월 출시 [https://firebase.google.com/support/release-notes/android?hl=ko#2023-10-10]부터 Kotlin과 Java 개발자 모두 기본 라이브러리 모듈을 사용할 수 있습니다. 자세한 내용은 이니셔티브에 관한 FAQ [https://firebase.google.com/docs/android/kotlin-migration?hl=ko]를 참조하세요.

Dart

아직 구성하지 않았다면 Flutter 앱에서 Firebase를 구성하고 초기화 [https://firebase.google.com/docs/flutter/setup?hl=ko]합니다.
Flutter 프로젝트 루트에서 다음 명령어를 실행하여 플러그인을 설치합니다.
flutter pub add cloud_firestore
완료되면 Flutter 애플리케이션을 다시 빌드합니다.
flutter run

C++

안내에 따라 Firebase를 C++ 프로젝트에 추가 [https://firebase.google.com/docs/cpp/setup?hl=ko]합니다.
Android용 C++ 인터페이스

Gradle 종속 항목 모듈(앱 수준) Gradle 파일(일반적으로 app/build.gradle)에 다음을 추가합니다.

android.defaultConfig.externalNativeBuild.cmake {
arguments "-DFIREBASE_CPP_SDK_DIR=$gradle.firebase_cpp_sdk_dir"
firestore
# Replace the target name below with the actual name of your target,
# for example, "native-lib".
target_link_libraries(${YOUR_TARGET_NAME_HERE} "${firebase_libs}")

데스크톱 통합을 설정하려면 C++ 프로젝트에 Firebase 추가 [https://firebase.google.com/docs/cpp/setup?hl=ko#desktop-workflow]를 참조하세요.

Unity

안내에 따라 Firebase를 Unity 프로젝트에 추가 [https://firebase.google.com/docs/unity/setup?hl=ko]합니다.
Unity 인터페이스를 사용하여 Android 빌드를 축소하도록 프로젝트를 구성합니다.

Error while merging dex archives 메시지를 방지하려면 빌드를 축소해야 합니다.

이 옵션은 Player Settings(플레이어 설정) > Android > Publishing Settings(게시 설정) > Minify(축소)에서 찾을 수 있습니다.

옵션은 Unity 버전에 따라 다를 수 있으므로 공식 Unity 문서 [https://docs.unity3d.com/Manual/class-PlayerSettingsAndroid.html#minify] 및 Firebase Unity 빌드 디버그 가이드 [https://firebase.google.com/docs/unity/build-debug-guide?hl=ko#single_dex_issues_and_minification_mandatory_if_using_cloud_firestore]를 참조하세요.

축소를 사용 설정한 후에도 참조된 메서드의 개수가 여전히 한도를 초과하는 경우 또 다른 옵션은 다음 파일에서 multidex를 사용 설정하는 것입니다.

Player Settings(플레이어 설정)에서 Custom Gradle Template(커스텀 Gradle 템플릿)이 사용 설정된 경우 mainTemplate.gradle

또는 Android 스튜디오를 사용하여 내보낸 프로젝트를 빌드하는 경우 모듈 수준 build.gradle 파일

기본 모드에서 Firestore 초기화

Firestore의 인스턴스를 초기화합니다.

웹 버전 9

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

import FirebaseCore
import FirebaseFirestore

FirebaseApp.configure()

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

@import FirebaseCore;
@import FirebaseFirestore;

FIRFirestore *defaultFirestore = [FIRFirestore firestore];AppDelegate.m [https://github.com/firebase/snippets-ios/blob/81f643355f68e16fa9f3f93642cdd19aa372f5fa/firestore/objc/firestore-smoketest-objc/AppDelegate.m#L32-L32]

KotlinAndroid
db = FirebaseFirestore.instance;

C++
using Firebase.Firestore;
using Firebase.Extensions;
FirebaseFirestore db = FirebaseFirestore.DefaultInstance;

데이터 추가

Firestore는 컬렉션에 저장되는 문서에 데이터를 저장합니다.
문서에 데이터를 처음 추가할 때 Firestore는 암시적으로 컬렉션과 문서를 만듭니다. 컬렉션이나 문서를 명시적으로 만들 필요가 없습니다.

다음 예시 코드를 사용해 새 컬렉션과 문서를 만듭니다.

웹 버전 9
import { collection, addDoc } from "firebase/firestore";

try {

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

NSLog(@"Error adding document: %@", error);
NSLog(@"Document added with ID: %@", ref.documentID);
KotlinAndroid
"first" to "Ada",
"last" to "Lovelace",
"born" to 1815,

.add(user)
Log.w(TAG, "Error adding document", e)
Map<String, Object> user = new HashMap<>();
user.put("first", "Ada");
user.put("last", "Lovelace");
user.put("born", 1815);

.add(user)
.addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
@Override
public void onSuccess(DocumentReference documentReference) {
Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
Log.w(TAG, "Error adding document", e);
print('DocumentSnapshot added with ID: ${doc.id}'));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L44-L53]

C++
Future<DocumentReference> user_ref =
db->Collection("users").Add({{"first", FieldValue::String("Ada")},

user_ref.OnCompletion([](const Future<DocumentReference>& future) {
if (future.error() == Error::kErrorOk) {
std::cout << "DocumentSnapshot added with ID: " << future.result()->id()
<< std::endl;
DocumentReference docRef = db.Collection("users").Document("alovelace");
Dictionary<string, object> user = new Dictionary<string, object>
Debug.Log("Added data to the alovelace document in the users collection.");

try {

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

NSLog(@"Error adding document: %@", error);
NSLog(@"Document added with ID: %@", ref.documentID);
KotlinAndroid
"first" to "Alan",
"middle" to "Mathison",
"last" to "Turing",
"born" to 1912,

.add(user)
Log.w(TAG, "Error adding document", e)
Map<String, Object> user = new HashMap<>();
user.put("first", "Alan");
user.put("middle", "Mathison");
user.put("last", "Turing");
user.put("born", 1912);

.add(user)
.addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
@Override
public void onSuccess(DocumentReference documentReference) {
Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
Log.w(TAG, "Error adding document", e);
print('DocumentSnapshot added with ID: ${doc.id}'));firestore.dart [https://github.com/firebase/snippets-flutter/blob/f674af111fe63779c39e79699f7d269231f77563/packages/firebase_snippets_app/lib/snippets/firestore.dart#L59-L69]

C++
db->Collection("users")
.Add({{"first", FieldValue::String("Alan")},
.OnCompletion([](const Future<DocumentReference>& future) {
if (future.error() == Error::kErrorOk) {
std::cout << "DocumentSnapshot added with ID: "
<< future.result()->id() << std::endl;
DocumentReference docRef = db.Collection("users").Document("aturing");
Dictionary<string, object> user = new Dictionary<string, object>
Debug.Log("Added data to the aturing document in the users collection.");

웹 버전 9
import { collection, getDocs } from "firebase/firestore";

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

do {
Objective-C

참고: 이 제품은 watchOS 및 앱 클립 대상에서 사용할 수 없습니다.

[[self.db collectionWithPath:@"users"]
getDocumentsWithCompletion:^(FIRQuerySnapshot * _Nullable snapshot,
NSError * _Nullable error) {
if (error != nil) {
NSLog(@"Error getting documents: %@", error);
NSLog(@"%@ => %@", document.documentID, document.data);
KotlinAndroid
db.collection("users")
.get()
Log.w(TAG, "Error getting documents.", exception)
.get()
.addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
@Override
public void onComplete(@NonNull Task<QuerySnapshot> task) {
if (task.isSuccessful()) {
for (QueryDocumentSnapshot document : task.getResult()) {
Log.d(TAG, document.getId() + " => " + document.getData());
Log.w(TAG, "Error getting documents.", task.getException());
await db.collection("users").get().then((event) {
for (var doc in event.docs) {
print("${doc.id} => ${doc.data()}");
Future<QuerySnapshot> users = db->Collection("users").Get();
users.OnCompletion([](const Future<QuerySnapshot>& future) {
if (future.error() == Error::kErrorOk) {
for (const DocumentSnapshot& document : future.result()->documents()) {
CollectionReference usersRef = db.Collection("users");
usersRef.GetSnapshotAsync().ContinueWithOnMainThread(task =>
QuerySnapshot snapshot = task.Result;
foreach (DocumentSnapshot document in snapshot.Documents)
Debug.Log(String.Format("User: {0}", document.Id));
Dictionary<string, object> documentDictionary = document.ToDictionary();
Debug.Log(String.Format("First: {0}", documentDictionary["First"]));
if (documentDictionary.ContainsKey("Middle"))
Debug.Log(String.Format("Middle: {0}", documentDictionary["Middle"]));
Debug.Log(String.Format("Last: {0}", documentDictionary["Last"]));
Debug.Log(String.Format("Born: {0}", documentDictionary["Born"]));
Debug.Log("Read all data from the users collection.");
Firestore 모바일 및 웹 클라이언트 라이브러리 시작하기에 대한 자세한 안내는 다음 동영상 가이드 중 하나를 참조하세요.

웹

iOS

Android

그 밖에도 많은 동영상을 Firebase YouTube 채널 [https://www.youtube.com/firebase?hl=ko]에서 확인할 수 있습니다.

다음 단계

다음 주제를 자세히 알아보세요.

Codelab - Android [https://codelabs.developers.google.com/codelabs/firestore-android?hl=ko], iOS [https://codelabs.developers.google.com/codelabs/firestore-ios?hl=ko] 또는 웹 [https://codelabs.developers.google.com/codelabs/firestore-web?hl=ko]용 Codelab의 안내를 따라 실제 앱에서 네이티브 모드의 Firestore를 사용하는 방법을 알아보세요.
데이터 모델 [https://cloud.google.com/firestore/native/docs/data-model?hl=ko] - 계층적 데이터와 하위 컬렉션을 비롯한 Firestore에서 데이터가 구조화되는 방식을 자세히 알아보세요.
데이터 추가 [https://cloud.google.com/firestore/native/docs/manage-data/add-data?hl=ko] - Firestore에서 데이터를 만들고 업데이트하는 방법을 자세히 알아보세요.
데이터 가져오기 [https://cloud.google.com/firestore/native/docs/query-data/get-data?hl=ko] - 데이터를 검색하는 방법을 자세히 알아보세요.
단순 쿼리 및 복합 쿼리 실행 [https://cloud.google.com/firestore/native/docs/query-data/queries?hl=ko] - 단순 쿼리 및 복합 쿼리 실행 방법을 알아보세요.
쿼리 순서 지정 및 제한 [https://cloud.google.com/firestore/native/docs/query-data/order-limit-data?hl=ko] - 쿼리에서 반환된 데이터의 순서를 지정하고 제한하는 방법을 알아보세요.

의견 보내기