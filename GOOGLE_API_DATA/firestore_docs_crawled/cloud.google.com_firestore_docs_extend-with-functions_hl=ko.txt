Source URL: https://cloud.google.com/firestore/docs/extend-with-functions?hl=ko
Title: Cloud Functions로 Firestore 확장

의견 보내기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Cloud Functions로 Firestore 확장

Cloud Functions를 사용하면 Firestore 데이터베이스를 변경하여 트리거되는 이벤트를 처리하는 Node.js 코드를 배포할 수 있습니다. 덕분에 자체 서버를 실행하지 않고도 앱에 서버 측 기능을 쉽게 추가할 수 있습니다.
참고: 이 페이지의 예시는 Firebase용 Cloud Functions [https://firebase.google.com/docs/functions/?hl=ko]를 사용하며 Google Cloud용 Cloud Functions와 약간 다릅니다 [https://cloud.google.com/functions/docs/concepts/functions-and-firebase?hl=ko].
사용 사례의 예시를 보려면 Cloud Functions로 무엇을 할 수 있나요? [https://firebase.google.com/docs/functions/use-cases?hl=ko] 또는 함수 샘플 [https://github.com/firebase/functions-samples] GitHub 저장소를 참조하세요.

Firestore 함수 트리거

Firebase용 Cloud Functions SDK는 특정 Firestore 이벤트에 연결된 핸들러를 만들 수 있는 functions.firestore [https://firebase.google.com/docs/reference/functions/firebase-functions.firestore?hl=ko] 객체를 내보냅니다.

| 이벤트 유형 | 트리거 |
| --- | --- |
| onCreate | 문서를 처음으로 기록할 때 트리거됩니다. |
| onUpdate | 이미 존재하는 문서에서 값이 변경되었을 때 트리거됩니다. |
| onDelete | 데이터가 있는 문서가 삭제되면 트리거됩니다. |
| onWrite | onCreate, onUpdate 또는 onDelete가 트리거될 때 트리거됩니다. |
참고: Firestore 이벤트는 문서 변경 시에만 트리거됩니다. 데이터가 변경되지 않는 Firestore 문서를 업데이트(노옵스(no-ops) 쓰기)할 때에는 업데이트 또는 쓰기 이벤트가 생성되지 않습니다. 특정 필드에 이벤트를 추가할 수 없습니다.
Firebase용 Cloud 함수가 사용 설정된 프로젝트가 없으면
시작하기: 첫 번째 함수 작성 및 배포 [https://firebase.google.com/docs/functions/get-started?hl=ko]를
읽고 Firebase 프로젝트에 Cloud 함수를 구성 및 설정하세요.

Firestore 트리거 함수 작성

함수 트리거 정의

Firestore 트리거를 정의하려면 문서 경로와 이벤트 유형을 지정합니다.

Node.jsconst functions = require('firebase-functions');

exports.myFunction = functions.firestore
.document('my-collection/{docId}')
.onWrite((change, context) => { /* ... */ });

문서 경로는 특정 문서 [https://cloud.google.com/firestore/native/docs/extend-with-functions?hl=ko#specific-documents] 또는 와일드 카드 패턴 [https://cloud.google.com/firestore/native/docs/extend-with-functions?hl=ko#wildcards-parameters]을 참조할 수 있습니다.
중요: 문서 경로 끝에 슬래시가 없어야 합니다.
단일 문서 지정

다음 함수를 사용하면 특정 문서의 모든 변경에 이벤트를 트리거할 수 있습니다.

Node.js// Listen for any change on document `marie` in collection `users`
exports.myFunctionName = functions.firestore
.document('users/marie').onWrite((change, context) => {
Node.js// Listen for changes in all documents in the 'users' collection
exports.useWildcard = functions.firestore
.document('users/{userId}')
.onWrite((change, context) => {

와일드 카드 일치는 문서 경로에서 추출되어 context.params에 저장됩니다.
개수 제한 없이 원하는 만큼 와일드 카드를 정의하여 명시적인 컬렉션 또는 문서 ID를 대체할 수 있습니다. 예를 들면 다음과 같습니다.

Node.js// Listen for changes in all documents in the 'users' collection and all subcollections
exports.useMultipleWildcards = functions.firestore
.document('users/{userId}/{messageCollectionId}/{messageId}')
.onWrite((change, context) => {
Node.jsexports.createUser = functions.firestore
.document('users/{userId}')
.onCreate((snap, context) => {
Node.jsexports.updateUser = functions.firestore
.document('users/{userId}')
.onUpdate((change, context) => {
Node.jsexports.deleteUser = functions.firestore
.document('users/{userID}')
.onDelete((snap, context) => {
Node.jsexports.modifyUser = functions.firestore
.document('users/{userID}')
.onWrite((change, context) => {
Node.jsexports.updateUser2 = functions.firestore
.document('users/{userId}')
.onUpdate((change, context) => {
Node.js// Fetch data using standard accessors
Node.js// Listen for updates to any `user` document.
exports.countNameChanges = functions.firestore
.document('users/{userId}')
.onUpdate((change, context) => {
Node.jsconst admin = require('firebase-admin');
admin.initializeApp();

.document('some/doc')
.onWrite((change, context) => {
db.doc('some/otherdoc').set({ ... });
Cloud Run Functions용 Firestore 트리거의 다음 제한사항에 유의하세요.

Cloud Run Functions(1세대)는 Firestore 기본 모드의 기존 '(기본값)' 데이터베이스를 기본 요건으로 합니다. Firestore 이름이 지정된 데이터베이스 또는 Datastore 모드는 지원하지 않습니다. 이 경우 Cloud Run Functions(2세대)를 사용하여 이벤트를 구성하세요.
순서는 보장되지 않습니다. 급격하게 변경하면 예기치 않은 순서로 함수 호출이 트리거될 수 있습니다.
이벤트는 최소 1회 전송되지만 하나의 이벤트에 함수가 여러 번 호출될 수 있습니다. 정확히 한 번에 처리하는 메커니즘에 의존하지 말고 멱등 함수 [https://cloud.google.com/blog/products/serverless/cloud-functions-pro-tips-building-idempotent-functions?hl=ko]를 작성하세요.
Datastore 모드의 Cloud Firestore [https://cloud.google.com/firestore/docs/firestore-or-datastore?hl=ko]에는 Cloud Run Functions(2세대)가 필요합니다. Cloud Run Functions(1세대)는 Datastore 모드를 지원하지 않습니다.
트리거는 단일 데이터베이스와 연결됩니다. 여러 데이터베이스와 일치하는 트리거를 만들 수 없습니다.
데이터베이스를 삭제해도 해당 데이터베이스의 트리거가 자동으로 삭제되지 않습니다. 트리거가 이벤트 제공을 중지하지만 트리거를 삭제 [https://cloud.google.com/eventarc/docs/managing-triggers?hl=ko#trigger-delete]하기 전까지 계속 존재합니다.
일치하는 이벤트가 최대 요청 크기 [https://cloud.google.com/functions/quotas?hl=ko#resource_limits]를 초과하면 이벤트가 Cloud Run Functions(1세대)로 전달되지 않을 수 있습니다.

요청 크기로 인해 전송되지 않은 이벤트는 플랫폼 로그 [https://cloud.google.com/logging/docs/api/platform-logs?hl=ko]에 로깅되고 프로젝트의 로그 사용량에 반영됩니다.
이러한 로그는 로그 탐색기에서 '크기가 1세대... 한도를 초과하여 Cloud 함수에 이벤트를 전송할 수 없음'이라는 error 심각도의 메시지와 함께 확인할 수 있습니다. functionName 필드 아래에서 함수 이름을 찾을 수 있습니다. receiveTimestamp 필드가 지금부터 1시간 이내인 경우 타임스탬프 전후의 스냅샷과 함께 해당 문서를 읽어 실제 이벤트 콘텐츠를 추론할 수 있습니다.
이러한 주기를 피하려면 다음을 수행하면 됩니다.

Cloud Run Functions(2세대)로 마이그레이션 및 업그레이드
문서 크기 줄이기
문제의 Cloud Run Functions 삭제

제외 [https://cloud.google.com/logging/docs/routing/overview?hl=ko#exclusions]를 사용하여 로깅 자체를 사용 중지할 수 있지만 그래도 문제가 되는 이벤트가 전송되지 않습니다.

의견 보내기