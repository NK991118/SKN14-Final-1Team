Source URL: https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko
Title: Microsoft 및 Unity를 사용하여 인증
bookmark_border

의견 보내기

Microsoft 및 Unity를 사용하여 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#before_you_begin]Firebase.Auth.FirebaseAuth 클래스 액세스 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#access_the_firebaseauthfirebaseauth_class]Firebase SDK로 로그인 흐름 처리하기 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]고급: 수동으로 로그인 과정 처리 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#advanced:-handle-the-sign-in-flow-manually]다음 단계 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#next_steps]

Firebase SDK를 통해 엔드 투 엔드 로그인 과정을 실행하는 앱에 웹 기반의 일반 OAuth 로그인을 통합하여 사용자가 Microsoft Azure Active Directory와 같은 OAuth 제공업체를 통해 Firebase에 인증하도록 할 수 있습니다.
이 과정은 스마트폰 기반 Firebase SDK를 사용해야 하므로 Android 및 Apple 플랫폼에서만 지원됩니다.

시작하기 전에

Firebase Authentication [https://firebase.google.com/docs/reference/unity/namespace/firebase/auth?hl=ko]을 사용하려면 먼저 다음 작업을 해야 합니다.

Unity 프로젝트를 등록하고 Firebase를 사용하도록 구성합니다.

Unity 프로젝트에서 현재 Firebase를 사용하고 있다면 이미 등록되어 Firebase용으로 구성된 것입니다.
Unity 프로젝트가 없는 경우 샘플 앱 [https://github.com/google/mechahamster]을 다운로드하면 됩니다.

Firebase Unity SDK [https://firebase.google.com/download/unity?hl=ko](특히 FirebaseAuth.unitypackage)를 Unity 프로젝트에 추가합니다.

초기 설정 작업에 관한 자세한 안내는 Unity 프로젝트에 Firebase 추가 [https://firebase.google.com/docs/unity/setup?hl=ko#prerequisites]를 참조하세요.Unity 프로젝트에 Firebase를 추가할 때 Firebase Console [https://console.firebase.google.com/?hl=ko] 및 열려 있는 Unity 프로젝트 모두에서 작업을 수행해야 합니다. 예를 들어 Console에서 Firebase 구성 파일을 다운로드한 후 이 파일을 Unity 프로젝트로 이동하는 작업이 필요합니다.

Firebase.Auth.FirebaseAuth 클래스 액세스

FirebaseAuth 클래스는 모든 API 호출을 위한 게이트웨이입니다.

FirebaseAuth.DefaultInstance [https://firebase.google.com/docs/reference/unity/class/firebase/auth/firebase-auth?hl=ko#defaultinstance]를 통해 액세스할 수 있습니다.
Firebase.Auth.FirebaseAuth auth = Firebase.Auth.FirebaseAuth.DefaultInstance;

Firebase SDK로 로그인 흐름 처리하기

Firebase SDK로 로그인 과정을 처리하려면 다음 단계를 따르세요.

Microsoft에 적합한 제공업체 ID로 구성된 FederatedOAuthProviderData의 인스턴스를 생성합니다.
Firebase.Auth.FederatedOAuthProviderData providerData =
new Firebase.Auth.FederatedOAuthProviderData();
providerData.ProviderId = Firebase.Auth.MicrosoftAuthProvider.ProviderId;

선택사항: OAuth 요청과 함께 전송하고자 하는 커스텀 OAuth 매개변수를 추가로 지정합니다.
providerData.CustomParameters = new Dictionary<string,string>;

// Prompt user to re-authenticate to Microsoft.
providerData.CustomParameters.Add("prompt", "login");

// Target specific email with login hint.
providerData.CustomParameters.Add("login_hint",
"user@firstadd.onmicrosoft.com");

Microsoft가 지원하는 매개변수 정보는 Microsoft OAuth 문서 [https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-protocols-oauth-code]를 참조하세요.
Firebase에서 요구하는 매개변수는 setCustomParameters()와 함께 전달할 수 없습니다. 이러한 매개변수에는 client_id, response_type, redirect_uri, state, scope, response_mode가 있습니다.

특정 Azure AD 테넌트의 사용자만 애플리케이션에 로그인하도록 허용하려면 Azure AD 테넌트의 도메인 이름 또는 테넌트의 GUID 식별자를 사용하면 됩니다. 이렇게 하려면 커스텀 매개변수 객체의 '테넌트' 필드를 지정합니다.
// Optional "tenant" parameter in case you are using an Azure AD tenant.
// eg. '8eaef023-2b34-4da1-9baa-8bc8c9d6a490' or 'contoso.onmicrosoft.com'
// or "common" for tenant-independent tokens.
// The default value is "common".
providerData.CustomParameters.Add("tenant", "TENANT_ID");

선택사항: 인증 제공업체에 요청하고자 하는 기본 프로필 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다.
providerData.Scopes = new List<string>();
providerData.Scopes.Add("mail.read");
providerData.Scopes.Add("calendars.read");

자세한 내용은 Microsoft 권한 및 동의 문서 [https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent]를 참조하세요.
제공업체 데이터가 구성되었으면 이를 사용하여 FederatedOAuthProvider를 만듭니다.
// Construct a FederatedOAuthProvider for use in Auth methods.
Firebase.Auth.FederatedOAuthProvider provider = new Firebase.Auth.FederatedOAuthProvider();
provider.SetProviderData(providerData);

인증 제공업체 객체를 사용해 Firebase에 인증합니다. 이는 다른 FirebaseAuth 작업과 달리 사용자가 인증 정보를 입력할 수 있는 웹 보기를 표시하여 UI를 제어합니다.

로그인 과정을 시작하려면 다음과 같이 SignInAndRetrieveDataWithCredentialAsync를 호출합니다.
auth.SignInWithProviderAsync(provider).ContinueOnMainThread(task => {
if (task.IsCanceled) {
Debug.LogError("SignInWithProviderAsync was canceled.");
return;
}
if (task.IsFaulted) {
Debug.LogError("SignInWithProviderAsync encountered an error: " +
task.Exception);
return;
}

Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User signed in successfully: {0} ({1})",
user.DisplayName, user.UserId);
});

OAuth 액세스 토큰을 사용하면 Microsoft Graph API [https://docs.microsoft.com/en-us/graph/overview?toc=./toc.json&view=graph-rest-1.0]를 호출할 수 있습니다.

Firebase 인증에서 지원하는 다른 제공업체와 달리, Microsoft는 사진 URL을 제공하지 않습니다. 대신 Microsoft Graph API [https://docs.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0]를 통해 프로필 사진의 바이너리 데이터를 요청해야 합니다.
위의 예시는 로그인 과정에 중점을 두고 있지만 LinkWithProviderAsync를 사용하여 Microsoft Azure Active Directory 제공업체를 기존 사용자에 연결할 수도 있습니다. 예를 들어 여러 제공업체를 동일한 사용자에 연결하여 그 중 하나로 로그인하도록 허용할 수 있습니다.
user.LinkWithProviderAsync(provider).ContinueOnMainThread(task => {
if (task.IsCanceled) {
Debug.LogError("LinkWithProviderAsync was canceled.");
return;
}
if (task.IsFaulted) {
Debug.LogError("LinkWithProviderAsync encountered an error: "
+ task.Exception);
return;
}

Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User linked successfully: {0} ({1})",
user.DisplayName, user.UserId);
});

ReauthenticateWithProviderAsync에서도 동일한 패턴을 사용하여 최근 로그인한 적이 있어야 진행할 수 있는 중요한 작업에서 새로운 사용자 인증 정보를 가져올 수 있습니다.
user.ReauthenticateWithProviderAsync(provider).ContinueOnMainThread(task => {
if (task.IsCanceled) {
Debug.LogError("ReauthenticateWithProviderAsync was canceled.");
return;
}
if (task.IsFaulted) {
Debug.LogError(
"ReauthenticateWithProviderAsync encountered an error: " +
task.Exception);
return;
}

Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User reauthenticated successfully: {0} ({1})",
user.DisplayName, user.UserId);
});

고급: 수동으로 로그인 과정 처리

OAuth 액세스 토큰 기반의 사용자 인증 정보를 사용하여 직접 로그인할 수 있는 다른 Firebase 지원 OAuth 제공업체(예: Google, Facebook, Twitter)와 달리, Firebase 인증 서버에서 Microsoft OAuth 액세스 토큰의 사용자를 인증할 수 없으므로 Firebase 인증은 Microsoft와 같은 제공업체에 대해 동일한 인증 기능을 지원하지 않습니다.
이는 중요한 보안 요구사항이며 한 프로젝트(공격자)에서 확보한 Microsoft OAuth 액세스 토큰을 다른 프로젝트(피해자)에 로그인하는 데 사용할 수 있는 경우 애플리케이션과 웹사이트가 재전송 공격에 노출될 수 있습니다.
대신 Firebase 인증은 Firebase Console에 구성된 OAuth 클라이언트 ID와 보안 비밀을 사용하여 전체 OAuth 과정과 승인 코드 교환을 처리할 수 있는 기능을 제공합니다. 승인 코드는 특정 클라이언트 ID/보안 비밀과 함께 사용되어야 하므로, 한 프로젝트에서 확보한 승인 코드는 다른 프로젝트에 사용할 수 없습니다.

지원되지 않는 환경에서 이러한 제공업체를 사용해야 하는 경우 서드 파티 OAuth 라이브러리 및 Firebase 커스텀 인증 [https://firebase.google.com/docs/auth/admin/create-custom-tokens?hl=ko]을 사용해야 합니다. 서드 파티 라이브러리는 제공업체 인증에 필요하고 Firebase 커스텀 인증은 제공업체의 사용자 인증 정보를 커스텀 토큰으로 교환할 때 필요합니다.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트에 저장되며 사용자의 로그인 방법과 무관하게 프로젝트 내의 모든 앱에서 사용자를 식별하는 데 사용할 수 있습니다.

앱의 Firebase.Auth.FirebaseUser [https://firebase.google.com/docs/reference/unity/class/firebase/auth/firebase-user?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다.

Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
string name = user.DisplayName;
string email = user.Email;
System.Uri photo_url = user.PhotoUrl;
// The user's Id, unique to the Firebase project.
// Do NOT use this value to authenticate with your backend server, if you
// have one; use User.TokenAsync() instead.
string uid = user.UserId;
}

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/unity/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 SignOut() [https://firebase.google.com/docs/reference/unity/class/firebase/auth/firebase-auth?hl=ko#signout]을 호출합니다.
auth.SignOut();

의견 보내기