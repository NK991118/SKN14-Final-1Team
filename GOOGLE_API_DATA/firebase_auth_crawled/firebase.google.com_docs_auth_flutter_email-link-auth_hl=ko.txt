Source URL: https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko
Title: 이메일 링크를 사용하여 Firebase에 인증
bookmark_border

의견 보내기

이메일 링크를 사용하여 Firebase에 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#before_you_begin]사용자의 이메일 주소로 인증 링크 전송 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#send_an_authentication_link_to_the_users_email_address]이메일 링크로 로그인 완료 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#complete_sign_in_with_the_email_link]보안 문제 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#security_concerns]로그인 완료 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#complete_sign-in]이메일 링크 확인 및 로그인 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#verify_email_link_and_sign_in]이메일 링크를 사용하여 연결/재인증 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#linkingre-authentication_with_email_link]지원 중단됨: 이메일-비밀번호 로그인과 이메일 링크 로그인 구별 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#differentiating_emailpassword_from_email_link]다음 단계 [https://firebase.google.com/docs/auth/flutter/email-link-auth?hl=ko#next_steps]

Firebase 인증을 사용하면 로그인 링크를 이메일로 전송해서 사용자가 바로 로그인하게 할 수 있습니다. 이 과정에서 사용자의
이메일 주소도 확인됩니다.

이메일로 로그인하는 경우 다음과 같은 많은 이점이 있습니다.

편리한 가입 및 로그인
여러 애플리케이션에서 비밀번호 재사용에 따른 위험이 적음(재사용하면 아무리 보안등급이 높은 비밀번호라 해도 보안이 취약해질 수 있음)
사용자를 인증하는 동시에 사용자가 이메일 주소의 합법적인
소유자인지 확인 가능
액세스 가능한 이메일 계정만 있으면 로그인 가능 전화번호 또는
소셜 미디어 계정 소유를 필요로 하지 않음
사용자가 모바일 기기에서 번거롭게 비밀번호를 입력하거나
기억할 필요 없이 안전하게 로그인 가능
이전에 이메일 식별자(비밀번호 또는 제휴)로 로그인한 기존 사용자는 이메일만 사용하여 로그인하도록 업그레이드 가능. 일례로 사용자가
비밀번호를 기억하지 못하더라도 비밀번호를 재설정하지 않고 계속
로그인할 수 있습니다.

시작하기 전에

아직 수행하지 않았다면 시작하기 [https://firebase.google.com/docs/auth/flutter/start?hl=ko] 가이드의 단계를 따르세요.
Firebase 프로젝트에서 이메일 링크 로그인을 사용 설정합니다.

이메일 링크로 사용자를 로그인 처리하려면 우선 Firebase 프로젝트에서 이메일 제공업체 및 이메일 링크 로그인 방법을 사용 설정해야 합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 이메일/비밀번호 제공업체를 사용 설정합니다.
이메일
링크 로그인을 사용하려면 이메일/비밀번호 로그인이 사용 설정되어야 합니다.
같은 섹션에서 이메일 링크(비밀번호가 없는 로그인) 로그인 방법을
사용 설정합니다.
저장을 클릭합니다.

사용자의 이메일 주소로 인증 링크 전송

이 인증 과정을 시작하려면 이메일 주소를 제공하도록 요청하는 인터페이스를 제시하고 sendSignInLinkToEmail()을 호출하여 Firebase가 사용자의 이메일에 인증 링크를 전송하도록 요청합니다.

Firebase에 이메일 링크를 만드는 방법에 대한 안내를 제공하는 ActionCodeSettings 객체를 만듭니다. 다음 필드를 설정합니다.

url: 삽입할 딥 링크 및 함께 전달할 추가 상태입니다.
승인된 도메인의 Firebase Console 목록에 링크의 도메인이 있어야 하며 설정 탭(인증 -> 설정 -> 승인된 도메인)으로 이동하여 확인할 수 있습니다. 사용자 기기에 앱이 설치되어 있지 않고 앱을 설치할 수 없는 경우에 인증 링크는 사용자를 이 URL로 리디렉션합니다.
androidPackageName 및 IOSBundleId: Android 또는 iOS 기기에서 로그인 링크를 열 때 사용하는 앱입니다. 모바일 앱을 통해 이메일 작업 링크를 열기 위해 Firebase 동적 링크를 구성하는 방법에 대해 자세히 알아보세요.
handleCodeInApp: true로 설정합니다. 다른 대역 외 이메일 작업(비밀번호 재설정 및 이메일 확인)과 달리 이 로그인 작업은 항상 앱에서 완료해야 합니다. 그 이유는 인증 과정 마지막에 사용자가 로그인하고 사용자의 인증 상태를 앱에서 유지해야 하기 때문입니다.
dynamicLinkDomain: (지원 중단됨, linkDomain 사용) 프로젝트에 여러 개의 커스텀 동적 링크 도메인이 정의된 경우 지정된 모바일 앱을 사용하여 링크를 열 때 사용할 도메인을 지정합니다(예: example.page.link). 지정하지 않으면 첫 번째 도메인이 자동으로 선택됩니다.
linkDomain: 지정된 모바일 앱을 사용하여 링크를 열 때 사용할 선택적 커스텀 Firebase 호스팅 도메인입니다. 도메인은 Firebase 호스팅에서 구성되어야 하며 프로젝트에서 소유해야 합니다.
기본 호스팅 도메인(web.app 또는 firebaseapp.com)이 될 수 없습니다. 지원 중단된 dynamicLinkDomain 설정을 대체합니다.

var acs = ActionCodeSettings(
// URL you want to redirect back to. The domain (www.example.com) for this
// URL must be whitelisted in the Firebase Console.
url: 'https://www.example.com/finishSignUp?cartId=1234',
// This must be true
handleCodeInApp: true,
iOSBundleId: 'com.example.ios',
androidPackageName: 'com.example.android',
// installIfNotAvailable
androidInstallApp: true,
// minimumVersion
androidMinimumVersion: '12');

사용자에게 이메일 주소 입력을 요청합니다.
사용자의 이메일에 인증 링크를 전송하고 사용자가 같은 기기에서 이메일 로그인을 완료할 경우를 대비해 사용자의 이메일을 저장합니다.
var emailAuth = 'someemail@domain.com';
FirebaseAuth.instance.sendSignInLinkToEmail(
email: emailAuth, actionCodeSettings: acs)
.catchError((onError) => print('Error sending email verification $onError'))
.then((value) => print('Successfully sent email verification'));
});

이메일 링크로 로그인 완료

보안 문제

의도하지 않은 사용자나 기기를 통해 로그인 링크가 사용되는 것을 방지하기 위해 Firebase 인증에서는 로그인 과정을 완료할 때 사용자의 이메일 주소를 입력해야 합니다. 로그인하려면 이 이메일 주소가 처음에 로그인 링크를
보낸 주소와 일치해야 합니다.

링크를 요청한 기기와 같은 기기에서 로그인 링크를 여는 사용자를 위해 이 과정을
간소화할 수 있습니다. 예를 들어 로그인 이메일을 보낼 때 SharedPreferences를
사용하여 사용자의 이메일 주소를 로컬에 저장하면 됩니다. 그런 다음
이 이메일 주소를 사용하여 과정을 완료합니다.
세션 인젝션의 위험이 있으므로 사용자의 이메일을 리디렉션 URL 파라미터에서 전달해서는 안 되며 재사용해서도 안 됩니다.

로그인이 완료되면 확인되지 않은 이전 로그인 메커니즘은 사용자에게서
모두 삭제되고 기존 세션은 무효화됩니다.
예를 들어 누군가가 이전에 같은 이메일과 비밀번호로 확인되지 않은 계정을 만든 경우 이 사용자의 비밀번호는 삭제됩니다. 명의를 도용해 소유권을 주장하고 확인되지 않은 계정을 만들었던 사람이 확인되지 않은 이메일과 비밀번호로 다시 로그인하는 것을 방지하기 위해서입니다.

또한 중개 서버에서 링크를 가로채지 않도록 프로덕션 단계에서 HTTPS URL을 사용해야 합니다.

로그인 완료

Firebase 동적 링크는 지원 중단되었습니다. 이제 Firebase 호스팅이 로그인 링크를 전송하는 데 사용됩니다. 플랫폼별 구성에 관한 가이드를 따르세요.

Android [https://firebase.google.com/docs/auth/android/email-link-auth?hl=ko#complete-android-signin]
iOS [https://firebase.google.com/docs/auth/ios/email-link-auth?hl=ko#complete-apple-signin]
웹 [https://firebase.google.com/docs/auth/web/email-link-auth?hl=ko#completing_sign-in_in_a_web_page]

이메일 링크 확인 및 로그인

모바일 애플리케이션을 통해 로그인을 완료하는 경우
애플리케이션에서 수신 애플리케이션 링크를 감지하고 기본 딥 링크를
파싱한 다음 로그인을 완료하도록 구성해야 합니다.

링크 핸들러에서 링크가 이메일 링크 인증을 위한 것인지 확인하고, 그렇다면 로그인 프로세스를 완료합니다.
// Confirm the link is a sign-in with email link.
if (FirebaseAuth.instance.isSignInWithEmailLink(emailLink)) {
try {
// The client SDK will parse the code from the link for you.
final userCredential = await FirebaseAuth.instance
.signInWithEmailLink(email: emailAuth, emailLink: emailLink);

// You can access the new user via userCredential.user.
final emailAddress = userCredential.user?.email;

print('Successfully signed in with email link!');
} catch (error) {
print('Error signing in with email link.');
}
}

이메일 링크를 사용하여 연결/재인증

기존 사용자에게도 이 인증 방법을 연결할 수 있습니다. 예를 들어
이전에 전화번호 등 다른 제공업체로 인증된 사용자의 경우
기존 사용자 계정에 이 로그인 방법을 추가할 수 있습니다.

이 경우 작업 뒷부분이 달라집니다.
final authCredential = EmailAuthProvider
.credentialWithLink(email: emailAuth, emailLink: emailLink.toString());
try {
await FirebaseAuth.instance.currentUser
?.linkWithCredential(authCredential);
} catch (error) {
print("Error linking emailLink credential.");
}

민감한 작업을 실행하기 전에 이메일 링크 사용자를 재인증하는 경우에도 사용할 수 있습니다.
final authCredential = EmailAuthProvider
.credentialWithLink(email: emailAuth, emailLink: emailLink.toString());
try {
await FirebaseAuth.instance.currentUser
?.reauthenticateWithCredential(authCredential);
} catch (error) {
print("Error reauthenticating credential.");
}

하지만 원래의 사용자가 로그인하지 않은 다른 기기에서 인증 과정이 종료되면 이 인증 과정이 완료되지 않을 수 있습니다. 이러한 경우 같은 기기에서
링크를 열도록 사용자에게 오류를 표시할 수 있습니다. 링크에 일부 상태를 전달하여
작업 유형 및 사용자 UID에 대한 정보를 표시할 수 있습니다.

지원 중단됨: 이메일-비밀번호 로그인과 이메일 링크 로그인 구별

2023년 9월 15일 이후에 프로젝트를 만든 경우 이메일 열거 보호가 기본적으로 사용 설정됩니다. 이 기능은 프로젝트의 사용자 계정 보안을 개선하지만, 이전에 식별자 우선 인증 과정을 구현하는 데 권장되었던 fetchSignInMethodsForEmail() 메서드는 사용 중지됩니다.

프로젝트에서 이메일 열거 보호를 사용 중지할 수 있지만 그렇게 하지 않는 것이 좋습니다.

자세한 내용은 이메일 열거 보호 [https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection?hl=ko]에 대한 문서를 참조하세요.

다음 단계

사용자가 새 계정을 만들면 이 계정이 Firebase 프로젝트의 일부로 저장되며, 사용자가 사용한 로그인 방법과 관계없이 프로젝트의 모든 앱에서 사용자 식별에 사용될 수 있습니다.

앱의 User 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/flutter/manage-users?hl=ko]를 참조하세요.

Firebase 실시간 데이터베이스와 Cloud Storage 보안 규칙의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 사용해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/flutter/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut()을 호출합니다.
await FirebaseAuth.instance.signOut();

도움이 되었나요?

의견 보내기