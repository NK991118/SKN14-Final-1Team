Source URL: https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko
Title: Apple 플랫폼에서 OpenID Connect를 사용하여 인증
bookmark_border

의견 보내기

Apple 플랫폼에서 OpenID Connect를 사용하여 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#before_you_begin]Firebase SDK로 로그인 과정 처리 [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]수동으로 로그인 과정 처리 [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#manual]다음 단계 [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#next_steps]

Firebase Authentication with Identity Platform으로 업그레이드한 경우 원하는 OpenID Connect(OIDC) 규정 준수 제공업체를 사용하여 Firebase에 사용자를 인증할 수 있습니다. 이렇게 하면 Firebase가 기본적으로 지원하지 않는 ID 제공업체를 사용할 수 있습니다.

시작하기 전에

OIDC 제공업체를 사용하여 사용자를 로그인하도록 하려면 우선 제공업체에서 일부 정보를 수집해야 합니다.

클라이언트 ID: 앱을 식별하는 제공업체의 고유한 문자열입니다. 지원하는 플랫폼별로 다른 클라이언트 ID를 할당할 수 있습니다.
이 값은 제공업체에서 발급한 ID 토큰의 aud 클레임 값 중 하나입니다.
클라이언트 보안 비밀번호: 제공업체가 클라이언트 ID의 소유권을 확인하는 데 사용하는 보안 비밀 문자열입니다. 모든 클라이언트 ID에 대해 일치하는 클라이언트 보안 비밀번호가 필요합니다.
이 값은 인증 코드 흐름을 사용하는 경우에만 필요하며 Google에서는 적극 권장합니다.
발급기관: 제공업체를 식별하는 문자열입니다. 이 값은 /.well-known/openid-configuration이 추가될 때 제공업체의 OIDC 탐색 문서가 위치하는 URL이어야 합니다. 예를 들어 발급기관이 https://auth.example.com인 경우 탐색 문서를 https://auth.example.com/.well-known/openid-configuration에서 사용할 수 있어야 합니다.

위 정보가 있으면 Firebase 프로젝트의 로그인 제공업체로 OpenID Connect를 사용 설정합니다.

iOS 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/ios/setup?hl=ko].
Firebase Authentication with Identity Platform으로 업그레이드하지 않은 경우 업그레이드합니다. OpenID Connect 인증은 업그레이드된 프로젝트에서만 사용할 수 있습니다.
Firebase Console의 로그인 제공업체 [https://console.firebase.google.com/project/_/authentication/providers?hl=ko] 페이지에서 새 제공업체 추가를 클릭한 다음 OpenID Connect를 클릭합니다.
승인 코드 흐름을 사용할지 또는 암시적 권한 부여 흐름을 사용할지 선택합니다.

제공업체가 지원하는 경우 항상 코드 흐름을 사용해야 합니다. 암시적 흐름은 보안 수준이 낮으므로 사용하지 않는 것이 좋습니다.
이 제공업체에 이름을 지정합니다. 생성된 제공업체 ID를 기록해 둡니다(예: oidc.example-provider). 앱에 로그인 코드를 추가할 때 이 ID가 필요합니다.
클라이언트 ID와 클라이언트 보안 비밀번호, 제공업체의 발급기관 문자열을 지정합니다.
이 값은 제공업체에서 할당한 값과 정확하게 일치해야 합니다.
변경사항을 저장합니다.

Firebase SDK로 로그인 과정 처리

OIDC 제공업체를 사용하여 Firebase에 사용자를 인증하는 가장 쉬운 방법은 Firebase SDK로 전체 로그인 과정을 처리하는 것입니다.

Firebase Apple 플랫폼 SDK로 로그인 과정을 처리하려면 다음 단계를 따르세요.

다음과 같이 Xcode 프로젝트에 커스텀 URL 스킴을 추가합니다.

왼쪽 트리 보기에서 프로젝트 이름을 더블클릭하여 프로젝트 구성을 엽니다. 대상 섹션에서 앱을 선택하고 정보 탭을 선택한 후 URL 유형 섹션을 펼칩니다.

+ 버튼을 클릭하고 인코딩된 앱 ID를 URL 스키마로 추가합니다. 인코딩된 앱 ID는 Firebase Console의 일반 설정 [https://console.firebase.google.com/project/_/settings/general/?hl=ko] 페이지에 있는 iOS 앱 섹션에서 찾을 수 있습니다. 다른 필드는 비워 둡니다.
완성된 구성은 다음과 같은 형태이며 애플리케이션별 값이 적용됩니다.

Firebase Console에서 가져온 제공업체 ID를 사용하여 OAuthProvider의 인스턴스를 만듭니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
```
var provider = OAuthProvider(providerID: "oidc.example-provider")
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
```
FIROAuthProvider *provider = [FIROAuthProvider providerWithProviderID:@"oidc.example-provider"];
```
선택사항: OAuth 요청과 함께 전송하고자 하는 맞춤 OAuth 매개변수를 추가로 지정합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
```
provider.customParameters = [
"login_hint": "user@example.com"
]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
```
[provider setCustomParameters:@{@"login_hint": @"user@example.com"}];
```
지원되는 매개변수는 제공업체에 문의하세요.
Firebase에서 요구하는 매개변수는 setCustomParameters와 함께 전달할 수 없습니다. 이러한 매개변수는 client_id, response_type, redirect_uri, state, scope, response_mode입니다.
선택사항: 인증 제공업체에서 요청하고자 하는 기본 프로필 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
```
provider.scopes = ["mail.read", "calendars.read"]
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
```
[provider setScopes:@[@"mail.read", @"calendars.read"]];
```
선택사항: reCAPTCHA가 사용자에게 표시될 때 앱에서 SFSafariViewController 또는 UIWebView를 표시하는 방식을 맞춤설정하려면 AuthUIDelegate 프로토콜을 준수하는 커스텀 클래스를 만듭니다.
OAuth 제공업체 객체를 사용해 Firebase로 인증합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
```
// If you created a custom class that conforms to AuthUIDelegate,
// pass it instead of nil:
provider.getCredentialWith(nil) { credential, error in
if error != nil {
// Handle error.
}
if credential != nil {
Auth().signIn(with: credential) { authResult, error in
if error != nil {
// Handle error.
}
// User is signed in.
// IdP data available in authResult.additionalUserInfo.profile.
// OAuth access token can also be retrieved:
// (authResult.credential as? OAuthCredential)?.accessToken
// OAuth ID token can also be retrieved:
// (authResult.credential as? OAuthCredential)?.idToken
}
}
}
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
```
// If you created a custom class that conforms to AuthUIDelegate,
// pass it instead of nil:
[provider getCredentialWithUIDelegate:nil
completion:^(FIRAuthCredential *_Nullable credential, NSError *_Nullable error) {
if (error) {
// Handle error.
}
if (credential) {
[[FIRAuth auth] signInWithCredential:credential
completion:^(FIRAuthDataResult *_Nullable authResult, NSError *_Nullable error) {
if (error) {
// Handle error.
}
// User is signed in.
// IdP data available in authResult.additionalUserInfo.profile.
// OAuth access token can also be retrieved:
// ((FIROAuthCredential *)authResult.credential).accessToken
// OAuth ID token can also be retrieved:
// ((FIROAuthCredential *)authResult.credential).idToken
}];
}
}];
```
위의 예시는 로그인 과정에 중점을 두고 있지만 linkWithCredential을 사용하여 OIDC 제공업체를 기존 사용자에 연결할 수도 있습니다. 예를 들어 여러 제공업체를 동일한 사용자에 연결하여 그 중 하나로 로그인하도록 허용할 수 있습니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
```
Auth().currentUser.link(withCredential: credential) { authResult, error in
if error != nil {
// Handle error.
}
// OIDC credential is linked to the current user.
// IdP data available in authResult.additionalUserInfo.profile.
// OAuth access token can also be retrieved:
// (authResult.credential as? OAuthCredential)?.accessToken
// OAuth ID token can also be retrieved:
// (authResult.credential as? OAuthCredential)?.idToken
}
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
```
[[FIRAuth auth].currentUser
linkWithCredential:credential
completion:^(FIRAuthDataResult * _Nullable authResult, NSError * _Nullable error) {
if (error) {
// Handle error.
}
// OIDC credential is linked to the current user.
// IdP data available in authResult.additionalUserInfo.profile.
// OAuth access token can also be retrieved:
// ((FIROAuthCredential *)authResult.credential).accessToken
// OAuth ID token can also be retrieved:
// ((FIROAuthCredential *)authResult.credential).idToken
}];
```
최근 로그인한 적이 있어야 진행할 수 있는 중요한 작업에 대해 새로운 사용자 인증 정보를 검색하는 데 사용할 수 있는 reauthenticateWithCredential과 동일한 패턴을 사용할 수 있습니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
```
Auth().currentUser.reauthenticateWithCredential(withCredential: credential) { authResult, error in
if error != nil {
// Handle error.
}
// User is re-authenticated with fresh tokens minted and
// should be able to perform sensitive operations like account
// deletion and email or password update.
// IdP data available in result.additionalUserInfo.profile.
// Additional OAuth access token can also be retrieved:
// (authResult.credential as? OAuthCredential)?.accessToken
// OAuth ID token can also be retrieved:
// (authResult.credential as? OAuthCredential)?.idToken
}
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
```
[[FIRAuth auth].currentUser
reauthenticateWithCredential:credential
completion:^(FIRAuthDataResult * _Nullable authResult, NSError * _Nullable error) {
if (error) {
// Handle error.
}
// User is re-authenticated with fresh tokens minted and
// should be able to perform sensitive operations like account
// deletion and email or password update.
// IdP data available in result.additionalUserInfo.profile.
// Additional OAuth access token can also be retrieved:
// ((FIROAuthCredential *)authResult.credential).accessToken
// OAuth ID token can also be retrieved:
// ((FIROAuthCredential *)authResult.credential).idToken
}];
```

수동으로 로그인 과정 처리

앱에 OpenID Connect 로그인 과정을 이미 구현한 경우 ID 토큰을 직접 사용하여 Firebase에 인증할 수 있습니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
```
let credential = OAuthProvider.credential(
withProviderID: "oidc.example-provider",  // As registered in Firebase console.
idToken: idToken,  // ID token from OpenID Connect flow.
rawNonce: nil
)
Auth.auth().signIn(with: credential) { authResult, error in
if error {
// Handle error.
return
}
// User is signed in.
// IdP data available in authResult?.additionalUserInfo?.profile
}
```

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
```
FIROAuthCredential *credential =
[FIROAuthProvider credentialWithProviderID:@"oidc.example-provider"  // As registered in Firebase console.
IDToken:idToken  // ID token from OpenID Connect flow.
rawNonce:nil];
[[FIRAuth auth] signInWithCredential:credential
completion:^(FIRAuthDataResult * _Nullable authResult,
NSError * _Nullable error) {
if (error != nil) {
// Handle error.
return;
}
// User is signed in.
// IdP data available in authResult.additionalUserInfo.profile
}];
```
다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 User [https://firebase.google.com/docs/reference/ios/firebaseauth/interface_f_i_r_user?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/ios/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/ios/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut: [https://firebase.google.com/docs/reference/ios/firebaseauth/interface_f_i_r_auth?hl=ko#ab0d5111f05c3f1906243852cc8ef41b1]을 호출합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#swift] ---
let firebaseAuth = Auth.auth()
do {
try firebaseAuth.signOut()
} catch let signOutError as NSError {
print("Error signing out: %@", signOutError)
}

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/openid-connect?hl=ko#objective-c] ---
NSError *signOutError;
BOOL status = [[FIRAuth auth] signOut:&signOutError];
if (!status) {
NSLog(@"Error signing out: %@", signOutError);
return;
}

또한 모든 인증 오류에 대한 오류 처리 코드를 추가할 수도 있습니다. 오류 처리 [https://firebase.google.com/docs/auth/ios/errors?hl=ko]를 참조하세요.

도움이 되었나요?

의견 보내기