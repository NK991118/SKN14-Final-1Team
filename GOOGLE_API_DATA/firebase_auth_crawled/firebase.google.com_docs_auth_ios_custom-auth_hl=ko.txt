Source URL: https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko
Title: 커스텀 인증 시스템을 사용하여 Apple 플랫폼에서 Firebase 인증
bookmark_border

의견 보내기

커스텀 인증 시스템을 사용하여 Apple 플랫폼에서 Firebase 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#before-you-begin]Firebase 인증 [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#authenticate-with-firebase]다음 단계 [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#next-steps]

사용자가 정상적으로 로그인할 때 커스텀 서명 토큰을 발행하도록 인증 서버를 수정하면 Firebase Authentication에 커스텀 인증 시스템을 통합할 수 있습니다. 그러면 앱이 이 토큰을 받아 Firebase 인증에 사용합니다.

시작하기 전에

아직 Firebase 프로젝트가 없는 경우 Firebase 프로젝트를 만들고 앱을 등록 [https://firebase.google.com/docs/ios/setup?hl=ko]합니다.

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Add Packages(패키지 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk.git

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firebase Authentication 라이브러리를 선택합니다.

타겟 빌드 설정의 Other Linker Flags(기타 링커 플래그) 섹션에 -ObjC 플래그를 추가합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

다음과 같이 프로젝트의 서버 키를 가져옵니다.

프로젝트 설정의 서비스 계정 [https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk?hl=ko]
페이지로 이동합니다.
서비스 계정 페이지의 Firebase Admin SDK 섹션 하단에서
새 비공개 키 생성을 클릭합니다.
새 서비스 계정의 공개 키/비공개 키 쌍이 자동으로 컴퓨터에
저장됩니다. 이 파일을 인증 서버에 복사합니다.

Firebase 인증

UIApplicationDelegate로 FirebaseCore 모듈과 앱 대리자가 사용하는 다른 Firebase 모듈 [https://firebase.google.com/docs/ios/setup?hl=ko#available-pods]을 가져옵니다.
예를 들어 Cloud Firestore와 Authentication을 사용하려면 다음을 따르세요.

--- 탭: SwiftUI [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#swiftui] ---
import SwiftUI
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
// ...

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#swift] ---
import FirebaseCore
import FirebaseFirestore
import FirebaseAuth
// ...

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#objective-c] ---
@import FirebaseCore;
@import FirebaseFirestore;
@import FirebaseAuth;
// ...

앱 대리자의 application(_:didFinishLaunchingWithOptions:) 메서드에서 FirebaseApp [https://firebase.google.com/docs/reference/swift/firebasecore/api/reference/Classes/FirebaseApp?hl=ko] 공유 인스턴스를 구성합니다.

--- 탭: SwiftUI [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#swiftui] ---
// Use Firebase library to configure APIs
FirebaseApp.configure()

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#swift] ---
// Use Firebase library to configure APIs
FirebaseApp.configure()

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#objective-c] ---
// Use Firebase library to configure APIs
[FIRApp configure];

SwiftUI를 사용하는 경우 앱 대리자를 만들고 UIApplicationDelegateAdaptor 또는 NSApplicationDelegateAdaptor를 통해 App 구조체에 연결해야 합니다. 앱 대리자 재구성도 중지해야 합니다. 자세한 내용은 SwiftUI 안내 [https://firebase.google.com/docs/ios/learn-more?hl=ko#swiftui]를 참조하세요.

--- 탭: SwiftUI [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#swiftui] ---
@main
struct YourApp: App {
// register app delegate for Firebase setup
@UIApplicationDelegateAdaptor(AppDelegate.self) var delegate

var body: some Scene {
WindowGroup {
NavigationView {
ContentView()
}
}
}
}

사용자가 앱에 로그인하면 사용자의 로그인 사용자 인증 정보(예: 사용자 이름과 비밀번호)를 인증 서버로 전송합니다. 서버가 사용자 인증 정보를 확인하고 정보가 맞으면 커스텀 토큰 [https://firebase.google.com/docs/auth/admin/create-custom-tokens?hl=ko]을 반환합니다.

인증 서버에서 커스텀 토큰을 받은 후 다음과 같이 이 토큰을 signInWithCustomToken에 전달하여 사용자를 로그인 처리합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#swift] ---
Auth.auth().signIn(withCustomToken: customToken ?? "") { user, error in
// ...
}

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#objective-c] ---
[[FIRAuth auth] signInWithCustomToken:customToken
completion:^(FIRAuthDataResult * _Nullable authResult,
NSError * _Nullable error) {
// ...
}];

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 User [https://firebase.google.com/docs/reference/ios/firebaseauth/interface_f_i_r_user?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/ios/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/ios/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut: [https://firebase.google.com/docs/reference/ios/firebaseauth/interface_f_i_r_auth?hl=ko#ab0d5111f05c3f1906243852cc8ef41b1]을 호출합니다.

--- 탭: Swift [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#swift] ---
let firebaseAuth = Auth.auth()
do {
try firebaseAuth.signOut()
} catch let signOutError as NSError {
print("Error signing out: %@", signOutError)
}

--- 탭: Objective-C [https://firebase.google.com/docs/auth/ios/custom-auth?hl=ko#objective-c] ---
NSError *signOutError;
BOOL status = [[FIRAuth auth] signOut:&signOutError];
if (!status) {
NSLog(@"Error signing out: %@", signOutError);
return;
}

또한 모든 인증 오류에 대한 오류 처리 코드를 추가할 수도 있습니다. 오류 처리 [https://firebase.google.com/docs/auth/ios/errors?hl=ko]를 참조하세요.

의견 보내기