Source URL: https://firebase.google.com/docs/auth/web/twitter-login?hl=ko
Title: 자바스크립트에서 Twitter를 사용하여 인증하기
bookmark_border

의견 보내기

자바스크립트에서 Twitter를 사용하여 인증하기

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#before_you_begin]Firebase SDK로 로그인 과정 처리 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]account-exists-with-different-credential 오류 처리 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#handling-account-exists-with-different-credential-errors]팝업 모드 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#popup-mode]리디렉션 모드 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#redirect-mode]수동으로 로그인 과정 처리 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#handle_the_sign-in_flow_manually]Chrome 확장 프로그램에서 Firebase에 인증 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#authenticate_with_firebase_in_a_chrome_extension]Twitter 로그인을 위한 리디렉션 도메인 맞춤설정 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#customizing-the-redirect-domain-for-twitter-sign-in]다음 단계 [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#next_steps]

앱에 Twitter 인증을 통합하여 사용자가 Twitter 계정으로 Firebase에 인증하도록 할 수 있습니다. Twitter 인증을 통합하려면 Firebase SDK를 사용하여 로그인 과정을 진행하거나 Twitter OAuth 흐름을 수동으로 진행하고 그에 따른 액세스 토큰과 암호를 Firebase에 전달하면 됩니다.

시작하기 전에

JavaScript 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/web/setup?hl=ko].
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 Twitter 제공업체를 사용 설정합니다.
해당 제공업체의 개발자 콘솔에서 제공되는 API 키와 API 비밀번호를 제공업체 구성에 추가합니다.Twitter에서 개발자 애플리케이션으로 앱을 등록 [https://apps.twitter.com/]하고 앱의 OAuth API 키와 API 비밀번호를 가져옵니다.
Twitter 앱 구성 [https://apps.twitter.com/]의 앱 설정 페이지에서 Firebase OAuth 리디렉션 URI(예: my-app-12345.firebaseapp.com/__/auth/handler)가 승인 콜백 URL로 설정되어 있는지 확인합니다.

저장을 클릭합니다.

Firebase SDK로 로그인 과정 처리

웹 앱을 빌드하는 경우 Twitter 계정을 통해 Firebase에 사용자를 인증하는 가장 쉬운 방법은 Firebase JavaScript SDK로 로그인 과정을 처리하는 것입니다. Node.js 또는 브라우저가 아닌 환경에서 사용자를 인증하려면 로그인 과정을 직접 처리해야 합니다.

Firebase JavaScript SDK로 로그인 과정을 처리하려면 다음 단계를 따르세요.

다음와 같이 Twitter 제공업체 객체의 인스턴스를 생성합니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
import { TwitterAuthProvider } from "firebase/auth";

const provider = new TwitterAuthProvider();
auth_twitter_provider_create.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/twitter/auth_twitter_provider_create.js#L8-L10]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
var provider = new firebase.auth.TwitterAuthProvider();
twitter.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/twitter.js#L9-L9]

선택사항: 관련 맞춤 OAuth 매개변수를 명시적으로 전달하지 않고
제공업체의 OAuth 흐름을 사용자가 선호하는 언어로 현지화하려면 OAuth 흐름을
시작하기 전에 인증 인스턴스의 언어 코드를 업데이트합니다. 예를 들면 다음과 같습니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
import { getAuth } from "firebase/auth";

const auth = getAuth();
auth.languageCode = 'it';
// To apply the default browser preference instead of explicitly setting it.
// auth.useDeviceLanguage();
auth_set_language_code.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/index/auth_set_language_code.js#L8-L13]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
firebase.auth().languageCode = 'it';
// To apply the default browser preference instead of explicitly setting it.
// firebase.auth().useDeviceLanguage();
index.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/index.js#L73-L75]

선택사항: OAuth 요청과 함께 전송할 커스텀 OAuth 제공업체 매개변수를 추가로 지정합니다. 커스텀 매개변수를 추가하려면 OAuth 제공업체 문서에 지정된 키가 포함된 객체와 해당 값을 사용하여 초기화된 제공업체에서 setCustomParameters를 호출합니다. 예를 들면 다음과 같습니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
provider.setCustomParameters({
'lang': 'es'
});
auth_twitter_provider_params.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/twitter/auth_twitter_provider_params.js#L8-L10]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
provider.setCustomParameters({
'lang': 'es'
});
twitter.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/twitter.js#L13-L15]

예약된 필수 OAuth 매개변수는 허용되지 않으며 무시됩니다.
자세한 내용은 인증 제공업체 참조 [https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth?hl=ko#setCustomParameters]를 확인하세요.

Twitter 제공업체 객체를 사용해 Firebase에 인증을 진행합니다. 팝업 창을 띄우거나 로그인 페이지로 리디렉션하여 사용자가 Twitter 계정에 로그인하도록 유도할 수 있습니다. 휴대기기의 경우 리디렉션을 사용하는 것이 좋습니다.

팝업 창을 사용하여 로그인하려면 signInWithPopup을 호출합니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
import { getAuth, signInWithPopup, TwitterAuthProvider } from "firebase/auth";

const auth = getAuth();
signInWithPopup(auth, provider)
.then((result) => {
// This gives you a the Twitter OAuth 1.0 Access Token and Secret.
// You can use these server side with your app's credentials to access the Twitter API.
const credential = TwitterAuthProvider.credentialFromResult(result);
const token = credential.accessToken;
const secret = credential.secret;

// The signed-in user info.
const user = result.user;
// IdP data available using getAdditionalUserInfo(result)
// ...
}).catch((error) => {
// Handle Errors here.
const errorCode = error.code;
const errorMessage = error.message;
// The email of the user's account used.
const email = error.customData.email;
// The AuthCredential type that was used.
const credential = TwitterAuthProvider.credentialFromError(error);
// ...
});
auth_twitter_signin_popup.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/twitter/auth_twitter_signin_popup.js#L8-L32]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
firebase
.auth()
.signInWithPopup(provider)
.then((result) => {
/** @type {firebase.auth.OAuthCredential} */
var credential = result.credential;

// This gives you a the Twitter OAuth 1.0 Access Token and Secret.
// You can use these server side with your app's credentials to access the Twitter API.
var token = credential.accessToken;
var secret = credential.secret;

// The signed-in user info.
var user = result.user;
// IdP data available in result.additionalUserInfo.profile.
// ...
}).catch((error) => {
// Handle Errors here.
var errorCode = error.code;
var errorMessage = error.message;
// The email of the user's account used.
var email = error.email;
// The firebase.auth.AuthCredential type that was used.
var credential = error.credential;
// ...
});
twitter.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/twitter.js#L21-L46]

또한 Twitter API를 통해 추가 데이터를 가져오는 데 사용할 수 있는 Twitter 제공업체의 OAuth 토큰을 가져올 수 있습니다.

이 시점에 오류를 파악해서 처리할 수도 있습니다. 오류 코드 목록은 인증 참고 문서 [https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth?hl=ko#signInWithPopup]에서 확인할 수 있습니다.

로그인 페이지로 리디렉션해서 로그인 과정을 진행하려면 signInWithRedirect를 호출합니다.
`signInWithRedirect`를 사용할 때는 권장사항 [https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko]을 따르세요.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
import { getAuth, signInWithRedirect } from "firebase/auth";

const auth = getAuth();
signInWithRedirect(auth, provider);
auth_signin_redirect.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/index/auth_signin_redirect.js#L8-L11]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
firebase.auth().signInWithRedirect(provider);
index.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/index.js#L101-L101]

그러면 페이지가 로드될 때 getRedirectResult를 호출하여 Twitter 제공업체의 OAuth 토큰을 가져올 수 있습니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
import { getAuth, getRedirectResult, TwitterAuthProvider } from "firebase/auth";

const auth = getAuth();
getRedirectResult(auth)
.then((result) => {
// This gives you a the Twitter OAuth 1.0 Access Token and Secret.
// You can use these server side with your app's credentials to access the Twitter API.
const credential = TwitterAuthProvider.credentialFromResult(result);
const token = credential.accessToken;
const secret = credential.secret;
// ...

// The signed-in user info.
const user = result.user;
// IdP data available using getAdditionalUserInfo(result)
// ...
}).catch((error) => {
// Handle Errors here.
const errorCode = error.code;
const errorMessage = error.message;
// The email of the user's account used.
const email = error.customData.email;
// The AuthCredential type that was used.
const credential = TwitterAuthProvider.credentialFromError(error);
// ...
});
auth_twitter_signin_redirect_result.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/twitter/auth_twitter_signin_redirect_result.js#L8-L33]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
firebase.auth()
.getRedirectResult()
.then((result) => {
if (result.credential) {
/** @type {firebase.auth.OAuthCredential} */
var credential = result.credential;

// This gives you a the Twitter OAuth 1.0 Access Token and Secret.
// You can use these server side with your app's credentials to access the Twitter API.
var token = credential.accessToken;
var secret = credential.secret;
// ...
}

// The signed-in user info.
var user = result.user;
// IdP data available in result.additionalUserInfo.profile.
// ...
}).catch((error) => {
// Handle Errors here.
var errorCode = error.code;
var errorMessage = error.message;
// The email of the user's account used.
var email = error.email;
// The firebase.auth.AuthCredential type that was used.
var credential = error.credential;
// ...
});
twitter.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/twitter.js#L52-L79]

이 단계에서 오류를 파악해서 처리할 수도 있습니다. 오류 코드 목록은 인증 참고 문서 [https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth?hl=ko#getRedirectResult]에서 확인할 수 있습니다.

account-exists-with-different-credential 오류 처리

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 이메일 주소당 계정 1개 설정을 사용 설정한 경우 다른 Firebase 사용자의 제공업체(예: Google)에 이미 존재하는 이메일을 사용하여 Twitter와 같은 제공업체에 로그인을 시도하면 AuthCredential 객체(Twitter OAuth 토큰 및 암호)와 함께 auth/account-exists-with-different-credential 오류가 발생합니다. 사용자가 원하는 제공업체에 로그인하려면 먼저 기존 제공업체(Google)에 로그인한 후 원하는 제공업체의 AuthCredential(Twitter OAuth 토큰 및 암호)에 연결해야 합니다.

팝업 모드

signInWithPopup을 사용하는 경우 다음 예시와 같은 코드를 사용해 auth/account-exists-with-different-credential 오류를 처리할 수 있습니다.

import {
getAuth,
linkWithCredential,
signInWithPopup,
TwitterAuthProvider,
} from "firebase/auth";

try {
// Step 1: User tries to sign in using Twitter.
let result = await signInWithPopup(getAuth(), new TwitterAuthProvider());
} catch (error) {
// Step 2: User's email already exists.
if (error.code === "auth/account-exists-with-different-credential") {
// The pending Twitter credential.
let pendingCred = error.credential;

// Step 3: Save the pending credential in temporary storage,

// Step 4: Let the user know that they already have an account
// but with a different provider, and let them choose another
// sign-in method.
}
}

// ...

try {
// Step 5: Sign the user in using their chosen method.
let result = await signInWithPopup(getAuth(), userSelectedProvider);

// Step 6: Link to the Twitter credential.
// TODO: implement `retrievePendingCred` for your app.
let pendingCred = retrievePendingCred();

if (pendingCred !== null) {
// As you have access to the pending credential, you can directly call the
// link method.
let user = await linkWithCredential(result.user, pendingCred);
}

// Step 7: Continue to app.
} catch (error) {
// ...
}

리디렉션 모드

리디렉션 모드에서도 오류를 비슷한 방식으로 처리하지만, 페이지 리디렉션이 이루어지기 전에 대기 중인 사용자 인증 정보를 캐시에 저장해야 한다는 차이점이 있습니다(예: 세션 스토리지 사용).

수동으로 로그인 과정 처리

Twitter 계정을 사용해 Firebase에 인증할 때는 Twitter OAuth 엔드포인트를 호출하여 로그인 과정을 처리하는 방법도 있습니다.

개발자 문서 [https://developer.twitter.com/en/docs/basics/authentication/guides/log-in-with-twitter]에 따라 앱에 Twitter 인증을 통합합니다. Twitter 로그인 과정의 끝에서 OAuth 액세스 토큰과 OAuth 암호를 받을 수 있습니다.

Node.js 애플리케이션에 로그인해야 하는 경우 Node.js 애플리케이션에 OAuth 액세스 토큰 및 OAuth 암호를 전송합니다.
사용자가 Twitter에 정상적으로 로그인한 후에 OAuth 액세스 토큰과
OAuth 암호를 Firebase 사용자 인증 정보로 교환합니다.var credential = firebase.auth.TwitterAuthProvider.credential(token, secret);

Firebase 사용자 인증 정보를 사용해 Firebase에 인증합니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
import { getAuth, signInWithCredential, FacebookAuthProvider } from "firebase/auth";

// Sign in with the credential from the Facebook user.
const auth = getAuth();
signInWithCredential(auth, credential)
.then((result) => {
// Signed in
const credential = FacebookAuthProvider.credentialFromResult(result);
})
.catch((error) => {
// Handle Errors here.
const errorCode = error.code;
const errorMessage = error.message;
// The email of the user's account used.
const email = error.customData.email;
// The AuthCredential type that was used.
const credential = FacebookAuthProvider.credentialFromError(error);
// ...
});
auth_facebook_signin_credential.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/facebook/auth_facebook_signin_credential.js#L8-L26]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
// Sign in with the credential from the Facebook user.
firebase.auth().signInWithCredential(credential)
.then((result) => {
// Signed in
var credential = result.credential;
// ...
})
.catch((error) => {
// Handle Errors here.
var errorCode = error.code;
var errorMessage = error.message;
// The email of the user's account used.
var email = error.email;
// The firebase.auth.AuthCredential type that was used.
var credential = error.credential;
// ...
});
facebook.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/facebook.js#L139-L155]

Chrome 확장 프로그램에서 Firebase에 인증

Chrome 확장 프로그램 앱을 빌드하는 경우에는 오프스크린 문서 가이드 [https://firebase.google.com/docs/auth/web/chrome-extension?hl=ko#use_offscreen_documents]를 참조하세요.

Twitter 로그인을 위한 리디렉션 도메인 맞춤설정

프로젝트를 만들 때 Firebase에서는 프로젝트의 고유한 하위 도메인(https://my-app-12345.firebaseapp.com)을 프로비저닝합니다.

이 도메인은 OAuth 로그인을 위한 리디렉션 메커니즘으로도 사용됩니다. 이 도메인은 지원되는 모든 OAuth 제공업체에 대해 허용되어야 합니다. 하지만 이로 인해 사용자는 애플리케이션으로 다시 리디렉션되기 전에 Twitter에 로그인하는 과정에서 이 도메인(다음으로 이동: https://my-app-12345.firebaseapp.com)을 볼 수 있습니다.

하위 도메인이 표시되지 않게 하려면 Firebase Hosting으로 커스텀 도메인을 설정하면 됩니다.

Hosting용 도메인 설정 [https://firebase.google.com/docs/hosting/custom-domain?hl=ko]의 1~3단계를 따릅니다. 도메인 소유권을 확인하면 Hosting에서 커스텀 도메인의 SSL 인증서를 프로비저닝합니다.
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 승인된 도메인 목록에 커스텀 도메인 auth.custom.domain.com을 추가합니다.
Twitter 개발자 콘솔 또는 OAuth 설정 페이지에서 커스텀 도메인 https://auth.custom.domain.com/__/auth/handler에서 액세스할 수 있는 리디렉션 페이지의 URL을 허용 목록에 추가합니다.
자바스크립트 라이브러리를 초기화할 때는 authDomain 필드를 사용하여 커스텀 도메인을 지정합니다.

var config = {
apiKey: '...',
// Changed from 'PROJECT_ID.firebaseapp.com'.
authDomain: 'auth.custom.domain.com',
databaseURL: 'https://PROJECT_ID.firebaseio.com',
projectId: 'PROJECT_ID',
storageBucket: 'PROJECT_ID.firebasestorage.app',
messagingSenderId: 'SENDER_ID'
};
firebase.initializeApp(config);

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트에 저장되며 사용자의 로그인 방법과 무관하게 프로젝트 내의 모든 앱에서 사용자 본인 확인에 사용할 수 있습니다.

앱에서 사용자의 인증 상태를 파악할 때 권장하는 방법은 Auth 객체에 관찰자를 설정하는 것입니다. 그러면 User 객체로부터 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/web/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/web/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/js/auth?hl=ko#signout]을 호출합니다.

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-modular-api] ---
import { getAuth, signOut } from "firebase/auth";

const auth = getAuth();
signOut(auth).then(() => {
// Sign-out successful.
}).catch((error) => {
// An error happened.
});
auth_sign_out.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/snippets/auth-next/index/auth_sign_out.js#L8-L15]

--- 탭: Web [https://firebase.google.com/docs/auth/web/twitter-login?hl=ko#web-namespaced-api] ---
firebase.auth().signOut().then(() => {
// Sign-out successful.
}).catch((error) => {
// An error happened.
});
index.js [https://github.com/firebase/snippets-web/blob/467eaa165dcbd9b3ab15711e76fa52237ba37f8b/auth/index.js#L33-L37]

도움이 되었나요?

의견 보내기