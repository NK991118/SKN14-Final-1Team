Source URL: https://firebase.google.com/docs/auth/ios/email-link-auth?hl=ko
Title: Apple 플랫폼에서 이메일 링크를 사용하여 Firebase에 인증
bookmark_border

의견 보내기

Apple 플랫폼에서 이메일 링크를 사용하여 Firebase에 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에Firebase 프로젝트에서 이메일 링크 로그인 사용 설정사용자의 이메일 주소로 인증 링크 전송이메일 링크로 로그인 완료보안 문제Apple 모바일 앱에서 로그인 완료이메일 링크를 사용하여 연결/재인증지원 중단됨: Firebase Dynamic Links 기반 인증지원 중단됨: 이메일-비밀번호 로그인과 이메일 링크 로그인 구별다음 단계

참고: Android SDK v23.2.0 및 iOS SDK 11.8.0 이전의 SDK 버전에서 이메일 링크 인증 및 작업의 기존 구현은 2025년 8월 25일에 종료되는 Firebase 동적 링크를 사용합니다.

이 가이드는 이후 SDK 버전의 새로운 솔루션을 참조하도록 업데이트되었습니다.

자세한 내용과 마이그레이션 안내는 Dynamic Links 지원 중단 FAQ [https://firebase.google.com/support/dynamic-links-faq?hl=ko#impacts-on-email-link-authentication]를 참조하세요.

Firebase 인증을 사용하면 로그인 링크를 이메일로 전송해서 사용자가 바로 로그인하도록 할 수 있습니다. 이 과정에서 사용자의
이메일 주소도 확인됩니다.

이메일로 로그인하는 경우 다음과 같은 많은 이점이 있습니다.

편리한 가입 및 로그인
여러 애플리케이션에서 비밀번호 재사용에 따른 위험이 적음(재사용하면 아무리 보안등급이 높은 비밀번호라 해도 보안이 취약해질 수 있음)
사용자를 인증하는 동시에 사용자가 이메일 주소의 합법적인
소유자인지 확인 가능
액세스 가능한 이메일 계정만 있으면 로그인 가능 전화번호 또는
소셜 미디어 계정 소유를 필요로 하지 않음
사용자가 모바일 기기에서 번거롭게 비밀번호를 입력하거나
기억할 필요 없이 안전하게 로그인 가능
이전에 이메일 식별자(비밀번호 또는 제휴)로 로그인한 기존 사용자는 이메일만 사용하여 로그인하도록 업그레이드 가능. 일례로 사용자가
비밀번호를 기억하지 못하더라도 비밀번호를 재설정하지 않고 계속
로그인할 수 있습니다.

시작하기 전에

Swift Package Manager를 사용해 Firebase 종속 항목을 설치하고 관리하세요.

설치 가이드 [https://firebase.google.com/docs/ios/installation-methods?hl=ko]를 참조하여 직접 프레임워크 가져오기, CocoaPods 사용 등 Firebase SDK를 Apple 프로젝트에 추가하는 다양한 방법을 알아보세요.

앱 프로젝트를 연 상태로 Xcode에서 File(파일) > Add Packages(패키지 추가)로 이동합니다.

메시지가 표시되면 Firebase Apple 플랫폼 SDK 저장소를 추가합니다.

https://github.com/firebase/firebase-ios-sdk.git

참고: 새 프로젝트에서 기본(최신) SDK 버전을 사용해야 하지만, 필요하면 이전 버전을 선택할 수도 있습니다.

Firebase Authentication 라이브러리를 선택합니다.

타겟 빌드 설정의 Other Linker Flags(기타 링커 플래그) 섹션에 -ObjC 플래그를 추가합니다.

완료되면 Xcode가 백그라운드에서 자동으로 종속 항목을 확인하고 다운로드하기 시작합니다.

Firebase 프로젝트에서 이메일 링크 로그인 사용 설정

이메일 링크로 사용자를 로그인 처리하려면 우선 Firebase 프로젝트에서
이메일 제공업체 및 이메일 링크 로그인을 사용 설정해야 합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 이메일/비밀번호 제공업체를 사용 설정합니다. 이메일
링크 로그인을 사용하려면 이메일/비밀번호 로그인이 사용 설정되어야 합니다.
같은 섹션에서 이메일 링크(비밀번호가 없는 로그인) 로그인을
사용 설정합니다.
저장을 클릭합니다.

사용자의 이메일 주소로 인증 링크 전송

이 인증 과정을 시작하려면 사용자에게 이메일 주소를 제공하도록 요청하는 인터페이스를 표시하고 sendSignInLink을 호출하여 Firebase가 사용자의 이메일에 인증 링크를 전송하도록 요청합니다.

Firebase에 이메일 링크를 만드는 방법에 대한 지침을 제공하는 ActionCodeSettings 객체를 만듭니다. 다음 필드를 설정합니다.

url: 삽입할 딥 링크 및 함께 전달할 추가 상태입니다.
승인된 도메인의 Firebase Console 목록에서 링크의 도메인을 허용 목록에 추가해야 하며 로그인 방법 탭(인증 -> 로그인 방법)으로 이동하여 확인할 수 있습니다.

중요: 2025년 4월 28일 이후에 생성된 프로젝트에서는 Firebase Authentication에 더 이상 기본적으로 localhost가 승인된 도메인으로 포함되지 않습니다. 프로덕션 프로젝트에서는 localhost를 사용하지 않는 것이 좋습니다. localhost를 승인하는 경우 설정 페이지의 승인된 도메인에서 도메인 추가를 클릭하여 수동으로 추가할 수 있습니다.

iOSBundleID 및 androidPackageName: Firebase Authentication이 Android 또는 Apple 기기에서 열리는 웹 전용 링크 또는 모바일 링크를 만들어야 하는지 결정하는 데 도움이 됩니다.
handleCodeInApp: true로 설정합니다. 다른 대역 외 이메일 작업(비밀번호 재설정 및 이메일 인증)과 달리 이 로그인 작업은 항상 앱에서 완료해야 합니다. 그 이유는 인증 과정 마지막에 사용자가 로그인하고 사용자의 인증 상태를 앱에서 유지해야 하기 때문입니다.
linkDomain: 프로젝트에 대해 커스텀 Hosting 링크 도메인이 정의된 경우 지정된 모바일 앱에서 링크를 열 때 사용할 도메인을 지정합니다. 그러지 않으면 기본 도메인이 자동으로 선택됩니다(예: PROJECT_ID.firebaseapp.com).
dynamicLinkDomain: 지원 중단되었습니다. 이 파라미터를 지정하지 마세요.

--- 탭: Swift ---
let actionCodeSettings = ActionCodeSettings()
actionCodeSettings.url = URL(string: "https://www.example.com")
// The sign-in operation has to always be completed in the app.
actionCodeSettings.handleCodeInApp = true
actionCodeSettings.setIOSBundleID(Bundle.main.bundleIdentifier!)
actionCodeSettings.setAndroidPackageName("com.example.android",
installIfNotAvailable: false, minimumVersion: "12")
PasswordlessViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/PasswordlessViewController.swift#L65-L71]

--- 탭: Objective-C ---
FIRActionCodeSettings *actionCodeSettings = [[FIRActionCodeSettings alloc] init];
[actionCodeSettings setURL:[NSURL URLWithString:@"https://www.example.com"]];
// The sign-in operation has to always be completed in the app.
actionCodeSettings.handleCodeInApp = YES;
[actionCodeSettings setIOSBundleID:[[NSBundle mainBundle] bundleIdentifier]];
[actionCodeSettings setAndroidPackageName:@"com.example.android"
installIfNotAvailable:NO
minimumVersion:@"12"];
PasswordlessViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/PasswordlessViewController.m#L69-L76]

ActionCodeSettings에 대해 자세히 알아보려면 이메일 작업의 상태 전달 [https://firebase.google.com/docs/auth/ios/passing-state-in-email-actions?hl=ko#passing_statecontinue_url_in_email_actions] 섹션을 참조하세요.
사용자에게 이메일 주소 입력을 요청합니다.
사용자의 이메일에 인증 링크를 전송하고 사용자가 같은 기기에서 이메일 로그인을
완료할 경우를 대비해 사용자의 이메일을 저장합니다.

--- 탭: Swift ---
Auth.auth().sendSignInLink(toEmail: email,
actionCodeSettings: actionCodeSettings) { error in
// ...
if let error = error {
self.showMessagePrompt(error.localizedDescription)
return
}
// The link was successfully sent. Inform the user.
// Save the email locally so you don't need to ask the user for it again
// if they open the link on the same device.
UserDefaults.standard.set(email, forKey: "Email")
self.showMessagePrompt("Check your email for link")
// ...
}
PasswordlessViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/PasswordlessViewController.swift#L74-L91]

--- 탭: Objective-C ---
[[FIRAuth auth] sendSignInLinkToEmail:email
actionCodeSettings:actionCodeSettings
completion:^(NSError *_Nullable error) {
// ...
if (error) {
[self showMessagePrompt:error.localizedDescription];
return;
}
// The link was successfully sent. Inform the user.
// Save the email locally so you don't need to ask the user for it again
// if they open the link on the same device.
[NSUserDefaults.standardUserDefaults setObject:email forKey:@"Email"];
[self showMessagePrompt:@"Check your email for link"];
// ...
}];
PasswordlessViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/PasswordlessViewController.m#L79-L97]

이메일 링크로 로그인 완료

보안 문제

의도하지 않은 사용자나 기기를 통해 로그인 링크가 사용되는 것을 방지하기 위해 Firebase 인증에서는 로그인 과정을 완료할 때 사용자의 이메일 주소를 입력해야 합니다. 로그인하려면 이 이메일 주소가 처음에 로그인 링크를 보낸 주소와 일치해야 합니다.

링크를 요청한 기기에서 로그인 링크를 여는 사용자를 위해 이 과정을
간소화할 수 있습니다. 로그인 이메일을 보낼 때 사용자의 이메일 주소를
로컬에 저장하면 됩니다. 그런 다음 이 이메일 주소를 사용하여 이 과정을 완료합니다.

로그인이 완료되면 확인되지 않은 이전 로그인 메커니즘은 사용자에게서
모두 삭제되고 기존 세션은 무효화됩니다.
예를 들어 누군가가 이전에 같은 이메일과 비밀번호로 확인되지 않은 계정을 만든 경우 이 사용자의 비밀번호는 삭제됩니다. 이는 소유권을 주장하며 해당 계정을 생성한 명의 도용자가 동일한 계정으로 다시 로그인하는 것을 방지하기 위해서입니다.

Apple 모바일 앱에서 로그인 완료

Firebase Authentication에서는 Firebase Hosting을 사용하여 모바일 기기로 이메일 링크를 보냅니다. 모바일 애플리케이션으로 로그인을 완료하는 경우 애플리케이션에서 수신 애플리케이션 링크를 감지하고 이 링크에 포함된 딥 링크를 파싱한 다음 로그인을 완료하도록 구성해야 합니다. 이를 수행하는 방법에 관한 자세한 내용은 iOS의 범용 링크 및 연결된 도메인 [https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content/]을 참조하세요.

Firebase Hosting 구성

Firebase Authentication은 모바일 애플리케이션에서 열릴 링크를 보낼 때 Firebase Hosting [https://firebase.google.com/docs/hosting?hl=ko] 도메인을 사용합니다.
기본 Firebase Hosting 도메인이 이미 구성되어 있습니다.

Firebase Hosting 도메인을 구성합니다.

Firebase Console에서 호스팅 [https://console.firebase.google.com/project/_/hosting/sites?hl=ko] 섹션을 엽니다.

모바일 애플리케이션에서 열리는 이메일 링크에 기본 도메인을 사용하려면 기본 사이트로 이동하여 기본 Hosting 도메인을 기록합니다. 기본 Hosting 도메인의 형식은 일반적으로 다음과 같습니다.
PROJECT_ID.firebaseapp.com.

수신 링크를 가로채도록 앱을 구성할 때 이 값이 필요합니다.
이메일 링크에 커스텀 도메인을 사용하려면 Firebase Hosting에 도메인을 등록 [https://firebase.google.com/docs/hosting/custom-domain?hl=ko]하여 링크의 도메인으로 사용할 수 있습니다.

Apple 애플리케이션을 구성합니다.

선택한 도메인을 앱 링크의 연결된 도메인으로 구성해야 합니다. 앱에서 사용 권한을 설정하려면 Xcode에서 대상의 서명 및 기능 탭을 열고 이전 단계의 Firebase 호스팅 도메인을 연결된 도메인 기능에 추가합니다. 기본 Firebase Hosting 도메인을 사용하는 경우 applinks:PROJECT_ID.firebaseapp.com입니다.

자세한 내용은 Apple 문서 사이트의 연결된 도메인 지원 [https://developer.apple.com/documentation/xcode/supporting-associated-domains]을 참조하세요.

링크 확인 및 로그인

위에 설명된 대로 링크를 수신하면 이메일 링크 인증을 위한 링크인지 확인하고
로그인을 완료합니다.

--- 탭: Swift ---
if Auth.auth().isSignIn(withEmailLink: link) {
AppDelegate.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/AppDelegate.swift#L93-L93]
Auth.auth().signIn(withEmail: email, link: self.link) { user, error in
// ...
}
PasswordlessViewController.swift [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExampleSwift/PasswordlessViewController.swift#L43-L53]
}

--- 탭: Objective-C ---
if ([[FIRAuth auth] isSignInWithEmailLink:link]) {
AppDelegate.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/AppDelegate.m#L87-L87]
[[FIRAuth auth] signInWithEmail:email
link:link
completion:^(FIRAuthDataResult * _Nullable authResult, NSError * _Nullable error) {
// ...
}];
PasswordlessViewController.m [https://github.com/firebase/quickstart-ios/blob/ffbb7818ca2d08dfaa1c23a4102000fc8d412fc2/authentication/LegacyAuthQuickstart/AuthenticationExample/PasswordlessViewController.m#L48-L60]
}

Android 애플리케이션에서 이메일 링크를 사용한 로그인 처리 방법을
알아보려면 Android 가이드 [https://firebase.google.com/docs/auth/android/email-link-auth?hl=ko]를 참조하세요.

웹 애플리케이션에서 이메일 링크를 사용한 로그인 처리 방법을
알아보려면 웹 가이드 [https://firebase.google.com/docs/auth/web/email-link-auth?hl=ko]를 참조하세요.

이메일 링크를 사용하여 연결/재인증

기존 사용자에게도 이 인증 방법을 연결할 수 있습니다. 예를 들어
이전에 전화번호 등 다른 제공업체로 인증된 사용자의 경우
기존 사용자 계정에 이 로그인 방법을 추가할 수 있습니다.

이 경우 작업 뒷부분이 달라집니다.

--- 탭: Swift ---
let credential = EmailAuthCredential.credential(withEmail:email
link:link)
Auth.auth().currentUser?.link(with: credential) { authData, error in
if (error) {
// And error occurred during linking.
return
}
// The provider was successfully linked.
// The phone user can now sign in with their phone number or email.
}

--- 탭: Objective-C ---
FIRAuthCredential *credential =
[FIREmailAuthProvider credentialWithEmail:email link:link];
[FIRAuth auth].currentUser
linkWithCredential:credential
completion:^(FIRAuthDataResult *_Nullable result,
NSError *_Nullable error) {
if (error) {
// And error occurred during linking.
return;
}
// The provider was successfully linked.
// The phone user can now sign in with their phone number or email.
}];

민감한 작업을 실행하기 전에 이메일 링크 사용자를 재인증하는 경우에도
사용할 수 있습니다.

--- 탭: Swift ---
let credential = EmailAuthProvider.credential(withEmail:email
link:link)
Auth.auth().currentUser?.reauthenticate(with: credential) { authData, error in
if (error) {
// And error occurred during re-authentication.
return
}
// The user was successfully re-authenticated.
}

--- 탭: Objective-C ---
FIRAuthCredential *credential =
[FIREmailAuthCredential credentialWithEmail:email link:link];
[FIRAuth auth].currentUser
reauthenticateWithCredential:credential
completion:^(FIRAuthDataResult *_Nullable result,
NSError *_Nullable error) {
if (error) {
// And error occurred during re-authentication
return;
}
// The user was successfully re-authenticated.
}];

하지만 원래의 사용자가 로그인하지 않은 다른 기기에서 인증 과정이 종료되면 이 인증 과정이 완료되지 않을 수 있습니다. 이러한 경우 같은 기기에서
링크를 열도록 사용자에게 오류를 표시할 수 있습니다. 링크에 일부 상태를 전달하여
작업 유형 및 사용자 UID에 대한 정보를 표시할 수 있습니다.

지원 중단됨: Firebase Dynamic Links 기반 인증

Firebase Authentication iOS SDK v11.8.0 이전에는 이메일 링크 로그인 기능이 Firebase Dynamic Links를 사용하여 올바른 앱에서 로그인 링크를 열었습니다. Firebase Dynamic Links가 2025년 8월 25일에 종료 [https://firebase.google.com/support/dynamic-links-faq?hl=ko]되므로 이러한 인증 링크는 지원 중단됩니다.

앱에서 이전 스타일 링크를 사용하는 경우 새 Firebase Hosting 기반 시스템으로 앱을 마이그레이션 [https://firebase.google.com/docs/auth/ios/email-link-migration?hl=ko]해야 합니다.

지원 중단됨: 이메일-비밀번호 로그인과 이메일 링크 로그인 구별

2023년 9월 15일 이후에 프로젝트를 만든 경우 이메일 열거 보호가 기본적으로 사용 설정됩니다. 이 기능은 프로젝트의 사용자 계정 보안을 개선하지만, 이전에 식별자 우선 인증 과정을 구현하는 데 권장되었던 fetchSignInMethodsForEmail() 메서드는 사용 중지됩니다.

프로젝트에서 이메일 열거 보호를 사용 중지할 수 있지만 그렇게 하지 않는 것이 좋습니다.

자세한 내용은 이메일 열거 보호 사용 설정 또는 중지 [https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection?hl=ko]를 참조하세요.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 User [https://firebase.google.com/docs/reference/ios/firebaseauth/interface_f_i_r_user?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/ios/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/ios/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut: [https://firebase.google.com/docs/reference/ios/firebaseauth/interface_f_i_r_auth?hl=ko#ab0d5111f05c3f1906243852cc8ef41b1]을 호출합니다.

--- 탭: Swift ---
let firebaseAuth = Auth.auth()
do {
try firebaseAuth.signOut()
} catch let signOutError as NSError {
print("Error signing out: %@", signOutError)
}

--- 탭: Objective-C ---
NSError *signOutError;
BOOL status = [[FIRAuth auth] signOut:&signOutError];
if (!status) {
NSLog(@"Error signing out: %@", signOutError);
return;
}

또한 모든 인증 오류에 대한 오류 처리 코드를 추가할 수도 있습니다. 오류 처리 [https://firebase.google.com/docs/auth/ios/errors?hl=ko]를 참조하세요.

의견 보내기