Source URL: https://firebase.google.com/docs/auth/android/password-auth?hl=ko
Title: Android에서 비밀번호 기반 계정으로 Firebase에 인증
bookmark_border

의견 보내기

Android에서 비밀번호 기반 계정으로 Firebase에 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#before_you_begin]비밀번호 기반 계정 만들기 [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#create_a_password-based_account]이메일 주소와 비밀번호로 사용자 로그인 [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#sign_in_a_user_with_an_email_address_and_password]권장: 비밀번호 정책 설정 [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#policy]권장: 이메일 열거 보호 사용 설정 [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#enumeration-protection]다음 단계 [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#next_steps]

Firebase Authentication을 사용하면 사용자가 자신의 이메일 주소와 비밀번호를 통해 Firebase에 인증하고 앱에서 사용하는 비밀번호 기반 계정을 관리하게 할 수 있습니다.

시작하기 전에

아직 추가하지 않았다면 Android 프로젝트에 Firebase를 추가 [https://firebase.google.com/docs/android/setup?hl=ko]합니다.
아직 Firebase 프로젝트에 앱을 연결하지 않았다면 Firebase Console [https://console.firebase.google.com/?hl=ko]에서 연결합니다.
다음과 같이 이메일 및 비밀번호 로그인을 사용 설정합니다.
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 이메일/비밀번호 로그인 방법을 사용 설정하고 저장을 클릭합니다.

모듈(앱 수준) Gradle 파일(일반적으로 <project>/<app-module>/build.gradle.kts 또는 <project>/<app-module>/build.gradle)에서 Android용 Firebase Authentication 라이브러리의 종속 항목을 추가합니다. 라이브러리 버전 관리 제어에는 Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하는 것이 좋습니다.

dependencies {
// Import the BoM for the Firebase platform
implementation(platform("com.google.firebase:firebase-bom:34.2.0"))

// Add the dependency for the Firebase Authentication library
// When using the BoM, you don't specify versions in Firebase library dependencies
implementation("com.google.firebase:firebase-auth")
}

Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하면 앱에서 항상 호환되는 Firebase Android 라이브러리 버전만 사용합니다.

(대안)
BoM을 사용하지 않고 Firebase 라이브러리 종속 항목을 추가합니다.

Firebase BoM을 사용하지 않도록 선택한 경우에는 종속 항목 줄에 각 Firebase 라이브러리 버전을 지정해야 합니다.
앱에서 여러 Firebase 라이브러리를 사용하는 경우 모든 버전이 호환되도록 BoM을 사용하여 라이브러리 버전을 관리하는 것이 좋습니다.

dependencies {
// Add the dependency for the Firebase Authentication library
// When NOT using the BoM, you must specify versions in Firebase library dependencies
implementation("com.google.firebase:firebase-auth:24.0.1")
}

비밀번호 기반 계정 만들기

비밀번호를 사용하는 신규 사용자 계정을 만들려면 앱의 로그인 작업에서 다음 절차를 완료합니다.

다음과 같이 가입 작업의 onCreate 메서드에서 FirebaseAuth 객체의 공유 인스턴스를 가져옵니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#kotlin-android] ---
private lateinit var auth: FirebaseAuth
// ...
// Initialize Firebase Auth
auth = Firebase.auth
EmailPasswordActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/EmailPasswordActivity.kt#L22-L23]

--- 탭: Java [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#java-android] ---
private FirebaseAuth mAuth;
// ...
// Initialize Firebase Auth
mAuth = FirebaseAuth.getInstance();
EmailPasswordActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/EmailPasswordActivity.java#L43-L44]

작업을 초기화할 때 사용자가 현재 로그인되어 있는지 확인합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#kotlin-android] ---
public override fun onStart() {
super.onStart()
// Check if user is signed in (non-null) and update UI accordingly.
val currentUser = auth.currentUser
if (currentUser != null) {
reload()
}
}
EmailPasswordActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/EmailPasswordActivity.kt#L28-L35]

--- 탭: Java [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#java-android] ---
@Override
public void onStart() {
super.onStart();
// Check if user is signed in (non-null) and update UI accordingly.
FirebaseUser currentUser = mAuth.getCurrentUser();
if(currentUser != null){
reload();
}
}
EmailPasswordActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/EmailPasswordActivity.java#L49-L57]

신규 사용자가 앱의 가입 양식을 사용하여 가입할 때 신규 계정의 비밀번호를 정확하게 입력했는지, 비밀번호가 복잡성 요구사항을 충족하는지 등 앱에서 요구하는 신규 계정 검사 단계를 완료합니다.
다음과 같이 신규 사용자의 이메일 주소와 비밀번호를 createUserWithEmailAndPassword에 전달하여 신규 계정을 생성합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#kotlin-android] ---
auth.createUserWithEmailAndPassword(email, password)
.addOnCompleteListener(this) { task ->
if (task.isSuccessful) {
// Sign in success, update UI with the signed-in user's information
Log.d(TAG, "createUserWithEmail:success")
val user = auth.currentUser
updateUI(user)
} else {
// If sign in fails, display a message to the user.
Log.w(TAG, "createUserWithEmail:failure", task.exception)
Toast.makeText(
baseContext,
"Authentication failed.",
Toast.LENGTH_SHORT,
).show()
updateUI(null)
}
}
EmailPasswordActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/EmailPasswordActivity.kt#L40-L57]

--- 탭: Java [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#java-android] ---
mAuth.createUserWithEmailAndPassword(email, password)
.addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
@Override
public void onComplete(@NonNull Task<AuthResult> task) {
if (task.isSuccessful()) {
// Sign in success, update UI with the signed-in user's information
Log.d(TAG, "createUserWithEmail:success");
FirebaseUser user = mAuth.getCurrentUser();
updateUI(user);
} else {
// If sign in fails, display a message to the user.
Log.w(TAG, "createUserWithEmail:failure", task.getException());
Toast.makeText(EmailPasswordActivity.this, "Authentication failed.",
Toast.LENGTH_SHORT).show();
updateUI(null);
}
}
});
EmailPasswordActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/EmailPasswordActivity.java#L62-L79]
신규 계정이 생성되면 사용자도 로그인됩니다. 콜백에서 getCurrentUser 메서드로 사용자의 계정 데이터를 가져올 수 있습니다.

프로젝트 악용을 방지하기 위해 Firebase에서는 짧은 시간 동안 같은 IP 주소에서 이메일/비밀번호 및 익명 방식으로 애플리케이션에 새로 가입할 수 있는 횟수를 제한합니다. Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 이 할당량의 한시적 변경을 요청하거나 예약할 수 있습니다.

이메일 주소와 비밀번호로 사용자 로그인

비밀번호로 사용자 로그인을 처리하는 절차는 신규 계정을 생성하는 절차와 비슷합니다. 앱의 로그인 작업에서 다음 절차를 따르세요.

다음과 같이 로그인 작업의 onCreate 메서드에서 FirebaseAuth 객체의 공유 인스턴스를 가져옵니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#kotlin-android] ---
private lateinit var auth: FirebaseAuth
// ...
// Initialize Firebase Auth
auth = Firebase.auth
EmailPasswordActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/EmailPasswordActivity.kt#L22-L23]

--- 탭: Java [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#java-android] ---
private FirebaseAuth mAuth;
// ...
// Initialize Firebase Auth
mAuth = FirebaseAuth.getInstance();
EmailPasswordActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/EmailPasswordActivity.java#L43-L44]

작업을 초기화할 때 사용자가 현재 로그인되어 있는지 확인합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#kotlin-android] ---
public override fun onStart() {
super.onStart()
// Check if user is signed in (non-null) and update UI accordingly.
val currentUser = auth.currentUser
if (currentUser != null) {
reload()
}
}
EmailPasswordActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/EmailPasswordActivity.kt#L28-L35]

--- 탭: Java [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#java-android] ---
@Override
public void onStart() {
super.onStart();
// Check if user is signed in (non-null) and update UI accordingly.
FirebaseUser currentUser = mAuth.getCurrentUser();
if(currentUser != null){
reload();
}
}
EmailPasswordActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/EmailPasswordActivity.java#L49-L57]

사용자가 앱에 로그인하면 다음과 같이 사용자의 이메일 주소와 비밀번호를 signInWithEmailAndPassword에 전달합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#kotlin-android] ---
auth.signInWithEmailAndPassword(email, password)
.addOnCompleteListener(this) { task ->
if (task.isSuccessful) {
// Sign in success, update UI with the signed-in user's information
Log.d(TAG, "signInWithEmail:success")
val user = auth.currentUser
updateUI(user)
} else {
// If sign in fails, display a message to the user.
Log.w(TAG, "signInWithEmail:failure", task.exception)
Toast.makeText(
baseContext,
"Authentication failed.",
Toast.LENGTH_SHORT,
).show()
updateUI(null)
}
}
EmailPasswordActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/EmailPasswordActivity.kt#L63-L80]

--- 탭: Java [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#java-android] ---
mAuth.signInWithEmailAndPassword(email, password)
.addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
@Override
public void onComplete(@NonNull Task<AuthResult> task) {
if (task.isSuccessful()) {
// Sign in success, update UI with the signed-in user's information
Log.d(TAG, "signInWithEmail:success");
FirebaseUser user = mAuth.getCurrentUser();
updateUI(user);
} else {
// If sign in fails, display a message to the user.
Log.w(TAG, "signInWithEmail:failure", task.getException());
Toast.makeText(EmailPasswordActivity.this, "Authentication failed.",
Toast.LENGTH_SHORT).show();
updateUI(null);
}
}
});
EmailPasswordActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/EmailPasswordActivity.java#L85-L102]로그인이 성공하면 반환된 FirebaseUser를 사용하여 계속 진행할 수 있습니다.

권장: 비밀번호 정책 설정

비밀번호 복잡성 요구사항을 적용하여 계정 보안을 강화할 수 있습니다.

프로젝트의 비밀번호 정책을 구성하려면 Firebase Console의 인증 설정 페이지에서 비밀번호 정책 탭을 엽니다.

인증 설정 [https://console.firebase.google.com/project/_/authentication/settings?hl=ko]

Firebase Authentication 비밀번호 정책은 다음과 같은 비밀번호 요구사항을 지원합니다.

소문자 필요
대문자 필요
숫자 필요
영숫자가 아닌 문자 필요

다음 문자는 영숫자가 아닌 문자 요구사항을 충족합니다.
^ $ * . [ ] { } ( ) ? " ! @ # % & / \ , > < ' : ; | _ ~
비밀번호 최소 길이(6~30자, 기본값은 6)
비밀번호 최대 길이(최대 4,096자)

다음 두 가지 모드로 비밀번호 정책 적용을 사용 설정할 수 있습니다.

필수: 사용자가 정책을 준수하는 비밀번호로 업데이트할 때까지 가입 시도가 실패합니다.
알림: 사용자가 정책을 준수하지 않는 비밀번호를 사용하여 가입할 수 있습니다. 이 모드를 사용할 때는 클라이언트 측에서 사용자의 비밀번호가 정책을 준수하는지 확인하고 정책을 준수하지 않는 경우 사용자에게 비밀번호를 업데이트하라는 메시지를 어떤 방식으로든 표시해야 합니다.

신규 사용자는 항상 해당 정책에 따라 비밀번호를 선택해야 합니다.

활성 사용자가 있는 경우 비밀번호가 정책을 준수하지 않는 사용자의 액세스를 차단하려는 경우가 아니면 로그인 강제 업그레이드를 사용 설정하지 않는 것이 좋습니다. 대신 사용자가 현재 비밀번호로 로그인할 수 있게 해주고 비밀번호에 부족한 요구사항을 알리는 알림 모드를 사용하세요.

권장: 이메일 열거 보호 사용 설정

이메일 주소가 등록되어 있어야 하는데(예: 이메일 주소와 비밀번호로 로그인할 때) 등록되지 않은 경우 또는 이메일 주소를 사용해서는 안 되는데(예: 사용자의 이메일 주소를 변경할 때) 등록된 경우, 이메일 주소를 파라미터로 사용하는 일부 Firebase Authentication 메서드에서 특정 오류가 발생합니다.
이는 사용자에게 특정 조치를 제안하는 데 유용할 수 있지만 사용자가 등록한 이메일 주소를 악의적인 행위자가 발견하는 데 악용될 수도 있습니다.

이러한 위험을 완화하려면 Google Cloud gcloud 도구를 사용하여 프로젝트에 이메일 열거 보호 기능을 사용 설정 [https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection?hl=ko]하는 것이 좋습니다. 이 기능을 사용 설정하면 Firebase Authentication의 오류 보고 동작이 변경됩니다. 앱이 더 구체적인 오류에 의존하지 않는지 확인하세요.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 FirebaseUser [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseUser?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/android/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth?hl=ko#signOut()]을 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#kotlin-android] ---
Firebase.auth.signOut()
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L415-L415]

--- 탭: Java [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#java-android] ---
FirebaseAuth.getInstance().signOut();
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L501-L501]

도움이 되었나요?

의견 보내기