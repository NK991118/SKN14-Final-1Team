Source URL: https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko
Title: Firebase에서 사용자 관리하기
bookmark_border

의견 보내기

Firebase에서 사용자 관리하기

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용사용자 생성 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#create_a_user]현재 로그인한 사용자 가져오기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#get_the_currently_signed-in_user]사용자 인증 정보 유지 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#persist_a_users_credential]사용자 프로필 가져오기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#get_a_users_profile]제공업체의 사용자 프로필 정보 가져오기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#get_a_users_provider-specific_profile_information]사용자 프로필 업데이트 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#update_a_users_profile]사용자 이메일 주소 설정 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#set_a_users_email_address]사용자에게 인증 메일 보내기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#send_a_user_a_verification_email]사용자 비밀번호 설정 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#set_a_users_password]비밀번호 재설정 이메일 보내기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#send_a_password_reset_email]사용자 삭제하기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#delete_a_user]사용자 재인증하기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#re-authenticate_a_user]사용자 계정 가져오기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#import_user_accounts]

사용자 생성

Firebase 프로젝트에서 신규 사용자를 생성할 때는 CreateUserWithEmailAndPassword [https://firebase.google.com/docs/auth/cpp/password-auth?hl=ko#create_a_password-based_account] 메서드를 호출하는 방법과 Google 로그인 [https://firebase.google.com/docs/auth/cpp/google-signin?hl=ko] 또는 Facebook 로그인 [https://firebase.google.com/docs/auth/cpp/facebook-login?hl=ko]과 같은 제휴 ID 공급업체를 이용해 사용자의 최초 로그인을 처리하는 방법이 있습니다.

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '사용자' 페이지에서 비밀번호 인증을 사용하는 신규 사용자를 생성할 수도 있습니다.

현재 로그인한 사용자 가져오기

현재 사용자를 가져올 때 권장하는 방법은 다음과 같이 Auth 객체에 리스너를 설정하는 것입니다.

class MyAuthStateListener : public firebase::auth::AuthStateListener {
public:
void OnAuthStateChanged(firebase::auth::Auth* auth) override {
firebase::auth::User user = auth->current_user();
if (user.is_valid()) {
// User is signed in
printf("OnAuthStateChanged: signed_in %s\n", user.uid().c_str());
} else {
// User is signed out
printf("OnAuthStateChanged: signed_out\n");
}
// ...
}
};
// ... initialization code
// Test notification on registration.
MyAuthStateListener state_change_listener;
auth->AddAuthStateListener(&state_change_listener);

리스너를 사용하면 현재 사용자를 가져올 때 Auth 객체가 중간 단계(초기화 등)인 상황이 발생하지 않습니다.

current_user를 호출하여 현재 로그인한 사용자를 가져올 수도 있습니다. 사용자가 로그인 상태가 아니라면 사용자의 is_valid 메서드가 false를 반환합니다.
참고: Auth 객체의 초기화가 완료되지 않았기 때문에 current_user가 유효하지 않을 수 있습니다. 리스너를 사용해 사용자의 로그인 상태를 추적하면 이런 상황을 처리할 필요가 없습니다.
사용자 인증 정보 유지

사용자 인증 정보는 사용자가 로그인한 후에 로컬 키 저장소에 저장됩니다.  사용자 인증 정보의 로컬 캐시는 사용자가 로그아웃하면 삭제됩니다.  다음과 같이 키 저장소는 플랫폼에 따라 다릅니다.

Apple 플랫폼: Keychain Services [https://developer.apple.com/documentation/security/keychain_services]
Android: Android Keystore [https://developer.android.com/training/articles/keystore?hl=ko]
Windows: Credential Management API [https://docs.microsoft.com/en-us/windows/desktop/secauthn/authentication-functions#low-level-credentials-management-functions]
OS X: Keychain Services [https://developer.apple.com/documentation/security/keychain_services]
Linux: 사용자가 설치해야 하는 libsecret [https://developer.gnome.org/libsecret/]

사용자 프로필 가져오기

사용자의 프로필 정보를 가져오려면 firebase::auth::User 인스턴스의 접근자 메서드를 사용합니다. 예를 들면 다음과 같습니다.

firebase::auth::User user = auth->current_user();
if (user.is_valid()) {
std::string name = user.display_name();
std::string email = user.email();
std::string photo_url = user.photo_url();
// The user's ID, unique to the Firebase project.
// Do NOT use this value to authenticate with your backend server,
// if you have one. Use firebase::auth::User::Token() instead.
std::string uid = user.uid();
}

제공업체의 사용자 프로필 정보 가져오기

사용자에게 연결된 로그인 제공업체로부터 프로필 정보를 가져오려면 ProviderData 메서드를 사용합니다. 예:

firebase::auth::User user = auth->current_user();
if (user.is_valid()) {
for (auto it = user.provider_data().begin();
it != user.provider_data().end(); ++it) {
firebase::auth::UserInfoInterface profile = *it;
// Id of the provider (ex: google.com)
std::string providerId = profile.provider_id();

// UID specific to the provider
std::string uid = profile.uid();

// Name, email address, and profile photo Url
std::string name = profile.display_name();
std::string email = profile.email();
std::string photoUrl = profile.photo_url();
}
}

사용자 프로필 업데이트

사용자의 표시 이름 및 프로필 사진 URL 등의 기본 프로필 정보를 업데이트할 때는 UpdateUserProfile 메서드를 사용합니다. 예를 들면 다음과 같습니다.

firebase::auth::User user = auth->current_user();
if (user.is_valid()) {
firebase::auth::User::UserProfile profile;
profile.display_name = "Jane Q. User";
profile.photo_url = "https://example.com/jane-q-user/profile.jpg";
user.UpdateUserProfile(profile).OnCompletion(
[](const firebase::Future<void>& completed_future, void* user_data) {
// We are probably in a different thread right now.
if (completed_future.error() == 0) {
printf("User profile updated.");
}
},
nullptr);  // pass user_data here.
}

사용자 이메일 주소 설정

UpdateEmail 메서드로 사용자의 이메일 주소를 설정할 수 있습니다. 예를 들면 다음과 같습니다.

firebase::auth::User user = auth->current_user();
if (user.is_valid()) {
user.UpdateEmail("user@example.com")
.OnCompletion(
[](const firebase::Future<void>& completed_future,
void* user_data) {
// We are probably in a different thread right now.
if (completed_future.error() == 0) {
printf("User email address updated.");
}
},
nullptr);
}
중요: 사용자의 이메일 주소를 설정하려면 사용자가 최근에 로그인한 적이 있어야 합니다.
사용자 재인증하기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#re-authenticate_a_user]를 참조하세요.
사용자에게 인증 메일 보내기

SendEmailVerification 메서드로 사용자에게 주소 인증 메일을 보낼 수 있습니다. 예를 들면 다음과 같습니다.

firebase::auth::User user = auth->current_user();
if (user.is_valid()) {
user.SendEmailVerification().OnCompletion(
[](const firebase::Future<void>& completed_future, void* user_data) {
// We are probably in a different thread right now.
if (completed_future.error() == 0) {
printf("Email sent.");
}
},
nullptr);
}

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '이메일 템플릿' 페이지에서 이메일 템플릿을 맞춤설정할 수 있습니다.
Firebase 고객센터의 이메일 템플릿 [https://support.google.com/firebase/answer/7000714?hl=ko] 항목을 참조하세요.

사용자 비밀번호 설정

UpdatePassword 메서드로 사용자의 비밀번호를 설정할 수 있습니다. 예를 들면 다음과 같습니다.

firebase::auth::User user = auth->current_user();
std::string newPassword = "SOME-SECURE-PASSWORD";

if (user.is_valid()) {
user.UpdatePassword(newPassword.c_str())
.OnCompletion(
[](const firebase::Future<void>& completed_future,
void* user_data) {
// We are probably in a different thread right now.
if (completed_future.error() == 0) {
printf("password updated.");
}
},
nullptr);
}
중요: 사용자의 비밀번호를 설정하려면 사용자가 최근에 로그인한 적이 있어야 합니다. 사용자 재인증하기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#re-authenticate_a_user]를 참조하세요.
비밀번호 재설정 이메일 보내기

SendPasswordResetEmail 메서드로 사용자에게 비밀번호 재설정 이메일을 보낼 수 있습니다. 예를 들면 다음과 같습니다.

std::string emailAddress = "user@example.com";

auth->SendPasswordResetEmail(emailAddress.c_str())
.OnCompletion(
[](const firebase::Future<void>& completed_future,
void* user_data) {
// We are probably in a different thread right now.
if (completed_future.error() == 0) {
// Email sent.
} else {
// An error happened.
printf("Error %d: %s", completed_future.error(),
completed_future.error_message());
}
},
nullptr);

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '이메일 템플릿' 페이지에서 이메일 템플릿을 맞춤설정할 수 있습니다.
Firebase 고객센터의 이메일 템플릿 [https://support.google.com/firebase/answer/7000714?hl=ko] 항목을 참조하세요.

또한 Firebase Console에서 비밀번호 재설정 이메일을 보낼 수도 있습니다.

사용자 삭제하기

Delete 메서드로 사용자 계정을 삭제할 수 있습니다. 예를 들면 다음과 같습니다.

firebase::auth::User user = auth->current_user();
if (user.is_valid()) {
user.Delete().OnCompletion(
[](const firebase::Future<void>& completed_future, void* user_data) {
if (completed_future.error() == 0) {
// User deleted.
} else {
// An error happened.
printf("Error %d: %s", completed_future.error(),
completed_future.error_message());
}
},
nullptr);
}
중요: 사용자를 삭제하려면 사용자가 최근에 로그인한 적이 있어야 합니다. 사용자 재인증하기 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#re-authenticate_a_user]를 참조하세요.
또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '사용자' 페이지에서 사용자를 삭제할 수도 있습니다.

사용자 재인증하기

계정 삭제 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#delete_a_user], 기본 이메일 주소 설정 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#set_a_users_email_address], 비밀번호 변경 [https://firebase.google.com/docs/auth/cpp/manage-users?hl=ko#set_a_users_password]과 같이 보안에 민감한 작업을 하려면 사용자가 최근에 로그인한 적이 있어야 합니다. 이런 작업 중 하나를 수행하고 사용자가 너무 오래 전에 로그인했으면 작업이 실패합니다.

이때에는 사용자의 새로운 로그인 사용자 인증 정보를 가져오고 Reauthenticate에 전달하여 사용자를 다시 인증해야 합니다. 예를 들면 다음과 같습니다.

firebase::auth::User user = auth->current_user();

// Get auth credentials from the user for re-authentication. The example
// below shows email and password credentials but there are multiple
// possible providers, such as GoogleAuthProvider or FacebookAuthProvider.
firebase::auth::Credential credential =
firebase::auth::EmailAuthProvider::GetCredential("user@example.com",
"password1234");

if (user.is_valid()) {
user.Reauthenticate(credential)
.OnCompletion(
[](const firebase::Future<void>& completed_future,
void* user_data) {
if (completed_future.error() == 0) {
printf("User re-authenticated.");
}
},
nullptr);
}

사용자 계정 가져오기

Firebase CLI의 auth:import [https://firebase.google.com/docs/cli/auth-import?hl=ko] 명령어를 사용하여 파일에서 Firebase 프로젝트로 사용자 계정을 가져올 수 있습니다. 예를 들면 다음과 같습니다.
firebase auth:import users.json --hash-algo=scrypt --rounds=8 --mem-cost=14

의견 보내기