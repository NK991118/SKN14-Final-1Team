Source URL: https://firebase.google.com/docs/auth/flutter/password-auth?hl=ko
Title: Flutter에서 비밀번호 기반 계정으로 Firebase에 인증
bookmark_border

의견 보내기

Flutter에서 비밀번호 기반 계정으로 Firebase에 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/flutter/password-auth?hl=ko#before_you_begin]비밀번호 기반 계정 만들기 [https://firebase.google.com/docs/auth/flutter/password-auth?hl=ko#create_a_password-based_account]이메일 주소와 비밀번호로 사용자 로그인 [https://firebase.google.com/docs/auth/flutter/password-auth?hl=ko#sign_in_a_user_with_an_email_address_and_password]다음 단계 [https://firebase.google.com/docs/auth/flutter/password-auth?hl=ko#next_steps]

Firebase 인증을 사용하여 사용자가 이메일 주소와 비밀번호로 Firebase에 인증하도록 할 수 있습니다.

시작하기 전에

아직 수행하지 않았다면 시작하기 [https://firebase.google.com/docs/auth/flutter/start?hl=ko] 가이드의 단계를 따르세요.
다음과 같이 이메일 및 비밀번호 로그인 방법을 사용 설정합니다.

Firebase Console의 인증 섹션에서 로그인 방법 [https://console.firebase.google.com/project/_/authentication/providers?hl=ko] 페이지를 엽니다.
로그인 방법 페이지에서 이메일/비밀번호 로그인 방법을 사용 설정하고 저장을 클릭합니다.

비밀번호 기반 계정 만들기

비밀번호가 있는 신규 사용자 계정을 만들려면 createUserWithEmailAndPassword() 메서드를 호출합니다.
try {
final credential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
email: emailAddress,
password: password,
);
} on FirebaseAuthException catch (e) {
if (e.code == 'weak-password') {
print('The password provided is too weak.');
} else if (e.code == 'email-already-in-use') {
print('The account already exists for that email.');
}
} catch (e) {
print(e);
}

일반적으로 앱의 로그인 화면에서 이 작업을 수행합니다. 신규 사용자가 앱의 가입 양식을 사용해 가입하고 나면 필요에 따라 앱에서 계정 유효성 검사 절차를 완료합니다. 검사 항목의 예시로는 신규 계정의 비밀번호를 정확하게 입력했는지, 비밀번호가 복잡성 조건을 충족하는지 등이 있습니다.

신규 계정이 생성되면 사용자도 로그인됩니다. 인증 상태 [https://firebase.google.com/docs/auth/flutter/start?hl=ko#auth-state]의 변경사항을 수신 대기하면 새 이벤트가 리스너로 전송됩니다.

새 계정 생성에 대한 후속 조치로 사용자의 이메일 주소를 확인 [https://firebase.google.com/docs/auth/flutter/manage-users?hl=ko#verify-email]할 수 있습니다.
참고: 프로젝트 악용을 방지하기 위해 Firebase에서는 짧은 시간 동안 같은 IP 주소에서 이메일/비밀번호 및 익명 방식으로 애플리케이션에 새로 가입할 수 있는 횟수를 제한합니다. Firebase Console [https://console.firebase.google.com/project/_/authentication/providers?hl=ko]에서 이 할당량의 한시적 변경을 요청하거나 이에 대한 일정을 예약할 수 있습니다.
이메일 주소와 비밀번호로 사용자 로그인

비밀번호로 사용자 로그인을 처리하는 절차는 신규 계정을 생성하는 절차와 비슷합니다. 앱의 로그인 화면에서 signInWithEmailAndPassword()를 호출합니다.
try {
final credential = await FirebaseAuth.instance.signInWithEmailAndPassword(
email: emailAddress,
password: password
);
} on FirebaseAuthException catch (e) {
if (e.code == 'user-not-found') {
print('No user found for that email.');
} else if (e.code == 'wrong-password') {
print('Wrong password provided for that user.');
}
}
주의: Firebase iOS SDK에서는 시스템 키체인에 대한 인증 상태를 유지하기 때문에 사용자가 iOS 또는 macOS에서 앱을 제거해도 앱을 재설치하는 동안 사용자의 인증 상태가 유지될 수 있습니다.
자세한 내용은 #4661 [https://github.com/firebase/flutterfire/issues/4661]을 참조하세요.
다음 단계

사용자가 새 계정을 만들면 이 계정이 Firebase 프로젝트의 일부로 저장되며, 사용자가 사용한 로그인 방법과 관계없이 프로젝트의 모든 앱에서 사용자 식별에 사용될 수 있습니다.

앱의 User 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/flutter/manage-users?hl=ko]를 참조하세요.

Firebase 실시간 데이터베이스와 Cloud Storage 보안 규칙의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 사용해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/flutter/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut()을 호출합니다.
await FirebaseAuth.instance.signOut();

도움이 되었나요?

의견 보내기