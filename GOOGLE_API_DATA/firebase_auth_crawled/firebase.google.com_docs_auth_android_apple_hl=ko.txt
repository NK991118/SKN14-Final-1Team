Source URL: https://firebase.google.com/docs/auth/android/apple?hl=ko
Title: Android에서 Apple을 통해 인증
bookmark_border

의견 보내기

Android에서 Apple을 통해 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/android/apple?hl=ko#before-you-begin]Apple Developer Program 가입 [https://firebase.google.com/docs/auth/android/apple?hl=ko#join-the-apple-developer-program]Apple로 로그인 구성 [https://firebase.google.com/docs/auth/android/apple?hl=ko#configure-sign-in-with-apple]Apple을 로그인 제공업체로 사용 설정 [https://firebase.google.com/docs/auth/android/apple?hl=ko#enable-apple-as-a-sign-in-provider]Apple의 익명 처리된 데이터 요구사항 준수 [https://firebase.google.com/docs/auth/android/apple?hl=ko#comply-with-apple-anonymized-data-requirements]Firebase SDK로 로그인 과정 처리 [https://firebase.google.com/docs/auth/android/apple?hl=ko#handle-sign-in]재인증 및 계정 연결 [https://firebase.google.com/docs/auth/android/apple?hl=ko#reauthentication-and]고급: 수동으로 로그인 과정 처리 [https://firebase.google.com/docs/auth/android/apple?hl=ko#advanced:-handle]토큰 취소 [https://firebase.google.com/docs/auth/android/apple?hl=ko#token-revocation]다음 단계 [https://firebase.google.com/docs/auth/android/apple?hl=ko#next-steps]

Firebase SDK를 통해 엔드 투 엔드 OAuth 2.0 로그인 과정을 실행하여 사용자가 Apple ID를 사용해 Firebase에 인증하도록 할 수 있습니다.

중요: Apple로 로그인하려면 사용자는 다음을 충족해야 합니다.

2단계 인증(2FA)이 사용 설정된 Apple ID가 있어야 합니다.
Apple 기기에서 iCloud에 로그인되어 있어야 합니다.

Apple로 로그인 사용 방법 [https://support.apple.com/en-us/HT210318]을 참조하세요. Apple로 로그인과의 통합을 테스트하려면 다음 요구사항도 충족해야 합니다.

시작하기 전에

사용자가 Apple 계정을 통해 로그인하도록 하려면 우선 Apple의 개발자 사이트에서 Apple로 로그인을 구성하고 Firebase 프로젝트에서 로그인 제공업체를 Apple로 사용 설정합니다.

Apple Developer Program 가입
Apple로 로그인은 Apple Developer Program [https://developer.apple.com/programs/]의 멤버만 구성할 수 있습니다.

Apple로 로그인 구성

Apple Developer [https://developer.apple.com/account/resources] 사이트에서 다음을 수행합니다.

웹용 Apple로 로그인 구성 [https://developer.apple.com/help/account/configure-app-capabilities/configure-sign-in-with-apple-for-the-web/]의 첫 번째 섹션에 설명된 대로 웹사이트를 앱에 연결합니다. 메시지가 표시되면 다음 URL을 반환 URL로 등록합니다.
https://YOUR_FIREBASE_PROJECT_ID.firebaseapp.com/__/auth/handler
Firebase 프로젝트 ID는 Firebase Console 설정 페이지 [https://console.firebase.google.com/project/_/settings/general/?hl=ko]에서 확인할 수 있습니다.
완료했으면 새 서비스 ID를 기록해 둡니다. 이 ID는 다음 섹션에서도 필요합니다.

Apple 비공개 키로 로그인을 생성합니다 [https://developer.apple.com/help/account/configure-app-capabilities/create-a-sign-in-with-apple-private-key/]. 다음 섹션에서는 새로운 비공개 키와 키 ID가 필요합니다.

이메일 링크 로그인, 이메일 주소 인증, 계정 변경 취소 등 사용자에게 이메일을 보내는 Firebase Authentication의 기능 중 하나라도 사용한다면 Apple에서 Firebase Authentication을 통해 전송된 이메일을 익명 처리된 Apple 이메일 주소로 전달할 수 있도록 Apple 비공개 이메일 릴레이 서비스를 구성 [https://developer.apple.com/help/account/configure-app-capabilities/configure-private-email-relay-service/]하고 noreply@YOUR_FIREBASE_PROJECT_ID.firebaseapp.com(또는 맞춤설정된 이메일 템플릿 도메인)을 등록해야 합니다.

Apple을 로그인 제공업체로 사용 설정

Android 프로젝트에 Firebase를 추가합니다 [https://firebase.google.com/docs/android/setup?hl=ko]. Firebase Console에서 앱을 설정할 때 앱의 SHA-1 서명을 등록해야 합니다.

Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다. 로그인 방법 탭에서 Apple 제공업체를 사용 설정합니다.

이전 섹션에서 만든 서비스 ID를 지정합니다. OAuth 코드 흐름 구성 섹션에서도 Apple 팀 ID외에 이전 섹션에서 만든 비공개 키 및 키 ID를 지정합니다.

Apple의 익명 처리된 데이터 요구사항 준수

Apple로 로그인에는 사용자가 로그인할 때 이메일 주소 등의 데이터를 익명처리할 수 있는 옵션이 제공됩니다. 이 옵션을 선택한 사용자는 privaterelay.appleid.com 도메인의 이메일 주소를 갖게 됩니다. 앱에서 Apple로 로그인을 사용하는 경우 이 익명처리된 Apple ID에 대한 Apple의 관련 개발자 정책 또는 약관을 모두 준수해야 합니다.

또한 개인 식별 정보를 익명처리된 Apple ID와 연결하려면 먼저 사용자 동의를 받아야 합니다. Firebase 인증 사용에는 다음 작업이 포함될 수 있습니다.

이메일 주소와 익명처리된 Apple ID 연결
전화번호와 익명처리된 Apple ID 연결
익명처리되지 않은 소셜 사용자 인증 정보(Facebook, Google 등)와 익명처리된 Apple ID 연결

위 목록은 추후 변경되거나 추가될 수 있습니다. 개발자 계정의 Membership(멤버십) 섹션에서 Apple Developer Program License Agreement(Apple Developer Program 라이선스 계약)를 참조하여 앱이 Apple의 요구사항을 충족하는지 확인하세요.

Firebase SDK로 로그인 과정 처리

Android 앱에서 Firebase Android SDK로 전체 로그인 과정을 처리하면 가장 손쉽게 Apple 계정을 통해 사용자를 Firebase에 인증할 수 있습니다.

Firebase Android SDK로 로그인 과정을 처리하려면 다음 단계를 따릅니다.

제공업체 ID apple.com을 사용하여 빌더로 OAuthProvider의 인스턴스를 생성합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
val provider = OAuthProvider.newBuilder("apple.com")
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
OAuthProvider.Builder provider = OAuthProvider.newBuilder("apple.com");
```
선택사항: 인증 제공업체에 요청하고자 하는 기본값 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
provider.setScopes(arrayOf("email", "name"))
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
List<String> scopes =
new ArrayList<String>() {
{
add("email");
add("name");
}
};
provider.setScopes(scopes);
```
기본적으로 이메일 주소당 계정 1개가 사용 설정되어 있으면 Firebase는 이메일 및 이름 범위를 요청합니다. 이 설정을 이메일 주소당 여러 계정으로 변경하면 별도로 지정하지 않는 한 Firebase는 Apple에 범위를 요청하지 않습니다.
선택사항: Apple의 로그인 화면을 영어가 아닌 다른 언어로 표시하려면 locale 매개변수를 설정하세요. 지원되는 언어는 Apple로 로그인 문서 [https://developer.apple.com/documentation/signinwithapplejs/incorporating_sign_in_with_apple_into_other_platforms#3332112]를 참조하세요.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
// Localize the Apple authentication screen in French.
provider.addCustomParameter("locale", "fr")
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
// Localize the Apple authentication screen in French.
provider.addCustomParameter("locale", "fr");
```
OAuth 제공업체 객체를 사용해 Firebase에 인증합니다. 다른 FirebaseAuth 작업과 달리 이 작업은 커스텀 Chrome 탭을 열어 UI를 관리합니다. 결과적으로 작업에서 UI를 시작할 때, 연결된 OnSuccessListener 및 OnFailureListener가 즉각 분리되므로 해당 활동을 참조하지 마세요.

우선 이미 응답을 수신했는지를 확인해야 합니다. 이 방법으로 로그인하면 활동이 백그라운드에서 진행되므로, 로그인 과정 중에 시스템에서 다시 확보할 수 있습니다. 이 경우 사용자가 다시 시도하지 않도록 하려면 결과가 이미 존재하는지 확인해야 합니다.

대기 중인 결과가 있는지 확인하려면 다음과 같이 getPendingAuthResult()를 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
val pending = auth.pendingAuthResult
if (pending != null) {
pending.addOnSuccessListener { authResult ->
Log.d(TAG, "checkPending:onSuccess:$authResult")
// Get the user profile with authResult.getUser() and
// authResult.getAdditionalUserInfo(), and the ID
// token from Apple with authResult.getCredential().
}.addOnFailureListener { e ->
Log.w(TAG, "checkPending:onFailure", e)
}
} else {
Log.d(TAG, "pending: null")
}
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
mAuth = FirebaseAuth.getInstance();
Task<AuthResult> pending = mAuth.getPendingAuthResult();
if (pending != null) {
pending.addOnSuccessListener(new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
Log.d(TAG, "checkPending:onSuccess:" + authResult);
// Get the user profile with authResult.getUser() and
// authResult.getAdditionalUserInfo(), and the ID
// token from Apple with authResult.getCredential().
}
}).addOnFailureListener(new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
Log.w(TAG, "checkPending:onFailure", e);
}
});
} else {
Log.d(TAG, "pending: null");
}
```
대기 중인 결과가 없으면 startActivityForSignInWithProvider()를 호출하여 로그인 과정을 시작합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
auth.startActivityForSignInWithProvider(this, provider.build())
.addOnSuccessListener { authResult ->
// Sign-in successful!
Log.d(TAG, "activitySignIn:onSuccess:${authResult.user}")
val user = authResult.user
// ...
}
.addOnFailureListener { e ->
Log.w(TAG, "activitySignIn:onFailure", e)
}
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
mAuth.startActivityForSignInWithProvider(this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// Sign-in successful!
Log.d(TAG, "activitySignIn:onSuccess:" + authResult.getUser());
FirebaseUser user = authResult.getUser();
// ...
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
Log.w(TAG, "activitySignIn:onFailure", e);
}
});
```
Firebase 인증에서 지원하는 다른 제공업체와 달리, Apple은 사진 URL을 제공하지 않습니다.

또한 사용자가 자신의 이메일을 앱에 공유하지 않으면 Apple은 이 사용자의 고유 이메일 주소(xyz@privaterelay.appleid.com 형식)를 프로비저닝하여 개발자 앱으로 공유합니다. 비공개 이메일 릴레이 서비스를 구성한 경우 Apple은 익명처리된 주소로 전송된 이메일을 사용자의 실제 이메일 주소로 전달합니다.

Apple은 사용자가 처음 로그인할 때만 표시 이름 등의 사용자 정보를 앱에 공유합니다. 일반적으로 Firebase는 사용자가 Apple 계정으로 처음 로그인할 때 표시 이름을 저장하며, 이 표시 이름은 getCurrentUser().getDisplayName()를 사용하여 가져올 수 있습니다.
하지만 이전에 Firebase 대신 Apple을 사용하여 사용자를 앱에 로그인하도록 했으면 Apple은 Firebase에 사용자의 표시 이름을 제공하지 않습니다.

재인증 및 계정 연결

최근 로그인한 적이 있어야 진행할 수 있는 중요한 작업을 위해 새로운 사용자 인증 정보를 검색하는 데 사용할 수 있는 startActivityForReauthenticateWithProvider()과 동일한 패턴을 사용할 수 있습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
// The user is already signed-in.
val firebaseUser = auth.getCurrentUser()

firebaseUser
.startActivityForReauthenticateWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener( authResult -> {
// User is re-authenticated with fresh tokens and
// should be able to perform sensitive operations
// like account deletion and email or password
// update.
})
.addOnFailureListener( e -> {
// Handle failure.
})
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
// The user is already signed-in.
FirebaseUser firebaseUser = mAuth.getCurrentUser();

firebaseUser
.startActivityForReauthenticateWithProvider(/* activity= */ this, provider.build())
.addOnSuccessListener(
new OnSuccessListener<AuthResult>() {
@Override
public void onSuccess(AuthResult authResult) {
// User is re-authenticated with fresh tokens and
// should be able to perform sensitive operations
// like account deletion and email or password
// update.
}
})
.addOnFailureListener(
new OnFailureListener() {
@Override
public void onFailure(@NonNull Exception e) {
// Handle failure.
}
});
```
또한 linkWithCredential()을 사용하여 여러 ID 공급업체를 기존 계정에 연결할 수 있습니다.

Apple에서는 개발자가 사용자의 Apple 계정을 다른 데이터에 연결하기 전에 사용자에게 명시적인 동의를 얻도록 요청합니다.

예를 들어 Facebook 계정을 현재 Firebase 계정에 연결하려면 사용자가 Facebook에 로그인할 때 얻은 액세스 토큰을 사용하세요.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
// Initialize a Facebook credential with a Facebook access token.
val credential = FacebookAuthProvider.getCredential(token.getToken())

// Assuming the current user is an Apple user linking a Facebook provider.
mAuth.getCurrentUser().linkWithCredential(credential)
.addOnCompleteListener(this, task -> {
if (task.isSuccessful()) {
// Facebook credential is linked to the current Apple user.
// The user can now sign in to the same account
// with either Apple or Facebook.
}
});
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
// Initialize a Facebook credential with a Facebook access token.
AuthCredential credential = FacebookAuthProvider.getCredential(token.getToken());

// Assuming the current user is an Apple user linking a Facebook provider.
mAuth.getCurrentUser().linkWithCredential(credential)
.addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
@Override
public void onComplete(@NonNull Task<AuthResult> task) {
if (task.isSuccessful()) {
// Facebook credential is linked to the current Apple user.
// The user can now sign in to the same account
// with either Apple or Facebook.
}
}
});
```
고급: 수동으로 로그인 과정 처리

Apple Sign-In JS SDK를 사용하거나 OAuth 과정을 수동으로 빌드하거나 AppAuth [https://github.com/openid/AppAuth-Android]와 같은 OAuth 라이브러리를 사용하는 방법으로 로그인 과정을 처리하여 Apple 계정으로 Firebase에 인증할 수도 있습니다.

로그인 요청마다 임의의 문자열인 'nonce'가 생성되며, 이 nonce는 앱의 인증 요청에 대한 응답으로 ID 토큰이 명시적으로 부여되었는지 확인하는 데 사용됩니다. 릴레이 공격을 방지하려면 이 단계가 필요합니다.

다음 예시에서와 같이 Android에서 SecureRandom를 사용하여 암호로 보호된 nonce를 생성할 수 있습니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
private fun generateNonce(length: Int): String {
val generator = SecureRandom()

val charsetDecoder = StandardCharsets.US_ASCII.newDecoder()
charsetDecoder.onUnmappableCharacter(CodingErrorAction.IGNORE)
charsetDecoder.onMalformedInput(CodingErrorAction.IGNORE)

val bytes = ByteArray(length)
val inBuffer = ByteBuffer.wrap(bytes)
val outBuffer = CharBuffer.allocate(length)
while (outBuffer.hasRemaining()) {
generator.nextBytes(bytes)
inBuffer.rewind()
charsetDecoder.reset()
charsetDecoder.decode(inBuffer, outBuffer, false)
}
outBuffer.flip()
return outBuffer.toString()
}
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
private String generateNonce(int length) {
SecureRandom generator = new SecureRandom();

CharsetDecoder charsetDecoder = StandardCharsets.US_ASCII.newDecoder();
charsetDecoder.onUnmappableCharacter(CodingErrorAction.IGNORE);
charsetDecoder.onMalformedInput(CodingErrorAction.IGNORE);

byte[] bytes = new byte[length];
ByteBuffer inBuffer = ByteBuffer.wrap(bytes);
CharBuffer outBuffer = CharBuffer.allocate(length);
while (outBuffer.hasRemaining()) {
generator.nextBytes(bytes);
inBuffer.rewind();
charsetDecoder.reset();
charsetDecoder.decode(inBuffer, outBuffer, false);
}
outBuffer.flip();
return outBuffer.toString();
}
```
그런 다음 16진수 문자열로 nonce의 SHA246 해시를 가져옵니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
private fun sha256(s: String): String {
val md = MessageDigest.getInstance("SHA-256")
val digest = md.digest(s.toByteArray())
val hash = StringBuilder()
for (c in digest) {
hash.append(String.format("%02x", c))
}
return hash.toString()
}
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
private String sha256(String s) throws NoSuchAlgorithmException {
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] digest = md.digest(s.getBytes());
StringBuilder hash = new StringBuilder();
for (byte c: digest) {
hash.append(String.format("%02x", c));
}
return hash.toString();
}
```
로그인 요청과 함께 nonce의 SHA256 해시를 전송하면 Apple은 이에 대한 응답으로 원래의 값을 전달합니다. Firebase는 원래의 nonce를 해싱하고 Apple에서 전달한 값과 비교하여 응답을 검증합니다.
OAuth 라이브러리 또는 다른 방법을 사용하여 Apple의 로그인 과정을 시작합니다. 요청에 해시된 nonce를 파라미터로 포함시켜야 하는 것에 유의하세요.
Apple의 응답을 수신하면 응답에서 ID 토큰을 가져오고, 이 토큰과 해시되지 않은 nonce를 사용하여 AuthCredential을 생성합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
val credential =  OAuthProvider.newCredentialBuilder("apple.com")
.setIdTokenWithRawNonce(appleIdToken, rawUnhashedNonce)
.build()
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
AuthCredential credential =  OAuthProvider.newCredentialBuilder("apple.com")
.setIdTokenWithRawNonce(appleIdToken, rawUnhashedNonce)
.build();
```
Firebase 사용자 인증 정보를 사용해 Firebase에 인증합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
auth.signInWithCredential(credential)
.addOnCompleteListener(this) { task ->
if (task.isSuccessful) {
// User successfully signed in with Apple ID token.
// ...
}
}
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
mAuth.signInWithCredential(credential)
.addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
@Override
public void onComplete(@NonNull Task<AuthResult> task) {
if (task.isSuccessful()) {
// User successfully signed in with Apple ID token.
// ...
}
}
});
```

signInWithCredential에 대한 호출이 성공하면 getCurrentUser 메서드로 사용자의 계정 데이터를 가져올 수 있습니다.

토큰 취소

Apple에서는 App Store 검토 가이드라인 [https://developer.apple.com/app-store/review/guidelines/#5.1.1v]에 설명된 대로 계정 생성을 지원하는 앱이 사용자가 앱 내에서 계정 삭제를 시작할 수 있도록 해야 허용한다고 요청합니다.

또한 Apple로 로그인을 지원하는 앱은 Apple로 로그인 REST API를 사용하여 사용자 토큰을 취소할 수 있습니다.

이 요구사항을 충족하려면 다음 단계를 구현하세요.

startActivityForSignInWithProvider() 메서드를 사용하여 Apple로 로그인하고 AuthResult를 가져옵니다.
Apple 제공업체의 액세스 토큰을 가져옵니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
val oauthCredential: OAuthCredential =  authResult.credential
val accessToken = oauthCredential.accessToken
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
OAuthCredential oauthCredential = (OAuthCredential) authResult.getCredential();
String accessToken = oauthCredential.getAccessToken();
```
revokeAccessToken API를 사용하여 토큰을 취소합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
```
mAuth.revokeAccessToken(accessToken)
.addOnCompleteListener(this) { task ->
if (task.isSuccessful) {
// Access token successfully revoked
// for the user ...
}
}
```

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
```
mAuth.revokeAccessToken(accessToken)
.addOnCompleteListener(this, new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
// Access token successfully revoked
// for the user ...
}
}
});
```

마지막으로 사용자 계정 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko#delete_a_user] 및 모든 관련 데이터를 삭제합니다.

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트의 일부로 저장되며 사용자의 로그인 방법에 관계없이 프로젝트 내 모든 앱에서 사용자를 식별하는 데 사용될 수 있습니다.

앱의 FirebaseUser [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseUser?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko]를 참조하세요.

Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/android/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth?hl=ko#signOut()]을 호출합니다.

--- 탭: Kotlin [https://firebase.google.com/docs/auth/android/apple?hl=ko#kotlin-android] ---
Firebase.auth.signOut()
MainActivity.kt [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/MainActivity.kt#L415-L415]

--- 탭: Java [https://firebase.google.com/docs/auth/android/apple?hl=ko#java-android] ---
FirebaseAuth.getInstance().signOut();
MainActivity.java [https://github.com/firebase/snippets-android/blob/b694d4dbd411d31be39655f47691c3e9f3529b03/auth/app/src/main/java/com/google/firebase/quickstart/auth/MainActivity.java#L501-L501]

도움이 되었나요?

의견 보내기