Source URL: https://cloud.google.com/bigquery/docs/introduction-sql

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
BigQuery SQL 언어 [https://cloud.google.com/bigquery/docs/introduction-sql?hl=ko#bigquery-sql-dialects]
기본 언어에서 변경 [https://cloud.google.com/bigquery/docs/introduction-sql?hl=ko#changing_from_the_default_dialect]
다음 단계 [https://cloud.google.com/bigquery/docs/introduction-sql?hl=ko#whats_next]
BigQuery의 SQL 소개
bookmark_border
이 문서에서는 BigQuery에서 지원되는 문과 SQL 언어를 간략하게 설명합니다.
GoogleSQL은 다음과 같은 유형의 지원되는 문을 포함하는 ANSI와 호환되는 구조화된 쿼리 언어(SQL) [https://en.wikipedia.org/wiki/SQL]입니다.
쿼리 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko](데이터 쿼리 언어(DQL) 문이라고도 함)은 BigQuery에서 데이터를 분석하는 기본 방법입니다. 테이블 또는 표현식을 하나 이상 스캔하고 계산된 결과 행을 반환합니다. 쿼리 문에는 파이프 문법 [https://cloud.google.com/bigquery/docs/pipe-syntax?hl=ko]이 포함될 수 있습니다.
절차적 언어 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language?hl=ko]은 단일 요청으로 여러 SQL 문을 실행할 수 있게 해주는 GoogleSQL의 절차적 확장입니다. 절차적 문에서 변수와 제어 흐름 문을 사용할 수 있으며 부작용이 있을 수 있습니다.
데이터 정의 언어(DDL) 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko]을 사용하면 다음과 같은 객체를 만들고 수정할 수 있습니다.
데이터 세트
스키마 및 열 유형을 포함한 테이블
테이블 클론 및 스냅샷
뷰
함수
색인
용량 약정, 예약, 할당
행 수준 액세스 정책
데이터 조작 언어(DML) 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko]을 사용하여 BigQuery 테이블에서 데이터를 업데이트, 삽입, 삭제할 수 있습니다.
데이터 제어 언어(DCL) 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko]을 사용하면 액세스 및 용량과 같은 BigQuery 시스템 리소스를 제어할 수 있습니다.
트랜잭션 제어 언어(TCL) 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language?hl=ko#transactions]을 사용하면 데이터 수정 트랜잭션을 관리할 수 있습니다.
로드 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/load-statements?hl=ko] 및 내보내기 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/export-statements?hl=ko]을 사용하여 BigQuery로 들어오고 나가는 데이터를 관리합니다.
BigQuery SQL 언어
BigQuery는 GoogleSQL 언어를 지원하지만 legacy SQL 언어도 사용할 수 있습니다. BigQuery를 처음 사용하는 경우 Google Cloud에서 다양한 기능을 지원하므로 GoogleSQL을 사용하는 것이 좋습니다. 예를 들어 DDL 및 DML 문과 같은 기능은 GoogleSQL을 통해서만 지원됩니다. legacy SQL은 이전 버전과의 호환성을 위해 유지 관리되므로 고객이 legacy SQL을 사용하는 경우 마이그레이션 [https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql?hl=ko]하는 것이 좋습니다.
기본 언어에서 변경
데이터를 쿼리하는 데 사용하는 인터페이스에 따라 기본 쿼리 언어가 결정됩니다. 다른 언어로 전환하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/introduction-sql?hl=ko#%EC%BD%98%EC%86%94] ---
Google Cloud 콘솔의 기본 언어는 GoogleSQL입니다. 언어를 legacy SQL로 변경하려면 다음 안내를 따르세요.


 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 더보기 > 쿼리 설정 버튼을 클릭합니다.
고급 옵션 섹션에서 SQL 언어에 레거시를 클릭한 후 저장을 클릭합니다. 이에 따라 이 쿼리에 legacy SQL 옵션이 설정됩니다. add_box
SQL 쿼리를 클릭하여 새 쿼리를 작성할 때 legacy SQL 옵션을 다시 선택해야 합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/introduction-sql?hl=ko#sql] ---
기본 SQL 언어는 GoogleSQL입니다.
프리픽스 #standardSQL 또는 #legacySQL을 쿼리 일부로 포함시켜 SQL 언어를 설정할 수 있습니다.
이러한 쿼리 프리픽스는 대소문자를 구분하지 않으며 쿼리 앞에 와야 하며 줄바꿈 문자로 쿼리와 구분해야 합니다. 다음 예시에서는 언어를 legacy SQL로 설정하고 출생률 데이터 세트를 쿼리합니다.




 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

#legacySQL
SELECT
  weight_pounds, state, year, gestation_weeks
FROM
  [bigquery-public-data:samples.natality]
ORDER BY
  weight_pounds DESC
LIMIT
  10;


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/introduction-sql?hl=ko#bq] ---
bq 명령줄 도구의 기본 쿼리 언어는 legacy SQL입니다. GoogleSQL 언어로 전환하려면 명령줄 문에 --use_legacy_sql=false 또는 --nouse_legacy_sql 플래그를 추가합니다.

GoogleSQL 언어로 전환

쿼리 작업에서 GoogleSQL 문법을 사용하려면 use_legacy_sql 매개변수를 false로 설정합니다.
  bq query \
  --use_legacy_sql=false \
  'SELECT
    word
  FROM
    `bigquery-public-data.samples.shakespeare`'

GoogleSQL을 기본 언어로 설정

명령줄 도구의 구성 파일 .bigqueryrc를 편집하여 GoogleSQL을 명령줄 도구 및 대화형 셸의 기본 언어로 설정할 수 있습니다.

.bigqueryrc에 대한 자세한 내용은 명령어별 플래그의 기본값 설정 [https://cloud.google.com/bigquery/docs/bq-command-line-tool?hl=ko#setting_default_values_for_command-line_flags]을 참조하세요.

.bigqueryrc에서 --use_legacy_sql=false를 설정하려면 다음 안내를 따르세요.


텍스트 편집기에서 .bigqueryrc를 엽니다. 기본적으로 .bigqueryrc는 사용자 디렉터리에 있습니다(예: $HOME/.bigqueryrc).
파일에 다음 텍스트를 추가합니다. 이 예시는 GoogleSQL을 쿼리와 mk 명령어(뷰를 만들 때 사용됨)의 기본 문법으로 설정합니다. query 또는 mk 명령어 플래그의 기본값을 이미 구성한 경우 [query] 또는 [mk]를 다시 추가할 필요가 없습니다.
[query]
--use_legacy_sql=false
[mk]
--use_legacy_sql=false

저장하고 파일을 닫습니다.
대화형 셸을 사용하는 경우 변경 사항을 적용하려면 종료한 후 다시 시작해야 합니다.


사용할 수 있는 명령줄 플래그에 대한 자세한 내용은 bq 명령줄 도구 참조 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko]를 확인하세요.

--- 탭: C# [https://cloud.google.com/bigquery/docs/introduction-sql?hl=ko#c] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 C# 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery C# API 참고 문서 [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
기본적으로 C# 라이브러리에서는 GoogleSQL을 사용합니다.

legacy SQL 언어로 전환

쿼리 작업에서 legacy SQL 구문을 사용하려면 UseLegacySql 매개변수를 true로 설정합니다.






















  





  
    
  
  











  









  




  



  


  
using Google.Cloud.BigQuery.V2 [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.html?hl=ko];
using System;

public class BigQueryQueryLegacy
{
    public void QueryLegacy(
        string projectId = "your-project-id"
    )
    {
        BigQueryClient [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko] client = BigQueryClient [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko].Create [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko#Google_Cloud_BigQuery_V2_BigQueryClient_Create_System_String_Google_Apis_Auth_OAuth2_GoogleCredential_](projectId);
        string query = @"
            SELECT name FROM [bigquery-public-data:usa_names.usa_1910_2013]
            WHERE state = 'TX'
            LIMIT 100";
        BigQueryJob [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryJob.html?hl=ko] job = client.CreateQueryJob [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko#Google_Cloud_BigQuery_V2_BigQueryClient_CreateQueryJob_System_String_System_Collections_Generic_IEnumerable_Google_Cloud_BigQuery_V2_BigQueryParameter__Google_Cloud_BigQuery_V2_QueryOptions_](
            sql: query,
            parameters: null,
            options: new QueryOptions [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.QueryOptions.html?hl=ko] { UseLegacySql = true });
        // Wait for the job to complete.
        job = job.PollUntilCompleted [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryJob.html?hl=ko#Google_Cloud_BigQuery_V2_BigQueryJob_PollUntilCompleted_Google_Cloud_BigQuery_V2_GetJobOptions_Google_Api_Gax_PollSettings_]().ThrowOnAnyError();
        // Display the results
        foreach (BigQueryRow [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryRow.html?hl=ko] row in client.GetQueryResults [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko#Google_Cloud_BigQuery_V2_BigQueryClient_GetQueryResults_Google_Apis_Bigquery_v2_Data_JobReference_Google_Cloud_BigQuery_V2_GetQueryResultsOptions_](job.Reference [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryJob.html?hl=ko#Google_Cloud_BigQuery_V2_BigQueryJob_Reference]))
        {
            Console.WriteLine($"{row["name"]}");
        }
    }
}

--- 탭: tabpanel-go ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
기본적으로 Go 클라이언트 라이브러리는 GoogleSQL을 사용합니다.

legacy SQL 언어로 전환

쿼리 작업에서 legacy SQL 구문을 사용하려면 쿼리 구성 내 UseLegacySQL 속성을 true로 설정합니다.






















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
	"google.golang.org/api/iterator"
)

// queryLegacy demonstrates running a query using Legacy SQL.
func queryLegacy(w io.Writer, projectID, sqlString string) error {
	// projectID := "my-project-id"
	// sqlString = "SELECT 3 as somenum"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %w", err)
	}
	defer client.Close()

	q := client.Query(sqlString)
	q.UseLegacySQL = true

	// Run the query and process the returned row iterator.
	it, err := q.Read(ctx)
	if err != nil {
		return fmt.Errorf("query.Read(): %w", err)
	}
	for {
		var row []bigquery.Value [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Value]
		err := it.Next(&row)
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}
		fmt.Fprintln(w, row)
	}
	return nil
}

--- 탭: tabpanel-java ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
기본적으로 Java 클라이언트 라이브러리에서는 GoogleSQL을 사용합니다.

legacy SQL 언어로 전환

쿼리 작업에서 legacy SQL 문법을 사용하려면 useLegacySql 매개변수를 true로 설정합니다.






















  





  
    
  
  











  









  




  



  


  import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.QueryJobConfiguration [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.QueryJobConfiguration.html?hl=ko];
import com.google.cloud.bigquery.TableResult [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableResult.html?hl=ko];

public class RunLegacyQuery {

  public static void main(String[] args) {
    runLegacyQuery();
  }

  public static void runLegacyQuery() {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // To use legacy SQL syntax, set useLegacySql to true.
      String query =
          "SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;";
      QueryJobConfiguration [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.QueryJobConfiguration.html?hl=ko] queryConfig =
          QueryJobConfiguration [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.QueryJobConfiguration.html?hl=ko].newBuilder(query).setUseLegacySql(true).build();

      // Execute the query.
      TableResult [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableResult.html?hl=ko] result = bigquery.query [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_query_com_google_cloud_bigquery_QueryJobConfiguration_com_google_cloud_bigquery_BigQuery_JobOption____](queryConfig);

      // Print the results.
      result.iterateAll [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableResult.html?hl=ko#com_google_cloud_bigquery_TableResult_iterateAll__]().forEach(rows -> rows.forEach(row -> System.out.println(row.getValue())));

      System.out.println("Legacy query ran successfully");
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] | InterruptedException e) {
      System.out.println("Legacy query did not run \n" + e.toString());
    }
  }
}

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
기본적으로 Node.js 클라이언트 라이브러리에서는 GoogleSQL을 사용합니다.

legacy SQL 언어로 전환

쿼리 작업에서 legacy SQL 문법을 사용하려면 useLegacySql 매개변수를 true로 설정합니다.






















  





  
    
  
  











  









  




  



  


  // Import the Google Cloud client library
const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');
const bigquery = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function queryLegacy() {
  // Queries the U.S. given names dataset for the state of Texas using legacy SQL.

  const query =
    'SELECT word FROM [bigquery-public-data:samples.shakespeare] LIMIT 10;';

  // For all options, see https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query
  const options = {
    query: query,
    // Location must match that of the dataset(s) referenced in the query.
    location: 'US',
    useLegacySql: true,
  };

  // Run the query as a job
  const [job] = await bigquery.createQueryJob(options);
  console.log(`Job ${job [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko].id} started.`);

  // Wait for the query to finish
  const [rows] = await job [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko].getQueryResults [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/job.html?hl=ko]();

  // Print the results
  console.log('Rows:');
  rows.forEach(row => console.log(row));
}

--- 탭: tabpanel-php ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 PHP 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery PHP API 참고 문서 [https://cloud.google.com/php/docs/reference/cloud-bigquery/latest/BigQueryClient?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
기본적으로 PHP 클라이언트 라이브러리에서는 GoogleSQL을 사용합니다.

legacy SQL 언어로 전환

쿼리 작업에서 legacy SQL 문법을 사용하려면 useLegacySql 매개변수를 true로 설정합니다.






















  





  
    
  
  











  









  




  



  


  use Google\Cloud\BigQuery\BigQueryClient;

/**
 * Query using legacy sql
 *
 * @param string $projectId The project Id of your Google Cloud Project.
 */
function query_legacy(string $projectId): void
{
    $query = 'SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus';

    $bigQuery = new BigQueryClient([
      'projectId' => $projectId,
    ]);
    $jobConfig = $bigQuery->query($query)->useLegacySql(true);

    $queryResults = $bigQuery->runQuery($jobConfig);

    $i = 0;
    foreach ($queryResults as $row) {
        printf('--- Row %s ---' . PHP_EOL, ++$i);
        foreach ($row as $column => $value) {
            printf('%s: %s' . PHP_EOL, $column, json_encode($value));
        }
    }
    printf('Found %s row(s)' . PHP_EOL, $i);
}

--- 탭: tabpanel-python ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
기본적으로 Python 클라이언트 라이브러리에서는 GoogleSQL을 사용합니다.

legacy SQL 언어로 전환

쿼리 작업에서 legacy SQL 문법을 사용하려면 use_legacy_sql 매개변수를 True로 설정합니다.






















  





  
    
  
  











  









  




  



  


  from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]

# Construct a BigQuery client object.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

query = (
    "SELECT name FROM [bigquery-public-data:usa_names.usa_1910_2013] "
    'WHERE state = "TX" '
    "LIMIT 100"
)

# Set use_legacy_sql to True to use legacy SQL syntax.
job_config = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].QueryJobConfig [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.job.QueryJobConfig.html?hl=ko](use_legacy_sql=True)

# Start the query and waits for query job to complete, passing in the extra configuration.
results = client.query_and_wait [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_query_and_wait](
    query, job_config=job_config
)  # Make an API request.

print("The query data:")
for row in results:
    print(row)

--- 탭: tabpanel-ruby ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Ruby 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Ruby API 참고 문서 [https://googleapis.dev/ruby/google-cloud-bigquery/latest/Google/Cloud/Bigquery.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
기본적으로 Ruby 클라이언트 라이브러리에서는 GoogleSQL을 사용합니다.

legacy SQL 언어로 전환

쿼리 작업에서 legacy SQL 구문을 사용하려면 legacy_sql: true 옵션을 쿼리에 전달합니다.






















  





  
    
  
  











  









  




  



  


  require "google/cloud/bigquery"

def query_legacy
  bigquery = Google::Cloud::Bigquery [https://cloud.google.com/ruby/docs/reference/google-cloud-bigquery-analytics_hub/latest/Google-Cloud-Bigquery.html?hl=ko].new [https://cloud.google.com/ruby/docs/reference/google-cloud-bigquery/latest/Google-Cloud-Bigquery.html?hl=ko]
  sql = "SELECT name FROM [bigquery-public-data:usa_names.usa_1910_2013] " \
        "WHERE state = 'TX' " \
        "LIMIT 100"

  results = bigquery.query sql, legacy_sql: true do |config|
    # Location must match that of the dataset(s) referenced in the query.
    config.location = "US"
  end

  results.each do |row|
    puts row.inspect
  end
end
다음 단계
BigQuery에서 SQL 쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 및 일괄 쿼리 작업 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko]을 참조하세요.
일반적인 쿼리 최적화에 대한 자세한 내용은 쿼리 성능 최적화 소개 [https://cloud.google.com/bigquery/docs/best-practices-performance-overview?hl=ko]를 참조하세요.
BigQuery에서 데이터를 쿼리하는 데 사용되는 GoogleSQL 문법은 쿼리 문법 [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko]을 참조하세요.
쿼리에서 파이프 구문을 사용하는 방법을 자세히 알아보려면 파이프 구문 [https://cloud.google.com/bigquery/docs/pipe-syntax?hl=ko]을 참고하세요.
도움이 되었나요?
의견 보내기