Source URL: https://cloud.google.com/bigquery/docs/migration/redshift-sql

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
데이터 유형 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#data_types]
암시적 변환 유형 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#implicit_conversion_types]
명시적 변환 유형 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#explicit_conversion_types]
쿼리 구문 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#query_syntax]
SELECT 문 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#select_statement]
Amazon Redshift SQL 변환 가이드
bookmark_border
이 문서에서는 마이그레이션을 계획하는 데 도움이 되도록 Amazon Redshift와 BigQuery 간 SQL 구문 유사점과 차이점을 자세히 설명합니다. 일괄 SQL 변환 [https://cloud.google.com/bigquery/docs/batch-sql-translator?hl=ko]을 사용하여 SQL 스크립트를 일괄적으로 마이그레이션하거나 대화형 SQL 변환 [https://cloud.google.com/bigquery/docs/interactive-sql-translator?hl=ko]을 사용하여 임시 쿼리를 변환합니다.
이 가이드는 엔터프라이즈 아키텍트, 데이터베이스 관리자, 애플리케이션 개발자, IT 보안 전문가를 대상으로 합니다. 이 문서에서는 사용자가 Amazon Redshift에 익숙하다고 가정합니다.
참고: Amazon Redshift 및 BigQuery의 SQL 요소 간에는 직접 매핑되지 않은 경우도 있습니다. 그러나 대부분의 경우에는 이 문서의 예시와 같이 대체 수단을 사용하여 Amazon Redshift와 동일한 기능을 BigQuery에서 사용할 수 있습니다.
데이터 유형
이 섹션에서는 Amazon Redshift와 BigQuery의 데이터 유형에서 유사점을 보여줍니다.
Amazon Redshift BigQuery 참고
데이터 유형 별칭 데이터 유형
SMALLINT [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-integer-types] INT2 [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-integer-types] INT64 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#integer_types] Amazon Redshift의 SMALLINT는 2바이트이고 BigQuery의 INT64는 8바이트입니다.
INTEGER [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-integer-types]
INT, INT4 [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-integer-types]
INT64 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#integer_types] Amazon Redshift의 INTEGER는 4바이트이고 BigQuery의 INT64는 8바이트입니다.
BIGINT [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-integer-types] INT8 [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-integer-types] INT64 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#integer_types] Amazon Redshift의 BIGINT 및 BigQuery의 INT64 모두 8바이트입니다.
DECIMAL [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-decimal-or-numeric-type] NUMERIC [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-decimal-or-numeric-type] NUMERIC [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#numeric_type]
REAL [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-floating-point-types] FLOAT4 [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-floating-point-types] FLOAT64 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#floating_point_types] Amazon Redshift의 REAL는 4바이트이고 BigQuery의 FLOAT64는 8바이트입니다.
DOUBLE PRECISION [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-floating-point-types]
FLOAT8, FLOAT [https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html#r_Numeric_types201-floating-point-types]
FLOAT64 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#floating_point_types]
BOOLEAN [https://docs.aws.amazon.com/redshift/latest/dg/r_Boolean_type.html] BOOL [https://docs.aws.amazon.com/redshift/latest/dg/r_Boolean_type.html] BOOL [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#boolean_type] Amazon Redshift의 BOOLEAN은 TRUE, t, true, y, yes, 1를 true의 유효한 리터럴 값으로 사용할 수 있습니다. BigQuery의 BOOL 데이터 유형은 대소문자를 구분하지 않는 TRUE를 사용합니다.
CHAR [https://docs.aws.amazon.com/redshift/latest/dg/r_Character_types.html#r_Character_types-char-or-character]
CHARACTER, NCHAR, BPCHAR [https://docs.aws.amazon.com/redshift/latest/dg/r_Character_types.html#r_Character_types-char-or-character]
STRING [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#string_type]
VARCHAR [https://docs.aws.amazon.com/redshift/latest/dg/r_Character_types.html#r_Character_types-varchar-or-character-varying]
CHARACTER VARYING, NVARCHAR, TEXT [https://docs.aws.amazon.com/redshift/latest/dg/r_Character_types.html#r_Character_types-varchar-or-character-varying]
STRING [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#string_type]
DATE [https://docs.aws.amazon.com/redshift/latest/dg/r_Datetime_types.html#r_Datetime_types-date] DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#date_type]
TIMESTAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_Datetime_types.html#r_Datetime_types-timestamp] TIMESTAMP WITHOUT TIME ZONE [https://docs.aws.amazon.com/redshift/latest/dg/r_Datetime_types.html#r_Datetime_types-timestamp] DATETIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#datetime_type]
TIMESTAMPTZ [https://docs.aws.amazon.com/redshift/latest/dg/r_Datetime_types.html#r_Datetime_types-timestamptz]
TIMESTAMP WITH TIME ZONE [https://docs.aws.amazon.com/redshift/latest/dg/r_Datetime_types.html#r_Datetime_types-timestamp]
TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#timestamp_type] 참고: BigQuery에서는 시간대 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#time_zones]를 사용해 타임스탬프를 파싱하거나 표시할 타임스탬프 형식을 지정합니다. 문자열 형식의 타임스탬프에 시간대가 포함될 수 있지만 BigQuery에서 문자열을 파싱할 때 타임스탬프를 해당 UTC 시간으로 저장합니다. 시간대가 명시적으로 지정되어 있지 않은 경우 기본 시간대인 UTC가 사용됩니다. 시간대 이름 [https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations] 또는 (-|+)HH:MM을 사용하는 UTC로부터의 오프셋 [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timezone_definitions]이 지원되지만 PDT와 같은 시간대 약어는 지원되지 않습니다.
GEOMETRY [https://aws.amazon.com/about-aws/whats-new/2019/11/amazon-redshift-announces-support-spatial-data/] GEOGRAPHY [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#geography_type] 지리 공간 데이터 쿼리를 지원합니다.
또한 BigQuery에는 직접적인 Amazon Redshift 아날로그가 없는 다음과 같은 데이터 유형도 있습니다.
ARRAY [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#array_type]
BYTES [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#bytes_type]
TIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#time_type]
STRUCT [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#struct_type]
암시적 변환 유형
BigQuery로 마이그레이션할 때는 BigQuery가 암시적으로 변환하는 다음 데이터 유형을 제외한 대부분의 Amazon Redshift 암시적 변환 [https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html#r_Type_conversion]을 BigQuery의 명시적 변환으로 변환해야 합니다.
BigQuery는 다음 데이터 유형에 대해 암시적 변환을 수행합니다.
BigQuery 유형 변경 BigQuery 유형
INT64
FLOAT64
INT64
NUMERIC
NUMERIC
FLOAT64
BigQuery는 다음 리터럴에도 암시적 변환을 수행합니다.
BigQuery 유형 변경 BigQuery 유형
STRING 리터럴
(예: '2008-12-25')
DATE
STRING 리터럴
(예: '2008-12-25 15:30:00')
TIMESTAMP
STRING 리터럴
(예: '2008-12-25T07:30:00')
DATETIME
STRING 리터럴
(예: '15:30:00')
TIME
명시적 변환 유형
BigQuery의 CAST(expression AS type) [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast] 함수 또는 DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko] 및 TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko] 변환 함수를 사용하여 BigQuery가 암시적으로 변환하지 않는 Amazon Redshift 데이터 유형을 변환할 수 있습니다.
쿼리를 마이그레이션할 때 데이터 유형 형식 지정 함수 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#data_type_formatting_functions] 섹션의 표에 표시된 것처럼 Amazon Redshift CONVERT(type, expression) [https://docs.aws.amazon.com/redshift/latest/dg/r_CAST_function.html#convert-function] 함수(또는 :: 구문)의 어커런스를 BigQuery의 CAST(expression AS type) [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast] 함수로 변경합니다.
쿼리 구문
이 섹션에서는 Amazon Redshift와 BigQuery 간 쿼리 구문의 차이점을 설명합니다.
SELECT 문
대부분의 Amazon Redshift SELECT [https://docs.aws.amazon.com/redshift/latest/dg/r_SELECT_synopsis.html] 문은 BigQuery와 호환됩니다. 아래 표에는 기타 다른 차이점 목록이 포함되어 있습니다.
Amazon Redshift BigQuery
SELECT TOP number expression
FROM table
SELECT expression
FROM table
ORDER BY expression DESC
LIMIT number
SELECT
x/total AS probability,
ROUND(100 * probability, 1) AS pct
FROM raw_data

참고: Redshift는 동일한 SELECT 문에서 별칭 생성 및 참조를 지원합니다.
SELECT
x/total AS probability,
ROUND(100 * (x/total), 1) AS pct
FROM raw_data
또한 BigQuery는 SELECT 문에서 다음 표현식도 지원합니다. 이는 Amazon Redshift에는 없습니다.
EXCEPT [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#select_except]
REPLACE [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#select_replace]
FROM 절
쿼리의 FROM [https://docs.aws.amazon.com/redshift/latest/dg/r_FROM_clause30.html] 절은 데이터를 선택할 테이블 참조를 나열합니다. Amazon Redshift에서 가능한 테이블 참조에는 테이블, 뷰, 서브 쿼리가 포함됩니다. 이러한 모든 테이블 참조는 BigQuery에서 지원됩니다.
FROM 절에서 다음을 사용하여 BigQuery 테이블을 참조할 수 있습니다.
[project_id].[dataset_id].[table_name]
[dataset_id].[table_name]
[table_name]
BigQuery는 추가 테이블 참조도 지원합니다.
FOR SYSTEM_TIME AS OF [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#for_system_time_as_of]를 사용하는 테이블 정의 및 행의 이전 버전
필드 경로 [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#field_path] 또는 데이터 유형 내의 필드로 확인되는 경로(예: STRUCT)
평면화된 배열 [https://cloud.google.com/bigquery/docs/arrays?hl=ko#querying_nested_arrays]
JOIN 유형
Amazon Redshift와 BigQuery 모두 다음 유형의 조인을 지원합니다.
[INNER] JOIN
LEFT [OUTER] JOIN
RIGHT [OUTER] JOIN
FULL [OUTER] JOIN
CROSS JOIN과 이에 상응하는 암시적 쉼표 교차 조인 [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#cross_join]
아래 표에는 기타 다른 차이점 목록이 포함되어 있습니다.
Amazon Redshift BigQuery
SELECT col
FROM table1
NATURAL INNER JOIN
table2
SELECT col1
FROM table1
INNER JOIN
table2
USING (col1, col2 [, ...])

참고: BigQuery에서 JOIN 절은 절이 CROSS JOIN이거나 조인된 테이블 중 하나가 데이터 유형 또는 배열 내의 필드인 경우를 제외하고 JOIN 조건이 필요합니다.
WITH 절
BigQuery WITH [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#with_clause] 절은 명명된 서브 쿼리를 한 개 이상 포함하며, 이는 후속 SELECT 문에서 참조할 때 실행됩니다. Amazon Redshift WITH [https://docs.aws.amazon.com/redshift/latest/dg/r_WITH_clause.html] 절은 BigQuery와 동일하게 작동하지만 예외적으로 절을 한 번 평가하고 그 결과를 재사용할 수 있습니다.
집합 연산자
Amazon Redshift 집합 연산자 [https://docs.aws.amazon.com/redshift/latest/dg/r_UNION.html#r_UNION-order-of-evaluation-for-set-operators]와 BigQuery 집합 [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#set_operators] 연산자 [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#set_operators]에는 약간의 차이점이 있습니다. 그러나 Amazon Redshift에서 실행 가능한 모든 집합 작업은 BigQuery에서 실행 가능합니다.
Amazon Redshift BigQuery
SELECT * FROM table1
UNION
SELECT * FROM table2
SELECT * FROM table1
UNION DISTINCT
SELECT * FROM table2
참고: BigQuery와 Amazon Redshift 모두 UNION ALL 연산자를 지원합니다.
SELECT * FROM table1
INTERSECT
SELECT * FROM table2
SELECT * FROM table1
INTERSECT DISTINCT
SELECT * FROM table2
SELECT * FROM table1
EXCEPT
SELECT * FROM table2
SELECT * FROM table1
EXCEPT DISTINCT
SELECT * FROM table2
SELECT * FROM table1
MINUS
SELECT * FROM table2
SELECT * FROM table1
EXCEPT DISTINCT
SELECT * FROM table2
SELECT * FROM table1
UNION
SELECT * FROM table2
EXCEPT
SELECT * FROM table3
SELECT * FROM table1
UNION ALL
(
SELECT * FROM table2
EXCEPT
SELECT * FROM table3
)

참고: BigQuery에서는 서로 다른 집합 작업을 분리하려면 괄호로 묶어야 합니다. 동일한 집합 연산자가 반복되는 경우 괄호가 필요하지 않습니다.
ORDER BY 절
ORDER BY [https://docs.amazonaws.cn/en_us/redshift/latest/dg/r_ORDER_BY_clause.html] 절과 BigQuery ORDER BY [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#order_by_clause] 절 사이에는 몇 가지 사소한 차이점이 있습니다.
Amazon Redshift BigQuery
Amazon Redshift에서 NULL는 기본적으로 마지막(오름차순)에 옵니다. BigQuery에서 NULL는 기본적으로 처음(내림차순)에 옵니다.
SELECT *
FROM table
ORDER BY expression
LIMIT ALL
SELECT *
FROM table
ORDER BY expression


참고: BigQuery는 LIMIT ALL 구문을 사용하지 않지만 ORDER BY는 기본적으로 모든 행을 정렬하므로 Amazon Redshift의 LIMIT ALL 절과 동일하게 동작합니다. 모든 ORDER BY 절에 항상 LIMIT 절을 포함하는 것이 좋습니다. 모든 결과 행을 정렬하면 쿼리 실행 성능이 불필요하게 저하됩니다.
SELECT *
FROM table
ORDER BY expression
OFFSET 10
SELECT *
FROM table
ORDER BY expression
LIMIT count OFFSET 10


참고: BigQuery에서 OFFSET을 LIMIT 개수와 함께 사용해야 합니다. 개수 INT64 값은 필요한 최소 정렬 행으로 설정해야 합니다. 모든 결과 행을 정렬하면
쿼리 실행 성능이 불필요하게 저하됩니다.
조건
다음 표는 Amazon Redshift와 관련된 Amazon Redshift 조건 [https://docs.aws.amazon.com/redshift/latest/dg/r_conditions.html] 또는 조건자를 보여주며 이는 해당하는 BigQuery로 변환되어야 합니다.
Amazon Redshift BigQuery
a = ANY [https://docs.aws.amazon.com/redshift/latest/dg/r_comparison_condition.html] (subquery)
a = SOME [https://docs.aws.amazon.com/redshift/latest/dg/r_comparison_condition.html] (subquery)
a IN [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#in_operators] subquery
a <> ALL [https://docs.aws.amazon.com/redshift/latest/dg/r_comparison_condition.html] (subquery)
a != ALL (subquery)
a NOT IN [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#in_operators] subquery
a IS UNKNOWN [https://docs.aws.amazon.com/redshift/latest/dg/r_comparison_condition.html]
expression ILIKE [https://docs.aws.amazon.com/redshift/latest/dg/r_patternmatching_condition_like.html] pattern
a IS NULL [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#is_operators]
LOWER [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#lower](expression) LIKE [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#comparison_operators] LOWER(pattern)
expression LIKE [https://docs.aws.amazon.com/redshift/latest/dg/r_patternmatching_condition_like.html] pattern ESCAPE 'escape_char'
expression LIKE [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#comparison_operators] pattern

참고: BigQuery는 커스텀 이스케이프 문자를 지원하지 않습니다. BigQuery의 경우 이스케이프 문자로 백슬래시 2개를 사용해야 합니다.
expression [NOT] SIMILAR TO [https://docs.aws.amazon.com/redshift/latest/dg/pattern-matching-conditions-similar-to.html] pattern
IF(
LENGTH(
REGEXP_REPLACE(
expression,
pattern,
''
) = 0,
True,
False
)

참고: NOT이 지정된 경우 위의 IF 표현식을 아래 표시된 것처럼 NOT 표현식으로 래핑합니다.

NOT(
IF(
LENGTH(...
)
expression [!] ~ [https://docs.aws.amazon.com/redshift/latest/dg/pattern-matching-conditions-posix.html] pattern
[NOT] [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#logical_operators] REGEXP_CONTAINS [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_contains](
expression,
regex
)
함수
다음 섹션에는 Amazon Redshift 함수와 그에 해당하는 BigQuery 함수가 나와 있습니다.
집계 함수
다음 표는 일반적인 Amazon Redshift 집계, 집계 분석, 근사치 집계 함수와 그에 해당하는 BigQuery 함수 간의 매핑을 보여줍니다.
Amazon Redshift BigQuery
APPROXIMATE COUNT [https://docs.aws.amazon.com/redshift/latest/dg/r_COUNT.html](DISTINCT expression) APPROX_COUNT_DISTINCT [https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions?hl=ko#approx_count_distinct](expression)
APPROXIMATE PERCENTILE_DISC [https://docs.aws.amazon.com/redshift/latest/dg/r_APPROXIMATE_PERCENTILE_DISC.html](
percentile
) WITHIN GROUP (ORDER BY expression) APPROX_QUANTILES [https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions?hl=ko#approx_quantiles](expression, 100)
[OFFSET(CAST(TRUNC(percentile * 100) as INT64))]
AVG [https://docs.aws.amazon.com/redshift/latest/dg/r_AVG.html]([DISTINCT] expression) AVG [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#avg]([DISTINCT] expression)
COUNT [https://docs.aws.amazon.com/redshift/latest/dg/r_COUNT.html](expression) COUNT [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#count](expression)
LISTAGG [https://docs.aws.amazon.com/redshift/latest/dg/r_LISTAGG.html](
[DISTINCT] aggregate_expression
[, delimiter] )
[WITHIN GROUP (ORDER BY order_list)] STRING_AGG [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#string_agg](
[DISTINCT] aggregate_expression
[, delimiter]
[ORDER BY order_list] )
MAX [https://docs.aws.amazon.com/redshift/latest/dg/r_MAX.html](expression) MAX [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#max](expression)
MEDIAN [https://docs.aws.amazon.com/redshift/latest/dg/r_MEDIAN.html](median_expression) PERCENTILE_CONT [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#percentile_cont]( median_expression, 0.5 ) OVER()
MIN [https://docs.aws.amazon.com/redshift/latest/dg/r_MIN.html](expression) MIN [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#min](expression)
PERCENTILE_CONT [https://docs.aws.amazon.com/redshift/latest/dg/r_PERCENTILE_CONT.html](
percentile
) WITHIN GROUP (ORDER BY expression) PERCENTILE_CONT [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#percentile_cont](
median_expression,
percentile
) OVER()

참고: 집계 사용 사례는 다루지 않습니다.
STDDEV [https://docs.aws.amazon.com/redshift/latest/dg/r_STDDEV_functions.html]([DISTINCT] expression) STDDEV [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#stddev]([DISTINCT] expression)
STDDEV_SAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_STDDEV_functions.html]([DISTINCT] expression) STDDEV_SAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#stddev_samp]([DISTINCT] expression)
STDDEV_POP [https://docs.aws.amazon.com/redshift/latest/dg/r_STDDEV_functions.html]([DISTINCT] expression) STDDEV_POP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#stddev_pop]([DISTINCT] expression)
SUM [https://docs.aws.amazon.com/redshift/latest/dg/r_SUM.html]([DISTINCT] expression) SUM [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#sum]([DISTINCT] expression)
VARIANCE [https://docs.aws.amazon.com/redshift/latest/dg/r_VARIANCE_functions.html]([DISTINCT] expression) VARIANCE [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#variance]([DISTINCT] expression)
VAR_SAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_VARIANCE_functions.html]([DISTINCT] expression) VAR_SAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#var_samp]([DISTINCT] expression)
VAR_POP [https://docs.aws.amazon.com/redshift/latest/dg/r_VARIANCE_functions.html]([DISTINCT] expression) VAR_POP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#var_pop]([DISTINCT] expression)
BigQuery는 다음과 같은 집계 [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko], 집계 분석 [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_analytic_functions?hl=ko], 근사치 집계 [https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions?hl=ko] 함수도 제공하며 이 함수는 Amazon Redshift에 직접 아날로그가 없습니다.
ANY_VALUE [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#any_value]
APPROX_TOP_COUNT [https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions?hl=ko#approx_top_count]
APPROX_TOP_SUM [https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions?hl=ko#approx_top_sum]
ARRAY_AGG [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#array_agg]
ARRAY_CONCAT_AGG [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#array_concat_agg]
COUNTIF [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#countif]
CORR [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#corr]
COVAR_POP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#covar_pop]
COVAR_SAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#covar_samp]
비트 집계 함수
다음 표는 일반적인 Amazon Redshift 비트 집계 함수와 그에 해당하는 BigQuery 함수 간의 매핑을 보여줍니다.
Amazon Redshift BigQuery
BIT_AND [https://docs.aws.amazon.com/redshift/latest/dg/r_BIT_AND.html](expression) BIT_AND [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#bit_and](expression)
BIT_OR [https://docs.aws.amazon.com/redshift/latest/dg/r_BIT_OR.html](expression) BIT_OR [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#bit_or](expression)
BOOL_AND [https://docs.aws.amazon.com/redshift/latest/dg/r_BOOL_AND.html]>(expression) LOGICAL_AND [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#logical_and](expression)
BOOL_OR [https://docs.aws.amazon.com/redshift/latest/dg/r_BOOL_OR.html](expression) LOGICAL_OR [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#logical_or](expression)
BigQuery는 다음과 같은 비트 집계 [https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions?hl=ko] 함수도 제공합니다. 이 함수는 Amazon Redshift에 직접 아날로그가 없습니다.
BIT_XOR [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#bit_xor]
윈도우 함수
다음 표는 일반적인 Amazon Redshift 윈도우 함수와 그에 상응하는 BigQuery 함수 간의 매핑을 보여줍니다. BigQuery의 윈도우 함수에는 분석 집계 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_analytic_functions?hl=ko], 집계 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko], 탐색 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko], 번호 지정 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions?hl=ko]가 포함됩니다.

Amazon Redshift BigQuery
AVG [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_AVG.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list frame_clause]
) AVG [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#avg](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
COUNT [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_COUNT.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
) COUNT [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#count](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
CUME_DIST [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_CUME_DIST.html]() OVER
(
[PARTITION BY partition_expression]
[ORDER BY order_list]
) CUME_DIST [https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions?hl=ko#cume_dist]() OVER
(
[PARTITION BY partition_expression]
ORDER BY order_list
)
DENSE_RANK [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_DENSE_RANK.html]() OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
) DENSE_RANK [https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions?hl=ko#dense_rank]() OVER
(
[PARTITION BY expr_list]
ORDER BY order_list
)
FIRST_VALUE [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_first_value.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
) FIRST_VALUE [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#first_value](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
LAST_VALUE [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_first_value.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
) LAST_VALUE [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#last_value](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
)
LAG [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_LAG.html](value_expr [, offset]) OVER
(
[PARTITION BY window_partition]
ORDER BY window_ordering
) LAG [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#lag](value_expr [, offset]) OVER
(
[PARTITION BY window_partition]
ORDER BY window_ordering
)
LEAD [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_LEAD.html](value_expr [, offset]) OVER
(
[PARTITION BY window_partition]
ORDER BY window_ordering
) LEAD [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#lead](value_expr [, offset]) OVER
(
[PARTITION BY window_partition]
ORDER BY window_ordering
)
LISTAGG [https://docs.aws.amazon.com/redshift/latest/dg/r_LISTAGG.html](
[DISTINCT] expression
[, delimiter]
)
[WITHIN GROUP
(ORDER BY order_list)]
OVER (
[PARTITION BY partition_expression] ) STRING_AGG [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#string_agg](
[DISTINCT] aggregate_expression
[, delimiter] )
OVER (
[PARTITION BY partition_list]
[ORDER BY order_list] )
MAX [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_MAX.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
) MAX [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#max](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
MEDIAN [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_MEDIAN.html](median_expression) OVER
(
[PARTITION BY partition_expression] ) PERCENTILE_CONT [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#percentile_cont](
median_expression,
0.5
)
OVER ( [PARTITION BY partition_expression] )
MIN [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_MIN.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
) MIN [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#min](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
NTH_VALUE [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_NTH.html](expression, offset) OVER ( [PARTITION BY window_partition] [ORDER BY window_ordering frame_clause] ) NTH_VALUE [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#nth_value](expression, offset) OVER
(
[PARTITION BY window_partition]
ORDER BY window_ordering
[frame_clause]
)
NTILE [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_NTILE.html](expr) OVER
(
[PARTITION BY expression_list]
[ORDER BY order_list]
) NTILE [https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions?hl=ko#ntile](expr) OVER
(
[PARTITION BY expression_list]
ORDER BY order_list
)
PERCENT_RANK [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_PERCENT_RANK.html]() OVER
(
[PARTITION BY partition_expression]
[ORDER BY order_list]
) PERCENT_RANK [https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions?hl=ko#percent_rank]() OVER
(
[PARTITION BY partition_expression]
ORDER BY order_list
)
PERCENTILE_CONT [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_PERCENTILE_CONT.html](percentile)
WITHIN GROUP (ORDER BY expr) OVER
(
[PARTITION BY expr_list] ) PERCENTILE_CONT [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#percentile_cont](expr, percentile) OVER
(
[PARTITION BY expr_list] )
PERCENTILE_DISC [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_PERCENTILE_DISC.html](percentile) WITHIN GROUP (ORDER BY expr) OVER
(
[PARTITION BY expr_list]
) PERCENTILE_DISC [https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions?hl=ko#percentile_disc](expr, percentile) OVER
(
[PARTITION BY expr_list] )
RANK [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_RANK.html]() OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
) RANK [https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions?hl=ko#rank]() OVER
(
[PARTITION BY expr_list]
ORDER BY order_list
)
RATIO_TO_REPORT [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_RATIO_TO_REPORT.html](ratio_expression) OVER
(
[PARTITION BY partition_expression] ) ratio_expression SUM [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#sum](ratio_expression) OVER
(
[PARTITION BY partition_expression] )
ROW_NUMBER [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_ROW_NUMBER.html]() OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
) ROW_NUMBER [https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions?hl=ko#row_number]() OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
)
STDDEV [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_STDDEV.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
) STDDEV [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#stddev](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause] )
STDDEV_SAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_STDDEV.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list
frame_clause]
) STDDEV_SAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#stddev_samp](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
STDDEV_POP [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_STDDEV.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
) STDDEV_POP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#stddev_pop](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause] )
SUM [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_SUM.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
) SUM [https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions?hl=ko#sum](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
VAR_POP [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_VARIANCE.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
) VAR_POP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#var_pop](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
VAR_SAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_VARIANCE.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
) VAR_SAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#var_samp](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
VARIANCE [https://docs.aws.amazon.com/redshift/latest/dg/r_WF_VARIANCE.html](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
) VARIANCE [https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions?hl=ko#variance](expression) OVER
(
[PARTITION BY expr_list]
[ORDER BY order_list]
[frame_clause]
)
조건식
다음 표는 일반적인 Amazon Redshift 조건부 표현식과 그에 해당하는 BigQuery 표현식 간의 매핑을 보여줍니다.
Amazon Redshift BigQuery
CASE [https://docs.aws.amazon.com/redshift/latest/dg/r_CASE_function.html]expression
WHEN value THEN result
[WHEN...]
[ELSE else_result]
END CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case_expr] expression
WHEN value THEN result
[WHEN...]
[ELSE else_result]
END
COALESCE [https://docs.aws.amazon.com/redshift/latest/dg/r_COALESCE.html](expression1[, ...]) COALESCE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#coalesce](expression1[, ...])
DECODE [https://docs.aws.amazon.com/en_pv/redshift/latest/dg/r_DECODE_expression.html](
expression,
search1, result1
[, search2, result2...]
[, default]
) CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case] expression
WHEN value1 THEN result1
[WHEN value2 THEN result2]
[ELSE default]
END
GREATEST [https://docs.aws.amazon.com/redshift/latest/dg/r_GREATEST_LEAST.html](value [, ...]) GREATEST [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#greatest](value [, ...])
LEAST [https://docs.aws.amazon.com/redshift/latest/dg/r_GREATEST_LEAST.html](value [, ...]) LEAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#least](value [, ...])
NVL [https://docs.aws.amazon.com/redshift/latest/dg/r_NVL_function.html](expression1[, ...]) COALESCE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#coalesce](expression1[, ...])
NVL2 [https://docs.aws.amazon.com/redshift/latest/dg/r_NVL2.html](
expression,
not_null_return_value,
null_return_value
) IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](
expression IS NULL,
null_return_value,
not_null_return_value
)
NULLIF [https://docs.aws.amazon.com/redshift/latest/dg/r_NULLIF_function.html](expression1, expression2) NULLIF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#nullif](expression1, expression2)
BigQuery는 다음과 같은 조건식도 제공합니다. 이 조건식은 Amazon Redshift에 직접 아날로그가 없습니다.
IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if]
IFNULL [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#ifnull]
날짜 및 시간 함수
다음 표는 일반적인 Amazon Redshift 날짜 및 시간 함수와 그에 해당하는 BigQuery 함수 간의 매핑을 보여줍니다. BigQuery 날짜 및 시간 함수에는 날짜 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko], datetime [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko] 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko], 시간 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko], 타임스탬프 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko]가 포함됩니다.
Amazon Redshift와 BigQuery에서 동일하게 보이는 함수는 서로 다른 데이터 유형을 반환할 수 있습니다.
Amazon Redshift BigQuery
ADD_MONTHS [https://docs.aws.amazon.com/redshift/latest/dg/r_ADD_MONTHS.html](
date,
integer
) CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast]( DATE_ADD [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_add](
date,
INTERVAL integer MONTH
)
AS TIMESTAMP
)
timestamptz_or_timestamp AT TIME ZONE [https://docs.aws.amazon.com/redshift/latest/dg/r_AT_TIME_ZONE.html] timezone PARSE_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#parse_timestamp](
"%c%z",
FORMAT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#format_timestamp](
"%c%z",
timestamptz_or_timestamp,
timezone
)
)

참고: 시간대 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#time_zones]는 타임스탬프를 파싱하거나 표시할 타임스탬프 형식을 지정하는 데 사용됩니다. 문자열 형식의 타임스탬프에 시간대가 포함될 수 있지만 BigQuery에서 문자열을 파싱할 때 타임스탬프를 해당 UTC 시간으로 저장합니다. 시간대가 명시적으로 지정되어 있지 않은 경우 기본 시간대인 UTC가 사용됩니다. 시간대 이름 [https://cloud.google.com/dataprep/docs/html/Supported-Time-Zone-Values_66194188?hl=ko] 또는 UTC로부터의 오프셋 [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timezone_definitions](-HH:MM)이 지원되지만 시간대 약어(PDT 등)는 지원되지 않습니다.
CONVERT_TIMEZONE [https://docs.aws.amazon.com/redshift/latest/dg/CONVERT_TIMEZONE.html](
[source_timezone],
target_timezone,
timestamp
) PARSE_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#parse_timestamp](
"%c%z",
FORMAT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#format_timestamp](
"%c%z",
timestamp,
target_timezone
)
)

참고: BigQuery에서는 source_timezone은 UTC입니다.
CURRENT_DATE [https://docs.aws.amazon.com/redshift/latest/dg/r_CURRENT_DATE_function.html]

참고: 현재 세션 시간대(기본적으로 UTC)에서 현재 트랜잭션의 시작 날짜를 반환합니다. CURRENT_DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#current_date]()

참고: 현재 문의 시작 날짜를 UTC 시간대로 반환됩니다.
DATE_CMP [https://docs.aws.amazon.com/redshift/latest/dg/r_DATE_CMP.html](date1, date2) CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case]
WHEN date1 = date2 THEN 0
WHEN date1 > date2 THEN 1
ELSE -1
END
DATE_CMP_TIMESTAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_DATE_CMP_TIMESTAMP.html](date1, date2) CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case]
WHEN date1 = CAST(date2 AS DATE)
THEN 0
WHEN date1 > CAST(date2 AS DATE)
THEN 1
ELSE -1
END
DATE_CMP_TIMESTAMPTZ [https://docs.aws.amazon.com/redshift/latest/dg/r_DATE_CMP_TIMESTAMPTZ.html](date, timestamptz) CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case]
WHEN date > DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date](timestamptz)
THEN 1
WHEN date < DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date](timestamptz)
THEN -1
ELSE 0
END
DATE_PART_YEAR [https://docs.aws.amazon.com/redshift/latest/dg/r_DATE_PART_YEAR.html](date) EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#extract](YEAR FROM date)
DATEADD [https://docs.aws.amazon.com/redshift/latest/dg/r_DATEADD_function.html](date_part, interval, date) CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](
DATE_ADD [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_add](
date,
INTERVAL interval datepart
)
AS TIMESTAMP
)
DATEDIFF [https://docs.aws.amazon.com/redshift/latest/dg/r_DATEDIFF_function.html](
date_part,
date_expression1,
date_expression2
) DATE_DIFF [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_diff](
date_expression1,
date_expression2,
date_part
)
DATE_PART [https://docs.aws.amazon.com/redshift/latest/dg/r_DATE_PART_function.html](date_part, date) EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#extract](date_part FROM date)
DATE_TRUNC [https://docs.aws.amazon.com/redshift/latest/dg/r_DATE_TRUNC.html]('date_part', timestamp) TIMESTAMP_TRUNC [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timestamp_trunc](timestamp, date_part)
EXTRACT [https://docs.aws.amazon.com/redshift/latest/dg/r_EXTRACT_function.html](date_part FROM timestamp) EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#extract](date_part FROM timestamp)
GETDATE [https://docs.aws.amazon.com/redshift/latest/dg/r_GETDATE.html]() PARSE_TIMESTAMP(
"%c",
FORMAT_TIMESTAMP(
"%c",
CURRENT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#current_timestamp]()
)
)
INTERVAL_CMP [https://docs.aws.amazon.com/redshift/latest/dg/r_INTERVAL_CMP.html](
interval_literal1,
interval_literal2
) Redshift 간격의 경우 1년은 360일입니다. BigQuery에서는 다음 사용자 정의 함수(UDF)를 사용하여 Redshift 간격을 파싱하고 초 단위로 변환할 수 있습니다.

CREATE TEMP FUNCTION [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko]
parse_interval(interval_literal STRING) AS (
(select sum(case
when unit in ('minutes', 'minute', 'm' )
then num * 60
when unit in ('hours', 'hour', 'h') then num
* 60 * 60
when unit in ('days', 'day', 'd' ) then num
* 60 * 60 * 24
when unit in ('weeks', 'week', 'w') then num
* 60 * 60 * 24 * 7
when unit in ('months', 'month' ) then num *
60 * 60 * 24 * 30
when unit in ('years', 'year') then num * 60
* 60 * 24 * 360
else num
end)
from (
select
cast(regexp_extract(value,
r'^[0-9]*\.?[0-9]+') as numeric) num,
substr(value, length(regexp_extract(value,
r'^[0-9]*\.?[0-9]+')) + 1) unit
from
UNNEST [https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax?hl=ko#unnest_operator](
SPLIT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#split](
replace(
interval_literal, ' ', ''), ',')) value
)));

간격 리터럴을 비교하려면 다음을 수행합니다.

IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko](
parse_interval(interval_literal1) >
parse_interval(interval_literal2),
1,
IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko](
parse_interval(interval_literal1) >
parse_interval(interval_literal2),
-1,
0
)
)
LAST_DAY [https://docs.aws.amazon.com/redshift/latest/dg/r_LAST_DAY.html](date) DATE_SUB [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_sub](
DATE_ADD [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_add](
date,
INTERVAL 1 MONTH
),
INTERVAL 1 DAY
)
MONTHS_BETWEEN [https://docs.aws.amazon.com/redshift/latest/dg/r_MONTHS_BETWEEN_function.html](
date1,
date2
) DATE_DIFF [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_diff](
date1,
date2,
MONTH
)
NEXT_DAY [https://docs.aws.amazon.com/redshift/latest/dg/r_NEXT_DAY.html](date, day) DATE_ADD [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_add](
DATE_TRUNC [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_trunc](
date,
WEEK(day)
),
INTERVAL 1 WEEK
)
SYSDATE [https://docs.aws.amazon.com/redshift/latest/dg/r_SYSDATE.html]

참고: 현재 세션 시간대(기본적으로 UTC)에서 현재 트랜잭션의 시작 타임스탬프를 반환합니다. CURRENT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#current_timestamp]()

참고: 현재 문의 시작 타임스탬프를 UTC 시간대로 반환합니다.
TIMEOFDAY [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMEOFDAY_function.html]() FORMAT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#format_timestamp](
"%a %b %d %H:%M:%E6S %E4Y %Z",
CURRENT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#current_timestamp]())
TIMESTAMP_CMP [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMESTAMP_CMP.html](
timestamp1,
timestamp2
) CASE
WHEN timestamp1 = timestamp2
THEN 0
WHEN timestamp1 > timestamp2
THEN 1
ELSE -1
END
TIMESTAMP_CMP_DATE [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMESTAMP_CMP_DATE.html](
timestamp,
date
) CASE
WHEN
EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#extract](
DATE FROM timestamp
) = date
THEN 0
WHEN
EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#extract](
DATE FROM timestamp) > date
THEN 1
ELSE -1
END
TIMESTAMP_CMP_TIMESTAMPTZ [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMESTAMP_CMP_TIMESTAMPTZ.html](
timestamp,
timestamptz
)

참고: Redshift는 사용자 세션 정의 시간대에서 타임스탬프를 비교합니다. 기본 사용자 세션 시간대는 UTC입니다. CASE
WHEN timestamp = timestamptz
THEN 0
WHEN timestamp > timestamptz
THEN 1
ELSE -1
END

참고: BigQuery는 UTC 시간대에서 타임스탬프를 비교합니다.
TIMESTAMPTZ_CMP [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMESTAMPTZ_CMP.html](
timestamptz1,
timestamptz2
)

참고: Redshift는 사용자 세션 정의 시간대에서 타임스탬프를 비교합니다. 기본 사용자 세션 시간대는 UTC입니다. CASE
WHEN timestamptz1 = timestamptz2
THEN 0
WHEN timestamptz1 > timestamptz2
THEN 1
ELSE -1
END

참고: BigQuery는 UTC 시간대에서 타임스탬프를 비교합니다.
TIMESTAMPTZ_CMP_DATE [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMESTAMPTZ_CMP_DATE.html](
timestamptz,
date
)

참고: Redshift는 사용자 세션 정의 시간대에서 타임스탬프를 비교합니다. 기본 사용자 세션 시간대는 UTC입니다. CASE
WHEN
EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#extract](
DATE FROM timestamptz) = date
THEN 0
WHEN
EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#extract](
DATE FROM timestamptz) > date
THEN 1
ELSE -1
END

참고: BigQuery는 UTC 시간대에서 타임스탬프를 비교합니다.
TIMESTAMPTZ_CMP_TIMESTAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMESTAMPTZ_CMP_TIMESTAMP.html](
timestamptz,
Timestamp
)

참고: Redshift는 사용자 세션 정의 시간대에서 타임스탬프를 비교합니다. 기본 사용자 세션 시간대는 UTC입니다. CASE
WHEN timestamp = timestamptz
THEN 0
WHEN timestamp > timestamptz
THEN 1
ELSE -1
END

참고: BigQuery는 UTC 시간대에서 타임스탬프를 비교합니다.
TIMEZONE [https://docs.aws.amazon.com/redshift/latest/dg/r_TIMEZONE.html](
timezone,
Timestamptz_or_timestamp
) PARSE_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#parse_timestamp](
"%c%z", FORMAT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#format_timestamp](
"%c%z",
timestamptz_or_timestamp,
timezone
)
)

참고: 시간대 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#time_zones]는 타임스탬프를 파싱하거나 표시할 타임스탬프 형식을 지정하는 데 사용됩니다. 문자열 형식의 타임스탬프에 시간대가 포함될 수 있지만 BigQuery에서 문자열을 파싱할 때 타임스탬프를 해당 UTC 시간으로 저장합니다. 시간대가 명시적으로 지정되어 있지 않은 경우 기본 시간대인 UTC가 사용됩니다. 시간대 이름 [https://cloud.google.com/dataprep/docs/html/Supported-Time-Zone-Values_66194188?hl=ko] 또는 UTC로부터의 오프셋 [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timezone_definitions](-HH:MM)이 지원되지만 시간대 약어(PDT 등)는 지원되지 않습니다.
TO_TIMESTAMP [https://docs.aws.amazon.com/redshift/latest/dg/r_TO_TIMESTAMP.html](timestamp, format) PARSE_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#parse_timestamp](
format [https://cloud.google.com/bigquery/docs/reference/standard-sql/format-elements?hl=ko#format_elements_date_time],
FORMAT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#format_timestamp](
format [https://cloud.google.com/bigquery/docs/reference/standard-sql/format-elements?hl=ko#format_elements_date_time],
timestamp
)
)

참고: BigQuery는 다양한 형식 요소 [https://cloud.google.com/bigquery/docs/reference/standard-sql/format-elements?hl=ko#format_elements_date_time] 집합을 따릅니다. 시간대 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#time_zones]는 타임스탬프를 파싱하거나 표시할 타임스탬프 형식을 지정하는 데 사용됩니다. 문자열 형식의 타임스탬프에 시간대가 포함될 수 있지만 BigQuery에서 문자열을 파싱할 때 타임스탬프를 해당 UTC 시간으로 저장합니다. 시간대가 명시적으로 지정되어 있지 않은 경우 기본 시간대인 UTC가 사용됩니다. 시간대 이름 [https://cloud.google.com/dataprep/docs/html/Supported-Time-Zone-Values_66194188?hl=ko] 또는 UTC와의 오프셋 [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timezone_definitions](-HH:MM)은 형식 문자열에서 지원되지만 시간대 약어(예: PDT)는 지원되지 않습니다.
TRUNC [https://docs.aws.amazon.com/redshift/latest/dg/r_TRUNC_date.html](timestamp) CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](timestamp AS DATE)
BigQuery는 다음과 같은 날짜 및 시간 함수도 제공하며, 이 함수는 Amazon Redshift에 직접 아날로그가 없습니다.
EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#extract]
DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date]
DATE_SUB [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_sub]
DATE_ADD [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_add](DATE 데이터 유형 반환)
DATE_FROM_UNIX_DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#date_from_unix_date]
FORMAT_DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#format_date]
PARSE_DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#parse_date]
UNIX_DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#unix_date]
DATETIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko#datetime]
DATETIME_ADD [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko#datetime_add]
DATETIME_SUB [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko#datetime_sub]
DATETIME_DIFF [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko#datetime_diff]
DATETIME_TRUNC [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko#datetime_trunc]
FORMAT_DATETIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko#format_datetime]
PARSE_DATETIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions?hl=ko#parse_datetime]
CURRENT_TIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#current_time]
TIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#time]
TIME_ADD [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#time_add]
TIME_SUB [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#time_sub]
TIME_DIFF [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#time_diff]
TIME_TRUNC [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#time_trunc]
FORMAT_TIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#format_time]
PARSE_TIME [https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions?hl=ko#parse_time]
TIMESTAMP_SECONDS [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timestamp_seconds]
TIMESTAMP_MILLIS [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timestamp_millis]
TIMESTAMP_MICROS [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#timestamp_micros]
UNIX_SECONDS [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#unix_seconds]
UNIX_MILLIS [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#unix_millis]
UNIX_MICROS [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#unix_micros]
수학 연산자
다음 표는 일반적인 Amazon Redshift 수학 연산자와 그에 해당하는 BigQuery 연산자 간의 매핑을 보여줍니다.
Amazon Redshift BigQuery
X + Y
X + Y
X - Y
X - Y
X * Y
X * Y
X / Y

참고: 연산자가
정수 나누기를 수행 중인 경우(즉, X 및 Y가 모두 정수인 경우) 정수가 반환됩니다. 연산자가 정수가 아닌 나누기를 수행하면 정수가 아닌 값이 반환됩니다. 정수 나누기인 경우:
CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](FLOOR [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#floor](X / Y) AS INT64)

정수 나누기가 아닌 경우:
CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](X / Y AS INT64)

참고: BigQuery의 나누기는 정수가 아닌 값을 반환합니다.
나누기 연산의 오류(0으로 나누기 오류)를 방지하려면 SAFE_DIVIDE [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#safe_divide](X, Y) 또는 IEEE_DIVIDE [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#ieee_divide](X, Y)를 사용하세요.
X % Y
MOD [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#mod](X, Y)

참고: 나누기 연산의 오류를 방지하려면(0으로 나누기 오류) SAFE [https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference?hl=ko#safe_prefix].MOD [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#mod](X, Y)를 사용하세요. SAFE [https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference?hl=ko#safe_prefix].MOD [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#mod](X, 0)는 0이 됩니다.
X ^ Y
POW [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#pow](X, Y)
POWER [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#power](X, Y)

참고: Amazon Redshift와 달리 BigQuery의 ^ 연산자는 비트 xor을 수행합니다.
| / X
SQRT [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#sqrt](X)

참고: 제곱근 연산의 오류(음수 입력)를 방지하려면 SAFE [https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference?hl=ko#safe_prefix].SQRT [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#sqrt](X)를 사용하세요. SAFE [https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference?hl=ko#safe_prefix].SQRT [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#sqrt](X)가 포함된 음수 입력에서는 NULL이 반환됩니다.
|| / X
SIGN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#sign](X) * POWER [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#power](ABS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#abs](X), 1/3)

참고: X가 0보다 작은 유한한 값이고 Y가 정수가 아니면 BigQuery의 POWER [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#power](X, Y)는 오류를 반환합니다.
@ X
ABS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#abs](X)
X << Y
X << [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko] Y

참고: 이 연산자는 두 번째 피연산자 Y가 첫 번째 피연산자 X의 비트 길이보다 크거나 같으면 0 또는 바이트 시퀀스 b'\x00'을 반환합니다(예: X에 유형 INT64가 있으면 64). 이 연산자는 Y가 음수이면 오류를 생성합니다.
X >> Y
X >> [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko] Y

참고: 첫 번째 피연산자 X를 오른쪽으로 이동합니다. 이 연산자는 부호가 있는 유형으로 부호 비트 확장을 수행하지 않습니다(왼쪽에 비어 있는 비트를 0으로 채움). 이 연산자는 두 번째 피연산자 Y가 첫 번째 피연산자 X의 비트 길이보다 크거나 같으면 0 또는 바이트 시퀀스
b'\x00'을 반환합니다(예: X에 유형 INT64가 있으면 64). 이 연산자는 Y가 음수이면 오류를 생성합니다.
X & Y
X & [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko] Y
X | Y
X | [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko] Y
~X
~ [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko]X
BigQuery는 Amazon Redshift에 직접 아날로그가 없는 다음과 같은 수학 연산자도 제공합니다.
X ^ Y [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#bitwise_operators](비트 xor)
수학 함수
Amazon Redshift BigQuery
ABS [https://docs.aws.amazon.com/redshift/latest/dg/r_ABS.html](number) ABS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#abs](number)
ACOS [https://docs.aws.amazon.com/redshift/latest/dg/r_ACOS.html](number) ACOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#acos](number)
ASIN [https://docs.aws.amazon.com/redshift/latest/dg/r_ASIN.html](number) ASIN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#asin](number)
ATAN [https://docs.aws.amazon.com/redshift/latest/dg/r_ATAN.html](number) ATAN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#atan](number)
ATAN2 [https://docs.aws.amazon.com/redshift/latest/dg/r_ATAN2.html](number1, number2) ATAN2 [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#atan2](number1, number2)
CBRT [https://docs.aws.amazon.com/redshift/latest/dg/r_CBRT.html](number) POWER [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#power](number, 1/3)
CEIL [https://docs.aws.amazon.com/redshift/latest/dg/r_CEILING_FLOOR.html](number) CEIL [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#ceil](number)
CEILING [https://docs.aws.amazon.com/redshift/latest/dg/r_CEILING_FLOOR.html](number) CEILING [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#ceiling](number)
CHECKSUM [https://docs.aws.amazon.com/redshift/latest/dg/r_CHECKSUM.html](expression) FARM_FINGERPRINT [https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions?hl=ko#farm_fingerprint](expression)
COS [https://docs.aws.amazon.com/redshift/latest/dg/r_COS.html](number) COS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#cos](number)
COT [https://docs.aws.amazon.com/redshift/latest/dg/r_COT.html](number) 1/TAN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#tan](number)
DEGREES [https://docs.aws.amazon.com/redshift/latest/dg/r_DEGREES.html](number) number*180/ACOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#acos](-1)
DEXP [https://docs.aws.amazon.com/redshift/latest/dg/r_DEXP.html](number) EXP [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#exp](number)
DLOG1 [https://docs.aws.amazon.com/redshift/latest/dg/r_DLOG1.html](number) LN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#ln](number)
DLOG10 [https://docs.aws.amazon.com/redshift/latest/dg/r_DLOG10.html](number) LOG10 [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#log10](number)
EXP [https://docs.aws.amazon.com/redshift/latest/dg/r_EXP.html](number) EXP [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#exp](number)
FLOOR [https://docs.aws.amazon.com/redshift/latest/dg/r_FLOOR.html](number) FLOOR [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#floor](number)
LN [https://docs.aws.amazon.com/redshift/latest/dg/r_LN.html]number) LN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#ln](number)
LOG [https://docs.aws.amazon.com/redshift/latest/dg/r_LOG.html](number) LOG10 [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#log10](number)
MOD [https://docs.aws.amazon.com/redshift/latest/dg/r_MOD.html](number1, number2) MOD [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#mod](number1, number2)
PI [https://docs.aws.amazon.com/redshift/latest/dg/r_PI.html] ACOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#acos](-1)
POWER [https://docs.aws.amazon.com/redshift/latest/dg/r_POWER.html](expression1, expression2) POWER [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#power](expression1, expression2)
RADIANS [https://docs.aws.amazon.com/redshift/latest/dg/r_RADIANS.html](number) ACOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#acos](-1)*(number/180)
RANDOM [https://docs.aws.amazon.com/redshift/latest/dg/r_RANDOM.html]() RAND [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#rand]()
ROUND [https://docs.aws.amazon.com/redshift/latest/dg/r_ROUND.html](number [, integer]) ROUND [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#rand](number [, integer])
SIN [https://docs.aws.amazon.com/redshift/latest/dg/r_SIN.html](number) SIN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#sin](number)
SIGN [https://docs.aws.amazon.com/redshift/latest/dg/r_SIGN.html](number) SIGN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#sign](number)
SQRT [https://docs.aws.amazon.com/redshift/latest/dg/r_SQRT.html](number) SQRT [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#sqrt](number)
TAN [https://docs.aws.amazon.com/redshift/latest/dg/r_TAN.html](number) TAN [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#tan](number)
TO_HEX [https://docs.aws.amazon.com/redshift/latest/dg/r_TO_HEX.html](number) FORMAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#format_string]('%x', number)
TRUNC [https://docs.aws.amazon.com/redshift/latest/dg/r_TRUNC.html](number [, integer])+-+++ TRUNC [https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions?hl=ko#trunc](number [, integer])
문자열 함수
Amazon Redshift BigQuery
string1 || [https://docs.aws.amazon.com/redshift/latest/dg/r_concat_op.html] string2 CONCAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#concat](string1, string2)
BPCHARCMP [https://docs.aws.amazon.com/redshift/latest/dg/r_BPCHARCMP.html](string1, string2) CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case]
WHEN string1 = string2 THEN 0
WHEN string1 > string2 THEN 1
ELSE -1
END
BTRIM [https://docs.aws.amazon.com/redshift/latest/dg/r_BTRIM.html](string [, matching_string]) TRIM [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#trim](string [, matching_string])
BTTEXT_PATTERN_CMP [https://docs.aws.amazon.com/redshift/latest/dg/r_BTTEXT_PATTERN_CMP.html](string1, string2) CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case]
WHEN string1 = string2 THEN 0
WHEN string1 > string2 THEN 1
ELSE -1
END
CHAR_LENGTH [https://docs.aws.amazon.com/redshift/latest/dg/r_CHAR_LENGTH.html](expression) CHAR_LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#char_length](expression)
CHARACTER_LENGTH [https://docs.aws.amazon.com/redshift/latest/dg/r_CHARACTER_LENGTH.html](expression) CHARACTER_LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#character_length](expression)
CHARINDEX [https://docs.aws.amazon.com/redshift/latest/dg/r_CHARINDEX.html](substring, string) STRPOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#strpos](string, substring)
CHR [https://docs.aws.amazon.com/redshift/latest/dg/r_CHR.html](number) CODE_POINTS_TO_STRING [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#code_points_to_string]([number])
CONCAT [https://docs.aws.amazon.com/redshift/latest/dg/r_CONCAT.html](string1, string2) CONCAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#concat](string1, string2)

참고: BigQuery의 CONCAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#concat](...)는
원하는 수의 문자열을 연결할 수 있도록 지원합니다.
CRC32 [https://docs.aws.amazon.com/redshift/latest/dg/crc32-function.html] 커스텀 사용자 정의 함수입니다.
FUNC_SHA1 [https://docs.aws.amazon.com/redshift/latest/dg/FUNC_SHA1.html](string) SHA1 [https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions?hl=ko#sha1](string)
INITCAP [https://docs.aws.amazon.com/redshift/latest/dg/r_INITCAP.html] INITCAP [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#initcap]
LEFT [https://docs.aws.amazon.com/redshift/latest/dg/r_LEFT.html](string, integer) SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](string, 0, integer)
RIGHT [https://docs.aws.amazon.com/redshift/latest/dg/r_LEFT.html](string, integer) SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](string, -integer)
LEN [https://docs.aws.amazon.com/redshift/latest/dg/r_LEN.html](expression) LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#length](expression)
LENGTH [https://docs.aws.amazon.com/redshift/latest/dg/r_LENGTH.html](expression) LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#length](expression)
LOWER [https://docs.aws.amazon.com/redshift/latest/dg/r_LOWER.html](string) LOWER [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#lower](string)
LPAD [https://docs.aws.amazon.com/redshift/latest/dg/r_LPAD.html](string1, length[, string2]) LPAD [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#lpad](string1, length[, string2])
RPAD [https://docs.aws.amazon.com/redshift/latest/dg/r_LPAD.html](string1, length[, string2]) RPAD [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#rpad](string1, length[, string2])
LTRIM [https://docs.aws.amazon.com/redshift/latest/dg/r_LTRIM.html](string, trim_chars) LTRIM [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#ltrim](string, trim_chars)
MD5 [https://docs.aws.amazon.com/redshift/latest/dg/r_MD5.html](string) MD5 [https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions?hl=ko#md5](string)
OCTET_LENGTH [https://docs.aws.amazon.com/redshift/latest/dg/r_OCTET_LENGTH.html](expression) BYTE_LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#byte_length](expression)
POSITION [https://docs.aws.amazon.com/redshift/latest/dg/r_POSITION.html](substring IN string) STRPOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#strpos](string, substring)
QUOTE_IDENT [https://docs.aws.amazon.com/redshift/latest/dg/r_QUOTE_IDENT.html](string) CONCAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#concat]('"',string,'"')
QUOTE_LITERAL [https://docs.aws.amazon.com/redshift/latest/dg/r_QUOTE_LITERAL.html](string) CONCAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#concat]("'",string,"'")
REGEXP_COUNT [https://docs.aws.amazon.com/redshift/latest/dg/REGEXP_COUNT.html]( source_string, pattern
[,position]
) ARRAY_LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions?hl=ko#array_length]( REGEXP_EXTRACT_ALL [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract_all](
source_string,
pattern
)
)

position이 지정된 경우:

ARRAY_LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions?hl=ko#array_length]( REGEXP_EXTRACT_ALL [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract_all](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position <= 0, 1, position)),
pattern
)
)

참고: BigQuery는 re2 [https://github.com/google/re2/wiki/Syntax] 라이브러리를 사용하여 정규 표현식을 지원합니다. 정규 표현식 구문은 해당 문서를 참조하세요.
REGEXP_INSTR [https://docs.aws.amazon.com/redshift/latest/dg/REGEXP_INSTR.html](
source_string,
pattern
[,position
[,occurrence]] ) IFNULL [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#ifnull]( STRPOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#strpos](
source_string, REGEXP_EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract](
source_string,
pattern)
),0)

source_string이 지정된 경우:

REGEXP_REPLACE(
source_string,

pattern,
replace_string
)

position이 지정된 경우:

IFNULL [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#ifnull]( STRPOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#strpos](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko](position
<= 0, 1, position)), REGEXP_EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position <= 0, 1, position)),
pattern)
) + IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position <= 0, 1, position) - 1, 0)

occurrence가 지정된 경우:

IFNULL [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#ifnull]( STRPOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#strpos](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position
<= 0, 1, position)), REGEXP_EXTRACT_ALL [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract_all](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position <= 0, 1, position)),
pattern
)[SAFE_ORDINAL [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#array_subscript_operator](occurrence)]
) + IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position <= 0, 1, position) - 1, 0)

참고: BigQuery는 re2 [https://github.com/google/re2/wiki/Syntax] 라이브러리를 사용하여
정규 표현식을 지원합니다.
해당 정규 표현식 구문의 문서를
참조하세요.
REGEXP_REPLACE [https://docs.aws.amazon.com/redshift/latest/dg/REGEXP_REPLACE.html]( source_string,
pattern
[, replace_string [, position]]
) REGEXP_REPLACE [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_replace](
source_string,
pattern,
""
)

source_string이 지정된 경우:

REGEXP_REPLACE [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_replace](
source_string,

pattern, replace_string
)

position이 지정된 경우:

CASE [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#case]
WHEN position > LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#length](source_string) THEN source_string
WHEN position <= 0 THEN REGEXP_REPLACE [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_replace](
source_string, pattern,
""
) ELSE
CONCAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#concat]( SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](
source_string, 1, position - 1), REGEXP_REPLACE [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_replace](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, position), pattern,
replace_string
)
) END
REGEXP_SUBSTR [https://docs.aws.amazon.com/redshift/latest/dg/REGEXP_SUBSTR.html]( source_string, pattern
[, position
[, occurrence]] ) REGEXP_EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract](
source_string, pattern
)

position이 지정된 경우:

REGEXP_EXTRACT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position <= 0, 1, position)),
pattern

)

occurrence가 지정된 경우:

REGEXP_EXTRACT_ALL [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#regexp_extract_all](
SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](source_string, IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions?hl=ko#if](position <= 0, 1, position)),


pattern
)[SAFE_ORDINAL [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#array_subscript_operator](occurrence)]

참고: BigQuery는 re2 [https://github.com/google/re2/wiki/Syntax] 라이브러리를 사용하여 정규 표현식을 정규 표현식을 지원합니다. 정규 표현식 구문은 해당 문서를 참조하세요.
REPEAT [https://docs.aws.amazon.com/redshift/latest/dg/r_REPEAT.html](string, integer) REPEAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#repeat](string, integer)
REPLACE [https://docs.aws.amazon.com/redshift/latest/dg/r_REPLACE.html](string, old_chars, new_chars) REPLACE [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#replace](string, old_chars, new_chars)
REPLICA [https://docs.aws.amazon.com/redshift/latest/dg/r_REPLICATE.html](string, integer) REPEAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#repeat](string, integer)
REVERSE [https://docs.aws.amazon.com/redshift/latest/dg/r_REVERSE.html](expression) REVERSE [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#reverse](expression)
RTRIM [https://docs.aws.amazon.com/redshift/latest/dg/r_RTRIM.html](string, trim_chars) RTRIM [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#rtrim](string, trim_chars)
SPLIT_PART [https://docs.aws.amazon.com/redshift/latest/dg/SPLIT_PART.html](string, delimiter, part) SPLIT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#split](
string
delimiter
)SAFE_ORDINAL [https://cloud.google.com/bigquery/docs/reference/standard-sql/operators?hl=ko#array_subscript_operator](part)
STRPOS [https://docs.aws.amazon.com/redshift/latest/dg/r_STRPOS.html](string, substring) STRPOS [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#strpos](string, substring)
STRTOL [https://docs.aws.amazon.com/redshift/latest/dg/r_STRTOL.html](string, base)
SUBSTRING [https://docs.aws.amazon.com/redshift/latest/dg/r_SUBSTRING.html](
string,
start_position, number_characters ) SUBSTR [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#substr](
string,
start_position, number_characters )
TEXTLEN [https://docs.aws.amazon.com/redshift/latest/dg/r_TEXTLEN.html](expression) LENGTH [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#length](expression)
TRANSLATE [https://docs.aws.amazon.com/redshift/latest/dg/r_TRANSLATE.html](
expression,
characters_to_replace, characters_to_substitute ) 다음과 같이 UDF를 사용하여 구현할 수 있습니다.

CREATE TEMP FUNCTION [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko]
translate(expression STRING,
characters_to_replace STRING, characters_to_substitute STRING) AS ( IF(LENGTH(characters_to_replace) < LENGTH(characters_to_substitute) OR LENGTH(expression) <
LENGTH(characters_to_replace), expression,
(SELECT
STRING_AGG(
IFNULL(
(SELECT ARRAY_CONCAT([c],
SPLIT(characters_to_substitute, ''))[SAFE_OFFSET((
SELECT IFNULL(MIN(o2) + 1,
0) FROM
UNNEST(SPLIT(characters_to_replace,
'')) AS k WITH OFFSET o2
WHERE k = c))]
),
''),
'' ORDER BY o1)
FROM UNNEST(SPLIT(expression, ''))
AS c WITH OFFSET o1
))
);
TRIM [https://docs.aws.amazon.com/redshift/latest/dg/r_TRIM.html]([BOTH] string) TRIM [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#trim](string)
TRIM [https://docs.aws.amazon.com/redshift/latest/dg/r_TRIM.html]([BOTH] characters FROM string) TRIM [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#trim](string, characters)
UPPER [https://docs.aws.amazon.com/redshift/latest/dg/r_UPPER.html](string) UPPER [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#upper](string)
데이터 유형 형식 지정 함수
Amazon Redshift BigQuery
CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](expression AS type) CAST [https://docs.aws.amazon.com/redshift/latest/dg/r_CAST_function.html#r_CAST_function-cast](expression AS type)
expression :: [https://docs.aws.amazon.com/redshift/latest/dg/r_CAST_function.html#r_CAST_function-cast] type CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](expression AS type)
CONVERT [https://docs.aws.amazon.com/redshift/latest/dg/r_CAST_function.html#convert-function](type, expression) CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](expression AS type)
TO_CHAR [https://docs.aws.amazon.com/redshift/latest/dg/r_TO_CHAR.html](
timestamp_expression, format
) FORMAT_TIMESTAMP [https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions?hl=ko#format_timestamp](
format,
timestamp_expression
)

참고: BigQuery와 Amazon Redshift는 timestamp_expression에 대한 형식 문자열을 지정하는 방법이 다릅니다.
TO_CHAR [https://docs.aws.amazon.com/redshift/latest/dg/r_TO_CHAR.html](
numeric_expression,
format
) FORMAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#format_string](
format,
numeric_expression
)

참고: BigQuery와 Amazon Redshift는 timestamp_expression에 대한 형식 문자열을 지정하는 방법이 다릅니다.
TO_DATE [https://docs.aws.amazon.com/redshift/latest/dg/r_TO_DATE_function.html](date_string, format) PARSE_DATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions?hl=ko#parse_date](date_string, format)

참고: BigQuery와 Amazon Redshift는 date_string에 대한 형식 문자열을 지정하는 방법이 다릅니다.
TO_NUMBER [https://docs.aws.amazon.com/redshift/latest/dg/r_TO_NUMBER.html](string, format) CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#cast](
FORMAT [https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions?hl=ko#format_string](
format,
numeric_expression
) TO INT64
)

참고: BigQuery와 Amazon Redshift는 숫자 형식 문자열을 지정하는 방법이 다릅니다.
또한 BigQuery는 SAFE_CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#safe_casting](expression AS typename)를 지원합니다. 이 함수는 BigQuery가 Cast 변환을 수행할 수 없는 경우 NULL를 반환합니다. 예를 들어 SAFE_CAST [https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions?hl=ko#safe_casting]("apple" AS INT64)는 NULL을 반환합니다.
DML 구문
이 섹션에서는 Amazon Redshift와 BigQuery 간 데이터 관리 언어 구문의 차이점을 설명합니다.
INSERT 문
Amazon Redshift는 열에 대해 구성 가능한 DEFAULT 키워드를 제공합니다. BigQuery에서 null 허용 열의 DEFAULT 값은 NULL이며 DEFAULT는 필수 열에서 지원되지 않습니다. 대부분의 Amazon Redshift INSERT 문 [https://docs.aws.amazon.com/redshift/latest/dg/r_INSERT_30.html]은 BigQuery와 호환됩니다. 다음 표에는 예외 사항이 나와 있습니다.
Amazon Redshift BigQuery
INSERT INTO table (column1 [, ...])
DEFAULT VALUES INSERT [INTO] table (column1 [, ...])
VALUES (DEFAULT [, ...])
INSERT INTO table (column1, [,...]) VALUES (
SELECT ...
FROM ...
) INSERT [INTO] table (column1, [,...])
SELECT ...
FROM ...
BigQuery는 서브 쿼리를 사용한 값 삽입(서브 쿼리를 사용하여 값 중 하나를 계산)도 지원하는데 Amazon Redshift의 경우 이를 지원하지 않습니다. 예를 들면 다음과 같습니다.
INSERT INTO table (column1, column2)
VALUES ('value_1', (
SELECT column2
FROM table2
))
COPY 문
Amazon Redshift의 COPY [https://docs.aws.amazon.com/redshift/latest/dg/r_COPY.html] 명령어는 데이터 파일 또는 Amazon DynamoDB 테이블의 데이터를 테이블에 로드합니다. BigQuery는 SQL COPY 명령어를 사용하여 데이터를 로드하지 않지만, 여러 가지 비SQL 도구 및 옵션을 사용하여 BigQuery 테이블에 데이터를 로드 [https://cloud.google.com/bigquery/docs/loading-data?hl=ko]할 수 있습니다. 또한 Apache Spark [https://cloud.google.com/dataproc/docs/concepts/connectors/cloud-storage?hl=ko#other_sparkhadoop_clusters] 또는 Apache Beam [https://beam.apache.org/documentation/io/built-in/google-bigquery/#writing-to-bigquery]에서 제공되는 데이터 파이프라인 싱크를 사용하여 BigQuery에 데이터를 쓸 수 있습니다.
UPDATE 문
대부분의 Amazon Redshift UPDATE 문은 BigQuery와 호환됩니다. 다음 표에는 예외 사항이 나와 있습니다.
Amazon Redshift BigQuery
UPDATE table
SET column = expression [,...] [FROM ...] UPDATE table
SET column = expression [,...]
[FROM ...]
WHERE TRUE

참고: BigQuery의 모든 UPDATE 문에는 뒤에 조건이 나오는 WHERE 키워드가 필요합니다.
UPDATE table
SET column = DEFAULT [,...] [FROM ...]
[WHERE ...] UPDATE table
SET column = NULL [, ...]
[FROM ...]
WHERE ...

참고: BigQuery의 UPDATE 명령어는 DEFAULT 값을 지원하지 않습니다.

Amazon Redshift UPDATE 문에 WHERE 절이 포함되어 있지 않은 경우 BigQuery UPDATE 문은 WHERE TRUE로 조건을 지정해야 합니다.
DELETE 및 TRUNCATE 문
테이블 스키마 또는 색인에 영향을 주지 않고 테이블에서 행을 삭제하려면 DELETE 및 TRUNCATE 문을 사용합니다.
Amazon Redshift에서는 TRUNCATE 문이 더 빠르고, 이후에 VACUUM 및 ANALYZE 작업이 필요하지 않기 때문에 정규화되지 않은 DELETE 문보다 권장됩니다. 하지만 DELETE 문을 사용하면 동일한 효과를 얻을 수 있습니다.
BigQuery의 DELETE 문에는 WHERE 절이 있어야 합니다. BigQuery의 DELETE에 대한 자세한 내용은 DML 문서에서 BigQuery DELETE 예시 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko#delete_examples]를 참조하세요.
Amazon Redshift BigQuery
DELETE [FROM] [https://docs.aws.amazon.com/redshift/latest/dg/r_TRUNCATE.html] table_name

TRUNCATE [TABLE] [https://docs.aws.amazon.com/redshift/latest/dg/r_TRUNCATE.html] table_name DELETE FROM [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko#delete_statement] table_name
WHERE TRUE

BigQuery DELETE 문에는 WHERE 절이 필요합니다.
DELETE FROM table_name
USING other_table
WHERE table_name.id=other_table.id DELETE FROM table_name
WHERE table_name.id IN (
SELECT id
FROM other_table
)

DELETE FROM table_name
WHERE EXISTS (
SELECT id
FROM other_table
WHERE table_name.id = other_table.id )

Amazon Redshift에서 USING은 추가 테이블이 WHERE 절에서 참조되도록 합니다. BigQuery에서는 WHERE 절에 서브 쿼리를 사용해 추가 테이블을 참조할 수 있습니다.
MERGE 문
MERGE 문은 INSERT, UPDATE, DELETE 작업을 단일 upsert 문으로 결합하여 원자적으로 작업을 수행할 수 있습니다. MERGE 작업은 각 대상 행에 대해 최대 1개의 소스 행과 일치해야 합니다.
Amazon Redshift는 단일 MERGE 명령어를 지원하지 않습니다. 하지만 Amazon Redshift에서는 트랜잭션에서 INSERT, UPDATE, DELETE 작업을 수행하여 병합 작업을 수행할 수 있습니다.
기존 행을 교체하여 병합 작업 수행
Amazon Redshift에서는 DELETE 문과 INSERT 문을 차례로 사용하여 대상 테이블의 모든 열을 덮어쓸 수 있습니다. DELETE 문에서 업데이트해야 하는 행을 삭제하면 INSERT 문이 업데이트된 행을 삽입합니다. BigQuery 테이블은 DML 문이 하루 1,000개로 제한되므로 다음 테이블과 같이 INSERT, UPDATE, DELETE 문을 단일 MERGE 문으로 통합해야 합니다.
Amazon Redshift BigQuery
기존 행을 교체하여 [https://docs.aws.amazon.com/redshift/latest/dg/merge-replacing-existing-rows.html] 병합 작업 수행 [https://docs.aws.amazon.com/redshift/latest/dg/merge-replacing-existing-rows.html]을 참조하세요.

CREATE TEMP TABLE temp_table;

INSERT INTO temp_table
SELECT *
FROM source
WHERE source.filter = 'filter_exp';

BEGIN TRANSACTION;

DELETE FROM target
USING temp_table
WHERE target.key = temp_table.key;

INSERT INTO target
SELECT *
FROM temp_table;

END TRANSACTION;

DROP TABLE temp_table; MERGE target
USING source
ON target.key = source.key
WHEN MATCHED AND source.filter = 'filter_exp' THEN
UPDATE SET
target.col1 = source.col1,
target.col2 = source.col2,
...

참고: 모든 열을 업데이트하는 경우 모든 열을 나열해야 합니다.
열 목록을 지정하여 [https://docs.aws.amazon.com/redshift/latest/dg/merge-specify-a-column-list.html] 병합 작업 수행 [https://docs.aws.amazon.com/redshift/latest/dg/merge-specify-a-column-list.html]을 참조하세요.

CREATE TEMP TABLE temp_table;

INSERT INTO temp_table
SELECT *
FROM source
WHERE source.filter = 'filter_exp';

BEGIN TRANSACTION;

UPDATE target SET
col1 = temp_table.col1,
col2 = temp_table.col2
FROM temp_table
WHERE target.key=temp_table.key;

INSERT INTO target
SELECT *
FROM MERGE target
USING source
ON target.key = source.key
WHEN MATCHED AND source.filter = 'filter_exp' THEN
UPDATE SET
target.col1 = source.col1,
target.col2 = source.col2
DDL 구문
이 섹션에서는 Amazon Redshift와 BigQuery 간 데이터 정의 언어 구문의 차이점을 설명합니다.
SELECT INTO 문
Amazon Redshift에서는 테이블 생성과 삽입을 결합하여 SELECT INTO 문으로 쿼리 결과를 새 테이블에 삽입할 수 있습니다.
Amazon Redshift BigQuery
SELECT expression, ... INTO table
FROM ... INSERT table
SELECT expression, ...
FROM ...
WITH subquery_table AS ( SELECT ...
)
SELECT expression, ... INTO table
FROM subquery_table
... INSERT table
WITH subquery_table AS (
SELECT ...
)
SELECT expression, ...
FROM subquery_table
...
SELECT expression
INTO TEMP table
FROM ...

SELECT expression
INTO TEMPORARY table
FROM ... BigQuery는 임시 테이블을 에뮬레이션하는 여러 가지 방법을 제공합니다. 자세한 내용은 임시 테이블 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#temporary_tables] 섹션을 참조하세요.
CREATE TABLE 문
대부분의 Amazon Redshift CREATE TABLE [https://docs.teradata.com/reader/scPHvjfglIlB8F70YliLAw/t9ZHBbmVpK7GrnocHmVG1Q] 문은 BigQuery에서 사용되지 않는 다음 구문 요소를 제외하고 BigQuery와 호환됩니다.
Amazon Redshift BigQuery
CREATE TABLE table_name (
col1 data_type1 NOT NULL,
col2 data_type2 NULL,
col3 data_type3 UNIQUE,
col4 data_type4 PRIMARY KEY,
col5 data_type5
)

참고: UNIQUE 및 PRIMARY KEY 제약조건은 정보 제공용이며 Amazon Redshift [https://docs.aws.amazon.com/redshift/latest/dg/t_Defining_constraints.html] 시스템 [https://docs.aws.amazon.com/redshift/latest/dg/t_Defining_constraints.html]에 의해 시행되지 않습니다. CREATE TABLE table_name (
col1 data_type1 NOT NULL,
col2 data_type2,
col3 data_type3,
col4 data_type4,
col5 data_type5,
)
CREATE TABLE table_name
(
col1 data_type1[,...]
table_constraints
)
where table_constraints are:
[UNIQUE(column_name [, ... ])]
[PRIMARY KEY(column_name [, ...])]
[FOREIGN KEY(column_name [, ...])
REFERENCES reftable [(refcolumn)]

참고: UNIQUE 및 PRIMARY KEY 제약조건은 정보 제공용이며 Amazon Redshift 시스템에 의해 시행되지 않습니다 [https://docs.aws.amazon.com/redshift/latest/dg/t_Defining_constraints.html]. CREATE TABLE table_name
(
col1 data_type1[,...]
)
PARTITION BY [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#partition_expression] column_name
CLUSTER BY [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#clustering_column_list] column_name [, ...]

참고: BigQuery는 UNIQUE, PRIMARY KEY, FOREIGN KEY 테이블 제약조건을 사용하지 않습니다. 쿼리 실행 중에 이러한 제약조건이 제공하는 것과 유사하게 최적화하려면 BigQuery 테이블을 파티션으로 나누고 클러스터링합니다. CLUSTER BY는 최대 4개 열까지 지원합니다.
CREATE TABLE table_name
LIKE original_table_name 이 예시 [https://cloud.google.com/bigquery/docs/information-schema-tables?hl=ko#example_3]를 통해 INFORMATION_SCHEMA 테이블을 사용하여 열 이름, 데이터 유형, NOT NULL 제약조건을 새 테이블에 복사하는 방법에 대해 알아보세요.
CREATE TABLE table_name
(
col1 data_type1
)
BACKUP NO

참고: Amazon Redshift에서는 처리 시간을 절약하고 저장공간을 줄이기 위해 BACKUP NO [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_TABLE_NEW.html] 설정이 지정됩니다. BigQuery는 처리 시간이나 요금이 청구되는 스토리지에 영향을 미치지 않고 모든 테이블의 이전 버전을 최대 7일간 자동으로 보관하므로 BACKUP NO 테이블 옵션이 사용되지 않거나 필요하지 않습니다.
CREATE TABLE table_name
(
col1 data_type1
)
table_attributes
where table_attributes are:
[DISTSTYLE {AUTO|EVEN|KEY|ALL}]
[DISTKEY (column_name)]
[[COMPOUND|INTERLEAVED] SORTKEY
(column_name [, ...])] BigQuery는 클러스터링을 지원하여 키를 정렬된 순서로 저장할 수 있습니다.
CREATE TABLE table_name
AS SELECT ... CREATE TABLE table_name
AS SELECT ...
CREATE TABLE IF NOT EXISTS table_name ... CREATE TABLE IF NOT EXISTS
table_name
...
또한 BigQuery는 테이블이 이미 있는 경우 덮어쓰는 DDL 문 CREATE OR REPLACE TABLE을 지원합니다.
BigQuery의 CREATE TABLE 문은 Amazon Redshift에서는 적용되지 않는 다음 절도 지원합니다.
ARTITION BY partition 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#partition_expression]
CLUSTER BY clustering_column_list [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#clustering_column_list]
OPTIONS(table_options_list) [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#table_option_list]
BigQuery의 CREATE TABLE에 대한 자세한 내용은 DML 문서에서 BigQuery CREATE TABLE 예시 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create-table-examples]를 참조하세요.
임시 테이블
Amazon Redshift는 현재 세션 내에만 표시되는 임시 테이블을 지원합니다. BigQuery에서 임시 테이블을 에뮬레이션하는 방법에는 여러 가지가 있습니다.
데이터 세트 TTL: 데이터 세트에서 생성된 모든 테이블의 수명이 데이터 세트의 수명보다 오래 지속되지 않으므로 테이블을 임시로 사용할 수 있도록 수명이 짧은(예: 1시간) 데이터 세트를 만듭니다. 이 데이터 세트의 모든 테이블 이름 앞에 temp를 추가하여 임시 테이블임을 명확하게 나타낼 수 있습니다.
테이블 TTL: 다음과 유사한 DDL 문을 사용하여 테이블별로 단기 테이블을 만듭니다.
CREATE TABLE
temp.name (col1, col2, ...)
OPTIONS (expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(),
INTERVAL 1 HOUR));
CREATE VIEW 문
다음 표에서는 CREATE VIEW 문에 대해 Amazon Redshift와 BigQuery 간 유사점을 보여줍니다.
Amazon Redshift BigQuery
CREATE VIEW view_name AS SELECT ...code> CREATE VIEW [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_view_statement] view_name AS SELECT ...
CREATE OR REPLACE VIEW view_name AS SELECT ... CREATE OR REPLACE VIEW [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_view_statement]
view_name AS
SELECT ...
CREATE VIEW view_name
(column_name, ...)
AS SELECT ... CREATE VIEW [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_view_statement] view_name AS SELECT ...
지원되지 않습니다. CREATE VIEW IF NOT EXISTS [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_view_statement] c view_name
OPTIONS(view_option_list [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#view_option_list])
AS SELECT …

지정된 데이터 세트에 뷰가 없는 경우에만 새 뷰를 만듭니다.
CREATE VIEW view_name
AS SELECT ...
WITH NO SCHEMA BINDING [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_VIEW.html]

Amazon Redshift에서 외부 테이블을 참조하려면 최근 바인딩 뷰가 필요합니다. BigQuery에서 뷰를 만들려면 모든 참조 객체가 이미 존재해야 합니다.

BigQuery를 사용하면 외부 데이터 소스를 쿼리 [https://cloud.google.com/bigquery/external-data-sources?hl=ko]할 수 있습니다.
사용자 정의 함수(UDF)
UDF를 사용하면 커스텀 작업에 대한 함수를 만들 수 있습니다. 이러한 함수는 입력 열을 받아 작업을 수행하고 이러한 작업의 결과를 값으로 반환합니다.
Amazon Redshift와 BigQuery 모두 SQL 표현식을 사용한 UDF를 지원합니다. 또한 Amazon Redshift에서는 Python 기반 UDF [https://docs.aws.amazon.com/redshift/latest/dg/udf-python-language-support.html]를 만들 수 있고 BigQuery에서는 자바스크립트 기반 UDF [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#javascript-udf-structure]를 만들 수 있습니다.
일반적인 BigQuery UDF 라이브러리는 Google Cloud BigQuery 유틸리티 GitHub 저장소 [https://github.com/GoogleCloudPlatform/bigquery-utils/tree/master/udfs/community]를 참조하세요.
CREATE FUNCTION 구문
다음 표에서는 Amazon Redshift와 BigQuery 간 SQL UDF 생성 구문의 차이점을 설명합니다.
Amazon Redshift BigQuery
CREATE [OR REPLACE] FUNCTION [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html]
function_name
([sql_arg_name sql_arg_data_type[,..]]) RETURNS data_type
IMMUTABLE
AS $$
sql_function_definition
$$ LANGUAGE sql CREATE [OR REPLACE] FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement]
function_name
([sql_arg_name sql_arg_data_type[,..]]) AS
sql_function_definition

참고: BigQuery SQL UDF [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#sql-udf-structure]에서 반환 데이터 유형은 선택사항입니다. 쿼리가 함수를 호출하면 BigQuery는 SQL 함수 본문을 통해 함수 결과 유형을 추론합니다.
CREATE [OR REPLACE] FUNCTION [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html]
function_name
([sql_arg_name sql_arg_data_type[,..]]) RETURNS data_type
{ VOLATILE | STABLE | IMMUTABLE } AS $$
sql_function_definition
$$ LANGUAGE sql CREATE [OR REPLACE] FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement]
function_name
([sql_arg_name sql_arg_data_type[,..]]) RETURNS data_type
AS sql_function_definition

참고: 함수 변동성은 BigQuery에서 구성 가능한 매개변수가 아닙니다. 모든 BigQuery UDF 변동성은 Amazon Redshift의 IMMUTABLE 변동성과 동일합니다. 즉, 데이터베이스 조회를 수행하지 않거나 인수 목록에 직접 포함되지 않은 정보를 사용하지 않습니다.
CREATE [OR REPLACE] FUNCTION [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html]
function_name
([sql_arg_name sql_arg_data_type[,..]]) RETURNS data_type
IMMUTABLE
AS $$
SELECT_clause
$$ LANGUAGE sql

참고: Amazon Redshift는 함수 정의로 SQL SELECT 절만 지원합니다. 또한 SELECT 절에는 FROM, INTO, WHERE, GROUP BY, ORDER BY, 및 LIMIT 절을 포함할 수 없습니다. CREATE [OR REPLACE] FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement]
function_name
([sql_arg_name sql_arg_data_type[,..]]) RETURNS data_type
AS sql_expression

참고: BigQuery는 함수 정의로 모든 SQL 표현식을 지원합니다. 그러나 테이블, 뷰 또는 모델 참조는 지원되지 않습니다.
CREATE [OR REPLACE] FUNCTION [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html]
function_name
([sql_arg_name sql_arg_data_type[,..]]) RETURNS data_type
IMMUTABLE
AS $$
sql_function_definition
$$ LANGUAGE sql CREATE [OR REPLACE] FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement] function_name ([sql_arg_name sql_arg_data_type[,..]]) RETURNS data_type AS sql_function_definition

참고: GoogleSQL UDF에서 언어 리터럴을 지정할 필요가 없습니다. BigQuery는 기본적으로 SQL 표현식을 해석합니다. 또한 함수 문의 시작과 끝을 나타내기 위해 Amazon Redshift 달러 기호($$) is not supported in BigQuery.
CREATE [OR REPLACE] FUNCTION [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html] function_name (integer, integer) RETURNS integer IMMUTABLE AS $$ SELECT $1 + $2 $$ LANGUAGE sql CREATE [OR REPLACE] FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement]
function_name
(x INT64, y INT64)
RETURNS INT64
AS
SELECT x + y

Note: BigQuery UDFs require all input arguments to be named. The Amazon Redshift argument variables ($1, $2, …) are not supported in BigQuery.
CREATE [OR REPLACE] FUNCTION [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html]
function_name
(integer, integer)
RETURNS integer
IMMUTABLE
AS $$
SELECT $1 + $2
$$ LANGUAGE sql

Note: Amazon Redshift does not support ANY TYPE for SQL UDFs. However, it supports using the ANYELEMENT [https://docs.aws.amazon.com/redshift/latest/dg/udf-creating-a-scalar-udf.html#udf-anyelement-data-type] data type in Python-based UDFs. CREATE [OR REPLACE] FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement]
function_name
(x ANY TYPE, y ANY TYPE)
AS
SELECT x + y

Note: BigQuery supports using ANY TYPE as argument type. The function accepts an input of any type for this argument. For more information, see templated parameter [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#templated-sql-udf-parameters] in BigQuery.
BigQuery also supports the CREATE FUNCTION IF NOT EXISTS statement, which treats the query as successful and takes no action if a function with the same name already exists.
BigQuery's CREATE FUNCTION statement also supports creating TEMPORARY [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement] or TEMP functions, which do not have an Amazon Redshift equivalent.
See calling UDFs [https://cloud.google.com/bigquery/docs/reference/standard-sql/syntax?hl=ko#calling_persistent_user-defined_functions_udfs] for details on executing a BigQuery-persistent UDF.
DROP FUNCTION syntax
The following table addresses differences in DROP FUNCTION syntax between Amazon Redshift and BigQuery.
Amazon Redshift BigQuery
DROP FUNCTION [https://docs.aws.amazon.com/redshift/latest/dg/r_DROP_FUNCTION.html]
function_name
( [arg_name] arg_type [, ...] ) [ CASCADE | RESTRICT ] DROP FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#drop_function_statement]
dataset_name.function_name

Note: BigQuery does not require using the function's signature for deleting the function. Also, removing function dependencies is not supported in BigQuery.
BigQuery also supports the DROP FUNCTION IF EXISTS [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#drop_function_statement] statement, which deletes the function only if the function exists in the specified dataset.
BigQuery requires that you specify the project_name if the function is not located in the current project.
UDF components
This section highlights the similarities and differences in UDF components between Amazon Redshift andBigQuery.
Component Amazon Redshift BigQuery
Name Amazon Redshift recommends [https://docs.aws.amazon.com/redshift/latest/dg/udf-naming-udfs.html] using the prefix _f for function names to avoid conflicts with existing or future built-in SQL function names. In BigQuery, you can use any custom function name.
Arguments Arguments are optional. You can use name and data types for Python UDF arguments and only data types for SQL UDF arguments. In SQL UDFs, you must refer to arguments using $1, $2, and so on. Amazon Redshift also restricts the number of arguments [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html] to 32. Arguments are optional, but if you specify arguments, they must use both name and data types for both JavaScript and SQL UDFs. The maximum number of arguments for a persistent UDF is 256.
Data type Amazon Redshift supports a different set of data types for SQL [https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html] and Python [https://docs.aws.amazon.com/redshift/latest/dg/udf-data-types.html] UDFs.
For a Python UDF, the data type might also be ANYELEMENT [https://docs.aws.amazon.com/redshift/latest/dg/udf-creating-a-scalar-udf.html#udf-anyelement-data-type].

You must specify a RETURN data type for both SQL and Python UDFs.

See Data types [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#data_types] in this document for equivalents between data types in Amazon Redshift and in BigQuery. BigQuery supports a different set of data types for SQL [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko] and JavaScript [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#supported-javascript-udf-data-types] UDFs.
For a SQL UDF, the data type might also be ANY TYPE. For more information, see templated parameters [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#templated-sql-udf-parameters] in BigQuery.

The RETURN data type is optional for SQL UDFs.

See Supported JavaScript UDF data types [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#supported-javascript-udf-data-types] for information on how BigQuery data types map to JavaScript data types.
Definition For both SQL and Python UDFs, you must enclose the function definition using dollar quoting, as in a pair of dollar signs ($$)를 사용합니다.

SQL UDF [https://docs.aws.amazon.com/redshift/latest/dg/udf-creating-a-scalar-sql-udf.html]의 경우 Amazon Redshift는 함수 정의로 SQL SELECT 절만 지원합니다. 또한 SELECT 절에는 FROM, INTO, WHERE, GROUP
BY, ORDER BY 및 LIMIT 절을 포함할 수 없습니다.

Python UDF [https://docs.aws.amazon.com/redshift/latest/dg/udf-python-language-support.html]의 경우 Python 2.7 표준 라이브러리 [https://docs.python.org/2/library/index.html]를 사용하여 Python 프로그램을 작성하거나 CREATE LIBRARY [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_LIBRARY.html] 명령어를 사용하여 커스텀 모듈을 생성하여 커스텀 모듈을 가져올 수 있습니다. BigQuery에서는 JavaScript 코드를 따옴표로 묶어야 합니다. 자세한 내용은 따옴표 [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#quoting-rules] 규칙 [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#quoting-rules]을 참조하세요.

SQL UDF [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#sql-udf-structure]의 경우 함수 정의로 모든 SQL 표현식을 사용할 수 있습니다. 그러나 BigQuery는 테이블, 뷰, 모델 참조를 지원하지 않습니다.

JavaScript UDF [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#javascript-udf-structure]의 경우 OPTIONS 섹션을 사용하여 외부 코드 라이브러리 [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#including-javascript-libraries]를 직접 포함 [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko#including-javascript-libraries]할 수 있습니다. BigQuery UDF 테스트 도구 [https://github.com/GoogleCloudPlatform/bigquery-udf-test-tool]를 사용하여 함수를 테스트할 수도 있습니다.
언어 언어를 SQL UDF의 경우 sql 로 지정하거나 Python UDF의 경우 plpythonu 로 지정하려면 LANGUAGE 리터럴을 사용해야 합니다. SQL UDF에 LANGUAGE 를 지정할 필요가 없지만 언어를 자바스크립트 UDF의 js 로 지정해야 합니다.
상태 Amazon Redshift는 임시 UDF 만들기를 지원하지 않습니다.

Amazon Redshift에서는 VOLATILE, STABLE 또는 IMMUTABLE 리터럴을 사용하여 함수의 변동성 [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_FUNCTION.html#r_CREATE_FUNCTION-parameters]을 정의할 수 있도록 옵션을 제공합니다. 이는 쿼리 옵티마이저에서 최적화하는 데 사용됩니다. BigQuery는 영구 UDF와 임시 UDF를 모두 지원합니다. 영구 UDF는 여러 쿼리에서 재사용할 수 있지만 임시 UDF는 단일 쿼리에서만 사용할 수 있습니다.

함수 변동성은 BigQuery에서 구성 가능한 매개변수가 아닙니다. 모든 BigQuery UDF 변동성은 Amazon Redshift의 IMMUTABLE 변동성과 동일합니다.
보안 및 권한 UDF를 만들려면 SQL 또는 plpythonu(Python) 언어 사용 권한 [https://docs.aws.amazon.com/redshift/latest/dg/udf-security-and-privileges.html]이 있어야 합니다. 기본적으로 USAGE ON LANGUAGE SQL 은 PUBLIC에 부여되지만 USAGE ON LANGUAGE PLPYTHONU 는 특정 사용자 또는 그룹에 명시적으로 부여해야 합니다.
또한 UDF를 교체하려면 수퍼유저여야 합니다. BigQuery에서는 모든 유형의 UDF 생성 또는 삭제를 위한 명시적 권한을 부여할 필요가 없습니다. BigQuery 데이터 편집자 [https://cloud.google.com/bigquery/docs/access-control?hl=ko#bigquery] 역할이 할당된 모든 사용자(bigquery.routines.* 를 권한 중 하나로 보유)는 지정된 데이터 세트의 함수를 만들거나 삭제할 수 있습니다.

BigQuery는 커스텀 역할 만들기도 지원합니다. 이는 Cloud IAM [https://cloud.google.com/bigquery/docs/access-control?hl=ko#bigquery-custom-roles]을 사용하여 관리할 수 있습니다.
한도 Python UDF 한도 [https://docs.aws.amazon.com/redshift/latest/dg/udf-constraints.html]를 참조하세요. 사용자 정의 함수 한도 [https://cloud.google.com/bigquery/quotas?hl=ko#udf_limits]를 참조하세요.
메타데이터 및 트랜잭션 SQL 문
Amazon Redshift BigQuery
SELECT * FROM STL_ANALYZE [https://docs.aws.amazon.com/redshift/latest/dg/c_check_last_analyze.html] WHERE name
= 'T'; BigQuery에는 사용되지 않습니다. 쿼리 성능을 개선하기 위해 통계를 수집할 필요는 없습니다. 데이터 분포에 대한 정보를 가져오려면 근사치 집계 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions?hl=ko]를 사용하면 됩니다.
ANALYZE [https://docs.aws.amazon.com/redshift/latest/dg/r_ANALYZE.html] [[ table_name[(column_name
[, ...])]] BigQuery에는 사용되지 않습니다.
LOCK TABLE [https://docs.aws.amazon.com/redshift/latest/dg/r_LOCK.html] table_name; BigQuery에는 사용되지 않습니다.
BEGIN TRANSACTION [https://docs.aws.amazon.com/redshift/latest/dg/r_BEGIN.html]; SELECT ...
END TRANSACTION [https://docs.aws.amazon.com/redshift/latest/dg/r_END.html]; BigQuery는 스냅샷 격리를 사용합니다. 자세한 내용은 일관성 보장 [https://cloud.google.com/bigquery/docs/migration/redshift-sql?hl=ko#consistency_guarantees_and_transaction_isolation]을 참조하세요.
EXPLAIN [https://docs.aws.amazon.com/redshift/latest/dg/r_EXPLAIN.html] ... BigQuery에는 사용되지 않습니다.

유사한 기능으로는 BigQuery Google Cloud 콘솔의 쿼리 계획 설명 [https://cloud.google.com/bigquery/query-plan-explanation?hl=ko]과 Cloud Monitoring의 감사 로깅 [https://cloud.google.com/bigquery/docs/monitoring?hl=ko]이 있습니다.
SELECT * FROM SVV_TABLE_INFO [https://docs.aws.amazon.com/redshift/latest/dg/r_SVV_TABLE_INFO.html] WHERE
table = 'T'; SELECT * EXCEPT(is_typed) FROM
mydataset.INFORMATION_SCHEMA.TABLES;

자세한 내용은 BigQuery INFORMATION_SCHEMA 소개 [https://cloud.google.com/bigquery/docs/information-schema-intro?hl=ko]를 참조하세요.
VACUUM [https://docs.aws.amazon.com/redshift/latest/dg/r_VACUUM_command.html] [table_name] BigQuery에는 사용되지 않습니다. BigQuery에서 클러스터링된 테이블은 자동으로 정렬 [https://cloud.google.com/bigquery/docs/clustered-tables?hl=ko#automatic_reclustering]됩니다.
다중 문 및 여러 줄로 구성된 SQL 문
Amazon Redshift와 BigQuery는 모두 트랜잭션(세션)을 지원하므로 일관되게 함께 실행되는 세미콜론으로 구분된 문을 지원합니다. 자세한 내용은 멀티 문 트랜잭션 [https://cloud.google.com/bigquery/docs/transactions?hl=ko]을 참조하세요.
절차적 SQL 문
CREATE PROCEDURE 문
Amazon Redshift BigQuery
CREATE or REPLACE PROCEDURE [https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_PROCEDURE.html] 이름이 필요한 경우 CREATE PROCEDURE [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_procedure].

그렇지 않으면 BEGIN [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#begin]으로 인라인을 사용하거나 CREATE TEMP FUNCTION [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_function_statement]으로 한 줄에 입력합니다.
CALL [https://docs.aws.amazon.com/redshift/latest/dg/r_CALL_procedure.html] CALL [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#call]
변수 선언 및 할당
Amazon Redshift BigQuery
DECLARE [https://docs.aws.amazon.com/redshift/latest/dg/c_PLpgSQL-structure.html#r_PLpgSQL-variable-declaration] DECLARE [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#declare]

지정된 유형의 변수를 선언합니다.
SET [https://docs.aws.amazon.com/redshift/latest/dg/r_SET.html] SET [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#declare]

제공된 표현식의 값을 갖도록 변수를 설정하거나 여러 표현식의 결과에 따라 여러 변수를 동시에 설정합니다.
오류 조건 핸들러
Amazon Redshift에서 저장 프로시저 실행 중에 오류가 발생하면 실행 흐름이 종료되고 트랜잭션이 종료되며 트랜잭션이 롤백됩니다. 서브 트랜잭션이 지원되지 않기 때문에 이러한 결과가 발생합니다. Amazon Redshift 저장 프로시저에서 지원되는 handler_statement는 RAISE뿐입니다. BigQuery에서 오류 처리는 다른 언어가 TRY ... CATCH 블록에 제공하는 것과 비슷한 기본 제어 흐름의 핵심 기능입니다.
Amazon Redshift BigQuery
BEGIN ... EXCEPTION WHEN OTHERS [https://docs.aws.amazon.com/redshift/latest/dg/stored-procedure-trapping-errors.html] THEN [https://docs.aws.amazon.com/redshift/latest/dg/stored-procedure-trapping-errors.html] BEGIN ... EXCEPTION WHEN ERROR THEN [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#beginexception]
RAISE [https://docs.amazonaws.cn/en_us/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-messages-errors] RAISE [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#raise]
[ <<label>> ] [ DECLARE declarations ]
BEGIN
statements EXCEPTION
BEGIN
statements
EXCEPTION
WHEN OTHERS THEN
Handler_statements
END; BEGIN
BEGIN
...
EXCEPTION WHEN ERROR THEN SELECT 1/0;
END;

EXCEPTION WHEN ERROR THEN -- The exception thrown from the inner exception handler lands here. END;
커서 선언 및 작업
BigQuery에서 커서 또는 세션이 지원되지 않기 때문에 다음 문은 BigQuery에 사용되지 않습니다.
DECLARE [https://docs.aws.amazon.com/redshift/latest/dg/declare.html] cursor_name [https://docs.aws.amazon.com/redshift/latest/dg/declare.html] CURSOR [https://docs.aws.amazon.com/redshift/latest/dg/declare.html] [FOR] ...
PREPARE [https://docs.aws.amazon.com/redshift/latest/dg/r_PREPARE.html] plan_name [ (datatype [, ...] ) ] AS statement
OPEN [https://docs.amazonaws.cn/en_us/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-cursors] cursor_name FOR SELECT ...
FETCH [https://docs.aws.amazon.com/redshift/latest/dg/fetch.html] [ NEXT | ALL | {FORWARD [ count | ALL ] } ] FROM cursor_name
CLOSE [https://docs.aws.amazon.com/redshift/latest/dg/close.html] cursor_name;
커서를 사용하여 결과 집합을 반환하는 경우 BigQuery에서 임시 테이블 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_table_statement]을 사용하여 비슷한 동작을 수행할 수 있습니다.
동적 SQL 문
BigQuery의 스크립팅 기능 [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko]은 다음 표에 표시된 것처럼 동적 SQL 문을 지원합니다.
Amazon Redshift BigQuery
EXECUTE [https://docs.aws.amazon.com/en_us/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-dynamic-sql] EXECUTE IMMEDIATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#execute_immediate]
제어 흐름 문
Amazon Redshift BigQuery
IF..THEN..ELSIF..THEN..ELSE..END IF [https://docs.aws.amazon.com/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-conditionals-if] IF [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#if] condition
THEN stmts
ELSE stmts
END IF
name CURSOR [ ( arguments ) ] FOR query [https://docs.aws.amazon.com/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-cursors] BigQuery에는 커서 또는 세션이 사용되지 않습니다.
[<
>] LOOP [https://docs.aws.amazon.com/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-loops]
statements
END LOOP [ label ];
LOOP [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#loops]
sql_statement_list END LOOP;
WHILE condition LOOP stmts END LOOP [https://docs.aws.amazon.com/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-loops] WHILE [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#while] condition
DO stmts
END WHILE
EXIT [https://docs.aws.amazon.com/redshift/latest/dg/c_PLpgSQL-statements.html#r_PLpgSQL-loops] BREAK [https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting?hl=ko#break]
일관성 보장 및 트랜잭션 격리
Amazon Redshift와 BigQuery는 모두 원자적인 특성이 있습니다. 즉, 여러 행에 걸쳐 변형당 수준에서 ACID와 호환됩니다.
거래
Amazon Redshift는 기본적으로 트랜잭션에 대해 직렬화 가능한 격리 [https://docs.aws.amazon.com/redshift/latest/dg/r_BEGIN.html#r_BEGIN-synopsis]를 지원합니다. Amazon Redshift를 사용하면 4가지 SQL 표준 트랜잭션 격리 수준을 모두 지정 [https://docs.aws.amazon.com/redshift/latest/dg/r_BEGIN.html#r_BEGIN-parameters]할 수 있지만 모든 격리 수준을 직렬화 가능하도록 처리할 수 있습니다.
BigQuery는 트랜잭션도 지원 [https://cloud.google.com/bigquery/docs/transactions?hl=ko]합니다. BigQuery는 쿼리가 시작되기 전에 마지막으로 커밋된 데이터를 쿼리가 읽는 스냅샷 [https://en.wikipedia.org/wiki/Snapshot_isolation] 격리 [https://en.wikipedia.org/wiki/Snapshot_isolation]를 사용하여 최적의 동시 실행 제어 [https://en.wikipedia.org/wiki/Optimistic_concurrency_control](첫 번째 성공 커밋)를 실행할 수 있습니다. 이 접근 방법은 행 및 변형 기준으로 그리고 동일한 DML 문 내의 여러 행에서 동일한 수준의 일관성을 보장하고 교착 상태도 방지합니다. 동일한 테이블에 대해 여러 DML 업데이트가 있는 경우 BigQuery는 최악 동시 실행 제어 [https://cloud.google.com/bigquery/docs/data-manipulation-language?hl=ko#limitations]로 전환됩니다. 로드 작업은 완전히 독립적으로 실행되고 테이블에 추가될 수 있습니다.
롤백
저장 프로시저를 실행하는 동안 Amazon Redshift에서 오류가 발생하면 트랜잭션의 모든 변경사항을 롤백합니다. 또한 저장 프로시저의 ROLLBACK 트랜잭션 제어 문을 사용하여 모든 변경사항을 삭제할 수 있습니다.
BigQuery에서는 ROLLBACK TRANSACTION 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language?hl=ko#rollback_transaction]을 사용할 수 있습니다.
데이터베이스 한도
BigQuery 공개 문서 [https://cloud.google.com/bigquery/quotas?hl=ko]에서 최신 할당량 및 한도를 확인하세요. 대규모 사용자를 위한 대량의 할당량은 Cloud 지원팀에 문의하여 늘릴 수 있습니다. 다음 표에서는 Amazon Redshift와 BigQuery의 데이터베이스 한도를 비교합니다.
한도 Amazon Redshift BigQuery
대형 및 초대형 클러스터 노드 유형의 각 데이터베이스 테이블 9,900 무제한
초대형 클러스터 노드 유형의 각 데이터베이스 테이블 20,000 무제한
각 클러스터에 대해 만들 수 있는 사용자 정의 데이터베이스 60 무제한
최대 행 크기 4MB 100MB
도움이 되었나요?
의견 보내기