Source URL: https://cloud.google.com/bigquery/docs/external-data-cloud-storage

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
시작하기 전에 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#before_you_begin]
필요한 역할 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#required_roles]
Compute Engine 인스턴스의 액세스 범위 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#compute-scopes]
파티션을 나누지 않은 데이터의 외부 테이블 만들기 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#create-external-table]
파티션을 나눈 데이터의 외부 테이블 만들기 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#create-external-table-partitioned]
Cloud Storage 외부 테이블 만들기
bookmark_border
BigQuery는 다음 형식의 Cloud Storage 데이터 쿼리를 지원합니다.
쉼표로 구분된 값(CSV)
JSON(줄바꿈으로 구분)
Avro
ORC
Parquet
Datastore 내보내기
Firestore 내보내기
BigQuery는 다음 저장소 등급 [https://cloud.google.com/storage/docs/storage-classes?hl=ko]의 Cloud Storage 데이터 쿼리를 지원합니다.
Standard
Nearline
Coldline
Archive
Cloud Storage 외부 테이블을 쿼리하려면 외부 테이블과 Cloud Storage 파일 모두에 대한 권한이 있어야 합니다. 가능한 경우 BigLake 테이블 [https://cloud.google.com/bigquery/docs/biglake-intro?hl=ko]을 사용하는 것이 좋습니다. BigLake 테이블은 액세스 위임을 제공하므로 Cloud Storage 데이터를 쿼리하는 데 BigLake 테이블에 대한 권한만 필요합니다.
Cloud Storage에 저장된 데이터를 쿼리할 때는 데이터 세트와 Cloud Storage 버킷의 위치를 고려 [https://cloud.google.com/bigquery/docs/locations?hl=ko#data-locations]해야 합니다.
시작하기 전에
사용자에게 이 문서의 각 작업을 수행하는 데 필요한 권한을 부여하는 Identity and Access Management(IAM) 역할을 부여합니다. 태스크를 수행하는 데 필요한 권한(있는 경우)이 태스크의 '필요한 권한' 섹션에 나열됩니다.
필요한 역할
외부 테이블을 만들려면 bigquery.tables.create BigQuery Identity and Access Management(IAM) 권한이 필요합니다.
다음과 같이 사전 정의된 각 Identity and Access Management 역할에 이 권한이 포함되어 있습니다.
BigQuery 데이터 편집자(roles/bigquery.dataEditor)
BigQuery 데이터 소유자(roles/bigquery.dataOwner)
BigQuery 관리자(roles/bigquery.admin)
또한 데이터가 포함된 Cloud Storage 버킷에 액세스하려면 다음 권한이 필요합니다.
storage.buckets.get
storage.objects.get
storage.objects.list(URI 와일드 카드 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#wildcard-support]를 사용하는 경우 필수)
Cloud Storage 스토리지 관리자(roles/storage.admin)는 사전 정의된 Identity and Access Management 역할에 이러한 권한이 포함되어 있습니다.
이러한 역할의 주 구성원이 아닌 경우 관리자에게 액세스 권한을 부여하거나 외부 테이블을 만들도록 요청하세요.
BigQuery의 Identity and Access Management 역할 및 권한에 대한 자세한 내용은 사전 정의된 역할 및 권한 [https://cloud.google.com/bigquery/docs/access-control?hl=ko]을 참조하세요.
Compute Engine 인스턴스의 액세스 범위
Compute Engine 인스턴스에서 Cloud Storage 소스에 연결된 외부 테이블을 쿼리해야 하는 경우 인스턴스에 최소한 Cloud Storage 읽기 전용 액세스 범위 [https://cloud.google.com/compute/docs/access/service-accounts?hl=ko#accesscopesiam](https://www.googleapis.com/auth/devstorage.read_only)가 있어야 합니다.
범위는 Cloud Storage를 포함한 Google Cloud제품에 대한 Compute Engine 인스턴스의 액세스를 제어합니다. 인스턴스에서 실행되는 애플리케이션은 인스턴스에 연결된 서비스 계정을 사용하여 Google Cloud API를 호출합니다.
기본 Compute Engine 서비스 계정 [https://cloud.google.com/compute/docs/access/service-accounts?hl=ko#default_service_account]으로 실행되도록 Compute Engine 인스턴스를 설정하면 인스턴스에 기본적으로 https://www.googleapis.com/auth/devstorage.read_only 범위를 포함한 여러 기본 범위 [https://cloud.google.com/compute/docs/access/service-accounts?hl=ko#default_scopes]가 부여됩니다.
대신 커스텀 서비스 계정으로 인스턴스를 설정하는 경우 인스턴스에 https://www.googleapis.com/auth/devstorage.read_only 범위를 명시적으로 부여해야 합니다.
Compute Engine 인스턴스에 범위를 적용하는 방법은 인스턴스의 서비스 계정 및 액세스 범위 변경 [https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances?hl=ko#changeserviceaccountandscopes]을 참조하세요. Compute Engine 서비스 계정에 대한 자세한 내용은 서비스 계정 [https://cloud.google.com/compute/docs/access/service-accounts?hl=ko]을 참조하세요.
파티션을 나누지 않은 데이터의 외부 테이블 만들기
다음 방법으로 외부 데이터 소스에 연결된 영구 테이블을 만들 수 있습니다.
Google Cloud 콘솔 사용
bq mk [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_mk] 명령어 사용
tables.insert [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/insert?hl=ko] API 메서드를 사용할 때 ExternalDataConfiguration [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables?hl=ko#externaldataconfiguration] 생성
CREATE EXTERNAL TABLE [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_external_table_statement] 데이터 정의 언어(DDL) 문을 실행합니다.
클라이언트 라이브러리 사용
다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
more_vert작업 옵션을 펼치고 테이블 만들기를 클릭합니다.
소스 섹션에서 다음 세부정보를 지정합니다.


다음 항목으로 테이블 만들기에서 Google Cloud Storage를 선택합니다.
GCS 버킷에서 파일 선택 또는 URI 패턴을 사용에서 사용할 버킷과 파일을 찾아보거나 gs://bucket_name/[folder_name/]file_name 형식으로 경로를 입력합니다.

Google Cloud 콘솔에서는 URI를 여러 개 지정할 수 없지만 별표(*) 와일드 카드 문자 하나를 지정하여 여러 파일을 선택할 수 있습니다. 예를 들면 gs://mybucket/file_name*입니다. 자세한 내용은 Cloud Storage URI의 와일드 카드 지원 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#wildcard-support]을 참조하세요.

Cloud Storage 버킷은 만들려는 테이블이 포함된 데이터 세트와 같은 위치에 있어야 합니다.
파일 형식에 파일과 일치하는 형식을 선택합니다.

대상 섹션에서 다음 세부정보를 지정합니다.


프로젝트에서 테이블을 만들 프로젝트를 선택합니다.
데이터 세트에서 테이블을 만들 데이터 세트를 선택합니다.
테이블에 만들려는 테이블의 이름을 입력합니다.
테이블 유형에서 외부 테이블을 선택합니다.

스키마 섹션에서 스키마 자동 감지 [https://cloud.google.com/bigquery/docs/schema-detect?hl=ko]를 사용 설정하거나 소스 파일이 있는 경우 스키마를 수동으로 지정할 수 있습니다. 소스 파일이 없으면 스키마를 수동으로 지정해야 합니다.


스키마 자동 감지를 사용 설정하려면 자동 감지 옵션을 선택합니다.
스키마를 수동으로 지정하려면 자동 감지 옵션을 선택 해제한 상태로 둡니다. 텍스트로 편집을 사용 설정하고 테이블 스키마를 JSON 배열 [https://cloud.google.com/bigquery/docs/schemas?hl=ko#specifying_a_json_schema_file]로 입력합니다.

스키마와 일치하지 않는 추가 열 값이 있는 행을 무시하려면 고급 옵션 섹션을 펼치고 알 수 없는 값을 선택합니다.
테이블 만들기를 클릭합니다.


영구 테이블이 생성된 후에는 기본 BigQuery 테이블인 것처럼 이 테이블에 대해 쿼리를 실행할 수 있습니다. 쿼리가 완료되면 CSV 또는 JSON 파일로 결과를 내보내거나 [https://cloud.google.com/bigquery/docs/writing-results?hl=ko], 테이블로 저장하거나, Google 스프레드시트에 저장할 수 있습니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#sql] ---
CREATE EXTERNAL TABLE DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_external_table_statement]을 실행하여 영구 외부 테이블을 만들 수 있습니다.
스키마를 명시적으로 지정하거나 스키마 자동 감지 [https://cloud.google.com/bigquery/docs/schema-detect?hl=ko]를 사용하여 외부 데이터에서 스키마를 추론할 수 있습니다.






Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

CREATE EXTERNAL TABLE `PROJECT_ID.DATASET.EXTERNAL_TABLE_NAME`
  OPTIONS (
    format ="TABLE_FORMAT",
    uris = ['BUCKET_PATH'[,...]]
    );


다음을 바꿉니다.

  PROJECT_ID: 테이블을 만들 프로젝트의 이름(예: myproject)
  DATASET: 테이블을 만들 BigQuery 데이터 세트의 이름(예: mydataset)
  EXTERNAL_TABLE_NAME: 만들려는 테이블의 이름(예: mytable)
  TABLE_FORMAT: 만들려는 테이블의 형식(예: PARQUET)


  BUCKET_PATH: 외부 테이블의 데이터가 포함된 Cloud Storage 버킷 경로(['gs://bucket_name/[folder_name/]file_name'] 형식)
  경로에 별표(*) 와일드 카드 문자 하나를 지정하여 버킷에서 여러 개의 파일을 선택할 수 있습니다. 예를 들면 ['gs://mybucket/file_name*']입니다. 자세한 내용은 Cloud Storage URI의 와일드 카드 지원 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#wildcard-support]을 참조하세요.
  여러 경로를 제공하여 uris 옵션에 대해 여러 버킷을 지정할 수 있습니다.
    다음 예시에서는 유효한 uris 값을 보여줍니다.
    
    ['gs://bucket/path1/myfile.csv']
    ['gs://bucket/path1/*.csv']
    ['gs://bucket/path1/*', 'gs://bucket/path2/file00*']
    
    여러 파일을 대상으로 하는 uris 값을 지정하는 경우 해당하는 모든 파일은 호환되는 스키마를 공유해야 합니다.
    BigQuery에서 Cloud Storage URI를 사용하는 방법에 대한 자세한 내용은 Cloud Storage 리소스 경로 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#google-cloud-storage-uri]를 참조하세요.
    


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

예시

다음 예시에서는 스키마 자동 감지를 사용하여 Cloud Storage에 저장된 CSV 파일에 연결되는 sales라는 외부 테이블을 만듭니다.

CREATE OR REPLACE EXTERNAL TABLE mydataset.sales
  OPTIONS (
  format = 'CSV',
  uris = ['gs://mybucket/sales.csv']);

다음 예시에서는 스키마를 명시적으로 지정하고 CSV 파일의 첫 번째 행을 건너뜁니다.

CREATE OR REPLACE EXTERNAL TABLE mydataset.sales (
  Region STRING,
  Quarter STRING,
  Total_Sales INT64
) OPTIONS (
    format = 'CSV',
    uris = ['gs://mybucket/sales.csv'],
    skip_leading_rows = 1);

--- 탭: bq [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#bq] ---
외부 테이블을 만들려면 bq mk 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_mk]를 --external_table_definition [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#external_table_definition_flag] 플래그와 함께 실행합니다. 이 플래그에는 테이블 정의 파일 [https://cloud.google.com/bigquery/docs/external-table-definition?hl=ko] 경로 또는 인라인 테이블 정의가 포함됩니다.

옵션 1: 테이블 정의 파일

bq mkdef [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_mkdef] 명령어를 사용하여 테이블 정의 파일을 만든 후 다음과 같이 bq mk 명령어에 파일 경로를 전달합니다.

bq mkdef --source_format=SOURCE_FORMAT \
  BUCKET_PATH > DEFINITION_FILE

bq mk --table \
  --external_table_definition=DEFINITION_FILE \
  DATASET_NAME.TABLE_NAME \
  SCHEMA

다음을 바꿉니다.


SOURCE_FORMAT: 외부 데이터 소스의 형식.
예를 들면 CSV입니다.
BUCKET_PATH: 테이블의 데이터가 포함된 Cloud Storage 버킷 경로(gs://bucket_name/[folder_name/]file_pattern 형식)

file_pattern에 별표(*) 와일드 카드 문자 하나를 지정하여 버킷에서 여러 개의 파일을 선택할 수 있습니다. 예를 들면 gs://mybucket/file00*.parquet입니다. 자세한 내용은 Cloud Storage URI의 와일드 카드 지원 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#wildcard-support]을 참조하세요.

여러 경로를 제공하여 uris 옵션에 대해 여러 버킷을 지정할 수 있습니다.

다음 예시에서는 유효한 uris 값을 보여줍니다.


gs://bucket/path1/myfile.csv
gs://bucket/path1/*.parquet
gs://bucket/path1/file1*, gs://bucket1/path1/*


여러 파일을 대상으로 하는 uris 값을 지정하는 경우 해당하는 모든 파일은 호환되는 스키마를 공유해야 합니다.

BigQuery에서 Cloud Storage URI를 사용하는 방법에 대한 자세한 내용은 Cloud Storage 리소스 경로 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#google-cloud-storage-uri]를 참조하세요.
DEFINITION_FILE: 로컬 머신에 있는 테이블 정의 파일 [https://cloud.google.com/bigquery/docs/external-table-definition?hl=ko]의 경로입니다.
DATASET_NAME: 테이블이 포함된 데이터 세트의 이름입니다.
TABLE_NAME: 생성할 테이블의 이름
SCHEMA: JSON 스키마 파일 [https://cloud.google.com/bigquery/docs/schemas?hl=ko#specifying_a_json_schema_file] 경로를 지정하거나 field:data_type,field:data_type,... 형식으로 스키마를 지정합니다.


예를 들면 다음과 같습니다.
bq mkdef --source_format=CSV gs://mybucket/sales.csv > mytable_def

bq mk --table --external_table_definition=mytable_def \
  mydataset.mytable \
  Region:STRING,Quarter:STRING,Total_sales:INTEGER

스키마 자동 감지를 사용하려면 mkdef 명령어에서 --autodetect=true 플래그를 설정하고 스키마를 생략합니다.
bq mkdef --source_format=CSV --autodetect=true \
  gs://mybucket/sales.csv > mytable_def

bq mk --table --external_table_definition=mytable_def \
  mydataset.mytable

옵션 2: 인라인 테이블 정의

테이블 정의 파일을 만드는 대신 테이블 정의를 bq mk 명령어에 직접 전달할 수 있습니다.

bq mk --table \
  --external_table_definition=@SOURCE_FORMAT=BUCKET_PATH \
  DATASET_NAME.TABLE_NAME \
  SCHEMA

다음을 바꿉니다.


SOURCE_FORMAT: 외부 데이터 소스의 형식

예를 들면 CSV입니다.
BUCKET_PATH: 테이블의 데이터가 포함된 Cloud Storage 버킷 경로(gs://bucket_name/[folder_name/]file_pattern 형식)

file_pattern에 별표(*) 와일드 카드 문자 하나를 지정하여 버킷에서 여러 개의 파일을 선택할 수 있습니다. 예를 들면 gs://mybucket/file00*.parquet입니다. 자세한 내용은 Cloud Storage URI의 와일드 카드 지원 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#wildcard-support]을 참조하세요.

여러 경로를 제공하여 uris 옵션에 대해 여러 버킷을 지정할 수 있습니다.

다음 예시에서는 유효한 uris 값을 보여줍니다.


gs://bucket/path1/myfile.csv
gs://bucket/path1/*.parquet
gs://bucket/path1/file1*, gs://bucket1/path1/*


여러 파일을 대상으로 하는 uris 값을 지정하는 경우 해당하는 모든 파일은 호환되는 스키마를 공유해야 합니다.

BigQuery에서 Cloud Storage URI를 사용하는 방법에 대한 자세한 내용은 Cloud Storage 리소스 경로 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#google-cloud-storage-uri]를 참조하세요.
DATASET_NAME: 테이블이 포함된 데이터 세트의 이름
TABLE_NAME: 생성할 테이블의 이름
SCHEMA: JSON 스키마 파일 [https://cloud.google.com/bigquery/docs/schemas?hl=ko#specifying_a_json_schema_file] 경로를 지정하거나 field:data_type,field:data_type,... 형식으로 스키마를 지정합니다. 스키마 자동 감지를 사용하려면 이 인수를 생략하세요.


예를 들면 다음과 같습니다.
bq mkdef --source_format=CSV gs://mybucket/sales.csv > mytable_def
bq mk --table --external_table_definition=mytable_def \
  mydataset.mytable \
  Region:STRING,Quarter:STRING,Total_sales:INTEGER

--- 탭: API [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#api] ---
tables.insert [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/insert?hl=ko] API 메서드를 호출하여, 전달한 Table 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables?hl=ko#Table]에 ExternalDataConfiguration [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables?hl=ko#externaldataconfiguration]을 생성합니다.

schema 속성을 지정하거나 autodetect 속성을 true로 설정하여 지원되는 데이터 소스에 스키마 자동 감지를 사용 설정합니다.

--- 탭: tabpanel-자바 ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryException;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.CsvOptions;
import com.google.cloud.bigquery.ExternalTableDefinition;
import com.google.cloud.bigquery.Field;
import com.google.cloud.bigquery.QueryJobConfiguration;
import com.google.cloud.bigquery.Schema;
import com.google.cloud.bigquery.StandardSQLTypeName;
import com.google.cloud.bigquery.TableId;
import com.google.cloud.bigquery.TableInfo;
import com.google.cloud.bigquery.TableResult;

// Sample to queries an external data source using a permanent table
public class QueryExternalGCSPerm {

  public static void runQueryExternalGCSPerm() {
    // TODO(developer): Replace these variables before running the sample.
    String datasetName = "MY_DATASET_NAME";
    String tableName = "MY_TABLE_NAME";
    String sourceUri = "gs://cloud-samples-data/bigquery/us-states/us-states.csv";
    Schema schema =
        Schema.of(
            Field.of("name", StandardSQLTypeName.STRING),
            Field.of("post_abbr", StandardSQLTypeName.STRING));
    String query =
        String.format("SELECT * FROM %s.%s WHERE name LIKE 'W%%'", datasetName, tableName);
    queryExternalGCSPerm(datasetName, tableName, sourceUri, schema, query);
  }

  public static void queryExternalGCSPerm(
      String datasetName, String tableName, String sourceUri, Schema schema, String query) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();

      // Skip header row in the file.
      CsvOptions csvOptions = CsvOptions.newBuilder().setSkipLeadingRows(1).build();

      TableId tableId = TableId.of(datasetName, tableName);
      // Create a permanent table linked to the GCS file
      ExternalTableDefinition externalTable =
          ExternalTableDefinition.newBuilder(sourceUri, csvOptions).setSchema(schema).build();
      bigquery.create(TableInfo.of(tableId, externalTable));

      // Example query to find states starting with 'W'
      TableResult results = bigquery.query(QueryJobConfiguration.of(query));

      results
          .iterateAll()
          .forEach(row -> row.forEach(val -> System.out.printf("%s,", val.toString())));

      System.out.println("Query on external permanent table performed successfully.");
    } catch (BigQueryException | InterruptedException e) {
      System.out.println("Query not performed \n" + e.toString());
    }
  }
}

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  // Import the Google Cloud client library and create a client
const {BigQuery} = require('@google-cloud/bigquery');
const bigquery = new BigQuery();

async function queryExternalGCSPerm() {
  // Queries an external data source using a permanent table

  /**
   * TODO(developer): Uncomment the following lines before running the sample.
   */
  // const datasetId = "my_dataset";
  // const tableId = "my_table";

  // Configure the external data source
  const dataConfig = {
    sourceFormat: 'CSV',
    sourceUris: ['gs://cloud-samples-data/bigquery/us-states/us-states.csv'],
    // Optionally skip header row
    csvOptions: {skipLeadingRows: 1},
  };

  // For all options, see https://cloud.google.com/bigquery/docs/reference/v2/tables#resource
  const options = {
    schema: schema,
    externalDataConfiguration: dataConfig,
  };

  // Create an external table linked to the GCS file
  const [table] = await bigquery
    .dataset(datasetId)
    .createTable(tableId, options);

  console.log(`Table ${table.id} created.`);

  // Example query to find states starting with 'W'
  const query = `SELECT post_abbr
  FROM \`${datasetId}.${tableId}\`
  WHERE name LIKE 'W%'`;

  // Run the query as a job
  const [job] = await bigquery.createQueryJob(query);
  console.log(`Job ${job.id} started.`);

  // Wait for the query to finish
  const [rows] = await job.getQueryResults();

  // Print the results
  console.log('Rows:');
  console.log(rows);
}

--- 탭: tabpanel-python ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  from google.cloud import bigquery

# Construct a BigQuery client object.
client = bigquery.Client()

# TODO(developer): Set table_id to the ID of the table to create.
table_id = "your-project.your_dataset.your_table_name"

# TODO(developer): Set the external source format of your table.
# Note that the set of allowed values for external data sources is
# different than the set used for loading data (see :class:`~google.cloud.bigquery.job.SourceFormat`).
external_source_format = "AVRO"

# TODO(developer): Set the source_uris to point to your data in Google Cloud
source_uris = [
    "gs://cloud-samples-data/bigquery/federated-formats-reference-file-schema/a-twitter.avro",
    "gs://cloud-samples-data/bigquery/federated-formats-reference-file-schema/b-twitter.avro",
    "gs://cloud-samples-data/bigquery/federated-formats-reference-file-schema/c-twitter.avro",
]

# Create ExternalConfig object with external source format
external_config = bigquery.ExternalConfig(external_source_format)
# Set source_uris that point to your data in Google Cloud
external_config.source_uris = source_uris

# TODO(developer) You have the option to set a reference_file_schema_uri, which points to
# a reference file for the table schema
reference_file_schema_uri = "gs://cloud-samples-data/bigquery/federated-formats-reference-file-schema/b-twitter.avro"

external_config.reference_file_schema_uri = reference_file_schema_uri

table = bigquery.Table(table_id)
# Set the external data configuration of the table
table.external_data_configuration = external_config
table = client.create_table(table)  # Make an API request.

print(
    f"Created table with external source format {table.external_data_configuration.source_format}"
)
파티션을 나눈 데이터의 외부 테이블 만들기
Cloud Storage에 있는 Hive 파티션을 나눈 데이터용 외부 테이블을 만들 수 있습니다. 외부에서 파티션을 나눈 테이블을 만든 후에는 파티션 키를 변경할 수 없습니다. 파티션을 변경하려면 테이블을 다시 만들어야 합니다.
파티션을 나눈 Hive 데이터의 외부 테이블을 만들려면 다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#%EC%BD%98%EC%86%94] ---
Google Cloud 콘솔에서 BigQuery로 이동합니다.
    BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko]

탐색기 창에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
more_vert 작업 보기를 클릭한 후 테이블 만들기를 클릭합니다. 그러면 테이블 만들기 창이 열립니다.

소스 섹션에서 다음 세부정보를 지정합니다.
  
    다음 항목으로 테이블 만들기에서 Google Cloud Storage를 선택합니다.
    Cloud Storage 버킷에서 파일 선택에 와일드 카드 [https://cloud.google.com/bigquery/docs/batch-loading-data?hl=ko#load-wildcards]를 사용하여 Cloud Storage 폴더 경로를 입력합니다.
      예를 들면 my_bucket/my_files*입니다. Cloud Storage 버킷은 생성, 추가 또는 덮어쓰려는 테이블이 포함된 데이터 세트와 동일한 위치에 있어야 합니다.
    
    파일 형식 목록에서 파일 유형을 선택합니다.
    소스 데이터 파티션 나누기 체크박스를 선택한 후 소스 URI 프리픽스 선택에 대해 Cloud Storage URI 프리픽스를 입력합니다. 예를 들면 gs://my_bucket/my_files입니다.
    파티션 추론 모드 섹션에서 다음 옵션 중 하나를 선택합니다.
유형을 자동으로 추론: 파티션 스키마 감지 모드를 AUTO로 설정합니다.
        모든 열은 문자열: 파티션 스키마 감지 모드를 STRINGS로 설정합니다.
        직접 제공하여 파티션 스키마 감지 모드를 CUSTOM으로 설정하고 파티션 키의 스키마 정보를 직접 입력합니다. 자세한 내용은 커스텀 파티션 키 스키마 제공 [https://cloud.google.com/bigquery/docs/hive-partitioned-loads-gcs?hl=ko#custom_partition_key_schema]을 참조하세요.
      
    선택사항: 이 테이블의 모든 쿼리에 파티션 필터가 필요하면 파티션 필터 필요 체크박스를 선택합니다. 파티션 필터를 필수항목으로 설정하면 비용을 줄이고 성능을 높일 수 있습니다. 자세한 내용은 쿼리에서 파티션 키에 조건자 필터 필요 [https://cloud.google.com/bigquery/docs/hive-partitioned-queries-gcs?hl=ko#requiring_predicate_filters_on_partition_keys_in_queries]를 참조하세요.

    대상 섹션에서 다음 세부정보를 지정합니다.
      
        프로젝트에서 테이블을 만들 프로젝트를 선택합니다.
        데이터 세트에서 테이블을 만들 데이터 세트를 선택합니다.
        테이블에 만들 테이블의 이름을 입력합니다.
        테이블 유형에서 외부 테이블을 선택합니다.
      
    

    스키마 섹션에 스키마 [https://cloud.google.com/bigquery/docs/schemas?hl=ko] 정의를 입력합니다. 
  스키마의 자동 감지 [https://cloud.google.com/bigquery/docs/schema-detect?hl=ko]를 사용 설정하려면 자동 감지를 선택합니다.
  스키마와 일치하지 않는 추가 열 값이 있는 행을 무시하려면 고급 옵션 섹션을 펼치고 알 수 없는 값을 선택합니다.
      테이블 만들기를 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#sql] ---
CREATE EXTERNAL TABLE DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_external_table_statement]을 사용합니다.

다음 예시에서는 Hive 파티션 키의 자동 감지를 사용합니다.

CREATE EXTERNAL TABLE `PROJECT_ID.DATASET.EXTERNAL_TABLE_NAME`
WITH PARTITION COLUMNS
OPTIONS (
format = 'SOURCE_FORMAT',
uris = ['GCS_URIS'],
hive_partition_uri_prefix = 'GCS_URI_SHARED_PREFIX',
require_hive_partition_filter = BOOLEAN);

다음을 바꿉니다.


SOURCE_FORMAT: 외부 데이터 소스 형식(예: PARQUET)
GCS_URIS: 와일드 카드 형식을 사용하는 Cloud Storage 폴더의 경로
GCS_URI_SHARED_PREFIX: 와일드 카드가 없는 소스 URI 프리픽스
BOOLEAN: 쿼리 시 조건자 필터를 요구할지 여부. 이 플래그는 선택사항입니다. 기본값은 false입니다.


다음 예시에서는 커스텀 Hive 파티션 키와 유형을 WITH PARTITION COLUMNS 절에 나열하여 사용합니다.

CREATE EXTERNAL TABLE `PROJECT_ID.DATASET.EXTERNAL_TABLE_NAME`
WITH PARTITION COLUMNS (PARTITION_COLUMN_LIST)
OPTIONS (
format = 'SOURCE_FORMAT',
uris = ['GCS_URIS'],
hive_partition_uri_prefix = 'GCS_URI_SHARED_PREFIX',
require_hive_partition_filter = BOOLEAN);

다음을 바꿉니다.


PARTITION_COLUMN_LIST: Cloud Storage 폴더 경로에서 다음 형식으로 같은 순서를 따르는 열 목록


KEY1 TYPE1, KEY2 TYPE2

다음 예시에서는 외부에서 파티션을 나눈 테이블을 만듭니다. 스키마 자동 감지를 사용하여 파일 스키마와 파티션을 나눈 하이브 레이아웃을 모두 감지합니다. 외부 경로가 gs://bucket/path/field_1=first/field_2=1/data.parquet이면 파티션 열은 field_1(STRING) 및 field_2(INT64)로 감지됩니다.

CREATE EXTERNAL TABLE dataset.AutoHivePartitionedTable
WITH PARTITION COLUMNS
OPTIONS (
uris = ['gs://bucket/path/*'],
format = 'PARQUET',
hive_partition_uri_prefix = 'gs://bucket/path',
require_hive_partition_filter = false);

다음 예시에서는 파티션 열을 명시적으로 지정하여 외부에서 파티션을 나눈 테이블을 만듭니다. 이 예시에서는 외부 파일 경로의 패턴이 gs://bucket/path/field_1=first/field_2=1/data.parquet라고 가정합니다.

CREATE EXTERNAL TABLE dataset.CustomHivePartitionedTable
WITH PARTITION COLUMNS (
field_1 STRING, -- column order must match the external path
field_2 INT64)
OPTIONS (
uris = ['gs://bucket/path/*'],
format = 'PARQUET',
hive_partition_uri_prefix = 'gs://bucket/path',
require_hive_partition_filter = false);

--- 탭: bq [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#bq] ---
먼저 bq mkdef [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_mkdef] 명령어를 사용하여 테이블 정의 파일을 만듭니다.

bq mkdef \
--source_format=SOURCE_FORMAT \
--hive_partitioning_mode=PARTITIONING_MODE \
--hive_partitioning_source_uri_prefix=GCS_URI_SHARED_PREFIX \
--require_hive_partition_filter=BOOLEAN \
 GCS_URIS > DEFINITION_FILE

다음을 바꿉니다.


SOURCE_FORMAT: 외부 데이터 소스의 형식. 예를 들면 CSV입니다.
PARTITIONING_MODE: Hive 파티션 나누기 모드. 다음 값 중 하나를 사용합니다.

AUTO: 키 이름과 유형을 자동으로 감지
STRINGS: 키 이름을 문자열로 자동으로 변환
CUSTOM: 소스 URI 프리픽스의 키 스키마를 인코딩

GCS_URI_SHARED_PREFIX: 소스 URI 프리픽스
BOOLEAN: 쿼리 시 조건자 필터를 요구할지 여부를 지정. 이 플래그는 선택사항입니다. 기본값은 false입니다.
GCS_URIS: 와일드 카드 형식을 사용하는 Cloud Storage 폴더의 경로
DEFINITION_FILE: 로컬 머신에 있는 테이블 정의 파일 [https://cloud.google.com/bigquery/external-table-definition?hl=ko]의 경로


PARTITIONING_MODE가 CUSTOM이면 다음 형식을 사용하여 소스 URI 프리픽스에 파티션 키 스키마를 포함합니다.

--hive_partitioning_source_uri_prefix=GCS_URI_SHARED_PREFIX/{KEY1:TYPE1}/{KEY2:TYPE2}/...

테이블 정의 파일을 만든 후 bq mk [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#mk-table] 명령어를 사용하여 외부 테이블을 만듭니다.

bq mk --external_table_definition=DEFINITION_FILE \
DATASET_NAME.TABLE_NAME \
SCHEMA

다음을 바꿉니다.


DEFINITION_FILE: 테이블 정의 파일의 경로
DATASET_NAME: 테이블이 포함된 데이터 세트의 이름입니다.
TABLE_NAME: 생성할 테이블의 이름
SCHEMA: JSON 스키마 파일 [https://cloud.google.com/bigquery/docs/schemas?hl=ko#specifying_a_json_schema_file] 경로를 지정하거나 field:data_type,field:data_type,... 형식으로 스키마를 지정합니다. 스키마 자동 감지를 사용하려면 이 인수를 생략하세요.


예시

다음 예시에서는 AUTO Hive 파티션 나누기 모드를 사용합니다.
bq mkdef --source_format=CSV \
  --hive_partitioning_mode=AUTO \
  --hive_partitioning_source_uri_prefix=gs://myBucket/myTable \
  gs://myBucket/myTable/* > mytable_def

bq mk --external_table_definition=mytable_def \
  mydataset.mytable \
  Region:STRING,Quarter:STRING,Total_sales:INTEGER

다음 예시에서는 STRING Hive 파티션 나누기 모드를 사용합니다.
bq mkdef --source_format=CSV \
  --hive_partitioning_mode=STRING \
  --hive_partitioning_source_uri_prefix=gs://myBucket/myTable \
  gs://myBucket/myTable/* > mytable_def

bq mk --external_table_definition=mytable_def \
  mydataset.mytable \
  Region:STRING,Quarter:STRING,Total_sales:INTEGER

다음 예시에서는 CUSTOM Hive 파티션 나누기 모드를 사용합니다.
bq mkdef --source_format=CSV \
  --hive_partitioning_mode=CUSTOM \
  --hive_partitioning_source_uri_prefix=gs://myBucket/myTable/{dt:DATE}/{val:STRING} \
  gs://myBucket/myTable/* > mytable_def

bq mk --external_table_definition=mytable_def \
  mydataset.mytable \
  Region:STRING,Quarter:STRING,Total_sales:INTEGER

--- 탭: API [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#api] ---
BigQuery API를 사용하여 Hive 파티션 나누기를 설정하려면 테이블 정의 파일 [https://cloud.google.com/bigquery/external-table-definition?hl=ko]을 만들 때 ExternalDataConfiguration [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables?hl=ko#externaldataconfiguration] 객체에 hivePartitioningOptions [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables?hl=ko#hivepartitioningoptions] 객체를 포함합니다.

hivePartitioningOptions.mode 필드를 CUSTOM로 설정한 경우, hivePartitioningOptions.sourceUriPrefix 필드에 파티션 키 스키마를 인코딩해야 합니다(예: gs://BUCKET/PATH_TO_TABLE/{KEY1:TYPE1}/{KEY2:TYPE2}/...).

쿼리 시 조건자 필터를 사용하도록 하려면 hivePartitioningOptions.requirePartitionFilter 필드를 true로 설정합니다.

--- 탭: tabpanel-자바 ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryException;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.ExternalTableDefinition;
import com.google.cloud.bigquery.FormatOptions;
import com.google.cloud.bigquery.HivePartitioningOptions;
import com.google.cloud.bigquery.TableId;
import com.google.cloud.bigquery.TableInfo;

// Sample to create external table using hive partitioning
public class SetHivePartitioningOptions {

  public static void main(String[] args) {
    // TODO(developer): Replace these variables before running the sample.
    String datasetName = "MY_DATASET_NAME";
    String tableName = "MY_TABLE_NAME";
    String sourceUri = "gs://cloud-samples-data/bigquery/hive-partitioning-samples/customlayout/*";
    String sourceUriPrefix =
        "gs://cloud-samples-data/bigquery/hive-partitioning-samples/customlayout/{pkey:STRING}/";
    setHivePartitioningOptions(datasetName, tableName, sourceUriPrefix, sourceUri);
  }

  public static void setHivePartitioningOptions(
      String datasetName, String tableName, String sourceUriPrefix, String sourceUri) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();

      // Configuring partitioning options
      HivePartitioningOptions hivePartitioningOptions =
          HivePartitioningOptions.newBuilder()
              .setMode("CUSTOM")
              .setRequirePartitionFilter(true)
              .setSourceUriPrefix(sourceUriPrefix)
              .build();

      TableId tableId = TableId.of(datasetName, tableName);
      ExternalTableDefinition customTable =
          ExternalTableDefinition.newBuilder(sourceUri, FormatOptions.parquet())
              .setAutodetect(true)
              .setHivePartitioningOptions(hivePartitioningOptions)
              .build();
      bigquery.create(TableInfo.of(tableId, customTable));
      System.out.println("External table created using hivepartitioningoptions");
    } catch (BigQueryException e) {
      System.out.println("External table was not created" + e.toString());
    }
  }
}
외부 테이블 쿼리
자세한 내용은 외부 테이블에서 Cloud Storage 데이터 쿼리 [https://cloud.google.com/bigquery/docs/query-cloud-storage-data?hl=ko]를 참조하세요.
외부 테이블을 BigLake로 업그레이드
외부 테이블을 연결에 연결하여 Cloud Storage에 따라 테이블을 BigLake 테이블로 업그레이드할 수 있습니다. BigLake 테이블에서 메타데이터 캐싱 [https://cloud.google.com/bigquery/docs/biglake-intro?hl=ko#metadata_caching_for_performance]을 사용하려면 이에 대한 설정을 동시에 지정할 수 있습니다. 소스 형식 및 소스 URI와 같은 테이블 세부정보를 가져오려면 테이블 정보 가져오기 [https://cloud.google.com/bigquery/docs/tables?hl=ko#get_table_information]를 참조하세요.
외부 테이블을 BigLake 테이블로 업데이트하려면 다음 옵션 중 하나를 선택합니다.
--- 탭: SQL [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#sql] ---
CREATE OR REPLACE EXTERNAL TABLE DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_external_table_statement]을 사용하여 테이블을 업데이트합니다.






Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

CREATE OR REPLACE EXTERNAL TABLE
  `PROJECT_ID.DATASET.EXTERNAL_TABLE_NAME`
  WITH CONNECTION `REGION.CONNECTION_ID`
  OPTIONS(
    format ="TABLE_FORMAT",
    uris = ['BUCKET_PATH'],
    max_staleness = STALENESS_INTERVAL,
    metadata_cache_mode = 'CACHE_MODE'
    );


다음을 바꿉니다.

 PROJECT_ID: 테이블이 포함된 프로젝트 이름
  DATASET: 테이블이 포함된 데이터 세트의 이름
  EXTERNAL_TABLE_NAME: 테이블의 이름
  REGION: 연결이 포함된 리전
 CONNECTION_ID: 사용할 연결의 이름
 TABLE_FORMAT: 테이블에 사용되는 형식

테이블을 업데이트할 때는 이를 변경할 수 없습니다.


  BUCKET_PATH: 외부 테이블의 데이터가 포함된 Cloud Storage 버킷 경로(['gs://bucket_name/[folder_name/]file_name'] 형식)
  경로에 별표(*) 와일드 카드 문자 하나를 지정하여 버킷에서 여러 개의 파일을 선택할 수 있습니다. 예를 들면 ['gs://mybucket/file_name*']입니다. 자세한 내용은 Cloud Storage URI의 와일드 카드 지원 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#wildcard-support]을 참조하세요.
  여러 경로를 제공하여 uris 옵션에 대해 여러 버킷을 지정할 수 있습니다.
    다음 예시에서는 유효한 uris 값을 보여줍니다.
    
    ['gs://bucket/path1/myfile.csv']
    ['gs://bucket/path1/*.csv']
    ['gs://bucket/path1/*', 'gs://bucket/path2/file00*']
    
    여러 파일을 대상으로 하는 uris 값을 지정하는 경우 해당하는 모든 파일은 호환되는 스키마를 공유해야 합니다.
    BigQuery에서 Cloud Storage URI를 사용하는 방법에 대한 자세한 내용은 Cloud Storage 리소스 경로 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#google-cloud-storage-uri]를 참조하세요.
    
 STALENESS_INTERVAL: 캐시된 메타데이터가 테이블에 대한 작업에서 사용되는지 여부와 작업이 사용하기 위해 캐시된 메타데이터가 작업에서 사용되려면 얼마나 최신이어야 하는지를 지정합니다.

메타데이터 캐싱 고려사항에 대한 자세한 내용은 성능을 위한 메타데이터 캐싱 [https://cloud.google.com/bigquery/docs/biglake-intro?hl=ko#metadata_caching_for_performance]을 참조하세요.
  메타데이터 캐싱을 사용 중지하려면 0을 지정합니다. 이 값이 기본값입니다.
  메타데이터 캐싱을 사용 설정하려면 30분에서 7일 사이의 간격 리터럴 [https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical?hl=ko#interval_literals] 값을 지정합니다. 예를 들어 4시간 비활성 간격의 경우 INTERVAL 4 HOUR를 지정합니다.
  이 값을 사용하면 지난 4시간 이내에 새로고침된 경우 테이블에 대한 작업이 캐시된 메타데이터를 사용합니다. 캐시된 메타데이터가 이보다 오래된 경우 작업이 대신 Cloud Storage에서 메타데이터를 검색합니다.
  
  CACHE_MODE: 메타데이터 캐시를 자동 또는 수동으로 새로고침할지 지정합니다.

메타데이터 캐싱 고려사항에 대한 자세한 내용은 성능을 위한 메타데이터 캐싱 [https://cloud.google.com/bigquery/docs/biglake-intro?hl=ko#metadata_caching_for_performance]을 참조하세요.
  시스템 정의 간격(일반적으로 30~60분)으로 메타데이터 캐시를 새로고침하려면 AUTOMATIC으로 설정합니다.
  지정한 일정에 따라 메타데이터 캐시를 새로고침하려면 MANUAL로 설정합니다. 이 경우 BQ.REFRESH_EXTERNAL_METADATA_CACHE 시스템 프로시져 [https://cloud.google.com/bigquery/docs/reference/system-procedures?hl=ko#bqrefresh_external_metadata_cache]를 호출하여 캐시를 새로고침할 수 있습니다.
  STALENESS_INTERVAL이 0보다 큰 값으로 설정된 경우 CACHE_MODE를 설정해야 합니다.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#bq] ---
bq mkdef [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_mkdef] 및 bq update [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_update] 명령어를 사용하여 테이블을 업데이트합니다.


변경할 테이블의 측면을 설명하는 외부 테이블 정의 [https://cloud.google.com/bigquery/external-table-definition?hl=ko#table-definition]를 생성합니다.

bq mkdef --connection_id=PROJECT_ID.REGION.CONNECTION_ID \
--source_format=TABLE_FORMAT \
--metadata_cache_mode=CACHE_MODE \
"BUCKET_PATH" > /tmp/DEFINITION_FILE

다음을 바꿉니다.


PROJECT_ID: 연결이 포함된 프로젝트 이름
REGION: 연결이 포함된 리전
CONNECTION_ID: 사용할 연결의 이름
TABLE_FORMAT: 테이블에 사용되는 형식. 테이블을 업데이트할 때는 이를 변경할 수 없습니다.
CACHE_MODE: 메타데이터 캐시를 자동 또는 수동으로 새로고침할지 지정합니다. 메타데이터 캐싱 고려사항에 대한 자세한 내용은 성능을 위한 메타데이터 캐싱 [https://cloud.google.com/bigquery/docs/biglake-intro?hl=ko#metadata_caching_for_performance]을 참조하세요.

시스템 정의 간격(일반적으로 30~60분)으로 메타데이터 캐시를 새로고침하려면 AUTOMATIC으로 설정합니다.

지정한 일정에 따라 메타데이터 캐시를 새로고침하려면 MANUAL로 설정합니다. 이 경우 BQ.REFRESH_EXTERNAL_METADATA_CACHE 시스템 프로시저 [https://cloud.google.com/bigquery/docs/reference/system-procedures?hl=ko#bqrefresh_external_metadata_cache]를 호출하여 캐시를 새로고침할 수 있습니다.

STALENESS_INTERVAL이 0보다 큰 값으로 설정된 경우 CACHE_MODE를 설정해야 합니다.
BUCKET_PATH: 외부 테이블의 데이터가 포함된 Cloud Storage 버킷 경로(gs://bucket_name/[folder_name/]file_name 형식)

경로에 별표(*) 와일드카드 문자 하나를 지정하여 버킷에서 선택한 파일을 제한할 수 있습니다. 예를 들면 gs://mybucket/file_name*입니다. 자세한 내용은 Cloud Storage URI의 와일드 카드 지원 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#wildcard-support]을 참조하세요.

여러 경로를 제공하여 uris 옵션에 대해 여러 버킷을 지정할 수 있습니다.

다음 예시에서는 유효한 uris 값을 보여줍니다.


gs://bucket/path1/myfile.csv
gs://bucket/path1/*.csv
gs://bucket/path1/*,gs://bucket/path2/file00*


여러 파일을 대상으로 하는 uris 값을 지정하는 경우 해당하는 모든 파일은 호환되는 스키마를 공유해야 합니다.

BigQuery에서 Cloud Storage URI를 사용하는 방법에 대한 자세한 내용은 Cloud Storage 리소스 경로 [https://cloud.google.com/bigquery/docs/external-data-cloud-storage?hl=ko#google-cloud-storage-uri]를 참조하세요.
DEFINITION_FILE: 만들려는 테이블 정의 파일의 이름

새 외부 테이블 정의를 사용하여 테이블을 업데이트합니다.

bq update --max_staleness=STALENESS_INTERVAL \
--external_table_definition=/tmp/DEFINITION_FILE \
PROJECT_ID:DATASET.EXTERNAL_TABLE_NAME

다음을 바꿉니다.


STALENESS_INTERVAL: 캐시된 메타데이터가 테이블에 대한 작업에서 사용되는지 여부와 작업이 사용하기 위해 캐시된 메타데이터가 작업에서 사용되려면 얼마나 최신이어야 하는지를 지정합니다. 메타데이터 캐싱 고려사항에 대한 자세한 내용은 성능을 위한 메타데이터 캐싱 [https://cloud.google.com/bigquery/docs/biglake-intro?hl=ko#metadata_caching_for_performance]을 참조하세요.

메타데이터 캐싱을 사용 중지하려면 0을 지정합니다. 이 값이 기본값입니다.

메타데이터 캐싱을 사용 설정하려면 INTERVAL 데이터 유형 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#interval_type] 문서에 설명된 Y-M D H:M:S 형식을 사용하여 30분에서 7일 사이의 간격 값을 지정합니다. 예를 들어 4시간 비활성 간격의 경우 0-0 0 4:0:0을 지정합니다.
이 값을 사용하면 지난 4시간 이내에 새로고침된 경우 테이블에 대한 작업이 캐시된 메타데이터를 사용합니다. 캐시된 메타데이터가 이보다 오래된 경우 작업이 대신 Cloud Storage에서 메타데이터를 검색합니다.
DEFINITION_FILE: 만들거나 업데이트한 테이블 정의 파일의 이름
PROJECT_ID: 테이블이 포함된 프로젝트 이름
DATASET: 테이블이 포함된 데이터 세트의 이름
EXTERNAL_TABLE_NAME: 테이블의 이름
Cloud Storage 리소스 경로
Cloud Storage 데이터 소스를 기반으로 외부 테이블을 만들 때는 데이터 경로를 제공해야 합니다.
Cloud Storage 리소스 경로에는 버킷 이름과 객체(파일 이름)가 포함됩니다. 예를 들어 Cloud Storage 버킷 이름이 mybucket이고 데이터 파일 이름이 myfile.csv라면 리소스 경로는 gs://mybucket/myfile.csv가 됩니다.
BigQuery는 처음 이중 슬래시 다음에 슬래시 여러 개가 연속으로 포함된 Cloud Storage 리소스 경로를 지원하지 않습니다. Cloud Storage 객체 이름에는 연속된 슬래시('/') 문자 여러 개가 포함될 수 있습니다. 하지만 BigQuery는 연속된 슬래시 여러 개를 단일 슬래시로 변환합니다. 예를 들어 gs://bucket/my//object//name 리소스 경로는 Cloud Storage에서는 유효하지만 BigQuery에서는 작동하지 않습니다.
Cloud Storage 리소스 경로를 검색하려면 다음 안내를 따르세요.
Cloud Storage 콘솔을 엽니다.
Cloud Storage 콘솔 [https://console.cloud.google.com/storage/browser?hl=ko]
소스 데이터가 포함된 객체(파일) 위치로 이동합니다.
객체의 이름을 클릭합니다.
객체 세부정보 페이지가 열립니다.
gsutil URI 필드에 제공된 값(gs://로 시작)을 복사합니다.
참고: gcloud storage ls [https://cloud.google.com/sdk/gcloud/reference/storage/ls?hl=ko] 명령어를 사용하여 버킷 또는 객체를 나열할 수도 있습니다.
Cloud Storage URI의 와일드 카드 지원
데이터가 여러 개의 파일로 분리되어 있는 경우 별표(*) 와일드 카드를 사용하여 여러 파일을 선택할 수 있습니다. 별표 와일드 카드를 사용하려면 다음 규칙을 따라야 합니다.
와일드 카드는 객체 이름 중간이나 끝에 입력할 수 있습니다.
별표 여러 개를 사용하는 것은 지원되지 않습니다. 예를 들어 gs://mybucket/fed-*/temp/*.csv 경로는 유효하지 않습니다.
버킷 이름에 별표를 사용하는 것은 지원되지 않습니다.
예를 들면 다음과 같습니다.
다음 예시에서는 프리픽스 gs://mybucket/fed-samples/fed-sample로 시작하는 모든 폴더의 모든 파일을 선택하는 방법을 보여줍니다.
gs://mybucket/fed-samples/fed-sample*
다음 예시에서는 fed-samples라는 폴더와 fed-samples의 모든 하위 폴더에 있는 .csv 확장자가 있는 파일만 선택하는 방법을 보여줍니다.
gs://mybucket/fed-samples/*.csv
다음 예시에서는 fed-samples라는 폴더에 있는 이름 지정 패턴이 fed-sample*.csv인 파일을 선택하는 방법을 보여줍니다. 이 예시에서는 fed-samples 하위 폴더에 있는 파일을 선택하지 않습니다.
gs://mybucket/fed-samples/fed-sample*.csv
bq 명령줄 도구를 사용할 때 일부 플랫폼에서 별표를 이스케이프 처리해야 할 수도 있습니다.
Datastore 또는 Firestore 내보내기에 연결된 외부 테이블을 만들 때는 별표 와일드 카드를 사용할 수 없습니다.
제한사항
외부 테이블에 적용되는 제한사항에 대한 자세한 내용은 외부 테이블 제한사항 [https://cloud.google.com/bigquery/docs/external-tables?hl=ko#limitations]을 참조하세요.
다음 단계
외부 테이블 [https://cloud.google.com/bigquery/docs/external-tables?hl=ko] 알아보기
BigLake 테이블 [https://cloud.google.com/bigquery/docs/biglake-intro?hl=ko] 알아보기
도움이 되었나요?
의견 보내기