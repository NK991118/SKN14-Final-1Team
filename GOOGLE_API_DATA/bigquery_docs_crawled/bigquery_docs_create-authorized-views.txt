Source URL: https://cloud.google.com/bigquery/docs/create-authorized-views

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
승인된 뷰 만들기
bookmark_border
이 페이지의 내용
목표 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#objectives]
비용 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#costs]
시작하기 전에 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#before-you-begin]
소스 데이터를 저장할 데이터 세트 만들기 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#create_a_dataset_to_store_your_source_data]
테이블 생성 및 소스 데이터 로드 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#create_a_table_and_load_your_source_data]
이 튜토리얼에서는 데이터 분석가가 사용하는 BigQuery의 승인된 뷰를 만듭니다. 승인된 뷰 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko]를 사용하면 기본 소스 데이터에 대한 액세스 권한을 부여하지 않고도 특정 사용자 및 그룹과 쿼리 결과를 공유할 수 있습니다. 뷰에 사용자 또는 그룹이 아닌 소스 데이터에 대한 액세스 권한이 부여됩니다. 뷰의 SQL 쿼리를 사용하여 쿼리 결과에서 열과 필드를 제외할 수도 있습니다.
승인된 뷰를 사용하는 대신 소스 데이터에 열 수준 액세스 제어를 설정한 다음 액세스가 제어된 데이터를 쿼리하는 뷰에 대한 액세스 권한을 사용자에게 부여할 수도 있습니다. 열 수준 액세스 제어에 대한 자세한 내용은 열 수준 액세스 제어 소개 [https://cloud.google.com/bigquery/docs/column-level-security-intro?hl=ko]를 참조하세요.
동일한 소스 데이터 세트에 액세스하는 승인된 뷰가 여러 개 있는 경우 개별 뷰를 승인하는 대신 여러 뷰가 포함된 데이터 세트를 승인 [https://cloud.google.com/bigquery/docs/authorized-datasets?hl=ko]할 수 있습니다.
목표
소스 데이터를 포함할 데이터 세트를 만듭니다.
쿼리를 실행하여 소스 데이터 세트의 대상 테이블에 데이터를 로드합니다.
승인된 뷰를 포함할 데이터 세트를 만듭니다.
데이터 분석가가 쿼리 결과에서 볼 수 있는 열을 제한하는 SQL 쿼리에서 승인된 뷰를 만듭니다.
데이터 분석가에게 쿼리 작업을 실행할 권한을 부여합니다.
데이터 분석가에게 승인된 뷰가 포함된 데이터 세트에 대한 액세스 권한을 부여합니다.
소스 데이터 세트에 대한 액세스 권한을 승인된 뷰에 부여합니다.
비용
이 문서에서는 비용이 청구될 수 있는 Google Cloud구성요소( )를 사용합니다.
BigQuery [https://cloud.google.com/bigquery/pricing?hl=ko]
프로젝트 사용량을 기준으로 예상 비용을 산출하려면 가격 계산기 [https://cloud.google.com/products/calculator?hl=ko]를 사용합니다.
Google Cloud 신규 사용자는 무료 체험판 [https://cloud.google.com/free?hl=ko]을 사용할 수 있습니다.
이 문서에 설명된 태스크를 완료했으면 만든 리소스를 삭제하여 청구가 계속되는 것을 방지할 수 있습니다. 자세한 내용은 삭제 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#clean-up]를 참조하세요.
시작하기 전에
Sign in to your Google Cloud account. If you're new to Google Cloud, create an account [https://console.cloud.google.com/freetrial?hl=ko] to evaluate how our products perform in real-world scenarios. New customers also get $300 in free credits to run, test, and deploy workloads.
In the Google Cloud console, on the project selector page, select or create a Google Cloud project.
Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project.
Go to project selector [https://console.cloud.google.com/projectselector2/home/dashboard?hl=ko]
Verify that billing is enabled for your Google Cloud project [https://cloud.google.com/billing/docs/how-to/verify-billing-enabled?hl=ko#confirm_billing_is_enabled_on_a_project].
Enable the BigQuery API.
Enable the API [https://console.cloud.google.com/flows/enableapi?apiid=bigquery.googleapis.com&hl=ko]
이 문서의 태스크를 수행하는 데 필요한 권한 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko#required_permissions]이 있는지 확인합니다.
소스 데이터를 저장할 데이터 세트 만들기
먼저 소스 데이터를 저장할 데이터세트를 만듭니다.
소스 데이터 세트를 만들려면 다음 옵션 중 하나를 선택하세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 데이터 세트를 만들 프로젝트 옆에 있는 more_vert
작업 보기 > 데이터 세트 만들기를 클릭합니다.
데이터 세트 만들기 페이지에서 다음을 수행합니다.


데이터 세트 ID에 github_source_data를 입력합니다.
위치 유형에서 멀티 리전이 선택되어 있는지 확인합니다.
멀티 리전에서 미국 또는 EU를 선택합니다. 이 튜토리얼에서 만드는 모든 리소스는 동일한 멀티 리전 위치에 있어야 합니다.
데이터 세트 만들기를 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#sql] ---
CREATE SCHEMA DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_schema_statement]을 사용합니다.



 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

CREATE SCHEMA github_source_data;


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: Java [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#java] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Create a source dataset to store your table.
Dataset sourceDataset = bigquery.create(DatasetInfo.of(sourceDatasetId));

--- 탭: Python [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#python] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]
from google.cloud.bigquery.enums import EntityTypes [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.enums.EntityTypes.html?hl=ko]

client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()
source_dataset_id = "github_source_data"
source_dataset_id_full = "{}.{}".format(client.project, source_dataset_id)


source_dataset = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko](source_dataset_id_full)
# Specify the geographic location where the dataset should reside.
source_dataset.location = "US"
source_dataset = client.create_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_create_dataset](source_dataset)  # API request
테이블 생성 및 소스 데이터 로드
소스 데이터 세트를 만든 후 SQL 쿼리의 결과를 대상 테이블에 저장하여 테이블을 채웁니다. 이 쿼리는 GitHub [https://console.cloud.google.com/bigquery?p=bigquery-public-data&%3Bd=github_repos&%3Bpage=dataset&hl=ko] 공개 데이터 세트에서 데이터를 가져옵니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 쿼리를 입력합니다.
SELECT
  commit,
  author,
  committer,
  repo_name
FROM
  `bigquery-public-data.github_repos.commits`
LIMIT
  1000;

더보기를 클릭하고 쿼리 설정을 선택합니다.
대상에서 쿼리 결과의 대상 테이블 설정을 선택합니다.
데이터 세트에 PROJECT_ID.github_source_data를 입력합니다.

PROJECT_ID를 프로젝트 ID로 바꿉니다.
테이블 ID에 github_contributors을 입력합니다.
저장을 클릭합니다.
실행을 클릭합니다.
쿼리가 완료되면 탐색기 창에서 github_source_data를 펼친 다음 github_contributors를 클릭합니다.
데이터가 테이블에 기록되었는지 확인하려면 미리보기 탭을 클릭합니다.

--- 탭: Java [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#java] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Populate a source table
String tableQuery =
    "SELECT commit, author, committer, repo_name"
        + " FROM `bigquery-public-data.github_repos.commits`"
        + " LIMIT 1000";
QueryJobConfiguration queryConfig =
    QueryJobConfiguration.newBuilder(tableQuery)
        .setDestinationTable(TableId.of(sourceDatasetId, sourceTableId))
        .build();
bigquery.query(queryConfig);

--- 탭: Python [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#python] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  source_table_id = "github_contributors"
job_config = bigquery.QueryJobConfig()
job_config.destination = source_dataset.table(source_table_id)
sql = """
    SELECT commit, author, committer, repo_name
    FROM `bigquery-public-data.github_repos.commits`
    LIMIT 1000
"""
client.query_and_wait(
    sql,
    # Location must match that of the dataset(s) referenced in the query
    # and of the destination table.
    location="US",
    job_config=job_config,
)  # API request - starts the query and waits for query to finish
승인된 뷰를 저장할 데이터 세트 만들기
소스 데이터 세트를 만든 다음 데이터 분석가에게 공유할 승인된 뷰를 저장할 별도의 새로운 개별 데이터 세트를 만듭니다. 이후 단계에서는 소스 데이터 세트의 데이터에 대해 승인된 뷰 액세스 권한을 부여합니다. 데이터 분석가는 승인된 뷰에 액세스할 수 있지만 소스 데이터에 직접 액세스할 수는 없습니다.
승인된 뷰는 소스 데이터와 다른 데이터 세트에 생성됩니다. 이렇게 하면 데이터 소유자가 데이터 기본 데이터 액세스 권한을 동시에 부여하지 않아도 승인된 뷰에 대한 액세스 권한을 사용자에게 부여할 수 있습니다. 소스 데이터의 데이터 세트와 승인된 뷰 데이터 세트는 동일한 리전 위치 [https://cloud.google.com/bigquery/docs/locations?hl=ko]에 있어야 합니다.
뷰를 저장할 데이터 세트를 만들려면 다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 패널에서 데이터 세트를 만들 프로젝트를 선택합니다.
more_vert 작업 보기 옵션을 펼치고 데이터 세트 만들기를 클릭합니다.
데이터 세트 만들기 페이지에서 다음을 수행합니다.


데이터 세트 ID에 shared_views를 입력합니다.
위치 유형에서 멀티 리전이 선택되어 있는지 확인합니다.
멀티 리전에서 미국 또는 EU를 선택합니다. 이 튜토리얼에서 만드는 모든 리소스는 동일한 멀티 리전 위치에 있어야 합니다.
데이터 세트 만들기를 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#sql] ---
CREATE SCHEMA DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_schema_statement]을 사용합니다.



 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

CREATE SCHEMA shared_views;


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: Java [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#java] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Create a separate dataset to store your view
Dataset sharedDataset = bigquery.create(DatasetInfo.of(sharedDatasetId));

--- 탭: Python [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#python] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  shared_dataset_id = "shared_views"
shared_dataset_id_full = "{}.{}".format(client.project, shared_dataset_id)


shared_dataset = bigquery.Dataset(shared_dataset_id_full)
shared_dataset.location = "US"
shared_dataset = client.create_dataset(shared_dataset)  # API request
새 데이터 세트에 승인된 뷰 만들기
새 데이터세트에서 승인하려는 뷰를 만듭니다. 이 뷰는 데이터 분석가에게 공유하는 것으로, 데이터 분석가에게 보이고 싶지 않은 열을 제외하는 SQL 쿼리를 사용하여 만듭니다.
github_contributors 소스 테이블에는 RECORD [https://cloud.google.com/bigquery/docs/nested-repeated?hl=ko#define_nested_and_repeated_columns] 유형의 필드 2개(author 및 committer)가 포함됩니다. 이 튜토리얼의 경우 승인된 뷰에서 작성자의 이름을 제외한 모든 작성자 데이터를 제외하고 커밋한 사용자의 이름을 제외한 모든 커밋한 사용자 데이터를 제외합니다.
새 데이터 세트에 뷰를 만들려면 다음 옵션 중 하나를 선택하세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 쿼리를 입력합니다.

SELECT
commit,
author.name AS author,
committer.name AS committer,
repo_name
FROM
`PROJECT_ID.github_source_data.github_contributors`;

PROJECT_ID를 프로젝트 ID로 바꿉니다.
저장 > 뷰 저장을 클릭합니다.
다른 이름으로 저장 대화상자에서 다음을 수행합니다.


프로젝트에서 프로젝트가 선택되었는지 확인합니다.
데이터 세트에 shared_views를 입력합니다.
테이블에 github_analyst_view를 입력합니다.
저장을 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#sql] ---
CREATE VIEW DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_view_statement]을 사용합니다.




 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

CREATE VIEW shared_views.github_analyst_view
AS (
  SELECT
    commit,
    author.name AS author,
    committer.name AS committer,
    repo_name
  FROM
    `PROJECT_ID.github_source_data.github_contributors`
);


PROJECT_ID를 프로젝트 ID로 바꿉니다.

play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: Java [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#java] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Create the view in the new dataset
String viewQuery =
    String.format(
        "SELECT commit, author.name as author, committer.name as committer, repo_name FROM %s.%s.%s",
        projectId, sourceDatasetId, sourceTableId);

ViewDefinition viewDefinition = ViewDefinition.of(viewQuery);

Table view =
    bigquery.create(TableInfo.of(TableId.of(sharedDatasetId, sharedViewId), viewDefinition));

--- 탭: Python [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#python] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  shared_view_id = "github_analyst_view"
view = bigquery.Table(shared_dataset.table(shared_view_id))
sql_template = """
    SELECT
        commit, author.name as author,
        committer.name as committer, repo_name
    FROM
        `{}.{}.{}`
"""
view.view_query = sql_template.format(
    client.project, source_dataset_id, source_table_id
)
view = client.create_table(view)  # API request
데이터 분석가에게 쿼리 작업 실행 권한 부여
뷰를 쿼리하려면 데이터 분석가에게 쿼리 작업을 실행할 수 있는 bigquery.jobs.create 권한이 필요하며 뷰에 대한 액세스 권한이 부여되어야 합니다. 이 섹션에서는 데이터 분석가에게 bigquery.user 역할을 부여합니다. bigquery.user 역할에는 bigquery.jobs.create 권한이 포함됩니다. 이후 단계에서는 데이터 분석가에게 뷰에 액세스할 권한을 부여합니다.
데이터 분석 그룹을 프로젝트 수준의 bigquery.user 역할에 할당하려면 다음 안내를 따르세요.
Google Cloud 콘솔에서 IAM 페이지로 이동합니다.
IAM으로 이동 [https://console.cloud.google.com/iam-admin/iam?hl=ko]
프로젝트 선택기에서 프로젝트가 선택되어 있는지 확인합니다.
person_add 액세스 권한 부여를 클릭합니다.
액세스 권한 부여 대화상자에서 다음을 수행합니다.
새 주 구성원 필드에 데이터 분석가가 포함된 그룹을 입력합니다(예:data_analysts@example.com).
역할 선택 필드에서 BigQuery 사용자 역할을 검색하여 선택합니다.
저장을 클릭합니다.
데이터 분석가에게 승인된 뷰를 쿼리할 권한 부여
데이터 분석가가 뷰를 쿼리하려면 데이터 세트 수준 또는 뷰 수준에서 bigquery.dataViewer 역할을 부여받아야 합니다. 데이터 세트 수준에서 이 역할을 부여하면 분석가가 데이터 세트의 모든 테이블과 뷰에 액세스할 수 있습니다. 이 튜토리얼에서 만든 데이터 세트에는 승인된 뷰가 하나만 포함되어 있으므로 데이터 세트 수준에서 액세스 권한을 부여합니다. 액세스 권한을 부여해야 하는 승인된 뷰 컬렉션이 있는 경우 승인된 데이터 세트 [https://cloud.google.com/bigquery/docs/authorized-datasets?hl=ko]를 대신 사용하는 것이 좋습니다.
이전에 데이터 분석가에게 부여한 bigquery.user 역할은 쿼리 작업을 만드는 데 필요한 권한을 부여합니다. 하지만 승인된 뷰 또는 뷰가 포함된 데이터 세트에 대한 bigquery.dataViewer 액세스 권한이 없으면 뷰를 성공적으로 쿼리할 수 없습니다.
데이터 분석가에게 승인된 뷰가 포함된 데이터 세트에 대한 bigquery.dataViewer 액세스 권한을 부여하려면 다음 단계를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 shared_views 데이터 세트를 선택하여 세부정보 탭을 엽니다.
person_add 공유 > 권한을 클릭합니다.
권한 공유 창에서 주 구성원 추가를 클릭합니다.
새 주 구성원에 데이터 분석가가 포함된 그룹을 입력합니다(예: data_analysts@example.com).
역할 선택을 클릭하고 BigQuery >
BigQuery 데이터 뷰어를 선택합니다.
저장을 클릭합니다.
닫기를 클릭합니다.

--- 탭: Java [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#java] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Assign access controls to the dataset containing the view
List<Acl> viewAcl = new ArrayList<>(sharedDataset.getAcl());
viewAcl.add(Acl.of(new Acl.Group("example-analyst-group@google.com"), Acl.Role.READER));
sharedDataset.toBuilder().setAcl(viewAcl).build().update();

--- 탭: Python [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#python] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  # analyst_group_email = 'data_analysts@example.com'
access_entries = shared_dataset.access_entries
access_entries.append(
    bigquery.AccessEntry("READER", EntityTypes.GROUP_BY_EMAIL, analyst_group_email)
)
shared_dataset.access_entries = access_entries
shared_dataset = client.update_dataset(
    shared_dataset, ["access_entries"]
)  # API request
뷰가 소스 데이터세트에 액세스하는 것을 승인
승인된 뷰가 포함된 데이터 세트의 액세스 제어를 만든 후 소스 데이터 세트에 대한 승인된 뷰 액세스 권한을 부여합니다. 이러한 승인은 데이터 분석가 그룹이 아닌 뷰에 소스 데이터 액세스 권한을 부여합니다.
승인된 뷰에 소스 데이터에 대한 액세스 권한을 부여하려면 다음 옵션 중 하나를 선택하세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 github_source_data 데이터 세트를 선택하여 세부정보 탭을 엽니다.
공유 > 뷰 승인을 클릭합니다.
승인된 뷰 창의 승인된 뷰에 PROJECT_ID.shared_views.github_analyst_view를 입력합니다.

PROJECT_ID를 프로젝트 ID로 바꿉니다.
승인 추가를 클릭합니다.

--- 탭: Java [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#java] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Authorize the view to access the source dataset
List<Acl> srcAcl = new ArrayList<>(sourceDataset.getAcl());
srcAcl.add(Acl.of(new Acl.View(view.getTableId())));
sourceDataset.toBuilder().setAcl(srcAcl).build().update();

--- 탭: Python [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#python] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  access_entries = source_dataset.access_entries
access_entries.append(
    bigquery.AccessEntry(None, EntityTypes.VIEW, view.reference.to_api_repr())
)
source_dataset.access_entries = access_entries
source_dataset = client.update_dataset(
    source_dataset, ["access_entries"]
)  # API request
구성 확인
구성이 완료되면 데이터 분석가 그룹(예: data_analysts)의 구성원이 뷰를 쿼리하여 구성을 확인할 수 있습니다.
구성을 확인하려면 데이터 분석가가 다음 쿼리를 실행해야 합니다.
BigQuery 페이지로 이동합니다.
BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko]
쿼리 편집기에서 다음 문을 입력합니다.
SELECT
  *
FROM
  `
PROJECT_ID.shared_views.github_analyst_view`;
PROJECT_ID를 프로젝트 ID로 바꿉니다.
play_circle 실행을 클릭합니다.
쿼리 결과는 다음과 유사합니다. 결과에는 작성자 이름과 커밋한 사용자 이름만 표시됩니다.
쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.
전체 소스 코드
다음은 참조용 튜토리얼의 전체 소스 코드입니다.
--- 탭: Java [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#java] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Create a source dataset to store your table.
Dataset sourceDataset = bigquery.create(DatasetInfo.of(sourceDatasetId));

// Populate a source table
String tableQuery =
    "SELECT commit, author, committer, repo_name"
        + " FROM `bigquery-public-data.github_repos.commits`"
        + " LIMIT 1000";
QueryJobConfiguration queryConfig =
    QueryJobConfiguration.newBuilder(tableQuery)
        .setDestinationTable(TableId.of(sourceDatasetId, sourceTableId))
        .build();
bigquery.query(queryConfig);

// Create a separate dataset to store your view
Dataset sharedDataset = bigquery.create(DatasetInfo.of(sharedDatasetId));

// Create the view in the new dataset
String viewQuery =
    String.format(
        "SELECT commit, author.name as author, committer.name as committer, repo_name FROM %s.%s.%s",
        projectId, sourceDatasetId, sourceTableId);

ViewDefinition viewDefinition = ViewDefinition.of(viewQuery);

Table view =
    bigquery.create(TableInfo.of(TableId.of(sharedDatasetId, sharedViewId), viewDefinition));

// Assign access controls to the dataset containing the view
List<Acl> viewAcl = new ArrayList<>(sharedDataset.getAcl());
viewAcl.add(Acl.of(new Acl.Group("example-analyst-group@google.com"), Acl.Role.READER));
sharedDataset.toBuilder().setAcl(viewAcl).build().update();

// Authorize the view to access the source dataset
List<Acl> srcAcl = new ArrayList<>(sourceDataset.getAcl());
srcAcl.add(Acl.of(new Acl.View(view.getTableId())));
sourceDataset.toBuilder().setAcl(srcAcl).build().update();

--- 탭: Python [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#python] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  # Create a source dataset
from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]
from google.cloud.bigquery.enums import EntityTypes [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.enums.EntityTypes.html?hl=ko]

client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()
source_dataset_id = "github_source_data"
source_dataset_id_full = "{}.{}".format(client.project, source_dataset_id)


source_dataset = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko](source_dataset_id_full)
# Specify the geographic location where the dataset should reside.
source_dataset.location = "US"
source_dataset = client.create_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_create_dataset](source_dataset)  # API request

# Populate a source table
source_table_id = "github_contributors"
job_config = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].QueryJobConfig [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.job.QueryJobConfig.html?hl=ko]()
job_config.destination = source_dataset.table [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_table](source_table_id)
sql = """
    SELECT commit, author, committer, repo_name
    FROM `bigquery-public-data.github_repos.commits`
    LIMIT 1000
"""
client.query_and_wait [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_query_and_wait](
    sql,
    # Location must match that of the dataset(s) referenced in the query
    # and of the destination table.
    location="US",
    job_config=job_config,
)  # API request - starts the query and waits for query to finish

# Create a separate dataset to store your view
shared_dataset_id = "shared_views"
shared_dataset_id_full = "{}.{}".format(client.project, shared_dataset_id)


shared_dataset = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko](shared_dataset_id_full)
shared_dataset.location = "US"
shared_dataset = client.create_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_create_dataset](shared_dataset)  # API request

# Create the view in the new dataset
shared_view_id = "github_analyst_view"
view = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Table [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.table.Table.html?hl=ko](shared_dataset.table [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_table](shared_view_id))
sql_template = """
    SELECT
        commit, author.name as author,
        committer.name as committer, repo_name
    FROM
        `{}.{}.{}`
"""
view [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_view].view_query [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.table.Table.html?hl=ko#google_cloud_bigquery_table_Table_view_query] = sql_template.format(
    client.project, source_dataset_id, source_table_id
)
view = client.create_table [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_create_table](view)  # API request

# Assign access controls to the dataset containing the view
# analyst_group_email = 'data_analysts@example.com'
access_entries = shared_dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries]
access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries].append(
    bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].AccessEntry [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko]("READER", EntityTypes [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.enums.EntityTypes.html?hl=ko].GROUP_BY_EMAIL, analyst_group_email)
)
shared_dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries] = access_entries
shared_dataset = client.update_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_update_dataset](
    shared_dataset, ["access_entries"]
)  # API request

# Authorize the view to access the source dataset
access_entries = source_dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries]
access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries].append(
    bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].AccessEntry [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko](None, EntityTypes [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.enums.EntityTypes.html?hl=ko].VIEW, view [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_view].reference.to_api_repr())
)
source_dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries] = access_entries
source_dataset = client.update_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_update_dataset](
    source_dataset, ["access_entries"]
)  # API request
삭제
이 튜토리얼에서 사용된 리소스 비용이 Google Cloud 계정에 청구되지 않도록 하려면 리소스가 포함된 프로젝트를 삭제하거나 프로젝트를 유지하고 개별 리소스를 삭제하세요.
프로젝트 삭제
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#%EC%BD%98%EC%86%94] ---
주의: 프로젝트 삭제가 미치는 영향은 다음과 같습니다.
  
    
      프로젝트의 모든 항목이 삭제됩니다. 이 문서의 태스크에 기존 프로젝트를 사용한 경우 프로젝트를 삭제하면 프로젝트에서 수행한 다른 작업도 삭제됩니다.
    
    
      커스텀 프로젝트 ID가 손실됩니다.
      이 프로젝트를 만들 때 앞으로 사용할 커스텀 프로젝트 ID를 만들었을 수 있습니다. appspot.com URL과 같이 프로젝트 ID를 사용하는 URL을 보존하려면 전체 프로젝트를 삭제하는 대신 프로젝트 내에서 선택한 리소스만 삭제합니다.
    
  
 
  여러 아키텍처, 튜토리얼, 빠른 시작을 살펴보려는 경우 프로젝트를 재사용하면 프로젝트 할당량 한도 초과를 방지할 수 있습니다.
 







 
  
    In the Google Cloud console, go to the Manage resources page.
    Go to Manage resources [https://console.cloud.google.com/iam-admin/projects?hl=ko]
  
  
  
    In the project list, select the project that you
    want to delete, and then click Delete.
  
  
    In the dialog, type the project ID, and then click
    Shut down to delete the project.

--- 탭: gcloud [https://cloud.google.com/bigquery/docs/create-authorized-views?hl=ko#gcloud] ---
주의: 프로젝트 삭제가 미치는 영향은 다음과 같습니다.
  
    
      프로젝트의 모든 항목이 삭제됩니다. 이 문서의 태스크에 기존 프로젝트를 사용한 경우 프로젝트를 삭제하면 프로젝트에서 수행한 다른 작업도 삭제됩니다.
    
    
      커스텀 프로젝트 ID가 손실됩니다.
      이 프로젝트를 만들 때 앞으로 사용할 커스텀 프로젝트 ID를 만들었을 수 있습니다. appspot.com URL과 같이 프로젝트 ID를 사용하는 URL을 보존하려면 전체 프로젝트를 삭제하는 대신 프로젝트 내에서 선택한 리소스만 삭제합니다.
    
  
 
  여러 아키텍처, 튜토리얼, 빠른 시작을 살펴보려는 경우 프로젝트를 재사용하면 프로젝트 할당량 한도 초과를 방지할 수 있습니다.
 







 
  
    In the Google Cloud console, go to the Manage resources page.
    Go to Manage resources [https://console.cloud.google.com/iam-admin/projects?hl=ko]
  
  
  
    In the project list, select the project that you
    want to delete, and then click Delete.
  
  
    In the dialog, type the project ID, and then click
    Shut down to delete the project.
개별 리소스 삭제
또는 이 튜토리얼에서 사용된 개별 리소스를 삭제하려면 다음을 수행합니다.
승인된 뷰를 삭제 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#delete_views]합니다.
승인된 뷰가 포함된 데이터 세트를 삭제 [https://cloud.google.com/bigquery/docs/managing-datasets?hl=ko#delete-datasets]합니다.
소스 데이터 세트에서 테이블을 삭제 [https://cloud.google.com/bigquery/docs/managing-tables?hl=ko#deleting_a_table]합니다.
소스 데이터 세트를 삭제 [https://cloud.google.com/bigquery/docs/managing-datasets?hl=ko#delete-datasets]합니다.
이 튜토리얼에 사용된 리소스를 만들었으므로 이를 삭제하는 데 추가 권한이 필요하지 않습니다.
다음 단계
BigQuery의 액세스 제어에 대해 알아보려면 BigQuery IAM 역할 및 권한 [https://cloud.google.com/bigquery/docs/access-control?hl=ko]을 참조하세요.
BigQuery 뷰에 대해 알아보려면 논리적 뷰 소개 [https://cloud.google.com/bigquery/docs/views-intro?hl=ko]를 참조하세요.
승인된 뷰에 대해 자세히 알아보려면 승인된 뷰 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko]를 참조하세요.
액세스 제어에 관한 기본 개념을 알아보려면 IAM 개요 [https://cloud.google.com/iam/docs/overview?hl=ko]를 참조하세요.
액세스 제어를 관리하는 방법을 알아보려면 정책 관리 [https://cloud.google.com/iam/docs/managing-policies?hl=ko]를 참조하세요.
도움이 되었나요?
의견 보내기