Source URL: https://cloud.google.com/bigquery/docs/managing-views

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
시작하기 전에 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#before_you_begin]
뷰 업데이트 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#update_a_view]
필수 권한 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#required_permissions]
뷰의 SQL 쿼리 업데이트 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#update-sql]
뷰의 만료 시간 업데이트 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#view-expiration]
뷰 관리
bookmark_border
이 문서에서는 BigQuery에서 뷰를 관리하는 방법을 설명합니다. 다음과 같은 방법으로 BigQuery 뷰를 관리할 수 있습니다.
뷰 업데이트 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#update_a_view]
뷰 복사 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#copy]
뷰 이름 바꾸기 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#rename_a_view]
뷰 삭제 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#delete_views]
시작하기 전에
사용자에게 이 문서의 각 태스크를 수행하는 데 필요한 권한을 부여하는 Identity and Access Management(IAM) 역할을 부여합니다. 태스크를 수행하는 데 필요한 권한(있는 경우)이 태스크의 '필요한 권한' 섹션에 나열됩니다.
뷰 업데이트
뷰를 만든 후에 다음과 같은 뷰 속성을 업데이트할 수 있습니다.
SQL 쿼리 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#update-sql]
만료 시간 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#view-expiration]
설명 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#update-description]
라벨 [https://cloud.google.com/bigquery/docs/adding-using-labels?hl=ko#adding_table_and_view_labels]
필수 권한
뷰를 업데이트하려면 다음 IAM 권한이 필요합니다.
bigquery.tables.update
bigquery.tables.get
다음과 같은 사전 정의된 각 IAM 역할에는 뷰를 업데이트하는 데 필요한 권한이 포함되어 있습니다.
roles/bigquery.dataEditor
roles/bigquery.dataOwner
roles/bigquery.admin
또한 bigquery.datasets.create 권한이 있으면 직접 만든 데이터 세트의 테이블과 뷰를 업데이트할 수 있습니다.
뷰의 SQL 쿼리를 업데이트하려면 뷰의 SQL 쿼리에서 참조하는 모든 테이블을 쿼리할 수 있는 권한도 필요합니다.
참고: 승인된 뷰 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko]의 SQL 또는 승인된 데이터 세트 [https://cloud.google.com/bigquery/docs/authorized-datasets?hl=ko]의 뷰를 업데이트하려면 추가 권한이 필요합니다. 자세한 내용은 승인된 뷰에 필요한 권한 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko#required_permissions] 및 승인된 데이터 세트의 뷰에 필요한 권한 [https://cloud.google.com/bigquery/docs/authorized-datasets?hl=ko#permissions_datasets]을 참조하세요.
BigQuery의 IAM 역할과 권한에 대한 자세한 내용은 사전 정의된 역할 및 권한 [https://cloud.google.com/bigquery/docs/access-control?hl=ko]을 참조하세요.
뷰의 SQL 쿼리 업데이트
뷰를 정의하는 데 사용되는 SQL 쿼리를 다음과 같은 방법으로 업데이트할 수 있습니다.
Google Cloud 콘솔 사용
bq 명령줄 도구의 bq update 명령어 사용
tables.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch?hl=ko] API 메서드 호출
클라이언트 라이브러리 사용
API 또는 bq 명령줄 도구에서 SQL 언어를 legacy SQL에서 GoogleSQL로 변경할 수 있습니다. Google Cloud 콘솔에서는 legacy SQL 뷰를 GoogleSQL로 업데이트할 수 없습니다.
뷰의 SQL 쿼리를 업데이트하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#%EC%BD%98%EC%86%94] ---
탐색기 패널에서 프로젝트와 데이터 세트를 펼친 후 뷰를 선택합니다.
세부정보 탭을 클릭합니다.
쿼리 상자 위에 있는 쿼리 수정 버튼을 클릭합니다. 나타나는 대화상자에서 열기를 클릭합니다.

 
쿼리 편집기 상자에서 SQL 쿼리를 수정한 후 뷰 저장을 클릭합니다.

 
뷰 저장 대화상자에서 모든 필드가 올바른지 확인한 후 저장을 클릭합니다.

--- 탭: bq [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#bq] ---
bq update 명령어를 --view 플래그와 함께 실행합니다. GoogleSQL을 사용하거나 쿼리 언어를 legacy SQL에서 GoogleSQL로 업데이트하려면 --use_legacy_sql 플래그를 포함하여 false로 설정하세요.

쿼리에서 Cloud Storage 또는 로컬 파일에 저장된 외부 사용자 정의 함수 리소스를 참조하는 경우 --view_udf_resource 플래그를 사용하여 해당 리소스를 지정합니다. --view_udf_resource 플래그는 여기서 설명하지 않습니다. UDF 사용에 대한 자세한 내용은 GoogleSQL 사용자 정의 함수 [https://cloud.google.com/bigquery/docs/user-defined-functions?hl=ko]를 참조하세요.

기본 프로젝트가 아닌 다른 프로젝트의 뷰를 업데이트하려면 해당 프로젝트 ID를 project_id:dataset 형식으로 데이터세트 이름에 추가합니다.

bq update \
    --use_legacy_sql=false \
    --view_udf_resource=path_to_file \
    --view='query' \
    project_id:dataset.view

다음을 바꿉니다.


path_to_file: 뷰에 사용되는 사용자 정의 함수 리소스이며, 즉시 로드 및 평가될 코드 파일의 URI 또는 로컬 파일 시스템 경로입니다. 여러 파일을 지정하려면 플래그를 반복합니다.
query: 유효한 GoogleSQL 쿼리
project_id: 프로젝트 ID
dataset: 업데이트할 뷰가 포함된 데이터 세트의 이름
view: 업데이트할 뷰의 이름


예시

다음 명령어를 입력하여 mydataset에서 myview라는 뷰에 대한 SQL 쿼리를 업데이트합니다. mydataset는 기본 프로젝트에 있습니다. 뷰를 업데이트하는 데 사용되는 쿼리 예시는 미국 이름 데이터 [https://cloud.google.com/bigquery/public-data/usa-names?hl=ko] 공개 데이터 세트의 데이터를 쿼리합니다.
bq update \
    --use_legacy_sql=false \
    --view \
    'SELECT
      name,
      number
    FROM
      `bigquery-public-data.usa_names.usa_1910_current`
    WHERE
      gender = "M"
    ORDER BY
      number DESC;' \
    mydataset.myview

다음 명령어를 입력하여 mydataset에서 myview라는 뷰에 대한 SQL 쿼리를 업데이트합니다. mydataset는 기본 프로젝트가 아닌 myotherproject에 있습니다. 뷰를 업데이트하는 데 사용되는 쿼리 예시는 미국 이름 데이터 [https://cloud.google.com/bigquery/public-data/usa-names?hl=ko] 공개 데이터 세트의 데이터를 쿼리합니다.
bq update \
    --use_legacy_sql=false \
    --view \
    'SELECT
      name,
      number
    FROM
      `bigquery-public-data.usa_names.usa_1910_current`
    WHERE
      gender = "M"
    ORDER BY
      number DESC;' \
    myotherproject:mydataset.myview

--- 탭: API [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#api] ---
업데이트된 view 속성을 포함하는 테이블 리소스 [https://cloud.google.com/bigquery/docs/reference/v2/tables?hl=ko]로 tables.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch?hl=ko] 메서드를 호출하여 뷰를 업데이트할 수 있습니다. tables.update 메서드는 전체 테이블 리소스를 대체하므로 tables.patch 메서드를 사용하는 것이 좋습니다.

--- 탭: Go [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#go] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  import (
	"context"
	"fmt"

	"cloud.google.com/go/bigquery"
)

// updateView demonstrates updating the query metadata that defines a logical view.
func updateView(projectID, datasetID, viewID string) error {
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// viewID := "myview"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %v", err)
	}
	defer client.Close()

	view := client.Dataset(datasetID).Table(viewID)
	meta, err := view.Metadata(ctx)
	if err != nil {
		return err
	}

	newMeta := bigquery.TableMetadataToUpdate{
		// This example updates a view into the shakespeare dataset to exclude works named after kings.
		ViewQuery: "SELECT word, word_count, corpus, corpus_date FROM `bigquery-public-data.samples.shakespeare` WHERE corpus NOT LIKE '%king%'",
	}

	if _, err := view.Update(ctx, newMeta, meta.ETag); err != nil {
		return err
	}
	return nil
}

--- 탭: tabpanel-자바 ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryException;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.TableId;
import com.google.cloud.bigquery.TableInfo;
import com.google.cloud.bigquery.ViewDefinition;

// Sample to update query on a view
public class UpdateViewQuery {

  public static void runUpdateViewQuery() {
    // TODO(developer): Replace these variables before running the sample.
    String datasetName = "MY_DATASET_NAME";
    String tableName = "MY_TABLE_NAME";
    String viewName = "MY_VIEW_NAME";
    String updateQuery =
        String.format("SELECT TimestampField, StringField FROM %s.%s", datasetName, tableName);
    updateViewQuery(datasetName, viewName, updateQuery);
  }

  public static void updateViewQuery(String datasetName, String viewName, String query) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();

      // Retrieve existing view metadata
      TableInfo viewMetadata = bigquery.getTable(TableId.of(datasetName, viewName));

      // Update view query
      ViewDefinition viewDefinition = viewMetadata.getDefinition();
      viewDefinition.toBuilder().setQuery(query).build();

      // Set metadata
      bigquery.update(viewMetadata.toBuilder().setDefinition(viewDefinition).build());

      System.out.println("View query updated successfully");
    } catch (BigQueryException e) {
      System.out.println("View query was not updated. \n" + e.toString());
    }
  }
}

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  // Import the Google Cloud client library and create a client
const {BigQuery} = require('@google-cloud/bigquery');
const bigquery = new BigQuery();

async function updateViewQuery() {
  // Updates a view named "my_existing_view" in "my_dataset".

  /**
   * TODO(developer): Uncomment the following lines before running the sample.
   */
  // const datasetId = "my_existing_dataset"
  // const tableId = "my_existing_table"
  const dataset = await bigquery.dataset(datasetId);

  // This example updates a view into the USA names dataset to include state.
  const newViewQuery = `SELECT name, state 
  FROM \`bigquery-public-data.usa_names.usa_1910_current\`
  LIMIT 10`;

  // Retrieve existing view
  const [view] = await dataset.table(tableId).get();

  // Retrieve existing view metadata
  const [metadata] = await view.getMetadata();

  // Update view query
  metadata.view = newViewQuery;

  // Set metadata
  await view.setMetadata(metadata);

  console.log(`View ${tableId} updated.`);
}

--- 탭: tabpanel-python ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  from google.cloud import bigquery

client = bigquery.Client()

view_id = "my-project.my_dataset.my_view"
source_id = "my-project.my_dataset.my_table"
view = bigquery.Table(view_id)

# The source table in this example is created from a CSV file in Google
# Cloud Storage located at
# `gs://cloud-samples-data/bigquery/us-states/us-states.csv`. It contains
# 50 US states, while the view returns only those states with names
# starting with the letter 'M'.
view.view_query = f"SELECT name, post_abbr FROM `{source_id}` WHERE name LIKE 'M%'"

# Make an API request to update the query property of the view.
view = client.update_table(view, ["view_query"])
print(f"Updated {view.table_type}: {str(view.reference)}")
참고: 승인된 뷰 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko]의 쿼리에서 참조하는 데이터 세트를 업데이트하는 경우 새로운 기본 데이터 세트에 대한 뷰 액세스 권한을 승인 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko#authorize_a_view]해야 합니다.
뷰의 만료 시간 업데이트
데이터세트 수준에서 기본 테이블 만료 시간을 설정하거나(테이블과 뷰에 모두 영향을 미침) 뷰를 만들 때 뷰의 만료 시간을 설정할 수 있습니다. 뷰를 만들 때 만료 시간을 설정하면 데이터 세트의 기본 테이블 만료 시간은 무시됩니다. 데이터 세트 수준에서 기본 테이블 만료 시간을 설정하지 않고 뷰를 만들 때 만료 시간을 설정하지 않으면 뷰가 만료되지 않으며 수동으로 삭제해야 합니다.
뷰가 생성된 후 언제든지 다음과 같은 방법으로 뷰의 만료 시간을 업데이트할 수 있습니다.
Google Cloud 콘솔 사용
GoogleSQL 문법으로 작성된 데이터 정의 언어(DDL) 문 사용
bq 명령줄 도구의 bq update 명령어 사용
tables.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch?hl=ko] API 메서드 호출
클라이언트 라이브러리 사용
참고: 이미 지난 만료 시간을 설정하는 경우 뷰가 즉시 삭제됩니다.
뷰의 만료 시간을 업데이트하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#%EC%BD%98%EC%86%94] ---
탐색창에서 뷰를 선택합니다.
뷰 세부정보 페이지에서 세부정보 탭을 클릭합니다.
뷰 정보 오른쪽의 수정 아이콘(연필)을 클릭합니다.
뷰 정보 대화상자의 뷰 만료에서 날짜 지정을 클릭합니다.
날짜 선택도구에서 만료 날짜 및 시간을 입력한 다음 확인을 클릭합니다.
업데이트를 클릭합니다. 업데이트된 만료 시간이 뷰 정보 섹션에 나타납니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#sql] ---
ALTER VIEW SET OPTIONS DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_view_set_options_statement]을 사용합니다.






Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

 ALTER VIEW DATASET_ID.MY_VIEW
 SET OPTIONS (
  expiration_timestamp = TIMESTAMP('NEW_TIMESTAMP'));


다음을 바꿉니다.

  DATASET_ID: 뷰가 포함된 데이터 세트의 ID입니다.
  MY_VIEW: 업데이트할 뷰의 이름입니다.
  NEW_TIMESTAMP: TIMESTAMP 값 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types?hl=ko#timestamp_type]입니다.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#bq] ---
bq update 명령어를 --expiration 플래그와 함께 실행합니다. 기본 프로젝트가 아닌 다른 프로젝트의 뷰를 업데이트하려면 해당 프로젝트 ID를 project_id:dataset 형식으로 데이터세트 이름에 추가합니다.

bq update \
    --expiration integer \
    project_id:dataset.view

다음을 바꿉니다.


integer: 테이블의 기본 수명(초).
최솟값은 3,600초(1시간)입니다. 만료 시간은 현재 시간과 정수 값을 더한 값으로 계산됩니다.
project_id: 프로젝트 ID
dataset: 업데이트할 뷰가 포함된 데이터 세트의 이름
view: 업데이트할 뷰의 이름


예시

mydataset의 myview 만료 시간을 5일(432,000초)로 업데이트하려면 다음 명령어를 입력합니다. 여기서 mydataset는 기본 프로젝트에 있습니다.
bq update \
    --expiration 432000 \
    mydataset.myview

mydataset의 myview 만료 시간을 5일(432,000초)로 업데이트하려면 다음 명령어를 입력합니다. mydataset는 기본 프로젝트가 아닌 myotherproject에 있습니다.
bq update \
    --expiration 432000 \
    myotherproject:mydataset.myview

--- 탭: API [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#api] ---
tables.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch?hl=ko] 메서드를 호출하고 테이블 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables?hl=ko]에서 expirationTime 속성을 사용합니다. tables.update 메서드는 전체 테이블 리소스를 대체하므로 tables.patch 메서드를 사용하는 것이 좋습니다. REST API를 사용하는 경우 뷰의 만료 시간이 밀리초 단위로 표시됩니다.

--- 탭: tabpanel-go ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/bigquery"
)

// updateTableExpiration demonstrates setting the table expiration of a table to a specific point in time
// in the future, at which time it will be deleted.
func updateTableExpiration(projectID, datasetID, tableID string) error {
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// tableID := "mytable"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %v", err)
	}
	defer client.Close()

	tableRef := client.Dataset(datasetID).Table(tableID)
	meta, err := tableRef.Metadata(ctx)
	if err != nil {
		return err
	}
	update := bigquery.TableMetadataToUpdate{
		ExpirationTime: time.Now().Add(time.Duration(5*24) * time.Hour), // table expiration in 5 days.
	}
	if _, err = tableRef.Update(ctx, update, meta.ETag); err != nil {
		return err
	}
	return nil
}

--- 탭: tabpanel-자바 ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  Table beforeTable = bigquery.getTable(datasetName, tableName);

// Set table to expire 5 days from now.
long expirationMillis = DateTime.now().plusDays(5).getMillis();
TableInfo tableInfo = beforeTable.toBuilder()
        .setExpirationTime(expirationMillis)
        .build();
Table afterTable = bigquery.update(tableInfo);

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  // Import the Google Cloud client library
const {BigQuery} = require('@google-cloud/bigquery');
const bigquery = new BigQuery();

async function updateTableExpiration() {
  // Updates a table's expiration.

  /**
   * TODO(developer): Uncomment the following lines before running the sample.
   */
  // const datasetId = 'my_dataset', // Existing dataset
  // const tableId = 'my_table', // Existing table
  // const expirationTime = Date.now() + 1000 * 60 * 60 * 24 * 5 // 5 days from current time in ms

  // Retreive current table metadata
  const table = bigquery.dataset(datasetId).table(tableId);
  const [metadata] = await table.getMetadata();

  // Set new table expiration to 5 days from current time
  metadata.expirationTime = expirationTime.toString();
  const [apiResponse] = await table.setMetadata(metadata);

  const newExpirationTime = apiResponse.expirationTime;
  console.log(`${tableId} expiration: ${newExpirationTime}`);
}

--- 탭: tabpanel-python ---
뷰의 만료 시간을 업데이트하려면 테이블의 만료 시간을 업데이트하는 것과 동일한 프로세스를 사용하면 됩니다.







  
  



  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  from google.cloud import bigquery

client = bigquery.Client()

# TODO(dev): Change table_id to the full name of the table you want to update.
table_id = "your-project.your_dataset.your_table_name"

# TODO(dev): Set table to expire for desired days days from now.
expiration = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(
    days=5
)
table = client.get_table(table_id)  # Make an API request.
table.expires = expiration
table = client.update_table(table, ["expires"])  # API request

print(f"Updated {table_id}, expires {table.expires}.")
뷰의 설명 업데이트
다음과 같은 방법으로 뷰의 설명을 업데이트할 수 있습니다.
Google Cloud 콘솔 사용
GoogleSQL 문법으로 작성된 데이터 정의 언어(DDL) 문 사용
bq 명령줄 도구의 bq update 명령어 사용
tables.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch?hl=ko] API 메서드 호출
클라이언트 라이브러리 사용
뷰 설명을 업데이트하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#%EC%BD%98%EC%86%94] ---
Google Cloud 콘솔을 사용하여 뷰를 만들 때는 설명을 추가할 수 없습니다.
뷰가 생성된 후 세부정보 페이지에서 설명을 추가할 수 있습니다.


탐색기 패널에서 프로젝트와 데이터 세트를 펼친 후 뷰를 선택합니다.
세부정보 탭을 클릭합니다.
설명 옆에 있는 연필 아이콘을 클릭합니다.

 
대화상자에 설명을 입력합니다. 업데이트를 클릭하여 새 설명을 저장합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#sql] ---
ALTER VIEW SET OPTIONS DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_view_set_options_statement]을 사용합니다.






Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

 ALTER VIEW DATASET_ID.MY_VIEW
 SET OPTIONS (
  description = 'NEW_DESCRIPTION');


다음을 바꿉니다.

  DATASET_ID: 뷰가 포함된 데이터 세트의 ID입니다.
  MY_VIEW: 업데이트할 뷰의 이름입니다.
  NEW_DESCRIPTION: 새 뷰 설명입니다.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#bq] ---
bq update 명령어를 --description 플래그와 함께 실행합니다. 기본 프로젝트가 아닌 다른 프로젝트의 뷰를 업데이트하려면 해당 프로젝트 ID를 [PROJECT_ID]:[DATASET] 형식으로 데이터세트 이름에 추가합니다.

bq update \
    --description "description" \
    project_id:dataset.view

다음을 바꿉니다.


description: 따옴표 안의 뷰를 설명하는 텍스트
project_id: 프로젝트 ID
dataset: 업데이트할 뷰가 포함된 데이터 세트의 이름
view: 업데이트할 뷰의 이름


예시

mydataset의 myview 설명을 'Description of myview'로 변경하려면 다음 명령어를 입력합니다. 여기서 mydataset는 기본 프로젝트에 있습니다.
bq update \
    --description "Description of myview" \
    mydataset.myview

mydataset의 myview 설명을 'Description of myview'로 변경하려면 다음 명령어를 입력합니다. mydataset는 기본 프로젝트가 아닌 myotherproject에 있습니다.
bq update \
    --description "Description of myview" \
    myotherproject:mydataset.myview

--- 탭: API [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#api] ---
tables.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch?hl=ko] 메서드를 호출하고 description 속성을 사용하여 테이블 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables?hl=ko]에서 뷰의 설명을 업데이트합니다. tables.update 메서드는 전체 테이블 리소스를 대체하므로 tables.patch 메서드를 사용하는 것이 좋습니다.

--- 탭: tabpanel-go ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  import (
	"context"
	"fmt"

	"cloud.google.com/go/bigquery"
)

// updateTableDescription demonstrates how to fetch a table's metadata and updates the Description metadata.
func updateTableDescription(projectID, datasetID, tableID string) error {
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// tableID := "mytable"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %v", err)
	}
	defer client.Close()

	tableRef := client.Dataset(datasetID).Table(tableID)
	meta, err := tableRef.Metadata(ctx)
	if err != nil {
		return err
	}
	update := bigquery.TableMetadataToUpdate{
		Description: "Updated description.",
	}
	if _, err = tableRef.Update(ctx, update, meta.ETag); err != nil {
		return err
	}
	return nil
}

--- 탭: tabpanel-자바 ---
뷰의 설명을 업데이트하려면 테이블의 설명을 업데이트하는 것과 동일한 프로세스를 사용하면 됩니다.







  
  



  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  // String datasetName = "my_dataset_name";
// String tableName = "my_table_name";
// String newDescription = "new_description";

Table beforeTable = bigquery.getTable(datasetName, tableName);
TableInfo tableInfo = beforeTable.toBuilder()
    .setDescription(newDescription)
    .build();
Table afterTable = bigquery.update(tableInfo);

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  // Import the Google Cloud client library
const {BigQuery} = require('@google-cloud/bigquery');
const bigquery = new BigQuery();

async function updateTableDescription() {
  // Updates a table's description.

  // Retreive current table metadata
  const table = bigquery.dataset(datasetId).table(tableId);
  const [metadata] = await table.getMetadata();

  // Set new table description
  const description = 'New table description.';
  metadata.description = description;
  const [apiResponse] = await table.setMetadata(metadata);
  const newDescription = apiResponse.description;

  console.log(`${tableId} description: ${newDescription}`);
}

--- 탭: tabpanel-python ---
뷰의 설명을 업데이트하려면 테이블의 설명을 업데이트하는 것과 동일한 프로세스를 사용하면 됩니다.







  
  



  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  # from google.cloud import bigquery
# client = bigquery.Client()
# project = client.project
# dataset_ref = bigquery.DatasetReference(project, dataset_id)
# table_ref = dataset_ref.table('my_table')
# table = client.get_table(table_ref)  # API request

assert table.description == "Original description."
table.description = "Updated description."

table = client.update_table(table, ["description"])  # API request

assert table.description == "Updated description."
뷰 복사
Google Cloud 콘솔을 사용하여 뷰를 복사할 수 있습니다.
bq 명령줄 도구, REST API 또는 클라이언트 라이브러리를 사용하여 뷰를 복사할 수 없지만 대상 데이터 세트에서 뷰를 복사 [https://cloud.google.com/bigquery/docs/views?hl=ko]할 수 있습니다.
필수 권한
Google Cloud 콘솔에서 뷰를 복사하려면 소스 및 대상 데이터 세트에 대한 IAM 권한이 필요합니다.
소스 데이터 세트에는 다음이 필요합니다.
bigquery.tables.get
bigquery.tables.getData(뷰의 SQL 쿼리에서 참조되는 테이블에 액세스하는 데 필요)
대상 데이터 세트에는 다음이 필요합니다.
bigquery.tables.create(대상 데이터 세트에 뷰 복사본을 만들 수 있음)
다음과 같은 사전 정의된 각 IAM 역할에는 뷰를 복사하는 데 필요한 권한이 포함되어 있습니다.
roles/bigquery.dataEditor
roles/bigquery.dataOwner
roles/bigquery.admin
또한 bigquery.datasets.create 권한이 있으면 사용자가 만든 데이터 세트에 뷰를 복사할 수 있습니다. 대상 데이터 세트를 만들지 않았다면 대상 데이터 세트에 대한 액세스 권한도 필요합니다.
참고: 뷰 복사에는 bigquery.jobs.create 권한이 필요하지 않습니다. Google Cloud 콘솔은 뷰를 복사할 때 복사 작업을 생성하지 않습니다.
BigQuery의 IAM 역할과 권한에 대한 자세한 내용은 사전 정의된 역할 및 권한 [https://cloud.google.com/bigquery/docs/access-control?hl=ko]을 참조하세요.
뷰 복사
뷰를 복사하려면 다음 안내를 따르세요.
탐색기 패널에서 프로젝트와 데이터 세트를 펼친 후 뷰를 선택합니다.
세부정보 패널에서 뷰 복사를 클릭합니다.
뷰 복사 대화상자에서 다음을 수행합니다.
소스 섹션에서 프로젝트 이름, 데이터 세트 이름, 테이블 이름이 올바른지 확인합니다.
대상 섹션에서 다음을 수행합니다.
프로젝트 이름에서 뷰를 복사하려는 프로젝트를 선택합니다.
데이터세트 이름에서 복사된 뷰를 포함할 데이터 세트를 선택합니다.
테이블 이름에 뷰 이름을 입력합니다. 상자에 새 뷰 이름을 입력하여 뷰 이름을 바꿀 수 있습니다. 새 이름을 입력할 때는 뷰 이름 지정 [https://cloud.google.com/bigquery/docs/views?hl=ko#view_naming] 규칙을 따라야 합니다.
복사를 클릭합니다.
복사 작업 한도가 적용됩니다. 자세한 내용은 할당량 및 한도 [https://cloud.google.com/bigquery/quotas?hl=ko#copy_jobs]를 참조하세요.
뷰 이름 바꾸기
현재는 뷰 복사를 위해 Google Cloud 콘솔을 사용할 때만 뷰 이름을 바꿀 수 있습니다. 뷰를 복사할 때 이름을 바꾸는 방법에 대한 안내는 뷰 복사 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#copy]를 참조하세요.
bq 명령줄 도구, API 또는 클라이언트 라이브러리를 사용하여 기존 뷰의 이름을 변경할 수 없습니다. 대신 새 이름으로 뷰를 다시 만들어야 합니다 [https://cloud.google.com/bigquery/docs/views?hl=ko].
뷰 삭제
뷰는 다음 방법으로 삭제할 수 있습니다.
Google Cloud 콘솔 사용
bq 명령줄 도구의 bq rm 명령어 사용
tables.delete [https://cloud.google.com/bigquery/docs/reference/v2/tables/delete?hl=ko] API 메서드 호출
현재까지는 사용 가능한 방법을 사용해서 뷰를 한 번에 하나만 삭제할 수 있습니다.
지정된 시간이 지난 후 자동으로 뷰를 삭제하려면 데이터세트 수준의 기본 만료 시간 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#table-expiration]을 설정하거나 뷰를 생성 [https://cloud.google.com/bigquery/docs/views?hl=ko]할 때 만료 시간을 설정하세요.
승인된 뷰 [https://cloud.google.com/bigquery/docs/share-access-views?hl=ko]를 삭제한 경우 소스 데이터 세트의 승인된 뷰 목록에서 삭제된 뷰를 삭제하는 데 최대 24시간이 걸릴 수 있습니다.
주의: 뷰 삭제는 실행 취소할 수 없습니다. 삭제된 뷰와 같은 이름으로 승인된 뷰를 다시 만드는 경우 소스 데이터 세트의 승인된 뷰 목록에 새 뷰를 추가해야 합니다.
뷰를 삭제하면 이 뷰와 연결된 권한도 삭제됩니다. 삭제된 뷰를 다시 만들 때는 이전에 연결된 모든 액세스 권한을 수동으로 다시 구성 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko]해야 합니다.
참고: 뷰를 직접 복구할 수 없지만 해당 감사 로그 활동 [https://cloud.google.com/bigquery/docs/introduction-audit-workloads?hl=ko]을 검색하여 뷰 생성 문을 복구할 수 있습니다.
로그 탐색기를 사용하여 감사 로그 이름을 기준으로 활동 로그를 쿼리하는 방법에 대한 자세한 내용은 감사 로그 개요 [https://cloud.google.com/logging/docs/audit?hl=ko]를 참고하세요.
projects/PROJECT_ID/logs/cloudaudit.googleapis.com%2Factivity 사용에 관한 자세한 내용은 BigQuery 데이터 정책 감사 로깅 [https://cloud.google.com/bigquery/docs/column-data-masking-audit-logging?hl=ko]을 참고하세요.
필수 권한
뷰를 삭제하려면 다음 IAM 권한이 필요합니다.
bigquery.tables.delete
다음과 같은 사전 정의된 각 IAM 역할에는 뷰를 삭제하는 데 필요한 권한이 포함되어 있습니다.
roles/bigquery.dataOwner
roles/bigquery.dataEditor
roles/bigquery.admin
또한 bigquery.datasets.create 권한이 있으면 사용자가 만든 데이터 세트에 뷰를 삭제할 수 있습니다.
BigQuery의 IAM 역할과 권한에 대한 자세한 내용은 사전 정의된 역할 및 권한 [https://cloud.google.com/bigquery/docs/access-control?hl=ko]을 참조하세요.
뷰 삭제
뷰를 삭제하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#%EC%BD%98%EC%86%94] ---
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 패널에서 프로젝트와 데이터 세트를 펼친 후 뷰를 선택합니다.
세부정보 패널에서 뷰 삭제를 클릭합니다.
대화상자에 "delete"를 입력하고 삭제를 클릭하여 확인합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#sql] ---
DROP VIEW DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#drop_view_statement]을 사용합니다.




Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

DROP VIEW mydataset.myview;


다음을 바꿉니다.

  DATASET_ID: 뷰가 포함된 데이터 세트의 ID입니다.
  MY_VIEW: 업데이트할 뷰의 이름입니다.
  NEW_DESCRIPTION: 새 뷰 설명입니다.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#bq] ---
bq rm 명령어를 --table 플래그(또는 -t 단축키)와 함께 사용하여 뷰를 삭제합니다. bq 명령줄 도구를 사용하여 뷰를 삭제할 때 작업을 확인해야 합니다.
--force 플래그(또는 -f 단축키)를 사용하면 확인을 건너뛸 수 있습니다.

뷰가 기본 프로젝트가 아닌 다른 프로젝트의 데이터 세트에 있으면 프로젝트 ID를 project_id:dataset 형식으로 데이터 세트 이름에 추가합니다.

bq rm \
-f \
-t \
project_id:dataset.view

각 항목의 의미는 다음과 같습니다.


project_id는 프로젝트 ID입니다.
dataset는 테이블이 포함된 데이터 세트의 이름입니다.
view는 삭제하는 뷰의 이름입니다.


예를 들면 다음과 같습니다.

bq 명령줄 도구를 사용하여 bq 명령어를 실행할 수 있습니다.

Google Cloud 콘솔에서 Cloud Shell을 활성화합니다.

Cloud Shell 활성화 [https://console.cloud.google.com/bigquery?cloudshell=true&hl=ko] 

다음 명령어를 입력하면 mydataset에서 myview가 삭제됩니다. mydataset는 기본 프로젝트에 있습니다.
bq rm -t mydataset.myview

다음 명령어를 입력하면 mydataset에서 myview가 삭제됩니다. mydataset는 기본 프로젝트가 아닌 myotherproject에 있습니다.
bq rm -t myotherproject:mydataset.myview

다음 명령어를 입력하면 mydataset에서 myview가 삭제됩니다. mydataset는 기본 프로젝트에 있습니다. 이 명령어는 -f 단축키를 사용하여 확인을 건너뜁니다.
bq rm -f -t mydataset.myview
참고: bq ls dataset [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_ls] 명령어를 입력하면 뷰가 데이터 세트에서 삭제된 것을 확인할 수 있습니다.

--- 탭: API [https://cloud.google.com/bigquery/docs/managing-views?hl=ko#api] ---
tables.delete [https://cloud.google.com/bigquery/docs/reference/v2/tables/delete?hl=ko] API 메서드를 호출하고 tableId 매개변수를 사용하여 삭제할 뷰를 지정합니다.

--- 탭: tabpanel-c ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 C# 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery C# API 참고 문서 [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  
  





  
    
  
  











  







  



  


  
using Google.Cloud.BigQuery.V2;
using System;

public class BigQueryDeleteTable
{
    public void DeleteTable(
        string projectId = "your-project-id",
        string datasetId = "your_dataset_id",
        string tableId = "your_table_id"
    )
    {
        BigQueryClient client = BigQueryClient.Create(projectId);
        client.DeleteTable(datasetId, tableId);
        Console.WriteLine($"Table {tableId} deleted.");
    }
}

--- 탭: tabpanel-go ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  import (
	"context"
	"fmt"

	"cloud.google.com/go/bigquery"
)

// deleteTable demonstrates deletion of a BigQuery table.
func deleteTable(projectID, datasetID, tableID string) error {
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// tableID := "mytable"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %v", err)
	}
	defer client.Close()

	table := client.Dataset(datasetID).Table(tableID)
	if err := table.Delete(ctx); err != nil {
		return err
	}
	return nil
}

--- 탭: tabpanel-자바 ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  TableId tableId = TableId.of(projectId, datasetName, tableName);
boolean deleted = bigquery.delete(tableId);
if (deleted) {
  // the table was deleted
} else {
  // the table was not found
}

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  // Import the Google Cloud client library
const {BigQuery} = require('@google-cloud/bigquery');
const bigquery = new BigQuery();

async function deleteTable() {
  // Deletes "my_table" from "my_dataset".

  /**
   * TODO(developer): Uncomment the following lines before running the sample.
   */
  // const datasetId = "my_dataset";
  // const tableId = "my_table";

  // Delete the table
  await bigquery
    .dataset(datasetId)
    .table(tableId)
    .delete();

  console.log(`Table ${tableId} deleted.`);
}

--- 탭: tabpanel-php ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 PHP 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery PHP API 참고 문서 [https://cloud.google.com/php/docs/reference/cloud-bigquery/latest/BigQueryClient?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  use Google\Cloud\BigQuery\BigQueryClient;

/** Uncomment and populate these variables in your code */
// $projectId = 'The Google project ID';
// $datasetId = 'The BigQuery dataset ID';
// $tableId = 'The BigQuery table ID';

$bigQuery = new BigQueryClient([
    'projectId' => $projectId,
]);
$dataset = $bigQuery->dataset($datasetId);
$table = $dataset->table($tableId);
$table->delete();
printf('Deleted table %s.%s' . PHP_EOL, $datasetId, $tableId);

--- 탭: tabpanel-python ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  
from google.cloud import bigquery

# Construct a BigQuery client object.
client = bigquery.Client()

# TODO(developer): Set table_id to the ID of the table to fetch.
# table_id = 'your-project.your_dataset.your_table'

# If the table does not exist, delete_table raises
# google.api_core.exceptions.NotFound unless not_found_ok is True.
client.delete_table(table_id, not_found_ok=True)  # Make an API request.
print("Deleted table '{}'.".format(table_id))

--- 탭: tabpanel-ruby ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Ruby 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Ruby API 참고 문서 [https://googleapis.dev/ruby/google-cloud-bigquery/latest/Google/Cloud/Bigquery.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  





















  
  
  
  





  
    
  
  











  




  




  



  


  require "google/cloud/bigquery"

def delete_table dataset_id = "my_dataset_id", table_id = "my_table_id"
  bigquery = Google::Cloud::Bigquery.new
  dataset  = bigquery.dataset dataset_id
  table    = dataset.table table_id

  table.delete

  puts "Table #{table_id} deleted."
end
뷰 복원
삭제된 뷰를 직접 복원할 수는 없지만 특정 시나리오에 대한 해결 방법이 있습니다.
상위 데이터 세트가 삭제되어 뷰가 삭제된 경우 데이터 세트의 삭제를 취소 [https://cloud.google.com/bigquery/docs/managing-datasets?hl=ko#undelete_a_dataset]하여 뷰를 검색할 수 있습니다.
뷰가 명시적으로 삭제된 경우 뷰를 만들거나 업데이트하는 데 사용된 마지막 쿼리를 사용하여 뷰를 다시 만들 수 있습니다 [https://cloud.google.com/bigquery/docs/views?hl=ko]. 로그 [https://cloud.google.com/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata?hl=ko#BigQueryAuditMetadata.TableViewDefinition]에서 뷰 생성 또는 업데이트 작업의 쿼리 정의를 확인할 수 있습니다.
뷰 보안
BigQuery에서 뷰에 대한 액세스를 제어하려면 승인된 뷰 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko]를 참조하세요.
다음 단계
뷰 만들기에 대한 자세한 내용은 뷰 만들기 [https://cloud.google.com/bigquery/docs/views?hl=ko] 참조하기
승인된 뷰 만들기에 대한 자세한 내용은 승인된 뷰 만들기 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko]를 참조하세요.
뷰 메타데이터 가져오기에 대한 자세한 내용은 뷰 정보 가져오기 [https://cloud.google.com/bigquery/docs/view-metadata?hl=ko] 참ㅈㅗ하기
도움이 되었나요?
의견 보내기