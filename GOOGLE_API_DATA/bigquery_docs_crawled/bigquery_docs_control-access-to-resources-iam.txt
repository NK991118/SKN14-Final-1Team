Source URL: https://cloud.google.com/bigquery/docs/control-access-to-resources-iam

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
필요한 역할 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#required_roles]
데이터 세트의 액세스 제어 바인딩 보기 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#view_access_control_bindings_for_a_dataset]
테이블 또는 뷰의 액세스 제어 바인딩 보기 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#view_access_control_bindings_for_a_table_or_view]
리소스의 상속된 액세스 제어 보기 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#view_inherited_access_controls_for_a_resource]
루틴의 액세스 제어 바인딩 보기 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#view_the_access_control_bindings_for_a_routine]
IAM으로 리소스 액세스 제어
bookmark_border
이 문서에서는 BigQuery 데이터 세트, 테이블 및 뷰, 루틴의 액세스 제어를 보고, 부여하고, 취소하는 방법을 설명합니다.
이 문서는 Google Cloud의 Identity and Access Management(IAM) [https://cloud.google.com/iam/docs/overview?hl=ko]에 익숙한 사용자를 대상으로 작성되었습니다.
필요한 역할
리소스의 IAM 정책을 수정하는 데 필요한 권한을 얻으려면 관리자에게 프로젝트에 대한 BigQuery 데이터 소유자 [https://cloud.google.com/iam/docs/roles-permissions/bigquery?hl=ko#bigquery.dataOwner](roles/bigquery.dataOwner) IAM 역할을 부여해 달라고 요청하세요. 역할 부여에 대한 자세한 내용은 프로젝트, 폴더, 조직에 대한 액세스 관리 [https://cloud.google.com/iam/docs/granting-changing-revoking-access?hl=ko]를 참조하세요.
이 사전 정의된 역할에는 리소스의 IAM 정책을 수정하는 데 필요한 권한이 포함되어 있습니다. 필요한 정확한 권한을 보려면 필수 권한 섹션을 펼치세요.
필수 권한
커스텀 역할 [https://cloud.google.com/iam/docs/creating-custom-roles?hl=ko]이나 다른 사전 정의된 역할 [https://cloud.google.com/iam/docs/roles-overview?hl=ko#predefined]을 사용하여 이 권한을 부여받을 수도 있습니다.
데이터 세트의 액세스 제어 바인딩 보기
데이터 세트의 액세스 제어 바인딩을 보려면 다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
person_add 공유 > 권한을 클릭합니다.

데이터 세트 액세스 정책이 데이터 세트 권한 창에 표시됩니다.

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










기존 정책을 가져와서 JSON의 로컬 파일로 출력하려면 Cloud Shell에서 bq show 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_show]를 사용합니다.

bq show \
   --format=prettyjson \
   PROJECT_ID:DATASET > PATH_TO_FILE

다음을 바꿉니다.


PROJECT_ID: 프로젝트 ID
DATASET: 데이터 세트의 이름
PATH_TO_FILE: 로컬 머신의 JSON 파일 경로


 API  

데이터 세트의 액세스 정책을 보려면 정의된 dataset 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]를 사용하여 datasets.get [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/get?hl=ko] 메서드를 호출합니다.

정책은 반환된 dataset 리소스의 access 속성에서 확인할 수 있습니다.
Go 













  
  
  
  





  
  
    
  




  



  









  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
client.Dataset().Metadata() 함수 [https://pkg.go.dev/cloud.google.com/go/bigquery#Dataset.Metadata]를 호출합니다. 액세스 정책은 Access [https://pkg.go.dev/cloud.google.com/go/bigquery@v1.66.0#DatasetMetadata.Access] 속성에서 확인할 수 있습니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
)

// viewDatasetAccessPolicies retrieves the ACL for the given dataset
// For more information on the types of ACLs available see:
// https://cloud.google.com/storage/docs/access-control/lists
func viewDatasetAccessPolicies(w io.Writer, projectID, datasetID string) error {
	// TODO(developer): uncomment and update the following lines:
	// projectID := "my-project-id"
	// datasetID := "mydataset"

	ctx := context.Background()

	// Create new client.
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %w", err)
	}
	defer client.Close()

	// Get dataset's metadata.
	meta, err := client.Dataset(datasetID).Metadata(ctx)
	if err != nil {
		return fmt.Errorf("bigquery.Client.Dataset.Metadata: %w", err)
	}

	fmt.Fprintf(w, "Details for Access entries in dataset %v.\n", datasetID)

	// Iterate over access permissions.
	for _, access := range meta.Access {
		fmt.Fprintln(w)
		fmt.Fprintf(w, "Role: %s\n", access.Role)
		fmt.Fprintf(w, "Entity: %v\n", access.Entity)
	}

	return nil
}





























  
  



  
  
  
  
  
  
  
  
  
  




자바 












  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  
import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko];
import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko];
import com.google.cloud.bigquery.DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko];
import java.util.List;

public class GetDatasetAccessPolicy {

  public static void main(String[] args) {
    // TODO(developer): Replace these variables before running the sample.
    // Project and dataset from which to get the access policy.
    String projectId = "MY_PROJECT_ID";
    String datasetName = "MY_DATASET_NAME";
    getDatasetAccessPolicy(projectId, datasetName);
  }

  public static void getDatasetAccessPolicy(String projectId, String datasetName) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // Create datasetId with the projectId and the datasetName.
      DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko] datasetId = DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko].of(projectId, datasetName);
      Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko] dataset = bigquery.getDataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getDataset_com_google_cloud_bigquery_DatasetId_com_google_cloud_bigquery_BigQuery_DatasetOption____](datasetId);

      // Show ACL details.
      // Find more information about ACL and the Acl Class here:
      // https://cloud.google.com/storage/docs/access-control/lists
      // https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl
      List<Acl> acls = dataset.getAcl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetInfo.html?hl=ko#com_google_cloud_bigquery_DatasetInfo_getAcl__]();
      System.out.println("ACLs in dataset \"" + dataset.getDatasetId().getDataset() + "\":");
      System.out.println(acls.toString());
      for (Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko] acl : acls) {
        System.out.println();
        System.out.println("Role: " + acl.getRole [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko#com_google_cloud_bigquery_Acl_getRole__]());
        System.out.println("Entity: " + acl.getEntity());
      }
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("ACLs info not retrieved. \n" + e.toString());
    }
  }
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Node.js  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Dataset#getMetadata() 함수 [https://googleapis.dev/nodejs/bigquery/latest/Dataset.html#getMetadata]를 사용하여 데이터 세트 메타데이터를 가져옵니다.
액세스 정책은 결과 메타데이터 객체의 액세스 속성에서 확인할 수 있습니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
/**
 * TODO(developer): Update and un-comment below lines
 */
// const datasetId = "my_project_id.my_dataset";

const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');

// Instantiate a client.
const bigquery = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function viewDatasetAccessPolicy() {
  const dataset = bigquery.dataset(datasetId);

  const [metadata] = await dataset.getMetadata();
  const accessEntries = metadata.access || [];

  // Show the list of AccessEntry objects.
  // More details about the AccessEntry object in the BigQuery documentation:
  // https://cloud.google.com/nodejs/docs/reference/bigquery/latest
  console.log(
    `${accessEntries.length} Access entries in dataset '${datasetId}':`
  );
  for (const accessEntry of accessEntries) {
    console.log(`Role: ${accessEntry.role || 'null'}`);
    console.log(`Special group: ${accessEntry.specialGroup || 'null'}`);
    console.log(`User by Email: ${accessEntry.userByEmail || 'null'}`);
  }
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Python  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
client.get_dataset() 함수 [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client?hl=ko#google_cloud_bigquery_client_Client_get_dataset]를 호출합니다.
액세스 정책은 dataset.access_entries 속성 [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries]에서 확인할 수 있습니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]

# Instantiate a client.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

# TODO(developer): Update and uncomment the lines below.

# Dataset from which to get the access policy.
# dataset_id = "my_dataset"

# Get a reference to the dataset.
dataset = client.get_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_get_dataset](dataset_id)

# Show the list of AccessEntry objects.
# More details about the AccessEntry object here:
# https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry
print(
    f"{len(dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries])} Access entries found "
    f"in dataset '{dataset_id}':"
)

for access_entry in dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries]:
    print()
    print(f"Role: {access_entry.role [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_role]}")
    print(f"Special group: {access_entry.special_group [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_special_group]}")
    print(f"User by Email: {access_entry.user_by_email [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_user_by_email]}")
테이블 또는 뷰의 액세스 제어 바인딩 보기
테이블 또는 뷰의 액세스 제어 바인딩을 보려면 다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트를 확장하고 테이블 또는 뷰를 선택합니다.
person_add 공유를 클릭합니다.

테이블 또는 뷰 액세스 정책이 공유 창에 나타납니다.

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










기존 액세스 정책을 가져와서 JSON의 로컬 파일로 출력하려면 Cloud Shell에서 bq get-iam-policy 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_get-iam-policy]를 사용합니다.

bq get-iam-policy \
    --table=true \
    PROJECT_ID:DATASET.RESOURCE > PATH_TO_FILE

다음을 바꿉니다.


PROJECT_ID: 프로젝트 ID
DATASET: 데이터 세트의 이름
RESOURCE: 정책을 보려는 테이블 또는 뷰의 이름
PATH_TO_FILE: 로컬 머신의 JSON 파일 경로


 API  

현재 정책을 검색하려면 tables.getIamPolicy 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/getIamPolicy?hl=ko]를 호출합니다.
참고: 뷰의 경우 tables를 이 API 호출에서 resource 값으로 사용합니다.Go 













  
  
  
  





  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
리소스의 IAM().Policy() 함수 [https://pkg.go.dev/cloud.google.com/go/iam@v1.4.0#Handle.Policy]를 호출합니다. 그런 다음 Roles() 함수 [https://pkg.go.dev/cloud.google.com/go/iam@v1.4.0#Policy.Roles]를 호출하여 테이블 또는 뷰의 액세스 정책을 가져옵니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
)

// viewTableOrViewAccessPolicies retrieves the ACL for the given resource
// For more information on the types of ACLs available see:
// https://cloud.google.com/storage/docs/access-control/lists
func viewTableOrViewAccessPolicies(w io.Writer, projectID, datasetID, resourceID string) error {
	// Resource can be a table or a view
	//
	// TODO(developer): uncomment and update the following lines:
	// projectID := "my-project-id"
	// datasetID := "my-dataset-id"
	// resourceID := "my-resource-id"

	ctx := context.Background()

	// Create new client.
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %w", err)
	}
	defer client.Close()

	// Get resource's policy access.
	policy, err := client.Dataset(datasetID).Table(resourceID).IAM [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Table_IAM]().Policy(ctx)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Table.IAM.Policy: %w", err)
	}

	fmt.Fprintf(w, "Details for Access entries in table or view %v.\n", resourceID)

	for _, role := range policy.Roles() {
		fmt.Fprintln(w)
		fmt.Fprintf(w, "Role: %s\n", role)
		fmt.Fprintf(w, "Entities: %v\n", policy.Members(role))
	}

	return nil
}





























  
  



  
  
  
  
  
  
  
  
  
  




자바 












  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  
import com.google.cloud.Policy [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko];
import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko];

public class GetTableOrViewAccessPolicy {

  public static void main(String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko][] args) {
    // TODO(developer): Replace these variables before running the sample.
    // Project, dataset and resource (table or view) from which to get the access policy.
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] projectId = "MY_PROJECT_ID";
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] datasetName = "MY_DATASET_NAME";
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] resourceName = "MY_RESOURCE_NAME";
    getTableOrViewAccessPolicy(projectId, datasetName, resourceName);
  }

  public static void getTableOrViewAccessPolicy(
      String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] projectId, String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] datasetName, String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] resourceName) {
    try {
      // Initialize client that will be used to send requests. This client only needs
      // to be created once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // Create table identity given the projectId, the datasetName and the resourceName.
      TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko] tableId = TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko].of(projectId, datasetName, resourceName);

      // Get the table IAM policy.
      Policy [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko] policy = bigquery.getIamPolicy [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getIamPolicy_com_google_cloud_bigquery_TableId_com_google_cloud_bigquery_BigQuery_IAMOption____](tableId);

      // Show policy details.
      // Find more information about the Policy Class here:
      // https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Policy
      System.out.println(
          "IAM policy info of resource \"" + resourceName + "\" retrieved succesfully");
      System.out.println();
      System.out.println("IAM policy info: " + policy.toString [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Policy.html?hl=ko#com_google_cloud_Policy_toString__]());
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("IAM policy info not retrieved. \n" + e.toString());
    }
  }
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Node.js  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Table#getIamPolicy() 함수 [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/table?hl=ko#_google_cloud_bigquery_Table_getIamPolicy_member_1_y]를 사용하여 테이블 또는 뷰의 IAM 정책을 가져옵니다.
액세스 정책 세부정보는 반환된 정책 객체에서 확인할 수 있습니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
/**
 * TODO(developer): Update and un-comment below lines
 */
// const projectId = "YOUR_PROJECT_ID"
// const datasetId = "YOUR_DATASET_ID"
// const resourceName = "YOUR_RESOURCE_NAME";

const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');

// Instantiate a client.
const client = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function viewTableOrViewAccessPolicy() {
  const dataset = client.dataset(datasetId);
  const table = dataset.table(resourceName);

  // Get the IAM access policy for the table or view.
  const [policy] = await table.getIamPolicy();

  // Initialize bindings if they don't exist
  if (!policy.bindings) {
    policy.bindings = [];
  }

  // Show policy details.
  // Find more details for the Policy object here:
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/Policy
  console.log(`Access Policy details for table or view '${resourceName}'.`);
  console.log(`Bindings: ${JSON [https://cloud.google.com/nodejs/docs/reference/bigquery-storage/latest/bigquery-storage/protos.google.cloud.bigquery.storage.v1.tablefieldschema.type.html?hl=ko].stringify(policy.bindings, null, 2)}`);
  console.log(`etag: ${policy.etag}`);
  console.log(`Version: ${policy.version}`);
}
리소스의 상속된 액세스 제어 보기
BigQuery 웹 UI를 사용하여 리소스의 상속된 IAM 역할을 검사할 수 있습니다. 콘솔에서 상속을 확인하려면 적절한 권한 [https://cloud.google.com/iam/docs/resource-hierarchy-access-control?hl=ko#view-inherited-policies]이 필요합니다. 데이터 세트, 테이블, 뷰 또는 루틴의 상속을 검사하려면 다음 단계를 따르세요.
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.
BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko]
탐색기 창에서 데이터 세트를 클릭하거나 데이터 세트를 펼쳐 테이블, 뷰 또는 루틴을 선택합니다.
데이터 세트의 경우 공유를 클릭합니다. 테이블, 뷰 또는 루틴의 경우 공유를 클릭합니다.
테이블에 상속된 역할 표시 옵션이 사용 설정되어 있는지 확인합니다.
테이블에서 역할을 펼칩니다.
상속 열의 육각형 아이콘은 역할이 상위 리소스에서 상속되었는지 여부를 나타냅니다.
루틴의 액세스 제어 바인딩 보기
루틴의 액세스 제어 바인딩을 보려면 다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트를 펼치고 데이터 세트를 펼친 후 루틴을 선택합니다.
person_add 공유를 클릭합니다.

루틴의 액세스 제어가 공유 창에 표시됩니다.

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
bq get-iam-policy 명령어는 루틴의 액세스 제어 보기를 지원하지 않습니다.

--- 탭: API [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#api] ---
현재 정책을 검색하려면 routines.getIamPolicy 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/getIamPolicy?hl=ko]를 호출합니다.
리소스에 대해 액세스 권한 부여
다음 섹션에서는 여러 리소스에 대한 액세스 권한을 부여하는 방법을 설명합니다.
참고: 데이터 세트 또는 테이블에 대한 액세스 권한을 부여해도 탐색기 창에 자동으로 표시되지는 않습니다. 탐색기 창에서 프로젝트를 보려면 프로젝트에 별표표시 [https://cloud.google.com/bigquery/docs/bigquery-web-ui?hl=ko#starring_adding_a_project]를 참조하세요.
데이터 세트에 대해 액세스 권한 부여
데이터 세트에 액세스할 수 있는 IAM 역할 권한을 부여하거나 IAM 조건을 사용하여 조건부로 액세스 권한을 부여하여 데이터 세트에 대한 액세스 권한을 제공할 수 있습니다. 조건부 액세스 권한 부여에 대한 자세한 내용은 IAM 조건으로 액세스 제어 [https://cloud.google.com/bigquery/docs/conditions?hl=ko#add-conditions-to-datasets]를 참고하세요.
조건을 사용하지 않고 IAM 역할에 데이터 세트에 대한 액세스 권한을 부여하려면 다음 옵션 중 하나를 선택하세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트를 확장하고 공유할 데이터 세트를 선택합니다.
person_add 공유 > 권한을 클릭합니다.
person_add 주 구성원 추가를 클릭합니다.
새 주 구성원 필드에 주 구성원을 입력합니다.
역할 선택 목록에서 사전 정의된 역할 또는 커스텀 역할을 선택합니다.
저장을 클릭합니다.
데이터 세트 정보로 돌아가려면 닫기를 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#sql] ---
데이터 세트에 대한 액세스 권한을 주 구성원에 부여하려면 GRANT DCL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#grant_statement]을 사용합니다.





 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

GRANT `ROLE_LIST`
ON SCHEMA RESOURCE_NAME
TO "USER_LIST"


다음을 바꿉니다.

ROLE_LIST: 부여하려는 역할 또는 쉼표로 구분된 역할 목록
RESOURCE_NAME: 권한을 부여하려는 리소스 이름
USER_LIST: 역할이 부여된 쉼표로 구분된 사용자 목록
  유효한 형식 목록은 user_list [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#user_list]를 참조하세요.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

다음 예시에서는 myDataset 데이터 세트에 대한 데이터 뷰어 역할을 부여합니다.
GRANT `roles/bigquery.dataViewer`
ON SCHEMA `myProject`.myDataset
TO "user:raha@example-pet-store.com", "user:sasha@example-pet-store.com"

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










기존 데이터 세트 정보(액세스 제어 포함)를 JSON 파일에 기록하려면 bq show 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_show]를 사용합니다.

bq show \
    --format=prettyjson \
    PROJECT_ID:DATASET > PATH_TO_FILE

다음을 바꿉니다.


PROJECT_ID: 프로젝트 ID
DATASET: 데이터 세트의 이름
PATH_TO_FILE: 로컬 머신의 JSON 파일 경로

JSON 파일의 access 섹션으로 변경합니다. specialGroup 항목(projectOwners, projectWriters, projectReaders, allAuthenticatedUsers)에 추가할 수 있습니다. userByEmail, groupByEmail, domain 중 하나를 추가할 수도 있습니다.

예를 들어 데이터 세트 JSON 파일의 access 섹션은 다음과 비슷합니다.

{
 "access": [
  {
   "role": "READER",
   "specialGroup": "projectReaders"
  },
  {
   "role": "WRITER",
   "specialGroup": "projectWriters"
  },
  {
   "role": "OWNER",
   "specialGroup": "projectOwners"
  },
  {
   "role": "READER",
   "specialGroup": "allAuthenticatedUsers"
  },
  {
   "role": "READER",
   "domain": "domain_name"
  },
  {
   "role": "WRITER",
   "userByEmail": "user_email"
  },
  {
   "role": "READER",
   "groupByEmail": "group_email"
  }
 ],
 ...
}
수정이 완료되면 bq update 명령어를 사용하고 --source 플래그로 JSON 파일을 포함합니다. 데이터 세트가 기본 프로젝트가 아닌 다른 프로젝트에 있다면 프로젝트 ID를 PROJECT_ID:DATASET 형식으로 데이터 세트 이름에 추가합니다.주의: 액세스 제어가 포함된 JSON 파일을 적용하면 기존 액세스 제어를 덮어쓰게 됩니다.  bq update 
  --source PATH_TO_FILE 
  PROJECT_ID:DATASET
  
액세스 제어 변경사항을 확인하려면 파일에 정보를 쓰지 않고 bq show 명령어를 다시 사용합니다.

bq show --format=prettyjson PROJECT_ID:DATASET

Terraformgoogle_bigquery_dataset_iam [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset_iam] 리소스를 사용하여 데이터 세트에 대한 액세스를 업데이트합니다.
중요: google_bigquery_dataset_iam으로 제공되는 서로 다른 리소스가 서로 충돌할 수 있고 google_bigquery_dataset_access [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset_access] 리소스와 충돌할 수도 있습니다. Terraform을 사용하여 액세스 제어를 변경하기 전에 google_bigquery_dataset_iam [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset_iam] 문서를 자세히 읽어보세요.
데이터 세트의 액세스 정책 설정

다음 예시에서는 google_bigquery_dataset_iam_policy 리소스 [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset_iam#google_bigquery_dataset_iam_policy]를 사용해서 mydataset 데이터 세트에 대해 IAM 정책을 설정하는 방법을 보여줍니다. 이 방법은 데이터 세트에 이미 연결된 기존 정책을 대체합니다.

# This file sets the IAM policy for the dataset created by
# https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/bigquery/bigquery_create_dataset/main.tf.
# You must place it in the same local directory as that main.tf file,
# and you must have already applied that main.tf file to create
# the "default" dataset resource with a dataset_id of "mydataset".

data "google_iam_policy" "iam_policy" {
  binding {
    role = "roles/bigquery.admin"
    members = [
      "user:hao@altostrat.com",
    ]
  }
  binding {
    role = "roles/bigquery.dataOwner"
    members = [
      "group:dba@altostrat.com",
    ]
  }
  binding {
    role = "roles/bigquery.dataEditor"
    members = [
      "serviceAccount:bqcx-1234567891011-12a3@gcp-sa-bigquery-condel.iam.gserviceaccount.com",
    ]
  }
}

resource "google_bigquery_dataset_iam_policy" "dataset_iam_policy" {
  dataset_id  = google_bigquery_dataset.default.dataset_id
  policy_data = data.google_iam_policy.iam_policy.policy_data
}

데이터 세트의 역할 멤버십 설정

다음 예시에서는 google_bigquery_dataset_iam_binding 리소스 [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset_iam#google_bigquery_dataset_iam_binding]를 사용해서 mydataset 데이터 세트에 대해 제공된 역할로 멤버십을 설정하는 방법을 보여줍니다. 이렇게 하면 해당 역할의 기존 멤버십이 대체됩니다.
데이터 세트의 IAM 정책 내에 있는 다른 역할은 보존됩니다.

# This file sets membership in an IAM role for the dataset created by
# https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/bigquery/bigquery_create_dataset/main.tf.
# You must place it in the same local directory as that main.tf file,
# and you must have already applied that main.tf file to create
# the "default" dataset resource with a dataset_id of "mydataset".

resource "google_bigquery_dataset_iam_binding" "dataset_iam_binding" {
  dataset_id = google_bigquery_dataset.default.dataset_id
  role       = "roles/bigquery.jobUser"

  members = [
    "user:raha@altostrat.com",
    "group:analysts@altostrat.com"
  ]
}

단일 주 구성원의 역할 멤버십 설정

다음 예시에서는 google_bigquery_dataset_iam_member 리소스 [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset_iam#google_bigquery_dataset_iam_member]를 사용하여 mydataset 데이터 세트에 대한 IAM 정책을 업데이트하여 단일 주 구성원에게 역할을 부여하는 방법을 보여줍니다. 이 IAM 정책을 업데이트해도 데이터 세트에 대해 해당 역할이 부여된 다른 주 구성원의 액세스에는 영향을 주지 않습니다.

# This file adds a member to an IAM role for the dataset created by
# https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/bigquery/bigquery_create_dataset/main.tf.
# You must place it in the same local directory as that main.tf file,
# and you must have already applied that main.tf file to create
# the "default" dataset resource with a dataset_id of "mydataset".

resource "google_bigquery_dataset_iam_member" "dataset_iam_member" {
  dataset_id = google_bigquery_dataset.default.dataset_id
  role       = "roles/bigquery.user"
  member     = "user:yuri@altostrat.com"
}

프로젝트에 Terraform 구성을 적용하려면 Google Cloud 다음 섹션의 단계를 완료하세요.
Cloud Shell 준비

  Cloud Shell [https://shell.cloud.google.com/?hl=ko]을 실행합니다.
  
    Terraform 구성을 적용할 기본 Google Cloud 프로젝트를 설정합니다.
    이 명령어는 프로젝트당 한 번만 실행하면 되며 어떤 디렉터리에서도 실행할 수 있습니다.
    export GOOGLE_CLOUD_PROJECT=PROJECT_ID
    Terraform 구성 파일에서 명시적 값을 설정하면 환경 변수가 재정의됩니다.
  

디렉터리 준비
각 Terraform 구성 파일에는 자체 디렉터리(루트 모듈이라고도 함)가 있어야 합니다.

  
    Cloud Shell [https://shell.cloud.google.com/?hl=ko]에서 디렉터리를 만들고 해당 디렉터리 내에 새 파일을 만드세요. 파일 이름에는 .tf 확장자가 있어야 합니다(예: main.tf). 이 튜토리얼에서는 파일을 main.tf라고 합니다.
    mkdir DIRECTORY && cd DIRECTORY && touch main.tf
  
  
    튜토리얼을 따라 하는 경우 각 섹션이나 단계에서 샘플 코드를 복사할 수 있습니다.
    샘플 코드를 새로 만든 main.tf에 복사합니다.
    필요한 경우 GitHub에서 코드를 복사합니다. 이는 Terraform 스니펫이 엔드 투 엔드 솔루션의 일부인 경우에 권장됩니다.
    
  
  환경에 적용할 샘플 파라미터를 검토하고 수정합니다.
  변경사항을 저장합니다.
  
    Terraform을 초기화합니다. 이 작업은 디렉터리당 한 번만 수행하면 됩니다.
    terraform init
    원하는 경우 최신 Google 공급업체 버전을 사용하려면 -upgrade 옵션을 포함합니다.
    
    terraform init -upgrade
  

변경사항 적용

  
    구성을 검토하고 Terraform에서 만들거나 업데이트할 리소스가 예상과 일치하는지 확인합니다.
    terraform plan
    필요에 따라 구성을 수정합니다.
  
  
    다음 명령어를 실행하고 프롬프트에 yes를 입력하여 Terraform 구성을 적용합니다.
    terraform apply
    Terraform에 '적용 완료' 메시지가 표시될 때까지 기다립니다.
  
  결과를 보려면 Google Cloud 프로젝트 [https://console.cloud.google.com/?hl=ko]를 엽니다. Google Cloud 콘솔에서 UI의 리소스로 이동하여 Terraform이 리소스를 만들었거나 업데이트했는지 확인합니다.
  

참고: Terraform 샘플은 일반적으로 필요한 API가 Google Cloud 프로젝트에서 사용 설정되었다고 가정합니다.

 API  

데이터 세트를 만들 때 액세스 제어를 적용하려면 정의된 데이터 세트 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]를 사용하여 datasets.insert 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/insert?hl=ko]를 호출합니다.
액세스 제어를 업데이트하려면 datasets.patch 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko]를 호출하고 Dataset 리소스에서 access 속성을 사용합니다.

datasets.update 메서드는 전체 데이터 세트 리소스를 바꾸기 때문에 datasets.patch 메서드를 사용하여 액세스 제어를 업데이트하는 것이 좋습니다.
Go 













  
  
  
  





  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
DatasetMetadataToUpdate 유형 [https://pkg.go.dev/cloud.google.com/go/bigquery#DatasetMetadataToUpdate]으로 기존 목록에 새 항목을 추가하여 새 액세스 목록을 설정합니다. 그런 다음 dataset.Update() 함수 [https://pkg.go.dev/cloud.google.com/go/bigquery#Dataset.Update]를 호출하여 속성을 업데이트합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
)

// grantAccessToDataset creates a new ACL conceding the READER role to the group "example-analyst-group@google.com"
// For more information on the types of ACLs available see:
// https://cloud.google.com/storage/docs/access-control/lists
func grantAccessToDataset(w io.Writer, projectID, datasetID string) error {
	// TODO(developer): uncomment and update the following lines:
	// projectID := "my-project-id"
	// datasetID := "mydataset"

	ctx := context.Background()

	// Create BigQuery handler.
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %w", err)
	}
	defer client.Close()

	// Create dataset handler
	dataset := client.Dataset(datasetID)

	// Get metadata
	meta, err := dataset.Metadata(ctx)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Metadata: %w", err)
	}

	// Find more details about BigQuery Entity Types here:
	// https://pkg.go.dev/cloud.google.com/go/bigquery#EntityType
	//
	// Find more details about BigQuery Access Roles here:
	// https://pkg.go.dev/cloud.google.com/go/bigquery#AccessRole

	entityType := bigquery.GroupEmailEntity [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_DomainEntity_GroupEmailEntity_UserEmailEntity_SpecialGroupEntity_ViewEntity_IAMMemberEntity_RoutineEntity_DatasetEntity]
	entityID := "example-analyst-group@google.com"
	roleType := bigquery.ReaderRole [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_OwnerRole_ReaderRole_WriterRole]

	// Append a new access control entry to the existing access list.
	update := bigquery.DatasetMetadataToUpdate [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_DatasetMetadataToUpdate]{
		Access: append(meta.Access, &bigquery.AccessEntry [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_AccessEntry]{
			Role:       roleType,
			EntityType: entityType,
			Entity:     entityID,
		}),
	}

	// Leverage the ETag for the update to assert there's been no modifications to the
	// dataset since the metadata was originally read.
	meta, err = dataset.Update(ctx, update, meta.ETag)
	if err != nil {
		return err
	}

	fmt.Fprintf(w, "Details for Access entries in dataset %v.\n", datasetID)
	for _, access := range meta.Access {
		fmt.Fprintln(w)
		fmt.Fprintf(w, "Role: %s\n", access.Role)
		fmt.Fprintf(w, "Entities: %v\n", access.Entity)
	}

	return nil
}





























  
  



  
  
  
  
  
  
  
  
  
  




자바 












  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko];
import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko].Entity [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity.html?hl=ko];
import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko].Group [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Group.html?hl=ko];
import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko].Role [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Role.html?hl=ko];
import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko];
import com.google.cloud.bigquery.DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko];
import java.util.ArrayList;
import java.util.List;

public class GrantAccessToDataset {

  public static void main(String[] args) {
    // TODO(developer): Replace these variables before running the sample.
    // Project and dataset from which to get the access policy
    String projectId = "MY_PROJECT_ID";
    String datasetName = "MY_DATASET_NAME";
    // Group to add to the ACL
    String entityEmail = "group-to-add@example.com";

    grantAccessToDataset(projectId, datasetName, entityEmail);
  }

  public static void grantAccessToDataset(
      String projectId, String datasetName, String entityEmail) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // Create datasetId with the projectId and the datasetName.
      DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko] datasetId = DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko].of(projectId, datasetName);
      Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko] dataset = bigquery.getDataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getDataset_com_google_cloud_bigquery_DatasetId_com_google_cloud_bigquery_BigQuery_DatasetOption____](datasetId);

      // Create a new Entity with the corresponding type and email
      // "user-or-group-to-add@example.com"
      // For more information on the types of Entities available see:
      // https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity
      // and
      // https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity.Type
      Entity [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity.html?hl=ko] entity = new Group [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Group.html?hl=ko](entityEmail);

      // Create a new ACL granting the READER role to the group with the entity email
      // "user-or-group-to-add@example.com"
      // For more information on the types of ACLs available see:
      // https://cloud.google.com/storage/docs/access-control/lists
      Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko] newEntry = Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko].of(entity, Role [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Role.html?hl=ko].READER);

      // Get a copy of the ACLs list from the dataset and append the new entry.
      List<Acl> acls = new ArrayList<>(dataset.getAcl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetInfo.html?hl=ko#com_google_cloud_bigquery_DatasetInfo_getAcl__]());
      acls.add(newEntry);

      // Update the ACLs by setting the new list.
      Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko] updatedDataset = bigquery.update [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_update_com_google_cloud_bigquery_DatasetInfo_com_google_cloud_bigquery_BigQuery_DatasetOption____](dataset.toBuilder().setAcl(acls).build());
      System.out.println(
          "ACLs of dataset \""
              + updatedDataset.getDatasetId().getDataset()
              + "\" updated successfully");
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("ACLs were not updated \n" + e.toString());
    }
  }
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Node.js  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Dataset#metadata [https://googleapis.dev/nodejs/bigquery/latest/Dataset.html#metadata] 메서드를 사용하여 기존 목록에 새 항목을 추가하여 새 액세스 목록을 설정합니다. 
그런 다음 Dataset#setMetadata() [https://googleapis.dev/nodejs/bigquery/latest/Dataset.html#setMetadata] 함수를 호출하여 속성을 업데이트합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
/**
 * TODO(developer): Update and un-comment below lines.
 */

// const datasetId = "my_project_id.my_dataset_name";

// ID of the user or group from whom you are adding access.
// const entityId = "user-or-group-to-add@example.com";

// One of the "Basic roles for datasets" described here:
// https://cloud.google.com/bigquery/docs/access-control-basic-roles#dataset-basic-roles
// const role = "READER";

const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');

// Instantiate a client.
const client = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

// Type of entity you are granting access to.
// Find allowed allowed entity type names here:
// https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets#resource:-dataset
const entityType = 'groupByEmail';

async function grantAccessToDataset() {
  const [dataset] = await client.dataset(datasetId).get();

  // The 'access entries' array is immutable. Create a copy for modifications.
  const entries = [...dataset.metadata.access];

  // Append an AccessEntry to grant the role to a dataset.
  // Find more details about the AccessEntry object in the BigQuery documentation:
  // https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry
  entries.push({
    role,
    [entityType]: entityId,
  });

  // Assign the array of AccessEntries back to the dataset.
  const metadata = {
    access: entries,
  };

  // Update will only succeed if the dataset
  // has not been modified externally since retrieval.
  //
  // See the BigQuery client library documentation for more details on metadata updates:
  // https://cloud.google.com/nodejs/docs/reference/bigquery/latest

  // Update just the 'access entries' property of the dataset.
  await client.dataset(datasetId).setMetadata(metadata);

  console.log(
    `Role '${role}' granted for entity '${entityId}' in '${datasetId}'.`
  );
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Python  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      










데이터 세트에 대한 액세스 제어를 사용하여 dataset.access_entries 속성 [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries]을 설정합니다. 그런 다음 client.update_dataset() 함수 [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client?hl=ko#google_cloud_bigquery_client_Client_update_dataset]를 호출하여 속성을 업데이트합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  from google.api_core.exceptions import PreconditionFailed
from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]
from google.cloud.bigquery.enums import EntityTypes [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.enums.EntityTypes.html?hl=ko]

# TODO(developer): Update and uncomment the lines below.

# ID of the dataset to grant access to.
# dataset_id = "my_project_id.my_dataset"

# ID of the user or group receiving access to the dataset.
# Alternatively, the JSON REST API representation of the entity,
# such as the view's table reference.
# entity_id = "user-or-group-to-add@example.com"

# One of the "Basic roles for datasets" described here:
# https://cloud.google.com/bigquery/docs/access-control-basic-roles#dataset-basic-roles
# role = "READER"

# Type of entity you are granting access to.
# Find allowed allowed entity type names here:
# https://cloud.google.com/python/docs/reference/bigquery/latest/enums#class-googlecloudbigqueryenumsentitytypesvalue
entity_type = EntityTypes [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.enums.EntityTypes.html?hl=ko].GROUP_BY_EMAIL

# Instantiate a client.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

# Get a reference to the dataset.
dataset = client.get_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_get_dataset](dataset_id)

# The `access_entries` list is immutable. Create a copy for modifications.
entries = list(dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries])

# Append an AccessEntry to grant the role to a dataset.
# Find more details about the AccessEntry object here:
# https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry
entries.append(
    bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].AccessEntry [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko](
        role=role,
        entity_type=entity_type,
        entity_id=entity_id,
    )
)

# Assign the list of AccessEntries back to the dataset.
dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries] = entries

# Update will only succeed if the dataset
# has not been modified externally since retrieval.
#
# See the BigQuery client library documentation for more details on `update_dataset`:
# https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client#google_cloud_bigquery_client_Client_update_dataset
try:
    # Update just the `access_entries` property of the dataset.
    dataset = client.update_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_update_dataset](
        dataset,
        ["access_entries"],
    )

    # Show a success message.
    full_dataset_id = f"{dataset.project}.{dataset.dataset_id}"
    print(
        f"Role '{role [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_role]}' granted for entity '{entity_id [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_entity_id]}'"
        f" in dataset '{full_dataset_id}'."
    )
except PreconditionFailed:  # A read-modify-write error
    print(
        f"Dataset '{dataset.dataset_id}' was modified remotely before this update. "
        "Fetch the latest version and retry."
    )


테이블 또는 뷰에 대해 액세스 부여
다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트를 확장하고 공유할 테이블 또는 뷰를 선택합니다.
person_add 공유를 클릭합니다.
person_add 주 구성원 추가를 클릭합니다.
새 주 구성원 필드에 주 구성원을 입력합니다.
역할 선택 목록에서 사전 정의된 역할 또는 커스텀 역할을 선택합니다.
저장을 클릭합니다.
테이블 또는 뷰 세부정보로 돌아가려면 닫기를 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#sql] ---
주 구성원에 테이블 또는 뷰에 대한 액세스 권한을 부여하려면 GRANT DCL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#grant_statement]을 사용합니다.





 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

GRANT `ROLE_LIST`
ON RESOURCE_TYPE RESOURCE_NAME
TO "USER_LIST"


다음을 바꿉니다.

  ROLE_LIST: 부여하려는 역할 또는 쉼표로 구분된 역할 목록
  RESOURCE_TYPE: 역할이 적용된 리소스 유형.
    지원되는 값은 TABLE, VIEW, MATERIALIZED
      VIEW, EXTERNAL TABLE입니다.
  RESOURCE_NAME: 권한을 부여하려는 리소스 이름
  USER_LIST: 역할이 부여된 쉼표로 구분된 사용자 목록
    유효한 형식 목록은 user_list [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#user_list]를 참조하세요.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

다음 예시에서는 myTable 테이블에 대한 데이터 뷰어 역할을 부여합니다.
GRANT `roles/bigquery.dataViewer`
ON TABLE `myProject`.myDataset.myTable
TO "user:raha@example-pet-store.com", "user:sasha@example-pet-store.com"

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










테이블 또는 뷰에 대한 액세스 권한을 부여하려면 bq add-iam-policy-binding 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_add-iam-policy-binding]를 사용합니다.

bq add-iam-policy-binding --member=MEMBER_TYPE:MEMBER --role=ROLE
  --table=true RESOURCE

다음을 바꿉니다.


MEMBER_TYPE: 구성원 유형(예: user, group, serviceAccount, domain)
MEMBER: 회원의 이메일 주소 또는 도메인 이름
ROLE: 구성원에게 부여할 역할
RESOURCE: 정책을 업데이트하려는 테이블 또는 뷰의 이름


Terraformgoogle_bigquery_table_iam [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_table_iam] 리소스를 사용하여 테이블에 대한 액세스를 업데이트합니다.
중요: google_bigquery_table_iam으로 제공되는 다른 리소스는 서로 충돌할 수 있습니다. Terraform을 사용해서 액세스 제어를 변경하기 전에 google_bigquery_table_iam [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_table_iam] 문서를 자세히 검토하는 것이 좋습니다.
테이블의 액세스 정책 설정

다음 예시에서는 google_bigquery_table_iam_policy 리소스 [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_table_iam#google_bigquery_table_iam_policy]를 사용해서 mytable 테이블에 대해 IAM 정책을 설정하는 방법을 보여줍니다. 이 방법은 테이블에 이미 연결된 기존 정책을 대체합니다.

# This file sets the IAM policy for the table created by
# https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/bigquery/bigquery_create_table/main.tf.
# You must place it in the same local directory as that main.tf file,
# and you must have already applied that main.tf file to create
# the "default" table resource with a table_id of "mytable".

data "google_iam_policy" "iam_policy" {
  binding {
    role = "roles/bigquery.dataOwner"
    members = [
      "user:raha@altostrat.com",
    ]
  }
}

resource "google_bigquery_table_iam_policy" "table_iam_policy" {
  dataset_id  = google_bigquery_table.default.dataset_id
  table_id    = google_bigquery_table.default.table_id
  policy_data = data.google_iam_policy.iam_policy.policy_data
}

테이블의 역할 멤버십 설정

다음 예시에서는 google_bigquery_table_iam_binding 리소스 [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_table_iam#google_bigquery_table_iam_binding]를 사용해서 mytable 테이블에 대해 제공된 역할로 멤버십을 설정하는 방법을 보여줍니다. 이렇게 하면 해당 역할의 기존 멤버십이 대체됩니다.
테이블의 IAM 정책 내에 있는 다른 역할은 보존됩니다.

# This file sets membership in an IAM role for the table created by
# https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/bigquery/bigquery_create_table/main.tf.
# You must place it in the same local directory as that main.tf file,
# and you must have already applied that main.tf file to create
# the "default" table resource with a table_id of "mytable".

resource "google_bigquery_table_iam_binding" "table_iam_binding" {
  dataset_id = google_bigquery_table.default.dataset_id
  table_id   = google_bigquery_table.default.table_id
  role       = "roles/bigquery.dataOwner"

  members = [
    "group:analysts@altostrat.com",
  ]
}

단일 주 구성원의 역할 멤버십 설정

다음 예시에서는 google_bigquery_table_iam_member 리소스 [https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_table_iam#google_bigquery_table_iam_member]를 사용하여 mytable 테이블에 대한 IAM 정책을 업데이트하여 단일 주 구성원에게 역할을 부여하는 방법을 보여줍니다. 이 IAM 정책을 업데이트해도 데이터 세트에 대해 해당 역할이 부여된 다른 주 구성원의 액세스에는 영향을 주지 않습니다.

# This file adds a member to an IAM role for the table created by
# https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/bigquery/bigquery_create_table/main.tf.
# You must place it in the same local directory as that main.tf file,
# and you must have already applied that main.tf file to create
# the "default" table resource with a table_id of "mytable".

resource "google_bigquery_table_iam_member" "table_iam_member" {
  dataset_id = google_bigquery_table.default.dataset_id
  table_id   = google_bigquery_table.default.table_id
  role       = "roles/bigquery.dataEditor"
  member     = "serviceAccount:bqcx-1234567891011-12a3@gcp-sa-bigquery-condel.iam.gserviceaccount.com"
}

프로젝트에 Terraform 구성을 적용하려면 Google Cloud 다음 섹션의 단계를 완료하세요.
Cloud Shell 준비

  Cloud Shell [https://shell.cloud.google.com/?hl=ko]을 실행합니다.
  
    Terraform 구성을 적용할 기본 Google Cloud 프로젝트를 설정합니다.
    이 명령어는 프로젝트당 한 번만 실행하면 되며 어떤 디렉터리에서도 실행할 수 있습니다.
    export GOOGLE_CLOUD_PROJECT=PROJECT_ID
    Terraform 구성 파일에서 명시적 값을 설정하면 환경 변수가 재정의됩니다.
  

디렉터리 준비
각 Terraform 구성 파일에는 자체 디렉터리(루트 모듈이라고도 함)가 있어야 합니다.

  
    Cloud Shell [https://shell.cloud.google.com/?hl=ko]에서 디렉터리를 만들고 해당 디렉터리 내에 새 파일을 만드세요. 파일 이름에는 .tf 확장자가 있어야 합니다(예: main.tf). 이 튜토리얼에서는 파일을 main.tf라고 합니다.
    mkdir DIRECTORY && cd DIRECTORY && touch main.tf
  
  
    튜토리얼을 따라 하는 경우 각 섹션이나 단계에서 샘플 코드를 복사할 수 있습니다.
    샘플 코드를 새로 만든 main.tf에 복사합니다.
    필요한 경우 GitHub에서 코드를 복사합니다. 이는 Terraform 스니펫이 엔드 투 엔드 솔루션의 일부인 경우에 권장됩니다.
    
  
  환경에 적용할 샘플 파라미터를 검토하고 수정합니다.
  변경사항을 저장합니다.
  
    Terraform을 초기화합니다. 이 작업은 디렉터리당 한 번만 수행하면 됩니다.
    terraform init
    원하는 경우 최신 Google 공급업체 버전을 사용하려면 -upgrade 옵션을 포함합니다.
    
    terraform init -upgrade
  

변경사항 적용

  
    구성을 검토하고 Terraform에서 만들거나 업데이트할 리소스가 예상과 일치하는지 확인합니다.
    terraform plan
    필요에 따라 구성을 수정합니다.
  
  
    다음 명령어를 실행하고 프롬프트에 yes를 입력하여 Terraform 구성을 적용합니다.
    terraform apply
    Terraform에 '적용 완료' 메시지가 표시될 때까지 기다립니다.
  
  결과를 보려면 Google Cloud 프로젝트 [https://console.cloud.google.com/?hl=ko]를 엽니다. Google Cloud 콘솔에서 UI의 리소스로 이동하여 Terraform이 리소스를 만들었거나 업데이트했는지 확인합니다.
  

참고: Terraform 샘플은 일반적으로 필요한 API가 Google Cloud 프로젝트에서 사용 설정되었다고 가정합니다.

 API  


현재 정책을 검색하려면 tables.getIamPolicy 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/getIamPolicy?hl=ko]를 호출합니다.
정책을 수정하여 구성원 또는 결합을 추가합니다.
정책에 필요한 형식은 정책 [https://cloud.google.com/iam/docs/reference/rest/v1/Policy?hl=ko] 참조 주제를 참조하세요.
주의: 정책을 설정하기 전에 항상 현재 정책을 검색하여 etag의 현재 값을 가져옵니다. 업데이트된 정책 파일에는 대체하려는 현재 정책과 동일한 etag 값이 포함되어야 합니다. 그렇지 않으면 업데이트가 실패합니다. 이 기능은 동시 업데이트가 발생하지 않도록 방지합니다.
정책 파일에서 version의 값은 1로 유지됩니다. 이 버전 번호는 정책 버전이 아닌 IAM 정책 스키마 버전을 나타냅니다. etag 값은 정책 버전 번호입니다.
tables.setIamPolicy [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/setIamPolicy?hl=ko]를 호출하여 업데이트된 정책을 작성합니다.
참고: 구성원이 없는 비어 있는 바인딩은 허용되지 않으며 이 경우 오류가 발생합니다.

Go 













  
  
  
  





  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
리소스의 IAM().SetPolicy() 함수 [https://pkg.go.dev/cloud.google.com/go/iam@v1.4.0#Handle.SetPolicy]를 호출하여 테이블 또는 뷰의 액세스 정책 변경사항을 저장합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
	"cloud.google.com/go/iam"
)

// grantAccessToResource creates a new ACL conceding the VIEWER role to the group "example-analyst-group@google.com"
// For more information on the types of ACLs available see:
// https://cloud.google.com/storage/docs/access-control/lists
func grantAccessToResource(w io.Writer, projectID, datasetID, resourceID string) error {
	// Resource can be a table or a view
	//
	// TODO(developer): uncomment and update the following lines:
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// resourceID := "myresource"

	ctx := context.Background()

	// Create new client
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %w", err)
	}
	defer client.Close()

	// Get resource policy.
	policy, err := client.Dataset(datasetID).Table(resourceID).IAM [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Table_IAM]().Policy(ctx)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Table.IAM.Policy: %w", err)
	}

	// Find more details about IAM Roles here:
	// https://pkg.go.dev/cloud.google.com/go/iam#RoleName
	entityID := "example-analyst-group@google.com"
	roleType := iam.Viewer [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Owner_Editor_Viewer]

	// Add new policy.
	policy.Add [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Policy_Add](fmt.Sprintf("group:%s", entityID), roleType)

	// Update resource's policy.
	err = client.Dataset(datasetID).Table(resourceID).IAM [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Table_IAM]().SetPolicy(ctx, policy)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Table.IAM.Policy: %w", err)
	}

	// Get resource policy again expecting the update.
	policy, err = client.Dataset(datasetID).Table(resourceID).IAM [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Table_IAM]().Policy(ctx)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Table.IAM.Policy: %w", err)
	}

	fmt.Fprintf(w, "Details for Access entries in table or view %v.\n", resourceID)

	for _, role := range policy.Roles [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Policy_Roles]() {
		fmt.Fprintln(w)
		fmt.Fprintf(w, "Role: %s\n", role)
		fmt.Fprintf(w, "Entities: %v\n", policy.Members [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Policy_Members](role))
	}

	return nil
}





























  
  



  
  
  
  
  
  
  
  
  
  




자바 












  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import com.google.cloud.Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko];
import com.google.cloud.Policy [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko];
import com.google.cloud.Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko];
import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko];

public class GrantAccessToTableOrView {

  public static void main(String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko][] args) {
    // TODO(developer): Replace these variables before running the sample.
    // Project, dataset and resource (table or view) from which to get the access policy.
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] projectId = "MY_PROJECT_ID";
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] datasetName = "MY_DATASET_NAME";
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] resourceName = "MY_TABLE_NAME";
    // Role to add to the policy access
    Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko] role = Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko].of("roles/bigquery.dataViewer");
    // Identity to add to the policy access
    Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko] identity = Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko].user [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Identity.html?hl=ko#com_google_cloud_Identity_user_java_lang_String_]("user-add@example.com");
    grantAccessToTableOrView(projectId, datasetName, resourceName, role, identity);
  }

  public static void grantAccessToTableOrView(
      String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] projectId, String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] datasetName, String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] resourceName, Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko] role, Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko] identity) {
    try {
      // Initialize client that will be used to send requests. This client only needs
      // to be created once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // Create table identity given the projectId, the datasetName and the resourceName.
      TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko] tableId = TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko].of(projectId, datasetName, resourceName);

      // Add new user identity to current IAM policy.
      Policy [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko] policy = bigquery.getIamPolicy [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getIamPolicy_com_google_cloud_bigquery_TableId_com_google_cloud_bigquery_BigQuery_IAMOption____](tableId);
      policy = policy.toBuilder [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko#com_google_cloud_compute_v1_Policy_toBuilder__]().addIdentity [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Policy.Builder.html?hl=ko#com_google_cloud_Policy_Builder_addIdentity_com_google_cloud_Role_com_google_cloud_Identity_com_google_cloud_Identity____](role, identity).build();

      // Update the IAM policy by setting the new one.
      bigquery.setIamPolicy [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_setIamPolicy_com_google_cloud_bigquery_TableId_com_google_cloud_Policy_com_google_cloud_bigquery_BigQuery_IAMOption____](tableId, policy);

      System.out.println("IAM policy of resource \"" + resourceName + "\" updated successfully");
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("IAM policy was not updated. \n" + e.toString());
    }
  }
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Node.js  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Table#getIamPolicy() 함수 [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/table?hl=ko#_google_cloud_bigquery_Table_getIamPolicy_member_1_]를 호출하여 테이블 또는 뷰의 현재 IAM 정책을 가져오고, 새 바인딩을 추가하여 정책을 수정한 다음 Table#setIamPolicy() 함수 [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/table?hl=ko#setiampolicy]를 사용하여 액세스 정책의 변경사항을 저장합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
/**
 * TODO(developer): Update and un-comment below lines
 */
// const projectId = "YOUR_PROJECT_ID";
// const datasetId = "YOUR_DATASET_ID";
// const tableId = "YOUR_TABLE_ID";
// const principalId = "YOUR_PRINCIPAL_ID";
// const role = "YOUR_ROLE";

const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');

// Instantiate a client.
const client = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function grantAccessToTableOrView() {
  const dataset = client.dataset(datasetId);
  const table = dataset.table(tableId);

  // Get the IAM access policy for the table or view.
  const [policy] = await table.getIamPolicy();

  // Initialize bindings array.
  if (!policy.bindings) {
    policy.bindings = [];
  }

  // To grant access to a table or view
  // add bindings to the Table or View policy.
  //
  // Find more details about Policy and Binding objects here:
  // https://cloud.google.com/security-command-center/docs/reference/rest/Shared.Types/Policy
  // https://cloud.google.com/security-command-center/docs/reference/rest/Shared.Types/Binding
  const binding = {
    role,
    members: [principalId],
  };
  policy.bindings.push(binding);

  // Set the IAM access policy with updated bindings.
  await table.setIamPolicy(policy);

  // Show a success message.
  console.log(
    `Role '${role}' granted for principal '${principalId}' on resource '${datasetId}.${tableId}'.`
  );
}

await grantAccessToTableOrView();




























  
  



  
  
  
  
  
  
  
  
  
  




 Python  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
client.set_iam_policy() 함수 [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client?hl=ko#google_cloud_bigquery_client_Client_set_iam_policy]를 호출하여 테이블 또는 뷰의 액세스 정책 변경사항을 저장합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]

# TODO(developer): Update and uncomment the lines below.

# Google Cloud Platform project.
# project_id = "my_project_id"

# Dataset where the table or view is.
# dataset_id = "my_dataset"

# Table or view name to get the access policy.
# resource_name = "my_table"

# Principal to grant access to a table or view.
# For more information about principal identifiers see:
# https://cloud.google.com/iam/docs/principal-identifiers
# principal_id = "user:bob@example.com"

# Role to grant to the principal.
# For more information about BigQuery roles see:
# https://cloud.google.com/bigquery/docs/access-control
# role = "roles/bigquery.dataViewer"

# Instantiate a client.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

# Get the full table or view name.
full_resource_name = f"{project_id}.{dataset_id}.{resource_name}"

# Get the IAM access policy for the table or view.
policy = client.get_iam_policy [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_get_iam_policy](full_resource_name)

# To grant access to a table or view, add bindings to the IAM policy.
#
# Find more details about Policy and Binding objects here:
# https://cloud.google.com/security-command-center/docs/reference/rest/Shared.Types/Policy
# https://cloud.google.com/security-command-center/docs/reference/rest/Shared.Types/Binding
binding = {
    "role": role,
    "members": [principal_id, ],
}
policy.bindings.append(binding)

# Set the IAM access policy with updated bindings.
updated_policy = client.set_iam_policy [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_set_iam_policy](full_resource_name, policy)

# Show a success message.
print(
    f"Role '{role [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_role]}' granted for principal '{principal_id}'"
    f" on resource '{full_resource_name}'."
)


루틴에 대한 액세스 권한 부여
프리뷰
이 기능에는 서비스별 약관 [https://cloud.google.com/terms/service-terms?hl=ko#1]의 일반 서비스 약관 섹션에 있는 'GA 이전 제공 서비스 약관'이 적용됩니다. GA 이전 기능은 '있는 그대로' 제공되며 지원이 제한될 수 있습니다. 자세한 내용은 출시 단계 설명 [https://cloud.google.com/products?hl=ko#product-launch-stages]을 참조하세요.
이 기능에 대한 의견을 제공하거나 지원을 요청하려면 bq-govsec-eng@google.com [mailto:bq-govsec-eng@google.com]으로 이메일을 보내세요.
다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트와 데이터 세트를 펼친 후 공유할 루틴을 선택합니다.
person_add 공유를 클릭합니다.
person_add 회원 추가를 클릭합니다.
신규 회원 필드에 주 구성원을 입력합니다.
역할 선택 목록에서 사전 정의된 역할 또는 커스텀 역할을 선택합니다.
저장을 클릭합니다.
루틴 정보로 돌아가려면 완료를 클릭합니다.

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










기존 루틴 정보(액세스 제어 포함)를 JSON 파일에 기록하려면 bq get-iam-policy 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_get-iam-policy]를 사용합니다.

bq get-iam-policy \
    PROJECT_ID:DATASET.ROUTINE \
    > PATH_TO_FILE

다음을 바꿉니다.


PROJECT_ID: 프로젝트 ID
DATASET: 업데이트하려는 루틴이 포함된 데이터 세트의 이름
ROUTINE: 업데이트할 리소스의 이름
PATH_TO_FILE: 로컬 머신의 JSON 파일 경로

주의: 정책을 설정할 때 항상 현재 정책을 첫 번째 단계로 검색하여 etag의 현재 값을 가져옵니다. 업데이트된 정책 파일에는 대체하려는 현재 정책과 동일한 etag 값이 포함되어야 합니다. 그렇지 않으면 업데이트가 실패합니다. 이 기능은 동시 업데이트가 발생하지 않도록 방지합니다.
정책 파일에서 version의 값은 1로 유지됩니다. 이 버전 번호는 정책 버전이 아닌 IAM 정책 스키마 버전을 나타냅니다. etag 값은 정책 버전 번호입니다.
JSON 파일의 bindings 섹션으로 변경합니다. 바인딩은 members 또는 주 구성원 하나 이상을 단일 role에 바인딩합니다. 주 구성원은 사용자 계정, 서비스 계정, Google 그룹, 도메인일 수 있습니다. 예를 들어 루틴 JSON 파일의 bindings 섹션은 다음과 비슷합니다.

{
  "bindings": [
    {
      "role": "roles/bigquery.dataViewer",
      "members": [
        "user:izumi@example.com",
        "group:admins@example.com",
        "domain:google.com",
      ]
    },
  ],
  "etag": "BwWWja0YfJA=",
  "version": 1
}
참고: 구성원이 없는 비어 있는 바인딩은 허용되지 않으며 이 경우 오류가 발생합니다.
액세스 정책을 업데이트하려면 bq set-iam-policy 명령어를 사용합니다.

bq set-iam-policy PROJECT_ID:DATASET.ROUTINE PATH_TO_FILE
액세스 제어 변경사항을 확인하려면 파일에 정보를 쓰지 않고 bq get-iam-policy 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_get-iam-policy]를 다시 사용합니다.

bq get-iam-policy --format=prettyjson \\
    PROJECT_ID:DATASET.ROUTINE

 API  


현재 정책을 검색하려면 routines.getIamPolicy 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/getIamPolicy?hl=ko]를 호출합니다.
정책을 수정하여 구성원, 바인딩 또는 둘 다를 추가합니다.
정책에 필요한 형식은 정책 [https://cloud.google.com/iam/docs/reference/rest/v1/Policy?hl=ko] 참조 주제를 참조하세요.
주의: 정책을 설정하기 전에 항상 현재 정책을 검색하여 etag의 현재 값을 가져옵니다. 업데이트된 정책 파일에는 대체하려는 현재 정책과 동일한 etag 값이 포함되어야 합니다. 그렇지 않으면 업데이트가 실패합니다. 이 기능은 동시 업데이트가 발생하지 않도록 방지합니다.
정책 파일에서 version의 값은 1로 유지됩니다. 이 버전 번호는 정책 버전이 아닌 IAM 정책 스키마 버전을 나타냅니다. etag 값은 정책 버전 번호입니다.
routines.setIamPolicy [https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/setIamPolicy?hl=ko]를 호출하여 업데이트된 정책을 작성합니다.
참고: 구성원이 없는 비어 있는 바인딩은 허용되지 않으며 이 경우 오류가 발생합니다.




리소스에 대한 액세스 취소
다음 섹션에서는 여러 리소스에 대한 액세스 권한을 취소하는 방법을 설명합니다.
데이터 세트에 대한 액세스 취소
다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 패널에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
세부정보 패널에서 공유 > 권한을 클릭합니다.
데이터 세트 권한 대화상자에서 취소하려는 액세스 권한이 있는 주 구성원을 확장합니다.
delete 주 구성원 삭제를 클릭합니다.
주 구성원에서 역할을 삭제할까요? 대화상자에서 삭제를 클릭합니다.
데이터 세트 세부정보로 돌아가려면 닫기를 클릭합니다.

참고: 이 방식으로 액세스를 취소할 수 없으면 주 구성원이 리소스 계층 구조 [https://cloud.google.com/iam/docs/overview?hl=ko#resource-hierarchy]의 상위 수준에서 액세스 권한을 상속했을 수 있습니다.
주 구성원 액세스 권한을 수정하는 방법에 대한 안내는 단일 역할 부여 또는 취소 [https://cloud.google.com/iam/docs/granting-changing-revoking-access?hl=ko#single-role]를 참조하세요.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#sql] ---
주 구성원에서 데이터 세트에 대해 액세스 권한을 삭제하려면 REVOKE DCL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#revoke_statement]을 사용합니다.





 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

REVOKE `ROLE_LIST`
ON SCHEMA RESOURCE_NAME
FROM "USER_LIST"


다음을 바꿉니다.

ROLE_LIST: 취소하려는 역할 또는 쉼표로 구분된 역할 목록
RESOURCE_NAME: 권한을 취소하려는 리소스의 이름
USER_LIST: 쉼표로 구분된 역할이 취소되는 사용자 목록
  유효한 형식 목록은 user_list [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#user_list]를 참조하세요.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

다음 예시에서는 myDataset 데이터 세트에 대한 관리자 역할을 취소합니다.
REVOKE `roles/bigquery.admin`
ON SCHEMA `myProject`.myDataset
FROM "group:example-team@example-pet-store.com", "serviceAccount:user@test-project.iam.gserviceaccount.com"

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










기존 데이터 세트 정보(액세스 제어 포함)를 JSON 파일에 기록하려면 bq show 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_show]를 사용합니다.

bq show \
    --format=prettyjson \
    PROJECT_ID:DATASET > PATH_TO_FILE

다음을 바꿉니다.


PROJECT_ID: 프로젝트 ID
DATASET: 데이터 세트의 이름
PATH_TO_FILE: 로컬 머신의 JSON 파일 경로

JSON 파일의 access 섹션으로 변경합니다. specialGroup 항목(projectOwners, projectWriters, projectReaders, allAuthenticatedUsers)을 삭제할 수 있습니다. userByEmail, groupByEmail, domain도 삭제할 수 있습니다.

예를 들어 데이터 세트 JSON 파일의 access 섹션은 다음과 비슷합니다.

{
 "access": [
  {
   "role": "READER",
   "specialGroup": "projectReaders"
  },
  {
   "role": "WRITER",
   "specialGroup": "projectWriters"
  },
  {
   "role": "OWNER",
   "specialGroup": "projectOwners"
  },
  {
   "role": "READER",
   "specialGroup": "allAuthenticatedUsers"
  },
  {
   "role": "READER",
   "domain": "domain_name"
  },
  {
   "role": "WRITER",
   "userByEmail": "user_email"
  },
  {
   "role": "READER",
   "groupByEmail": "group_email"
  }
 ],
 ...
}
수정이 완료되면 bq update 명령어를 사용하고 --source 플래그로 JSON 파일을 포함합니다. 데이터 세트가 기본 프로젝트가 아닌 다른 프로젝트에 있다면 프로젝트 ID를 PROJECT_ID:DATASET 형식으로 데이터 세트 이름에 추가합니다.주의: 액세스 제어가 포함된 JSON 파일을 적용하면 기존 액세스 제어를 덮어쓰게 됩니다.  bq update 
      --source PATH_TO_FILE 
      PROJECT_ID:DATASET
  
액세스 제어 변경사항을 확인하려면 파일에 정보를 쓰지 않고 show 명령어를 다시 사용합니다.

bq show --format=prettyjson PROJECT_ID:DATASET

 API  

datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko]를 호출하고 Dataset 리소스의 access 속성을 사용하여 액세스 제어를 업데이트합니다.

datasets.update 메서드는 전체 데이터 세트 리소스를 바꾸기 때문에 datasets.patch 메서드를 사용하여 액세스 제어를 업데이트하는 것이 좋습니다.
Go 













  
  
  
  





  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
DatasetMetadataToUpdate 유형 [https://pkg.go.dev/cloud.google.com/go/bigquery#DatasetMetadataToUpdate]으로 기존 목록에서 항목을 삭제하여 새 액세스 목록을 설정합니다. 그런 다음 dataset.Update() 함수 [https://pkg.go.dev/cloud.google.com/go/bigquery#Dataset.Update]를 호출하여 속성을 업데이트합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
)

// revokeAccessToDataset creates a new ACL removing the dataset access to "example-analyst-group@google.com" entity
// For more information on the types of ACLs available see:
// https://cloud.google.com/storage/docs/access-control/lists
func revokeAccessToDataset(w io.Writer, projectID, datasetID, entity string) error {
	// TODO(developer): uncomment and update the following lines:
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// entity := "user@mydomain.com"

	ctx := context.Background()

	// Create BigQuery client.
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %w", err)
	}
	defer client.Close()

	// Get dataset handler
	dataset := client.Dataset(datasetID)

	// Get dataset metadata
	meta, err := dataset.Metadata(ctx)
	if err != nil {
		return err
	}

	// Create new access entry list by copying the existing and omiting the access entry entity value
	var newAccessList []*bigquery.AccessEntry [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_AccessEntry]
	for _, entry := range meta.Access {
		if entry.Entity != entity {
			newAccessList = append(newAccessList, entry)
		}
	}

	// Only proceed with update if something in the access list was removed.
	// Additionally, we use the ETag from the initial metadata to ensure no
	// other changes were made to the access list in the interim.
	if len(newAccessList) < len(meta.Access) {
		update := bigquery.DatasetMetadataToUpdate [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_DatasetMetadataToUpdate]{
			Access: newAccessList,
		}
		meta, err = dataset.Update(ctx, update, meta.ETag)
		if err != nil {
			return err
		}
	} else {
		return fmt.Errorf("any access entry was revoked")
	}

	fmt.Fprintf(w, "Details for Access entries in dataset %v.\n", datasetID)

	for _, access := range meta.Access {
		fmt.Fprintln(w)
		fmt.Fprintf(w, "Role: %s\n", access.Role)
		fmt.Fprintf(w, "Entity: %v\n", access.Entity)
	}

	return nil
}





























  
  



  
  
  
  
  
  
  
  
  
  




자바 












  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  
import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko];
import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko].Entity [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity.html?hl=ko];
import com.google.cloud.bigquery.Acl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.html?hl=ko].Group [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Group.html?hl=ko];
import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko];
import com.google.cloud.bigquery.DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko];
import java.util.List;

public class RevokeDatasetAccess {

  public static void main(String[] args) {
    // TODO(developer): Replace these variables before running the sample.
    // Project and dataset from which to get the access policy.
    String projectId = "MY_PROJECT_ID";
    String datasetName = "MY_DATASET_NAME";
    // Group to remove from the ACL
    String entityEmail = "group-to-remove@example.com";

    revokeDatasetAccess(projectId, datasetName, entityEmail);
  }

  public static void revokeDatasetAccess(String projectId, String datasetName, String entityEmail) {
    try {
      // Initialize client that will be used to send requests. This client only needs
      // to be created once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // Create datasetId with the projectId and the datasetName.
      DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko] datasetId = DatasetId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetId.html?hl=ko].of(projectId, datasetName);
      Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko] dataset = bigquery.getDataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getDataset_com_google_cloud_bigquery_DatasetId_com_google_cloud_bigquery_BigQuery_DatasetOption____](datasetId);

      // Create a new Entity with the corresponding type and email
      // "user-or-group-to-remove@example.com"
      // For more information on the types of Entities available see:
      // https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity
      // and
      // https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity.Type
      Entity [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Entity.html?hl=ko] entity = new Group [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl.Group.html?hl=ko](entityEmail);

      // To revoke access to a dataset, remove elements from the Acl list.
      // Find more information about ACL and the Acl Class here:
      // https://cloud.google.com/storage/docs/access-control/lists
      // https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Acl
      // Remove the entity from the ACLs list.
      List<Acl> acls =
          dataset.getAcl [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.DatasetInfo.html?hl=ko#com_google_cloud_bigquery_DatasetInfo_getAcl__]().stream().filter(acl -> !acl.getEntity().equals(entity)).toList();

      // Update the ACLs by setting the new list.
      bigquery.update [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_update_com_google_cloud_bigquery_DatasetInfo_com_google_cloud_bigquery_BigQuery_DatasetOption____](dataset.toBuilder().setAcl(acls).build());
      System.out.println("ACLs of \"" + datasetName + "\" updated successfully");
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("ACLs were not updated \n" + e.toString());
    }
  }
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Node.js  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Dataset#get() [https://googleapis.dev/nodejs/bigquery/latest/Dataset.html#get] 메서드를 사용하여 현재 메타데이터를 가져와 기존 목록에서 지정된 항목을 삭제하여 데이터 세트 액세스 목록을 업데이트합니다. 액세스 속성을 수정하여 원하는 항목을 제외한 다음 Dataset#setMetadata() [https://googleapis.dev/nodejs/bigquery/latest/Dataset.html#setMetadata] 함수를 호출하여 업데이트된 액세스 목록을 적용합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
/**
 * TODO(developer): Update and un-comment below lines
 */

// const datasetId = "my_project_id.my_dataset"

// ID of the user or group from whom you are revoking access.
// const entityId = "user-or-group-to-remove@example.com"

const {BigQuery} = require('@google-cloud/bigquery');

// Instantiate a client.
const bigquery = new BigQuery();

async function revokeDatasetAccess() {
  const [dataset] = await bigquery.dataset(datasetId).get();

  // To revoke access to a dataset, remove elements from the access list.
  //
  // See the BigQuery client library documentation for more details on access entries:
  // https://cloud.google.com/nodejs/docs/reference/bigquery/latest

  // Filter access entries to exclude entries matching the specified entity_id
  // and assign a new list back to the access list.
  dataset.metadata.access = dataset.metadata.access.filter(entry => {
    return !(
      entry.entity_id === entityId ||
      entry.userByEmail === entityId ||
      entry.groupByEmail === entityId
    );
  });

  // Update will only succeed if the dataset
  // has not been modified externally since retrieval.
  //
  // See the BigQuery client library documentation for more details on metadata updates:
  // https://cloud.google.com/bigquery/docs/updating-datasets

  // Update just the 'access entries' property of the dataset.
  await dataset.setMetadata(dataset.metadata);

  console.log(`Revoked access to '${entityId}' from '${datasetId}'.`);
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Python  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      










데이터 세트에 대한 액세스 제어를 사용하여 dataset.access_entries 속성 [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries]을 설정합니다. 그런 다음 client.update_dataset() 함수 [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client?hl=ko#google_cloud_bigquery_client_Client_update_dataset]를 호출하여 속성을 업데이트합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]
from google.api_core.exceptions import PreconditionFailed

# TODO(developer): Update and uncomment the lines below.

# ID of the dataset to revoke access to.
# dataset_id = "my-project.my_dataset"

# ID of the user or group from whom you are revoking access.
# Alternatively, the JSON REST API representation of the entity,
# such as a view's table reference.
# entity_id = "user-or-group-to-remove@example.com"

# Instantiate a client.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

# Get a reference to the dataset.
dataset = client.get_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_get_dataset](dataset_id)

# To revoke access to a dataset, remove elements from the AccessEntry list.
#
# See the BigQuery client library documentation for more details on `access_entries`:
# https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset#google_cloud_bigquery_dataset_Dataset_access_entries

# Filter `access_entries` to exclude entries matching the specified entity_id
# and assign a new list back to the AccessEntry list.
dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries] = [
    entry for entry in dataset.access_entries [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_access_entries]
    if entry.entity_id [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_entity_id] != entity_id
]

# Update will only succeed if the dataset
# has not been modified externally since retrieval.
#
# See the BigQuery client library documentation for more details on `update_dataset`:
# https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client#google_cloud_bigquery_client_Client_update_dataset
try:
    # Update just the `access_entries` property of the dataset.
    dataset = client.update_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_update_dataset](
        dataset,
        ["access_entries"],
    )

    # Notify user that the API call was successful.
    full_dataset_id = f"{dataset.project}.{dataset.dataset_id}"
    print(f"Revoked dataset access for '{entity_id [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.AccessEntry.html?hl=ko#google_cloud_bigquery_dataset_AccessEntry_entity_id]}' to ' dataset '{full_dataset_id}.'")
except PreconditionFailed:  # A read-modify-write error.
    print(
        f"Dataset '{dataset.dataset_id}' was modified remotely before this update. "
        "Fetch the latest version and retry."
    )


테이블 또는 뷰에 대해 액세스 취소
다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트를 확장하고 테이블 또는 뷰를 선택합니다.
세부정보 패널에서 공유를 클릭합니다.
공유 대화상자에서 액세스 권한을 취소하려는 주 구성원을 확장합니다.
delete 삭제를 클릭합니다.
주 구성원에서 역할을 삭제할까요? 대화상자에서 삭제를 클릭합니다.
테이블 또는 뷰 세부정보로 돌아가려면 닫기를 클릭합니다.

참고: 이 방식으로 액세스를 취소할 수 없으면 주 구성원이 리소스 계층 구조 [https://cloud.google.com/iam/docs/overview?hl=ko#resource-hierarchy]의 상위 수준에서 액세스 권한을 상속했을 수 있습니다.
주 구성원 액세스 권한을 수정하는 방법에 대한 안내는 단일 역할 부여 또는 취소 [https://cloud.google.com/iam/docs/granting-changing-revoking-access?hl=ko#single-role]를 참조하세요.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#sql] ---
주 구성원에서 테이블 또는 뷰에 대해 액세스 권한을 삭제하려면 REVOKE DCL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#revoke_statement]을 사용합니다.





 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

REVOKE `ROLE_LIST`
ON RESOURCE_TYPE RESOURCE_NAME
FROM "USER_LIST"


다음을 바꿉니다.

  ROLE_LIST: 취소하려는 역할 또는 쉼표로 구분된 역할 목록
  RESOURCE_TYPE: 역할이 취소되는 리소스 유형.
    지원되는 값은 TABLE, VIEW, MATERIALIZED VIEW, EXTERNAL TABLE입니다.
  RESOURCE_NAME: 권한을 취소하려는 리소스의 이름
  USER_LIST: 역할이 취소되는 쉼표로 구분된 사용자 목록.
    유효한 형식 목록은 user_list [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko#user_list]를 참조하세요.


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

다음 예시에서는 myTable 테이블에서 관리자 역할을 취소합니다.
REVOKE `roles/bigquery.admin`
ON TABLE `myProject`.myDataset.myTable
FROM "group:example-team@example-pet-store.com", "serviceAccount:user@test-project.iam.gserviceaccount.com"

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










테이블 또는 뷰에 대한 액세스 권한을 취소하려면 bq remove-iam-policy-binding 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_remove-iam-policy-binding]를 사용합니다.

bq remove-iam-policy-binding --member=MEMBER_TYPE:MEMBER --role=ROLE
--table=true RESOURCE

다음을 바꿉니다.


MEMBER_TYPE: 구성원 유형(예: user, group, serviceAccount, domain)
MEMBER: 회원의 이메일 주소 또는 도메인 이름
ROLE: 구성원에게서 취소할 역할
RESOURCE: 정책을 업데이트하려는 테이블 또는 뷰의 이름


 API  


현재 정책을 검색하려면 tables.getIamPolicy 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/getIamPolicy?hl=ko]를 호출합니다.
정책을 수정하여 구성원 또는 결합 또는 둘 다를 삭제합니다.
정책에 필요한 형식은 정책 [https://cloud.google.com/iam/docs/reference/rest/v1/Policy?hl=ko] 참조 주제를 참조하세요.
주의: 정책을 설정할 때 항상 현재 정책을 첫 번째 단계로 검색하여 etag의 현재 값을 가져옵니다. 업데이트된 정책 파일에는 대체하려는 현재 정책과 동일한 etag 값이 포함되어야 합니다. 그렇지 않으면 업데이트가 실패합니다. 이 기능은 동시 업데이트가 발생하지 않도록 방지합니다.
정책 파일에서 version의 값은 1로 유지됩니다. 이 버전 번호는 정책 버전이 아닌 IAM 정책 스키마 버전을 나타냅니다. etag 값은 정책 버전 번호입니다.
tables.setIamPolicy [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/setIamPolicy?hl=ko]를 호출하여 업데이트된 정책을 작성합니다.참고: 구성원이 없는 비어 있는 바인딩은 허용되지 않으며 이 경우 오류가 발생합니다.Go 













  
  
  
  





  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
policy.Remove() 함수 [https://pkg.go.dev/cloud.google.com/go/iam#Policy.Remove]를 호출하여 액세스 권한을 삭제합니다.
그런 다음 IAM().SetPolicy() 함수 [https://pkg.go.dev/cloud.google.com/go/iam#Policy.Remove]를 호출하여 테이블 또는 뷰의 액세스 정책 변경사항을 저장합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
	"cloud.google.com/go/iam"
)

// revokeTableOrViewAccessPolicies creates a new ACL removing the VIEWER role to group "example-analyst-group@google.com"
// For more information on the types of ACLs available see:
// https://cloud.google.com/storage/docs/access-control/lists
func revokeTableOrViewAccessPolicies(w io.Writer, projectID, datasetID, resourceID string) error {
	// Resource can be a table or a view
	//
	// TODO(developer): uncomment and update the following lines:
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// resourceID := "myresource"

	ctx := context.Background()

	// Create new client
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %w", err)
	}
	defer client.Close()

	// Get resource policy.
	policy, err := client.Dataset(datasetID).Table(resourceID).IAM [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Table_IAM]().Policy(ctx)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Table.IAM.Policy: %w", err)
	}

	// Find more details about IAM Roles here:
	// https://pkg.go.dev/cloud.google.com/go/iam#RoleName
	entityID := "example-analyst-group@google.com"
	roleType := iam.Viewer [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Owner_Editor_Viewer]

	// Revoke policy access.
	policy.Remove [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Policy_Remove](fmt.Sprintf("group:%s", entityID), roleType)

	// Update resource's policy.
	err = client.Dataset(datasetID).Table(resourceID).IAM [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Table_IAM]().SetPolicy(ctx, policy)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Table.IAM.Policy: %w", err)
	}

	// Get resource policy again expecting the update.
	policy, err = client.Dataset(datasetID).Table(resourceID).IAM [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Table_IAM]().Policy(ctx)
	if err != nil {
		return fmt.Errorf("bigquery.Dataset.Table.IAM.Policy: %w", err)
	}

	fmt.Fprintf(w, "Details for Access entries in table or view %v.\n", resourceID)

	for _, role := range policy.Roles [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Policy_Roles]() {
		fmt.Fprintln(w)
		fmt.Fprintf(w, "Role: %s\n", role)
		fmt.Fprintf(w, "Entities: %v\n", policy.Members [https://cloud.google.com/go/docs/reference/cloud.google.com/go/iam/latest/index.html?hl=ko#cloud_google_com_go_iam_Policy_Members](role))
	}

	return nil
}





























  
  



  
  
  
  
  
  
  
  
  
  




자바 












  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import com.google.cloud.Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko];
import com.google.cloud.Policy [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko];
import com.google.cloud.Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko];
import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko];
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class RevokeAccessToTableOrView {

  public static void main(String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko][] args) {
    // TODO(developer): Replace these variables before running the sample.
    // Project, dataset and resource (table or view) from which to get the access policy
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] projectId = "MY_PROJECT_ID";
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] datasetName = "MY_DATASET_NAME";
    String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] resourceName = "MY_RESOURCE_NAME";
    // Role to remove from the access policy
    Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko] role = Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko].of("roles/bigquery.dataViewer");
    // Identity to remove from the access policy
    Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko] user = Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko].user [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Identity.html?hl=ko#com_google_cloud_Identity_user_java_lang_String_]("user-add@example.com");
    revokeAccessToTableOrView(projectId, datasetName, resourceName, role, user);
  }

  public static void revokeAccessToTableOrView(
      String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] projectId, String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] datasetName, String [https://cloud.google.com/java/docs/reference/google-cloud-bigtable/latest/com.google.cloud.bigtable.common.Type.String.html?hl=ko] resourceName, Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko] role, Identity [https://cloud.google.com/java/docs/reference/google-cloud-storageinsights/latest/com.google.cloud.storageinsights.v1.Identity.html?hl=ko] identity) {
    try {
      // Initialize client that will be used to send requests. This client only needs
      // to be created once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // Create table identity given the projectId, the datasetName and the resourceName.
      TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko] tableId = TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko].of(projectId, datasetName, resourceName);

      // Remove either identities or roles, or both from bindings and replace it in
      // the current IAM policy.
      Policy [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko] policy = bigquery.getIamPolicy [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getIamPolicy_com_google_cloud_bigquery_TableId_com_google_cloud_bigquery_BigQuery_IAMOption____](tableId);
      // Create a copy of an immutable map.
      Map<Role, Set<Identity>> bindings = new HashMap<>(policy.getBindings [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko#com_google_cloud_compute_v1_Policy_getBindings_int_]());

      // Remove all identities with a specific role.
      bindings.remove(role);
      // Update bindings.
      policy = policy.toBuilder [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko#com_google_cloud_compute_v1_Policy_toBuilder__]().setBindings(bindings).build();

      // Remove one identity in all the existing roles.
      for (Role [https://cloud.google.com/java/docs/reference/google-cloud-core/latest/com.google.cloud.Role.html?hl=ko] roleKey : bindings.keySet()) {
        if (bindings.get(roleKey).contains(identity)) {
          // Create a copy of an immutable set if the identity is present in the role.
          Set<Identity> identities = new HashSet<>(bindings.get(roleKey));
          // Remove identity.
          identities.remove(identity);
          bindings.put(roleKey, identities);
          if (bindings.get(roleKey).isEmpty()) {
            // Remove the role if it has no identities.
            bindings.remove(roleKey);
          }
        }
      }
      // Update bindings.
      policy = policy.toBuilder [https://cloud.google.com/java/docs/reference/google-cloud-compute/latest/com.google.cloud.compute.v1.Policy.html?hl=ko#com_google_cloud_compute_v1_Policy_toBuilder__]().setBindings(bindings).build();

      // Update the IAM policy by setting the new one.
      bigquery.setIamPolicy [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_setIamPolicy_com_google_cloud_bigquery_TableId_com_google_cloud_Policy_com_google_cloud_bigquery_BigQuery_IAMOption____](tableId, policy);

      System.out.println("IAM policy of resource \"" + resourceName + "\" updated successfully");
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("IAM policy was not updated. \n" + e.toString());
    }
  }
}




























  
  



  
  
  
  
  
  
  
  
  
  




 Node.js  













  
  
  
  





  
  
  
    
  




  



  







  
    
  



  



  
  
    
    
      
        
          이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Table#getIamPolicy() [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/table?hl=ko#_google_cloud_bigquery_Table_getIamPolicy_member_1_y] 메서드를 사용하여 테이블 또는 뷰의 현재 IAM 정책을 가져옵니다. 
원하는 역할 또는 주 구성원을 삭제하도록 정책을 수정한 다음 Table#setIamPolicy() [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/table?hl=ko#setiampolicy] 메서드를 사용하여 업데이트된 정책을 적용합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
/**
 * TODO(developer): Update and un-comment below lines
 */
// const projectId = "YOUR_PROJECT_ID"
// const datasetId = "YOUR_DATASET_ID"
// const tableId = "YOUR_TABLE_ID"
// const roleToRemove = "YOUR_ROLE"
// const principalToRemove = "YOUR_PRINCIPAL_ID"

const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');

// Instantiate a client.
const client = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function revokeAccessToTableOrView() {
  const dataset = client.dataset(datasetId);
  const table = dataset.table(tableId);

  // Get the IAM access policy for the table or view.
  const [policy] = await table.getIamPolicy();

  // Initialize bindings array.
  if (!policy.bindings) {
    policy.bindings = [];
  }

  // To revoke access to a table or view,
  // remove bindings from the Table or View policy.
  //
  // Find more details about Policy objects here:
  // https://cloud.google.com/security-command-center/docs/reference/rest/Shared.Types/Policy

  if (principalToRemove) {
    // Create a copy of bindings for modifications.
    const bindings = [...policy.bindings];

    // Filter out the principal from each binding.
    for (const binding of bindings) {
      if (binding.members) {
        binding.members = binding.members.filter(
          m => m !== principalToRemove
        );
      }
    }

    // Filter out bindings with empty members.
    policy.bindings = bindings.filter(
      binding => binding.members && binding.members.length > 0
    );
  }

  if (roleToRemove) {
    // Filter out all bindings with the roleToRemove
    // and assign a new list back to the policy bindings.
    policy.bindings = policy.bindings.filter(b => b.role !== roleToRemove);
  }

  // Set the IAM access policy with updated bindings.
  await table.setIamPolicy(policy);

  // Both role and principal are removed
  if (roleToRemove !== null && principalToRemove !== null) {
    console.log(
      `Role '${roleToRemove}' revoked for principal '${principalToRemove}' on resource '${datasetId}.${tableId}'.`
    );
  }

  // Only role is removed
  if (roleToRemove !== null && principalToRemove === null) {
    console.log(
      `Role '${roleToRemove}' revoked for all principals on resource '${datasetId}.${tableId}'.`
    );
  }

  // Only principal is removed
  if (roleToRemove === null && principalToRemove !== null) {
    console.log(
      `Access revoked for principal '${principalToRemove}' on resource '${datasetId}.${tableId}'.`
    );
  }

  // No changes were made
  if (roleToRemove === null && principalToRemove === null) {
    console.log(
      `No changes made to access policy for '${datasetId}.${tableId}'.`
    );
  }
}


루틴에 대한 액세스 권한 취소
프리뷰
이 기능에는 서비스별 약관 [https://cloud.google.com/terms/service-terms?hl=ko#1]의 일반 서비스 약관 섹션에 있는 'GA 이전 제공 서비스 약관'이 적용됩니다. GA 이전 기능은 '있는 그대로' 제공되며 지원이 제한될 수 있습니다. 자세한 내용은 출시 단계 설명 [https://cloud.google.com/products?hl=ko#product-launch-stages]을 참조하세요.
이 기능에 대한 의견을 제공하거나 지원을 요청하려면 bq-govsec-eng@google.com [mailto:bq-govsec-eng@google.com]으로 이메일을 보내세요.
다음 옵션 중 하나를 선택합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#%EC%BD%98%EC%86%94] ---
BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 패널에서 프로젝트를 확장하고 루틴을 선택합니다.
세부정보 패널에서 공유 > 권한을 클릭합니다.
루틴 권한 대화상자에서 취소하려는 액세스 권한이 있는 주 구성원을 확장합니다.
delete 주 구성원 삭제를 클릭합니다.
주 구성원에서 역할을 삭제할까요? 대화상자에서 삭제를 클릭합니다.
닫기를 클릭합니다.

참고: 액세스를 취소할 수 없으면 주 구성원이 리소스 계층 구조 [https://cloud.google.com/iam/docs/overview?hl=ko#resource-hierarchy]의 상위 수준에서 액세스 권한을 상속했을 수 있습니다.
주 구성원 액세스 권한을 수정하는 방법에 대한 안내는 단일 역할 부여 또는 취소 [https://cloud.google.com/iam/docs/granting-changing-revoking-access?hl=ko#single-role]를 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#bq] ---
In the Google Cloud console, activate Cloud Shell.
    Activate Cloud Shell [https://console.cloud.google.com/?cloudshell=true&hl=ko]
    
      At the bottom of the Google Cloud console, a
      Cloud Shell [https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=ko]
      session starts and displays a command-line prompt. Cloud Shell is a shell environment
      with the Google Cloud CLI
      already installed and with values already set for
      your current project. It can take a few seconds for the session to initialize.
    
    
  










기존 루틴 정보(액세스 제어 포함)를 JSON 파일에 기록하려면 bq get-iam-policy 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_get-iam-policy]를 사용합니다.

bq get-iam-policy --routine PROJECT_ID:DATASET.ROUTINE > PATH_TO_FILE

다음을 바꿉니다.


PROJECT_ID: 프로젝트 ID
DATASET: 업데이트하려는 루틴이 포함된 데이터 세트의 이름
ROUTINE: 업데이트할 리소스의 이름
PATH_TO_FILE: 로컬 머신의 JSON 파일 경로
주의: 정책을 설정할 때 항상 현재 정책을 첫 번째 단계로 검색하여 etag의 현재 값을 가져옵니다. 업데이트된 정책 파일에는 대체하려는 현재 정책과 동일한 etag 값이 포함되어야 합니다. 그렇지 않으면 업데이트가 실패합니다. 이 기능은 동시 업데이트가 발생하지 않도록 방지합니다.
정책 파일에서 version의 값은 1로 유지됩니다. 이 번호는 정책 버전이 아니라 IAM 정책 스키마 버전을 나타냅니다. etag 값은 정책 버전 번호입니다.

JSON 파일의 access 섹션으로 변경합니다. specialGroup 항목(projectOwners, projectWriters, projectReaders, allAuthenticatedUsers)을 삭제할 수 있습니다. userByEmail, groupByEmail, domain도 삭제할 수 있습니다.
예를 들어 루틴 JSON 파일의 access 섹션은 다음과 비슷합니다.
{
 "bindings": [
   {
     "role": "roles/bigquery.dataViewer",
     "members": [
       "user:izumi@example.com",
       "group:admins@example.com",
       "domain:google.com",
     ]
   },
 ],
 "etag": "BwWWja0YfJA=",
 "version": 1
}
참고: 구성원이 없는 비어 있는 바인딩은 허용되지 않으며 이 경우 오류가 발생합니다.
액세스 정책을 업데이트하려면 bq set-iam-policy 명령어를 사용합니다.
 bq set-iam-policy --routine PROJECT_ID:DATASET.ROUTINE PATH_TO_FILE
액세스 제어 변경사항을 확인하려면 파일에 정보를 쓰지 않고 get-iam-policy 명령어를 다시 사용합니다.
bq get-iam-policy --routine --format=prettyjson \
    PROJECT_ID:DATASET.ROUTINE

 API  


현재 정책을 검색하려면 routines.getIamPolicy 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/getIamPolicy?hl=ko]를 호출합니다.
정책을 수정하여 구성원 또는 결합을 추가합니다.
정책에 필요한 형식은 정책 [https://cloud.google.com/iam/docs/reference/rest/v1/Policy?hl=ko] 참조 주제를 참조하세요.
주의: 정책을 설정할 때 항상 현재 정책을 첫 번째 단계로 검색하여 etag의 현재 값을 가져옵니다. 업데이트된 정책 파일에는 대체하려는 현재 정책과 동일한 etag 값이 포함되어야 합니다. 그렇지 않으면 업데이트가 실패합니다. 이 기능은 동시 업데이트가 발생하지 않도록 방지합니다.
정책 파일에서 version의 값은 1로 유지됩니다. 이 버전 번호는 정책 버전이 아닌 IAM 정책 스키마 버전을 나타냅니다. etag 값은 정책 버전 번호입니다.




리소스에 대한 액세스 거부
프리뷰
이 기능에는 서비스별 약관 [https://cloud.google.com/terms/service-terms?hl=ko#1]의 일반 서비스 약관 섹션에 있는 'GA 이전 제공 서비스 약관'이 적용됩니다. GA 이전 기능은 '있는 그대로' 제공되며 지원이 제한될 수 있습니다. 자세한 내용은 출시 단계 설명 [https://cloud.google.com/products?hl=ko#product-launch-stages]을 참조하세요.
참고: 이 프리뷰 출시와 관련된 의견을 제공하거나 궁금한 점이 있으면 bigquery-security@google.com [mailto:bigquery-security@google.com]에 문의하세요.
IAM 거부 정책 [https://cloud.google.com/iam/docs/deny-overview?hl=ko]을 사용하면 BigQuery 리소스에 대한 액세스에 가드레일을 설정할 수 있습니다. 부여된 역할에 관계없이 선택한 주 구성원이 특정 권한 [https://cloud.google.com/iam/docs/deny-permissions-support?hl=ko]을 사용하지 못하게 하는 거부 규칙을 정의할 수 있습니다.
거부 정책을 만들고, 업데이트하고, 삭제하는 방법에 대한 자세한 내용은 리소스 액세스 거부 [https://cloud.google.com/iam/docs/deny-access?hl=ko]를 참고하세요.
특수한 경우
일부 BigQuery 권한에 대한 IAM 거부 정책 [https://cloud.google.com/iam/docs/deny-overview?hl=ko]을 만들 때 다음 시나리오를 고려하세요.
승인된 리소스(뷰 [https://cloud.google.com/bigquery/docs/authorized-views?hl=ko], 루틴 [https://cloud.google.com/bigquery/docs/authorized-routines?hl=ko], 데이터 세트 [https://cloud.google.com/bigquery/docs/authorized-datasets?hl=ko] 또는 저장 프러시저 [https://cloud.google.com/bigquery/docs/procedures?hl=ko#authorize_routines])에 액세스하면 이러한 작업을 수행할 직접적인 권한이 없더라도 테이블 데이터를 읽고 수정하는 것과 함께 테이블을 만들거나 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#create_table_statement] 삭제 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#drop_table_statement]하거나 조작 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko]할 수 있습니다. 또한 모델 데이터 또는 메타데이터를 가져오고 [https://cloud.google.com/bigquery/docs/getting-model-metadata?hl=ko] 기본 테이블에서 다른 저장 프러시저를 호출 [https://cloud.google.com/bigquery/docs/procedures?hl=ko#call_a_stored_procedure]할 수도 있습니다. 이 기능은 승인된 리소스에 다음 권한이 있음을 의미합니다.
bigquery.tables.get
bigquery.tables.list
bigquery.tables.getData
bigquery.tables.updateData
bigquery.tables.create
bigquery.tables.delete
bigquery.routines.get
bigquery.routines.list
bigquery.datasets.get
bigquery.models.getData
bigquery.models.getMetadata
이러한 승인된 리소스에 대한 액세스를 거부하려면 거부 정책을 만들 때 deniedPrincipal [https://cloud.google.com/iam/docs/deny-overview?hl=ko#deny-rules] 필드에 다음 값 중 하나를 추가합니다.
값 사용 사례
principalSet://goog/public:all 승인된 리소스를 포함한 모든 주 구성원을 차단합니다.
principalSet://bigquery.googleapis.com/projects/PROJECT_NUMBER/* 지정된 프로젝트에서 승인된 모든 BigQuery 리소스를 차단합니다. PROJECT_NUMBER [https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=ko#identifying_projects]는 INT64 유형의 프로젝트에 대해 자동으로 생성되는 고유 식별자입니다.
특정 주 구성원을 거부 정책에서 제외하려면 거부 정책의 exceptionPrincipals [https://cloud.google.com/iam/docs/deny-overview?hl=ko#deny-rules] 필드에 해당 주 구성원을 지정합니다. 예를 들면 exceptionPrincipals: "principalSet://bigquery.googleapis.com/projects/1234/*"입니다.
BigQuery는 24시간 동안 작업 소유자의 쿼리 결과를 캐시 [https://cloud.google.com/bigquery/docs/cached-results?hl=ko#how_cached_results_are_stored]하므로 작업 소유자는 데이터가 포함된 테이블에 대한 bigquery.tables.getData 권한이 없어도 액세스할 수 있습니다. 따라서 bigquery.tables.getData 권한에 IAM 거부 정책을 추가해도 캐시가 만료될 때까지 작업 소유자의 캐시된 결과에 대한 액세스가 차단되지 않습니다. 캐시된 결과에 대한 작업 소유자의 액세스를 차단하려면 bigquery.jobs.create 권한에 별도의 거부 정책을 만듭니다.
거부 정책을 사용하여 데이터 읽기 작업을 차단할 때 의도하지 않은 데이터 액세스를 방지하려면 데이터 세트의 기존 구독도 검토하고 취소하는 것이 좋습니다.
데이터 세트 액세스 제어를 보기 위한 IAM 거부 정책 [https://cloud.google.com/iam/docs/deny-overview?hl=ko]을 만들려면 다음 권한을 거부하세요.
bigquery.datasets.get
bigquery.datasets.getIamPolicy
데이터 세트 액세스 제어를 업데이트하기 위한 IAM 거부 정책 [https://cloud.google.com/iam/docs/deny-overview?hl=ko]을 만들려면 다음 권한을 거부하세요.
bigquery.datasets.update
bigquery.datasets.setIamPolicy
제한사항
루틴 액세스 제어 목록(ACL)은 복제된 루틴 [https://cloud.google.com/bigquery/docs/data-replication?hl=ko]에 포함되지 않습니다.
외부 또는 연결된 데이터 세트 내 루틴은 액세스 제어를 지원하지 않습니다.
외부 또는 연결된 데이터 세트 내의 테이블은 액세스 제어를 지원하지 않습니다.
Terraform으로는 루틴 액세스 제어를 설정할 수 없습니다.
Google Cloud SDK로는 루틴 액세스 제어를 설정할 수 없습니다.
BigQuery 데이터 제어 언어(DCL) [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language?hl=ko]를 사용하여 루틴 액세스 제어를 설정할 수 없습니다.
Data Catalog는 루틴 액세스 제어를 지원하지 않습니다. 사용자에게 루틴 수준 액세스 권한이 조건부로 부여된 경우 BigQuery 측 패널에 루틴이 표시되지 않습니다. 해결 방법으로 데이터 세트 수준 액세스 권한을 부여하세요.
OBJECT_PRIVILEGES 뷰 [https://cloud.google.com/bigquery/docs/information-schema-object-privileges?hl=ko]에는 루틴 액세스 제어가 표시되지 않습니다.
다음 단계
projects.testIamPermissions 메서드 [https://cloud.google.com/resource-manager/reference/rest/v1/projects/testIamPermissions?hl=ko]를 사용하여 리소스에 대한 사용자 액세스를 테스트하는 방법을 알아보세요.
도움이 되었나요?
의견 보내기