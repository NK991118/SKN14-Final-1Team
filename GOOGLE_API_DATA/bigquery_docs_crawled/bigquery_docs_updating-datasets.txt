Source URL: https://cloud.google.com/bigquery/docs/updating-datasets

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
시작하기 전에 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#before_you_begin]
필수 권한 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#required_permissions]
데이터 세트 설명 업데이트 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#update-dataset-description]
기본 테이블 만료 시간 업데이트 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#table-expiration]
기본 파티션 만료 시간 업데이트 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#partition-expiration]
데이터 세트 속성 업데이트
bookmark_border
이 문서에서는 BigQuery에서 데이터 세트 속성을 업데이트하는 방법을 설명합니다. 데이터 세트를 만든 후에는 다음과 같은 데이터 세트 속성을 업데이트할 수 있습니다.
청구 모델 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#update_storage_billing_models]
새 테이블의 기본 만료 시간 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#table-expiration]
새로운 파티션이 분할된 테이블의 기본 파티션 만료 시간 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#partition-expiration]
새 테이블의 기본 반올림 모드 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#update_rounding_mode]
설명 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#update-dataset-description]
라벨 [https://cloud.google.com/bigquery/docs/adding-using-labels?hl=ko#adding_dataset_labels]
시간 이동 기간 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#update_time_travel_windows]
시작하기 전에
사용자에게 이 문서의 각 작업을 수행하는 데 필요한 권한을 부여하는 Identity and Access Management(IAM) 역할을 부여합니다.
필수 권한
데이터 세트 속성을 업데이트하려면 다음 IAM 권한이 필요합니다.
bigquery.datasets.update
bigquery.datasets.setIamPolicy( Google Cloud 콘솔에서 데이터 세트 액세스 제어를 업데이트할 때만 필요)
사전 정의된 roles/bigquery.dataOwner IAM 역할에는 데이터 세트 속성을 업데이트하는 데 필요한 권한이 포함됩니다.
또한 bigquery.datasets.create 권한이 있으면 만드는 데이터 세트의 속성을 업데이트할 수 있습니다.
BigQuery의 IAM 역할과 권한에 대한 자세한 내용은 사전 정의된 역할 및 권한 [https://cloud.google.com/bigquery/access-control?hl=ko]을 참조하세요.
데이터 세트 설명 업데이트
다음 방법으로 데이터 세트 설명을 업데이트할 수 있습니다.
Google Cloud 콘솔 사용
bq 명령줄 도구의 bq update 명령어 사용
datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko] API 메서드 호출
클라이언트 라이브러리 사용
데이터 세트 설명을 업데이트하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#%EC%BD%98%EC%86%94] ---
탐색기 패널에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
more_vert 작업 옵션을 펼치고 열기를 클릭합니다.
세부정보 패널에서 mode_edit
 세부정보 수정을 클릭하여 설명 텍스트를 수정합니다.

표시된 세부정보 수정 대화상자에서 다음을 수행합니다.


설명 필드에 설명을 입력하거나 기존 설명을 수정합니다.
새 설명 텍스트를 저장하려면 저장을 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#sql] ---
데이터 세트의 설명을 업데이트하려면 ALTER SCHEMA SET OPTIONS 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_schema_set_options_statement]을 사용하여 description 옵션을 설정합니다.

다음 예시에서는 이름이 mydataset인 데이터 세트에 대한 설명을 설정합니다.




 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

 ALTER SCHEMA mydataset
 SET OPTIONS (
     description = 'Description of mydataset');
 


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#bq] ---
bq update 명령어를 --description 플래그와 함께 실행합니다. 기본 프로젝트가 아닌 다른 프로젝트의 데이터 세트를 업데이트하려면 해당 프로젝트 ID를 project_id:dataset 형식으로 데이터 세트 이름에 추가합니다.

bq update \
--description "string" \
project_id:dataset

다음을 바꿉니다.


string: 따옴표로 묶인 데이터 세트를 설명하는 텍스트
project_id: 프로젝트 ID입니다.
dataset: 업데이트할 데이터 세트의 이름


예를 들면 다음과 같습니다.

다음 명령어를 입력하면 mydataset를 'Description of mydataset'로 변경할 수 있습니다. 여기서 mydataset는 기본 프로젝트에 있습니다.
bq update --description "Description of mydataset" mydataset

다음 명령어를 입력하면 mydataset를 'Description of mydataset'로 변경할 수 있습니다. 데이터 세트는 기본 프로젝트가 아닌 myotherproject에 있습니다.
bq update \
--description "Description of mydataset" \
myotherproject:mydataset

--- 탭: API [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#api] ---
datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko]를 호출하고 데이터 세트 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]의 description 속성을 업데이트합니다.
datasets.update 메서드는 전체 데이터 세트 리소스를 대체하므로 datasets.patch 메서드를 사용하는 것이 좋습니다.

--- 탭: tabpanel-go ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"

	"cloud.google.com/go/bigquery"
)

// updateDatasetDescription demonstrates how the Description metadata of a dataset can
// be read and modified.
func updateDatasetDescription(projectID, datasetID string) error {
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %v", err)
	}
	defer client.Close()

	ds := client.Dataset(datasetID)
	meta, err := ds.Metadata(ctx)
	if err != nil {
		return err
	}
	update := bigquery.DatasetMetadataToUpdate [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_DatasetMetadataToUpdate]{
		Description: "Updated Description.",
	}
	if _, err = ds.Update(ctx, update, meta.ETag); err != nil {
		return err
	}
	return nil
}

--- 탭: tabpanel-자바 ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Dataset.toBuilder() [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset?hl=ko#com_google_cloud_bigquery_Dataset_toBuilder__] 메서드를 사용하여 기존 Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset?hl=ko] 인스턴스에서 Dataset.Builder [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.Builder?hl=ko] 인스턴스를 만듭니다. 데이터 세트 빌더 객체를 구성합니다. Dataset.Builder.build() [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.Builder?hl=ko#com_google_cloud_bigquery_Dataset_Builder_build__] 메서드를 사용하여 업데이트된 데이터 세트를 빌드하고 Dataset.update() [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset?hl=ko#com_google_cloud_bigquery_Dataset_update_com_google_cloud_bigquery_BigQuery_DatasetOption____] 메서드를 호출하여 업데이트를 API로 보냅니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko];

public class UpdateDatasetDescription {

  public static void runUpdateDatasetDescription() {
    // TODO(developer): Replace these variables before running the sample.
    String datasetName = "MY_DATASET_NAME";
    String newDescription = "this is the new dataset description";
    updateDatasetDescription(datasetName, newDescription);
  }

  public static void updateDatasetDescription(String datasetName, String newDescription) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko] dataset = bigquery.getDataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getDataset_com_google_cloud_bigquery_DatasetId_com_google_cloud_bigquery_BigQuery_DatasetOption____](datasetName);
      bigquery.update [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_update_com_google_cloud_bigquery_DatasetInfo_com_google_cloud_bigquery_BigQuery_DatasetOption____](dataset.toBuilder().setDescription(newDescription).build());
      System.out.println("Dataset description updated successfully to " + newDescription);
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("Dataset description was not updated \n" + e.toString());
    }
  }
}

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Import the Google Cloud client library
const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');
const bigquery = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function updateDatasetDescription() {
  // Updates a dataset's description.

  // Retreive current dataset metadata
  const dataset = bigquery.dataset(datasetId);
  const [metadata] = await dataset.getMetadata();

  // Set new dataset description
  const description = 'New dataset description.';
  metadata.description = description;

  const [apiResponse] = await dataset.setMetadata(metadata);
  const newDescription = apiResponse.description;

  console.log(`${datasetId} description: ${newDescription}`);
}

--- 탭: tabpanel-python ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Dataset.description [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset?hl=ko#google_cloud_bigquery_dataset_Dataset_description] 속성을 구성하고 Client.update_dataset() [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client?hl=ko#google_cloud_bigquery_client_Client_update_dataset]를 호출하여 업데이트를 API에 보냅니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]

# Construct a BigQuery client object.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

# TODO(developer): Set dataset_id to the ID of the dataset to fetch.
# dataset_id = 'your-project.your_dataset'

dataset = client.get_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_get_dataset](dataset_id)  # Make an API request.
dataset.description = "Updated description."
dataset = client.update_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_update_dataset](dataset, ["description"])  # Make an API request.

full_dataset_id = "{}.{}".format(dataset.project, dataset.dataset_id)
print(
    "Updated dataset '{}' with description '{}'.".format(
        full_dataset_id, dataset.description
    )
)
기본 테이블 만료 시간 업데이트
다음 방법으로 데이터 세트의 기본 테이블 만료 시간을 업데이트할 수 있습니다.
Google Cloud 콘솔 사용
bq 명령줄 도구의 bq update 명령어 사용
datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko] API 메서드 호출
클라이언트 라이브러리 사용
데이터 세트 수준에서 기본 테이블 만료 시간을 설정하거나 테이블을 만들 때 테이블 만료 시간을 설정할 수 있습니다. 테이블을 만들 때 만료 시간을 설정할 경우, 데이터 세트의 기본 테이블 만료 시간이 무시됩니다. 데이터 세트 수준에서 기본 테이블 만료 시간을 설정하지 않고, 테이블을 만들 때 테이블 만료 시간을 설정하지 않으면 테이블이 만료되지 않으며, 테이블을 수동으로 삭제 [https://cloud.google.com/bigquery/docs/managing-tables?hl=ko#deleting_tables]해야 합니다. 테이블이 만료되면 포함된 모든 데이터와 함께 테이블이 삭제됩니다.
데이터 세트의 기본 테이블 만료 시간 설정을 업데이트할 때는 다음을 참조하세요.
값을 Never에서 정의된 만료 시간으로 변경할 경우 테이블 생성 시 만료 시간을 테이블에 설정하지 않았으면 데이터 세트에 이미 있는 테이블은 만료되지 않습니다.
기본 테이블 만료 값을 변경할 경우, 기존의 모든 테이블이 원래 테이블 만료 설정에 따라 만료됩니다. 테이블을 만들 때 테이블에 다른 테이블 만료 시간을 지정하지 않는 한 데이터 세트에서 생성되는 모든 새로운 테이블에 새로운 테이블 만료 시간 설정이 적용됩니다.
기본 테이블 만료 값은 값이 설정된 위치에 따라 다르게 표시됩니다. 원하는 세부사항 수준에 따라 적절한 방법을 사용하세요.
Google Cloud 콘솔에서는 만료 시간이 일 단위로 표시됩니다.
bq 명령줄 도구에서는 만료 시간이 초 단위로 표시됩니다.
API에서는 만료 시간이 밀리초 단위로 표시됩니다.
데이터 세트의 기본 만료 시간을 업데이트하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#%EC%BD%98%EC%86%94] ---
탐색기 패널에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
more_vert 작업 옵션을 펼치고 열기를 클릭합니다.
세부정보 패널의 데이터 세트 정보 옆에 있는 연필 아이콘을 클릭하여 만료 시간을 수정합니다.
데이터 세트 정보 대화상자의 기본 테이블 만료 시간 섹션에서 테이블 생성 후 경과 일수에 값을 입력합니다.
저장을 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#sql] ---
기본 테이블 만료 시간을 업데이트하려면 ALTER SCHEMA SET OPTIONS 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_schema_set_options_statement]을 사용하여 default_table_expiration_days 옵션을 설정합니다.

다음 예시에서는 이름이 mydataset인 데이터 세트의 기본 테이블 만료 시간을 업데이트합니다.




 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

 ALTER SCHEMA mydataset
 SET OPTIONS(
     default_table_expiration_days = 3.75);
 


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#bq] ---
데이터 세트에서 새로 생성되는 테이블의 기본 만료 시간을 업데이트하려면 --default_table_expiration 플래그를 사용하여 bq update 명령어를 입력합니다.
기본 프로젝트가 아닌 다른 프로젝트의 데이터 세트를 업데이트하려면 해당 프로젝트 ID를 project_id:dataset 형식으로 데이터 세트 이름에 추가합니다.

bq update \
--default_table_expiration integer \
project_id:dataset

다음을 바꿉니다.


integer: 새로 생성된 테이블의 기본 수명(초)입니다. 최솟값은 3,600초(1시간)입니다. 만료 시간은 현재 UTC 시간과 정수 값을 더한 값으로 계산됩니다.
기존 만료 시간을 삭제하려면 0을 지정합니다. 데이터 세트에서 생성된 모든 테이블은 생성 시간 integer초 후에 삭제됩니다. 테이블이 생성 [https://cloud.google.com/bigquery/docs/tables?hl=ko#create-table]될 때 테이블 만료 시간을 설정하지 않은 경우 이 값이 적용됩니다.
project_id: 프로젝트 ID입니다.
dataset: 업데이트할 데이터 세트의 이름입니다.


예를 들면 다음과 같습니다.

다음 명령어를 입력하면 mydataset에서 생성되는 새 테이블의 기본 테이블 만료 시간을 현재 시간에서 2시간(7,200초) 이내로 설정할 수 있습니다. 데이터 세트는 기본 프로젝트에 있습니다.
bq update --default_table_expiration 7200 mydataset

다음 명령어를 입력하면 mydataset에서 생성되는 새 테이블의 기본 테이블 만료 시간을 현재 시간에서 2시간(7,200초) 이내로 설정할 수 있습니다. 데이터 세트는 기본 프로젝트가 아닌 myotherproject에 있습니다.
bq update --default_table_expiration 7200 myotherproject:mydataset

--- 탭: API [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#api] ---
datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko]를 호출하고 데이터 세트 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]의 defaultTableExpirationMs 속성을 업데이트합니다.
API의 만료 시간은 밀리초 단위로 표시됩니다. datasets.update 메서드는 전체 데이터 세트 리소스를 대체하므로 datasets.patch 메서드를 사용하는 것이 좋습니다.

--- 탭: tabpanel-go ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/bigquery"
)

// updateDatasetDefaultExpiration demonstrats setting the default expiration of a dataset
// to a specific retention period.
func updateDatasetDefaultExpiration(projectID, datasetID string) error {
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %v", err)
	}
	defer client.Close()

	ds := client.Dataset(datasetID)
	meta, err := ds.Metadata(ctx)
	if err != nil {
		return err
	}
	update := bigquery.DatasetMetadataToUpdate [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_DatasetMetadataToUpdate]{
		DefaultTableExpiration: 24 * time.Hour,
	}
	if _, err := client.Dataset(datasetID).Update(ctx, update, meta.ETag); err != nil {
		return err
	}
	return nil
}

--- 탭: tabpanel-자바 ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    

Dataset.toBuilder() [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset?hl=ko#com_google_cloud_bigquery_Dataset_toBuilder__] 메서드를 사용하여 기존 Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset?hl=ko] 인스턴스에서 Dataset.Builder [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.Builder?hl=ko] 인스턴스를 만듭니다. 데이터 세트 빌더 객체를 구성합니다. Dataset.Builder.build() [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.Builder?hl=ko#com_google_cloud_bigquery_Dataset_Builder_build__] 메서드를 사용하여 업데이트된 데이터 세트를 빌드하고 Dataset.update() [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset?hl=ko#com_google_cloud_bigquery_Dataset_update_com_google_cloud_bigquery_BigQuery_DatasetOption____] 메서드를 호출하여 업데이트를 API로 보냅니다.


Dataset.Builder.setDefaultTableLifetime() [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.Builder?hl=ko#com_google_cloud_bigquery_Dataset_Builder_setDefaultTableLifetime_java_lang_Long_] 메서드를 사용하여 기본 만료 시간을 구성합니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko];
import java.util.concurrent.TimeUnit;

public class UpdateDatasetExpiration {

  public static void runUpdateDatasetExpiration() {
    // TODO(developer): Replace these variables before running the sample.
    String datasetName = "MY_DATASET_NAME";
    updateDatasetExpiration(datasetName);
  }

  public static void updateDatasetExpiration(String datasetName) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko] bigquery = BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko].getDefaultInstance().getService();

      // Update dataset expiration to one day
      Long newExpiration = TimeUnit.MILLISECONDS.convert [https://cloud.google.com/java/docs/reference/google-cloud-bigquerystorage/latest/com.google.cloud.bigquery.storage.v1.ProtoSchemaConverter.html?hl=ko#com_google_cloud_bigquery_storage_v1_ProtoSchemaConverter_convert_com_google_protobuf_Descriptors_Descriptor_](1, TimeUnit.DAYS);

      Dataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.Dataset.html?hl=ko] dataset = bigquery.getDataset [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_getDataset_com_google_cloud_bigquery_DatasetId_com_google_cloud_bigquery_BigQuery_DatasetOption____](datasetName);
      bigquery.update [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko#com_google_cloud_bigquery_BigQuery_update_com_google_cloud_bigquery_DatasetInfo_com_google_cloud_bigquery_BigQuery_DatasetOption____](dataset.toBuilder().setDefaultTableLifetime(newExpiration).build());
      System.out.println("Dataset description updated successfully to " + newExpiration);
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("Dataset expiration was not updated \n" + e.toString());
    }
  }
}

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  // Import the Google Cloud client library
const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');
const bigquery = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function updateDatasetExpiration() {
  // Updates the lifetime of all tables in the dataset, in milliseconds.

  /**
   * TODO(developer): Uncomment the following lines before running the sample.
   */
  // const datasetId = "my_dataset";

  // Retreive current dataset metadata
  const dataset = bigquery.dataset(datasetId);
  const [metadata] = await dataset.getMetadata();

  // Set new dataset metadata
  const expirationTime = 24 * 60 * 60 * 1000;
  metadata.defaultTableExpirationMs = expirationTime.toString();

  const [apiResponse] = await dataset.setMetadata(metadata);
  const newExpirationTime = apiResponse.defaultTableExpirationMs;

  console.log(`${datasetId} expiration: ${newExpirationTime}`);
}

--- 탭: tabpanel-python ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
    
Dataset.default_table_expiration_ms [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset?hl=ko#google_cloud_bigquery_dataset_Dataset_default_table_expiration_ms] 속성을 구성하고 Client.update_dataset() [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client?hl=ko#google_cloud_bigquery_client_Client_update_dataset]를 호출하여 업데이트를 API로 보냅니다.

  
  
  




















  





  
    
  
  











  









  




  



  


  
from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]

# Construct a BigQuery client object.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

# TODO(developer): Set dataset_id to the ID of the dataset to fetch.
# dataset_id = 'your-project.your_dataset'

dataset = client.get_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_get_dataset](dataset_id)  # Make an API request.
dataset.default_table_expiration_ms [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_default_table_expiration_ms] = 24 * 60 * 60 * 1000  # In milliseconds.

dataset = client.update_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_update_dataset](
    dataset, ["default_table_expiration_ms"]
)  # Make an API request.

full_dataset_id = "{}.{}".format(dataset.project, dataset.dataset_id)
print(
    "Updated dataset {} with new expiration {}".format(
        full_dataset_id, dataset.default_table_expiration_ms [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.dataset.Dataset.html?hl=ko#google_cloud_bigquery_dataset_Dataset_default_table_expiration_ms]
    )
)
기본 파티션 만료 시간 업데이트
다음 방법으로 데이터 세트의 기본 파티션 만료 시간을 업데이트할 수 있습니다.
bq 명령줄 도구의 bq update 명령어 사용
datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko] API 메서드 호출
클라이언트 라이브러리 사용
데이터 세트의 기본 파티션 만료 시간 설정 또는 업데이트는 현재 Google Cloud 콘솔에서 지원되지 않습니다.
새로 생성된 파티션을 나눈 모든 테이블에 영향을 미치는 데이터 세트 수준에서 기본 파티션 만료 시간을 설정하거나 파티션을 나눈 테이블을 만들 때 개별 테이블의 파티션 만료 [https://cloud.google.com/bigquery/docs/managing-partitioned-tables?hl=ko#partition-expiration] 시간을 설정할 수 있습니다. 데이터 세트 수준에서 기본 파티션 만료 시간을 설정하고 데이터 세트 수준에서 기본 테이블 만료 시간을 설정하면 새로운 파티션을 나눈 테이블에는 파티션 만료 시간만 있습니다. 두 옵션을 모두 설정하면 기본 파티션 만료 시간이 기본 테이블 만료 시간을 재정의합니다.
파티션을 나눈 테이블을 만들 때 파티션 만료 시간을 설정하면 이 값은 데이터 세트 수준 기본 파티션 만료 시간이 존재하는 경우 이를 재정의합니다.
데이터 세트 수준에서 기본 파티션 만료 시간을 설정하지 않고, 테이블을 만들 때 파티션 만료 시간을 설정하지 않으면 파티션이 만료되지 않으며 파티션을 수동으로 삭제 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#deleting_a_table]해야 합니다.
데이터 세트에서 기본 파티션 만료 시간을 설정하면 이 만료 시간이 데이터 세트에서 생성된 모든 파티션을 나눈 테이블의 모든 파티션에 적용됩니다. 테이블에 파티션 만료 시간을 설정하면 지정된 테이블에서 생성된 모든 파티션에 만료 시간이 적용됩니다. 현재는 같은 테이블에 있는 파티션마다 서로 다른 만료 시간을 적용할 수 없습니다.
데이터 세트의 기본 파티션 만료 시간 설정을 업데이트할 때는 다음에 유의하세요.
값을 never에서 정의된 만료 시간으로 변경할 경우 테이블 생성 시 파티션 만료 시간을 테이블에 설정하지 않았으면 데이터 세트의 파티션을 나눈 테이블에 이미 있는 파티션은 만료되지 않습니다.
기본 파티션 만료 시간 값을 변경하면 기존의 파티션을 나눈 테이블에 있는 모든 파티션이 원래의 기본 파티션 만료 시간에 따라 만료됩니다. 테이블 생성 시 다른 파티션 만료 시간을 테이블에 지정하지 않았으면 데이터 세트에서 생성되는 모든 새로운 파티션을 나눈 테이블에 새로운 기본 파티션 만료 시간 설정이 적용됩니다.
기본 파티션 만료 시간 값은 값이 설정된 위치에 따라 다르게 표시됩니다. 원하는 세부사항 수준에 따라 적절한 방법을 사용하세요.
bq 명령줄 도구에서는 만료 시간이 초 단위로 표시됩니다.
API에서는 만료 시간이 밀리초 단위로 표시됩니다.
데이터 세트의 기본 파티션 만료 시간을 업데이트하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#%EC%BD%98%EC%86%94] ---
현재 Google Cloud 콘솔에서는 데이터 세트의 기본 파티션 만료 시간 업데이트가 지원되지 않습니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#sql] ---
기본 파티션 만료 시간을 업데이트하려면 ALTER SCHEMA SET OPTIONS 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_schema_set_options_statement]을 사용하여 default_partition_expiration_days 옵션을 설정합니다.

다음 예시에서는 이름이 mydataset인 데이터 세트의 기본 파티션 만료 시간을 업데이트합니다.




 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

 ALTER SCHEMA mydataset
 SET OPTIONS(
     default_partition_expiration_days = 3.75);
 


play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#bq] ---
데이터 세트의 기본 만료 시간을 업데이트하려면 --default_partition_expiration 플래그를 사용하여 bq update 명령어를 입력합니다. 기본 프로젝트가 아닌 다른 프로젝트의 데이터 세트를 업데이트하려면 해당 프로젝트 ID를 project_id:dataset 형식으로 데이터 세트 이름에 추가합니다.

bq update \
--default_partition_expiration integer \
project_id:dataset

다음을 바꿉니다.


integer: 새로 생성된 파티션을 나눈 테이블의 파티션 기본 수명(초)입니다. 이 플래그에는 최솟값이 없습니다. 기존 만료 시간을 삭제하려면 0을 지정합니다. 파티션의 UTC 날짜 후 integer초가 지나면 새로 생성된 파티션을 나눈 테이블의 모든 파티션이 삭제됩니다. 테이블이 생성될 때 테이블에 파티션 만료 시간을 설정하지 않으면 이 값이 적용됩니다.
project_id: 프로젝트 ID입니다.
dataset: 업데이트할 데이터 세트의 이름입니다.


예를 들면 다음과 같습니다.

다음 명령어를 입력하면 mydataset에서 생성된 새로운 파티션을 나눈 테이블의 기본 파티션 만료 시간을 26시간(93,600초)으로 설정할 수 있습니다.
데이터 세트는 기본 프로젝트에 있습니다.
bq update --default_partition_expiration 93600 mydataset

다음 명령어를 입력하면 mydataset에서 생성된 새로운 파티션을 나눈 테이블의 기본 파티션 만료 시간을 26시간(93,600초)으로 설정할 수 있습니다.
데이터 세트는 기본 프로젝트가 아닌 myotherproject에 있습니다.
bq update --default_partition_expiration 93600 myotherproject:mydataset

--- 탭: API [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#api] ---
datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko]를 호출하고 데이터 세트 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]의 defaultPartitionExpirationMs 속성을 업데이트합니다.
만료 시간은 밀리초 단위로 표시됩니다. datasets.update 메서드는 전체 데이터 세트 리소스를 대체하므로 datasets.patch 메서드를 사용하는 것이 좋습니다.
반올림 모드 업데이트
ALTER SCHEMA SET OPTIONS DDL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_schema_set_options_statement]을 사용하여 데이터 세트의 기본 반올림 모드 [https://cloud.google.com/bigquery/docs/schemas?hl=ko#rounding_mode]를 업데이트할 수 있습니다. 다음 예시에서는 mydataset의 기본 반올림 모드를 ROUND_HALF_EVEN으로 업데이트합니다.
ALTER SCHEMA mydataset
SET OPTIONS (
  default_rounding_mode = "ROUND_HALF_EVEN");
이렇게 하면 데이터 세트에 생성된 새 테이블의 기본 반올림 모드가 설정됩니다. 기존 테이블에 추가된 새 열에는 영향이 미치지 않습니다. 데이터 세트의 테이블에 기본 반올림 모드를 설정하면 이 옵션이 재정의됩니다.
시간 이동 기간 업데이트
다음 방법으로 데이터 세트 시간 이동 기간을 업데이트할 수 있습니다.
Google Cloud 콘솔 사용
ALTER SCHEMA SET OPTIONS [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_schema_set_options_statement] 문 사용
bq 명령줄 도구의 bq update [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_update] 명령어 사용
datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko] 또는 datasets.update [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/update?hl=ko] API 메서드 호출. update 메서드는 전체 데이터 세트 리소스를 바꾸는 반면 patch 메서드는 제출된 데이터 세트 리소스에 제공된 필드만 바꿉니다.
시간 이동 기간에 대한 상세 설명은 시간 이동 기간 구성 [https://cloud.google.com/bigquery/docs/time-travel?hl=ko#configure_the_time_travel_window]을 참조하세요.
데이터 세트 시간 이동 기간을 업데이트하려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#%EC%BD%98%EC%86%94] ---
탐색기 패널에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
more_vert 작업 옵션을 펼치고 열기를 클릭합니다.
세부정보 패널에서 mode_edit
 세부정보 수정을 클릭합니다.
고급 옵션을 펼친 후 사용할 시간 이동 기간을 선택합니다.
저장을 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#sql] ---
데이터 세트를 변경할 때 시간 이동 기간을 지정하려면 max_time_travel_hours 옵션과 함께 ALTER SCHEMA SET OPTIONS [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_schema_set_options_statement] 문을 사용합니다. max_time_travel_hours 값은 24(48, 72, 96, 120, 144, 168)의 배수로 표현된 48(2일)에서 168(7일) 사이의 정수여야 합니다.






 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

ALTER SCHEMA DATASET_NAME
SET OPTIONS(
  max_time_travel_hours = HOURS);


다음을 바꿉니다.


DATASET_NAME: 업데이트할 데이터 세트의 이름
HOURS를 시간 이동 기간(시간)으로 바꿉니다.



play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

--- 탭: bq [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#bq] ---
데이터 세트를 변경할 때 --max_time_travel_hours 플래그와 함께 bq update [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_update] 명령어를 사용하여 이동 기간을 지정합니다. --max_time_travel_hours 값은 24(48, 72, 96, 120, 144, 168)의 배수로 표현된 48(2일)에서 168(7일) 사이의 정수여야 합니다.
bq update \
--dataset=true --max_time_travel_hours=HOURS \
PROJECT_ID:DATASET_NAME

다음을 바꿉니다.

  PROJECT_ID: 프로젝트 ID입니다.
  DATASET_NAME: 업데이트할 데이터 세트의 이름입니다.
  HOURS를 시간 이동 기간(시간)으로 바꿉니다.

--- 탭: API [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#api] ---
maxTimeTravelHours 필드에 값을 지정한 데이터 세트 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]를 정의하여 datasets.patch [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch?hl=ko] 또는 datasets.update [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/update?hl=ko] 메서드를 호출합니다. maxTimeTravelHours 값은 24(48, 72, 96, 120, 144, 168)의 배수로 표현된 48(2일)에서 168(7일) 사이의 정수여야 합니다.
스토리지 청구 모델 업데이트
데이터 세트에 대한 스토리지 결제 모델 [https://cloud.google.com/bigquery/docs/datasets-intro?hl=ko#dataset_storage_billing_models]을 변경할 수 있습니다. storage_billing_model 값을 PHYSICAL로 설정하여 스토리지 변경사항을 계산할 때 물리적 바이트를 사용하거나 LOGICAL로 설정하여 논리 바이트를 사용합니다. 기본값은 LOGICAL입니다.
데이터 세트의 청구 모델을 변경하면 변경사항이 적용되는 데 24시간 정도 걸립니다.
데이터 세트의 스토리지 청구 모델을 변경한 후에는 스토리지 청구 모델을 다시 변경할 수 있으려면 14일을 기다려야 합니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#%EC%BD%98%EC%86%94] ---
탐색기 패널에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
more_vert 작업 옵션을 펼치고 열기를 클릭합니다.
세부정보 패널에서 mode_edit
 세부정보 수정을 클릭합니다.
고급 옵션을 확장한 후 물리적 스토리지 청구 모델 사용 설정을 선택하여 물리적 스토리지 결제를 사용하거나 논리적 스토리지 결제를 사용하려면 선택 해제합니다.
저장을 클릭합니다.

--- 탭: SQL [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#sql] ---
데이터 세트에 대해 청구 모델을 업데이트하려면 ALTER SCHEMA SET OPTIONS 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language?hl=ko#alter_schema_set_options_statement]을 사용하고 storage_billing_model 옵션을 설정합니다.






 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 문을 입력합니다.

ALTER SCHEMA DATASET_NAME
SET OPTIONS(
 storage_billing_model = 'BILLING_MODEL');


다음을 바꿉니다.


DATASET_NAME을 변경하려는 데이터 세트의 이름으로 바꿉니다.
BILLING_MODEL을 사용하려는 스토리지 유형(LOGICAL 또는 PHYSICAL)으로 바꿉니다.



play_circle 실행을 클릭합니다.




쿼리를 실행하는 방법에 대한 자세한 내용은 대화형 쿼리 실행 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]을 참조하세요.

프로젝트의 모든 데이터 세트에 대해 스토리지 청구 모델을 업데이트하려면 데이터 세트가 있는 모든 리전에 대해 다음 SQL 쿼리를 사용합니다.

FOR record IN
 (SELECT CONCAT(catalog_name, '.', schema_name) AS dataset_path
 FROM PROJECT_ID.region-REGION.INFORMATION_SCHEMA.SCHEMATA)
DO
 EXECUTE IMMEDIATE
   "ALTER SCHEMA `" || record.dataset_path || "` SET OPTIONS(storage_billing_model = 'BILLING_MODEL')";
END FOR;

다음을 바꿉니다.


PROJECT_ID를 프로젝트 ID로 바꿉니다.
REGION을 리전 한정자 [https://cloud.google.com/bigquery/docs/information-schema-intro?hl=ko#region_qualifier]로 바꿉니다.
BILLING_MODEL을 사용하려는 스토리지 유형(LOGICAL 또는 PHYSICAL)으로 바꿉니다.

--- 탭: bq [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#bq] ---
데이터 세트에 대해 청구 모델을 업데이트하려면 bq update 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#bq_update]를 사용하고 --storage_billing_model 플래그를 설정합니다.

bq update -d --storage_billing_model=BILLING_MODEL PROJECT_ID:DATASET_NAME

다음을 바꿉니다.

  PROJECT_ID: 프로젝트 ID입니다.
  DATASET_NAME: 업데이트할 데이터 세트의 이름입니다.
  BILLING_MODEL: 사용하려는 스토리지 유형입니다(LOGICAL 또는 PHYSICAL).

--- 탭: API [https://cloud.google.com/bigquery/docs/updating-datasets?hl=ko#api] ---
storageBillingModel 필드가 설정된 정의된 데이터 세트 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]로 datasets.update 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/update?hl=ko]를 호출합니다.

다음 예시에서는 curl을 사용하여 datasets.update를 호출하는 방법을 보여줍니다.

curl -H "Authorization: Bearer $(gcloud auth print-access-token)" -H "Content-Type: application/json" -L -X PUT https://bigquery.googleapis.com/bigquery/v2/projects/PROJECT_ID/datasets/DATASET_ID -d '{"datasetReference": {"projectId": "PROJECT_ID", "datasetId": "DATASET_NAME"}, "storageBillingModel": "BILLING_MODEL"}'

다음을 바꿉니다.

  PROJECT_ID: 프로젝트 ID입니다.
  DATASET_NAME: 업데이트할 데이터 세트의 이름입니다.
  BILLING_MODEL: 사용하려는 스토리지 유형입니다(LOGICAL 또는 PHYSICAL).
액세스 제어 업데이트
BigQuery에서 데이터 세트에 대한 액세스를 제어하려면 데이터 세트에 대한 액세스 제어 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko]를 참조하세요. 데이터 암호화에 대한 자세한 내용은 저장 데이터 암호화 [https://cloud.google.com/bigquery/docs/encryption-at-rest?hl=ko]를 참조하세요.
다음 단계
데이터 세트 만들기에 대한 자세한 내용은 데이터 세트 만들기 [https://cloud.google.com/bigquery/docs/datasets?hl=ko]를 참조하세요.
데이터 세트 관리에 대한 자세한 내용은 데이터 세트 관리 [https://cloud.google.com/bigquery/docs/managing-datasets?hl=ko]를 참조하세요.
도움이 되었나요?
의견 보내기