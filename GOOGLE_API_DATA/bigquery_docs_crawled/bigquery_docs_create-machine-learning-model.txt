Source URL: https://cloud.google.com/bigquery/docs/create-machine-learning-model

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
목표 [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#objectives]
비용 [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#costs]
필요한 역할 [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#required_roles]
시작하기 전에 [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#before-you-begin]
데이터 세트 만들기 [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#create_a_dataset]
SQL을 사용하여 BigQuery ML에서 머신러닝 모델 만들기
bookmark_border
이 튜토리얼에서는 BigQuery ML SQL 쿼리를 사용하여 로지스틱 회귀 모델을 만드는 방법을 보여줍니다.
BigQuery ML을 사용하면 SQL 쿼리를 사용하여 BigQuery에서 머신러닝 모델을 만들고 학습할 수 있습니다. 이를 통해 BigQuery SQL 편집기와 같은 익숙한 도구를 사용할 수 있으므로 머신러닝에 보다 쉽게 접근할 수 있으며, 데이터를 별도의 머신러닝 환경으로 이동할 필요가 없어 개발 속도가 향상됩니다.
이 가이드에서는 BigQuery용 Google 애널리틱스 샘플 데이터세트 [https://support.google.com/analytics/answer/7586738?ref_topic=3416089&hl=ko]를 사용하여 웹사이트 방문자의 트랜잭션 여부를 예측하는 모델을 만듭니다. 애널리틱스 데이터 세트 스키마에 대한 자세한 내용은 애널리틱스 고객센터의 BigQuery Export 스키마 [https://support.google.com/analytics/answer/3437719?hl=ko]를 참조하세요.
Google Cloud 콘솔 사용자 인터페이스를 사용하여 모델을 만드는 방법을 알아보려면 UI를 사용하여 모델 작업하기 [https://cloud.google.com/bigquery/docs/create-machine-learning-model-console?hl=ko]를 참고하세요. (미리보기 [https://cloud.google.com/products?hl=ko#product-launch-stages])
목표
이 튜토리얼에서는 다음 작업을 수행하는 방법을 보여줍니다.
CREATE MODEL 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create?hl=ko]을 사용하여 바이너리 로지스틱 회귀 모델을 만듭니다.
ML.EVALUATE [https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-evaluate?hl=ko] 함수: 모델을 평가합니다.
ML.PREDICT 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-predict?hl=ko]를 사용하여 모델을 통해 예측합니다.
비용
이 튜토리얼에서는 비용이 청구될 수 있는 다음과 같은 Google Cloud구성요소를 사용합니다.
BigQuery
BigQuery ML
BigQuery 비용에 대한 자세한 내용은 BigQuery 가격 책정 [https://cloud.google.com/bigquery/pricing?hl=ko] 페이지를 참조하세요.
BigQuery ML 비용에 대한 자세한 내용은 BigQuery ML 가격 책정 [https://cloud.google.com/bigquery/pricing?hl=ko#bqml]을 참조하세요.
필요한 역할
모델을 만들고 추론을 실행하려면 다음 역할이 부여되어야 합니다.
BigQuery 데이터 편집자(roles/bigquery.dataEditor)
BigQuery 사용자(roles/bigquery.user)
시작하기 전에
Sign in to your Google Cloud account. If you're new to Google Cloud, create an account [https://console.cloud.google.com/freetrial?hl=ko] to evaluate how our products perform in real-world scenarios. New customers also get $300 in free credits to run, test, and deploy workloads.
In the Google Cloud console, on the project selector page, select or create a Google Cloud project.
Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project.
Go to project selector [https://console.cloud.google.com/projectselector2/home/dashboard?hl=ko]
Verify that billing is enabled for your Google Cloud project [https://cloud.google.com/billing/docs/how-to/verify-billing-enabled?hl=ko#confirm_billing_is_enabled_on_a_project].
Make sure that you have the following role or roles on the project: BigQuery Data Editor, BigQuery Job User, Service Usage Admin
Check for the roles
Grant the roles
BigQuery는 새 프로젝트에서 자동으로 사용 설정됩니다. 기존 프로젝트에서 BigQuery를 활성화하려면 다음으로 이동합니다.
Enable the BigQuery API.
Enable the API [https://console.cloud.google.com/flows/enableapi?apiid=bigquery&hl=ko]
데이터 세트 만들기
ML 모델을 저장할 BigQuery 데이터 세트를 만듭니다.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#%EC%BD%98%EC%86%94] ---
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery 페이지로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 창에서 프로젝트 이름을 클릭합니다.
more_vert 작업 보기 > 데이터 세트 만들기를 클릭합니다.


데이터 세트 만들기 페이지에서 다음을 수행합니다.


데이터 세트 ID에 bqml_tutorial를 입력합니다.
위치 유형에 대해 멀티 리전을 선택한 다음 US(미국 내 여러 리전)를 선택합니다.
나머지 기본 설정은 그대로 두고 데이터 세트 만들기를 클릭합니다.

--- 탭: bq [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#bq] ---
새 데이터 세트를 만들려면 --location 플래그와 함께 bq mk [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#mk-dataset] 명령어를 실행합니다. 사용할 수 있는 전체 파라미터 목록은 bq mk --dataset 명령어 [https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=ko#mk-dataset] 참조를 확인하세요.


데이터 위치가 US로 설정되고 설명이 BigQuery ML tutorial dataset인 bqml_tutorial 데이터 세트를 만듭니다.

bq --location=US mk -d \
 --description "BigQuery ML tutorial dataset." \
 bqml_tutorial

--dataset 플래그를 사용하는 대신 이 명령어는 -d 단축키를 사용합니다.
-d와 --dataset를 생략하면 이 명령어는 기본적으로 데이터 세트를 만듭니다.
데이터 세트가 생성되었는지 확인합니다.

bq ls

--- 탭: API [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#api] ---
데이터 세트 리소스 [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets?hl=ko]가 정의된 datasets.insert [https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/insert?hl=ko] 메서드를 호출합니다.

{
  "datasetReference": {
     "datasetId": "bqml_tutorial"
  }
}

--- 탭: BigQuery DataFrames [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#bigquery-dataframes] ---
이 샘플을 사용해 보기 전에 BigQuery DataFrames를 사용하여 BigQuery 빠른 시작 [https://cloud.google.com/bigquery/docs/dataframes-quickstart?hl=ko]의 BigQuery DataFrames 설정 안내를 따르세요.
    자세한 내용은 BigQuery DataFrames 참고 문서 [https://cloud.google.com/python/docs/reference/bigframes/latest?hl=ko]를 확인하세요.
  BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
    자세한 내용은 로컬 개발 환경의 ADC 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.
   











  
  
  
  





  
  
  
    
  




  



  











  



  
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import google.cloud.bigquery

bqclient = google.cloud.bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()
bqclient.create_dataset [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_create_dataset]("bqml_tutorial", exists_ok=True)
로지스틱 회귀 모델 만들기
BigQuery용 애널리틱스 샘플 데이터 세트를 사용하여 로지스틱 회귀 모델을 만듭니다.
--- 탭: SQL [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#sql] ---
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 쿼리를 실행합니다.

CREATE OR REPLACE MODEL `bqml_tutorial.sample_model`
OPTIONS(model_type='logistic_reg') AS
SELECT
IF(totals.transactions IS NULL, 0, 1) AS label,
IFNULL(device.operatingSystem, "") AS os,
device.isMobile AS is_mobile,
IFNULL(geoNetwork.country, "") AS country,
IFNULL(totals.pageviews, 0) AS pageviews
FROM
`bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
_TABLE_SUFFIX BETWEEN '20160801' AND '20170630'

쿼리가 완료되는 데 몇 분 정도 걸립니다. 첫 번째 반복이 완료되면 탐색 패널에 모델(sample_model)이 나타납니다.
이 쿼리에서는 CREATE MODEL 문을 사용하여 모델을 만들므로 쿼리 결과가 표시되지 않습니다.


쿼리 세부정보

CREATE MODEL 문은 모델을 만든 다음 쿼리의 SELECT 문으로 검색된 데이터를 사용하여 모델을 학습시킵니다.

OPTIONS(model_type='logistic_reg') 절은 로지스틱 회귀 [https://en.wikipedia.org/wiki/Logistic_regression] 모델을 만듭니다. 로지스틱 회귀 모델은 입력 데이터를 두 클래스로 분할한 후 데이터가 클래스 중 하나일 확률을 추정합니다. 감지하려는 항목(예: 이메일이 스팸인지 여부)은 1로 표시되고 다른 값은 0으로 표시됩니다. 감지하려는 클래스에 속할 가능성은 0과 1 사이의 값으로 표시됩니다.
예를 들어 이메일의 확률 추정치가 0.9이면 해당 이메일이 스팸일 확률이 90%입니다.

이 쿼리의 SELECT 구문은 고객이 트랜잭션을 완료할 확률을 예측하는 모델에서 사용되는 다음 열을 검색합니다.


totals.transactions - 세션 내 총 전자상거래 수입니다. 거래 수가 NULL이면 label 열의 값이 0으로 설정됩니다. 그렇지 않으면 열의 값은 1로 설정됩니다. 이러한 값은 가능한 결과를 나타냅니다. CREATE MODEL 문에 input_label_cols= 옵션을 설정하는 대신 label이라는 별칭을 만들 수 있습니다.
device.operatingSystem - 방문자 기기의 운영체제입니다.
device.isMobile — 방문자 기기가 휴대기기인지를 나타냅니다.
geoNetwork.country - IP 주소를 기준으로 세션이 시작된 국가입니다.
totals.pageviews - 세션 내 총 페이지 조회수입니다.


FROM 절: 쿼리에서 bigquery-public-data.google_analytics_sample.ga_sessions 샘플 테이블을 사용하여 모델을 학습시키도록 합니다.
이러한 테이블은 날짜별로 샤딩되므로 테이블 이름에 와일드카드(google_analytics_sample.ga_sessions_*)를 사용하여 집계합니다.

WHERE 절인 _TABLE_SUFFIX BETWEEN '20160801' AND '20170630'은 쿼리로 검사하는 테이블 수를 제한합니다. 검사 기간은 2016년 8월 1일부터 2017년 6월 30일까지입니다.

--- 탭: BigQuery DataFrames [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#bigquery-dataframes] ---
이 샘플을 사용해 보기 전에 BigQuery DataFrames를 사용하여 BigQuery 빠른 시작 [https://cloud.google.com/bigquery/docs/dataframes-quickstart?hl=ko]의 BigQuery DataFrames 설정 안내를 따르세요.
    자세한 내용은 BigQuery DataFrames 참고 문서 [https://cloud.google.com/python/docs/reference/bigframes/latest?hl=ko]를 확인하세요.
  BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
    자세한 내용은 로컬 개발 환경의 ADC 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.
   











  
  
  
  





  
  
  
    
  




  



  









  



  
  
  
  
  




















  





  
    
  
  











  









  




  



  


  from bigframes.ml.linear_model import LogisticRegression
import bigframes.pandas as bpd

# Start by selecting the data you'll use for training. `read_gbq` accepts
# either a SQL query or a table ID. Since this example selects from multiple
# tables via a wildcard, use SQL to define this data. Watch issue
# https://github.com/googleapis/python-bigquery-dataframes/issues/169
# for updates to `read_gbq` to support wildcard tables.

df = bpd.read_gbq_table(
    "bigquery-public-data.google_analytics_sample.ga_sessions_*",
    filters=[
        ("_table_suffix", ">=", "20160801"),
        ("_table_suffix", "<=", "20170630"),
    ],
)

# Extract the total number of transactions within
# the Google Analytics session.
#
# Because the totals column is a STRUCT data type, call
# Series.struct.field("transactions") to extract the transactions field.
# See the reference documentation below:
# https://cloud.google.com/python/docs/reference/bigframes/latest/bigframes.operations.structs.StructAccessor#bigframes_operations_structs_StructAccessor_field
transactions = df["totals"].struct.field("transactions")

# The "label" values represent the outcome of the model's
# prediction. In this case, the model predicts if there are any
# ecommerce transactions within the Google Analytics session.
# If the number of transactions is NULL, the value in the label
# column is set to 0. Otherwise, it is set to 1.
label = transactions.notnull().map({True: 1, False: 0}).rename("label")

# Extract the operating system of the visitor's device.
operating_system = df["device"].struct.field("operatingSystem")
operating_system = operating_system.fillna("")

# Extract whether the visitor's device is a mobile device.
is_mobile = df["device"].struct.field("isMobile")

# Extract the country from which the sessions originated, based on the IP address.
country = df["geoNetwork"].struct.field("country").fillna("")

# Extract the total number of page views within the session.
pageviews = df["totals"].struct.field("pageviews").fillna(0)

# Combine all the feature columns into a single DataFrame
# to use as training data.
features = bpd.DataFrame(
    {
        "os": operating_system,
        "is_mobile": is_mobile,
        "country": country,
        "pageviews": pageviews,
    }
)

# Logistic Regression model splits data into two classes, giving the
# a confidence score that the data is in one of the classes.
model = LogisticRegression()
model.fit(features, label)

# The model.fit() call above created a temporary model.
# Use the to_gbq() method to write to a permanent location.
model.to_gbq(
    your_model_id,  # For example: "bqml_tutorial.sample_model",
    replace=True,
)
모델의 손실 통계 보기
머신러닝에서는 데이터를 사용하여 예측할 수 있는 모델을 만듭니다. 모델은 기본적으로 입력을 받으면 입력에 계산을 적용하여 예측 출력을 생성하는 함수입니다.
머신러닝 알고리즘은 예측이 이미 알려져 있는 여러 예(사용자 구매의 이전 데이터 등)를 사용하고 모델의 여러 가중치를 반복적으로 조정하여 작동합니다. 이에 따라 모델의 예측이 실제 값과 일치하게 됩니다. 모델이 잘못되었음을 나타내는 손실이라는 통계를 최소화하여 이를 수행합니다.
반복할 때마다 손실이 감소할 것입니다(이상적으로는 0으로). 손실이 0인 경우 이는 모델이 100% 정확하다는 것을 의미합니다.
모델 학습 시 BigQuery ML은 모델의 과적합 [https://en.wikipedia.org/wiki/Overfitting]을 방지하기 위해 입력 데이터를 자동으로 학습 및 평가 세트 [https://en.wikipedia.org/wiki/Training,_validation,_and_test_data_sets]로 분할합니다. 이는 학습 알고리즘이 새로운 예로 일반화하지 않은 학습 데이터에 너무 근접하게 맞춰지지 않도록 하기 위해 필요합니다.
Google Cloud 콘솔을 사용하여 모델의 손실이 모델의 학습 반복에 따라 어떻게 변하는지 확인합니다.
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.
BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko]
탐색기 창에서 bqml_tutorial > Models를 펼친 다음 sample_model을 클릭합니다.
학습 탭을 클릭하고 손실 그래프를 확인합니다. 손실 그래프는 학습 데이터 세트의 반복에 따른 손실 측정항목의 변화를 보여줍니다. 그래프 위로 커서를 가져가면 학습 손실 및 평가 손실 선이 표시됩니다. 로지스틱 회귀를 실행했으므로 학습 데이터로 로그 손실 [https://en.wikipedia.org/wiki/Cross-entropy#Cross-entropy_loss_function_and_logistic_regression]을 사용하여 학습 손실 값이 계산됩니다. 평가 손실은 평가 데이터에서 계산된 로그 손실입니다. 두 손실 유형 모두 각 반복에 대해 해당 데이터 세트의 모든 예시에서 평균을 낸 평균 손실 값을 나타냅니다.
ML.TRAINING_INFO 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-train?hl=ko]를 사용하여 모델 학습 결과를 확인할 수도 있습니다.
모델 평가
ML.EVALUATE 함수를 사용하여 모델의 성능을 평가합니다. ML.EVALUATE 함수는 실제 데이터를 기준으로 모델이 생성한 예측 값을 평가합니다. 로지스틱 회귀 특정 측정항목을 계산하려면 ML.ROC_CURVE SQL 함수 [https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-roc?hl=ko] 또는 bigframes.ml.metrics.roc_curve BigQuery DataFrames 함수 [https://cloud.google.com/python/docs/reference/bigframes/latest/bigframes.ml.metrics?hl=ko#bigframes_ml_metrics_roc_curve]를 사용하면 됩니다.
이 튜토리얼에서는 트랜잭션을 감지하는 이진 분류 모델을 사용합니다. label 열의 값은 모델에서 생성된 두 클래스인 0 (트랜잭션 없음) 및 1 (트랜잭션 수행)입니다.
--- 탭: SQL [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#sql] ---
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 쿼리를 실행합니다.

SELECT
*
FROM
ML.EVALUATE(MODEL `bqml_tutorial.sample_model`, (
SELECT
IF(totals.transactions IS NULL, 0, 1) AS label,
IFNULL(device.operatingSystem, "") AS os,
device.isMobile AS is_mobile,
IFNULL(geoNetwork.country, "") AS country,
IFNULL(totals.pageviews, 0) AS pageviews
FROM
`bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
_TABLE_SUFFIX BETWEEN '20170701' AND '20170801'))

다음과 같은 결과가 표시됩니다.

  +--------------------+---------------------+---------------------+---------------------+---------------------+--------------------+
  |     precision      |       recall        |      accuracy       |      f1_score       |      log_loss       | roc_auc                   |
  +--------------------+---------------------+---------------------+---------------------+---------------------+--------------------+
  | 0.468503937007874  | 0.11080074487895716 | 0.98534315834767638 | 0.17921686746987953 | 0.04624221101176898    | 0.98174125874125873 |
  +--------------------+---------------------+---------------------+---------------------+---------------------+--------------------+
  

로지스틱 회귀를 수행했으므로 결과에 다음 열이 포함됩니다.


precision [https://developers.google.com/machine-learning/glossary/?hl=ko#precision]: 분류 모델의 측정항목입니다. 정밀도는 포지티브 클래스 예측 시 모델의 정확한 빈도를 식별합니다.
recall [https://developers.google.com/machine-learning/glossary/?hl=ko#recall]: 가능한 모든 양성 라벨 중에서 정확하게 식별한 모델은 몇 개입니까'라는 질문에 답하는 분류 모델의 측정항목입니다.
accuracy [https://developers.google.com/machine-learning/glossary/?hl=ko#accuracy]: 정확도는 분류 모델이 바르게 되었다고 예측하는 비율입니다.
f1_score [https://en.wikipedia.org/wiki/F1_score]: 모델의 정확도를 나타내는 측정값입니다. f1 점수는 정밀도와 재현율의 조화 평균입니다. f1 점수의 최고 값은 1입니다. 최저 값은 0입니다.
log_loss [https://en.wikipedia.org/wiki/Cross_entropy#Cross-entropy_error_function_and_logistic_regression]: 로지스틱 회귀에 사용되는 손실 함수입니다. 모델 예측과 올바른 라벨 간의 차이 정도를 나타내는 척도입니다.
roc_auc [https://developers.google.com/machine-learning/glossary/?hl=ko#AUC]: ROC [https://developers.google.com/machine-learning/glossary/?hl=ko#ROC] 곡선 아래 영역입니다. 분류 기준에서 임의로 선택한 양성 예시가 실제로 양성일 확률이 임의로 선택한 음성 예시가 양성일 확률보다 높습니다. 자세한 내용은 머신러닝 단기집중과정의 분류 [https://developers.google.com/machine-learning/crash-course/classification/video-lecture?hl=ko]를 참조하세요.



쿼리 세부정보

초기 SELECT 문은 모델에서 열을 검색합니다.

FROM 절은 모델에 ML.EVALUATE 함수를 사용합니다.

중첩된 SELECT 문과 FROM 절은 CREATE MODEL 쿼리에 있는 것과 동일합니다.

WHERE 절인 _TABLE_SUFFIX BETWEEN '20170701' AND '20170801'은 쿼리로 검사하는 테이블 수를 제한합니다. 검사 기간은 2017년 7월 1일부터 2017년 8월 1일까지입니다. 모델의 예측 성능을 평가하는 데 사용하는 데이터입니다. 학습 데이터가 스팬된 기간의 바로 다음 달에 수집되었습니다.

--- 탭: BigQuery DataFrames [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#bigquery-dataframes] ---
이 샘플을 사용해 보기 전에 BigQuery DataFrames를 사용하여 BigQuery 빠른 시작 [https://cloud.google.com/bigquery/docs/dataframes-quickstart?hl=ko]의 BigQuery DataFrames 설정 안내를 따르세요.
    자세한 내용은 BigQuery DataFrames 참고 문서 [https://cloud.google.com/python/docs/reference/bigframes/latest?hl=ko]를 확인하세요.
  BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
    자세한 내용은 로컬 개발 환경의 ADC 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.
   











  
  
  
  





  
  
  
    
  




  



  









  



  
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import bigframes.pandas as bpd

# Select model you'll use for evaluating. `read_gbq_model` loads model data from a
# BigQuery, but you could also use the `model` object from the previous steps.
model = bpd.read_gbq_model(
    your_model_id,  # For example: "bqml_tutorial.sample_model",
)

# The filters parameter limits the number of tables scanned by the query.
# The date range scanned is July 1, 2017 to August 1, 2017. This is the
# data you're using to evaluate the predictive performance of the model.
# It was collected in the month immediately following the time period
# spanned by the training data.
df = bpd.read_gbq_table(
    "bigquery-public-data.google_analytics_sample.ga_sessions_*",
    filters=[
        ("_table_suffix", ">=", "20170701"),
        ("_table_suffix", "<=", "20170801"),
    ],
)

transactions = df["totals"].struct.field("transactions")
label = transactions.notnull().map({True: 1, False: 0}).rename("label")
operating_system = df["device"].struct.field("operatingSystem")
operating_system = operating_system.fillna("")
is_mobile = df["device"].struct.field("isMobile")
country = df["geoNetwork"].struct.field("country").fillna("")
pageviews = df["totals"].struct.field("pageviews").fillna(0)
features = bpd.DataFrame(
    {
        "os": operating_system,
        "is_mobile": is_mobile,
        "country": country,
        "pageviews": pageviews,
    }
)

# Some models include a convenient .score(X, y) method for evaluation with a preset accuracy metric:

# Because you performed a logistic regression, the results include the following columns:

# - precision — A metric for classification models. Precision identifies the frequency with
# which a model was correct when predicting the positive class.

# - recall — A metric for classification models that answers the following question:
# Out of all the possible positive labels, how many did the model correctly identify?

# - accuracy — Accuracy is the fraction of predictions that a classification model got right.

# - f1_score — A measure of the accuracy of the model. The f1 score is the harmonic average of
# the precision and recall. An f1 score's best value is 1. The worst value is 0.

# - log_loss — The loss function used in a logistic regression. This is the measure of how far the
# model's predictions are from the correct labels.

# - roc_auc — The area under the ROC curve. This is the probability that a classifier is more confident that
# a randomly chosen positive example
# is actually positive than that a randomly chosen negative example is positive. For more information,
# see ['Classification']('https://developers.google.com/machine-learning/crash-course/classification/video-lecture')
# in the Machine Learning Crash Course.

model.score(features, label)
#    precision    recall  accuracy  f1_score  log_loss   roc_auc
# 0   0.412621  0.079143  0.985074  0.132812  0.049764  0.974285
# [1 rows x 6 columns]
모델을 사용하여 결과 예측
모델을 사용하여 국가별 웹사이트 방문자가 수행한 트랜잭션 수를 예측합니다.
--- 탭: SQL [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#sql] ---
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 쿼리를 실행합니다.

SELECT
country,
SUM(predicted_label) as total_predicted_purchases
FROM
ML.PREDICT(MODEL `bqml_tutorial.sample_model`, (
SELECT
IFNULL(device.operatingSystem, "") AS os,
device.isMobile AS is_mobile,
IFNULL(totals.pageviews, 0) AS pageviews,
IFNULL(geoNetwork.country, "") AS country
FROM
`bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
_TABLE_SUFFIX BETWEEN '20170701' AND '20170801'))
GROUP BY country
ORDER BY total_predicted_purchases DESC
LIMIT 10

다음과 같은 결과가 표시됩니다.

+----------------+---------------------------+
|    country     | total_predicted_purchases |
+----------------+---------------------------+
| United States  |                       220 |
| Taiwan         |                         8 |
| Canada         |                         7 |
| India          |                         2 |
| Turkey         |                         2 |
| Japan          |                         2 |
| Italy          |                         1 |
| Brazil         |                         1 |
| Singapore      |                         1 |
| Australia      |                         1 |
+----------------+---------------------------+



쿼리 세부정보

초기 SELECT 문은 country 열을 검색하고 predicted_label 열을 합산합니다. predicted_label 열은 ML.PREDICT 함수에서 생성됩니다. ML.PREDICT 함수를 사용할 때 모델의 출력 열 이름은 predicted_<label_column_name>입니다. 선형 회귀 모델에서 predicted_label은 label의 예상 값입니다.
로지스틱 회귀 모델에서 predicted_label은 주어진 입력 데이터 값(0 또는 1)을 가장 잘 설명하는 라벨입니다.

ML.PREDICT 함수는 모델을 사용하여 결과를 예측할 때 사용됩니다.

중첩된 SELECT 문과 FROM 절은 CREATE MODEL 쿼리에 있는 것과 동일합니다.

WHERE 절인 _TABLE_SUFFIX BETWEEN '20170701' AND '20170801'은 쿼리로 검사하는 테이블 수를 제한합니다. 검사 기간은 2017년 7월 1일부터 2017년 8월 1일까지입니다. 이는 예측을 수행하는 데이터입니다. 학습 데이터가 스팬된 기간의 바로 다음 달에 수집되었습니다.

GROUP BY 및 ORDER BY 절은 국가별로 결과를 그룹화하고 예측된 구매 합계를 내림차순으로 정렬합니다.

여기에서 LIMIT 절을 사용하여 상위 10개 결과만 표시합니다.

--- 탭: BigQuery DataFrames [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#bigquery-dataframes] ---
이 샘플을 사용해 보기 전에 BigQuery DataFrames를 사용하여 BigQuery 빠른 시작 [https://cloud.google.com/bigquery/docs/dataframes-quickstart?hl=ko]의 BigQuery DataFrames 설정 안내를 따르세요.
    자세한 내용은 BigQuery DataFrames 참고 문서 [https://cloud.google.com/python/docs/reference/bigframes/latest?hl=ko]를 확인하세요.
  BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
    자세한 내용은 로컬 개발 환경의 ADC 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.
   











  
  
  
  





  
  
  
    
  




  



  









  



  
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import bigframes.pandas as bpd

# Select model you'll use for predicting.
# `read_gbq_model` loads model data from
# BigQuery, but you could also use the `model`
# object from the previous steps.
model = bpd.read_gbq_model(
    your_model_id,  # For example: "bqml_tutorial.sample_model",
)

# The filters parameter limits the number of tables scanned by the query.
# The date range scanned is July 1, 2017 to August 1, 2017. This is the
# data you're using to make the prediction.
# It was collected in the month immediately following the time period
# spanned by the training data.
df = bpd.read_gbq_table(
    "bigquery-public-data.google_analytics_sample.ga_sessions_*",
    filters=[
        ("_table_suffix", ">=", "20170701"),
        ("_table_suffix", "<=", "20170801"),
    ],
)

operating_system = df["device"].struct.field("operatingSystem")
operating_system = operating_system.fillna("")
is_mobile = df["device"].struct.field("isMobile")
country = df["geoNetwork"].struct.field("country").fillna("")
pageviews = df["totals"].struct.field("pageviews").fillna(0)
features = bpd.DataFrame(
    {
        "os": operating_system,
        "is_mobile": is_mobile,
        "country": country,
        "pageviews": pageviews,
    }
)
# Use Logistic Regression predict method to predict results
# using your model.
# Find more information here in
# [BigFrames](https://cloud.google.com/python/docs/reference/bigframes/latest/bigframes.ml.linear_model.LogisticRegression#bigframes_ml_linear_model_LogisticRegression_predict)

predictions = model.predict(features)

# Call groupby method to group predicted_label by country.
# Call sum method to get the total_predicted_label by country.
total_predicted_purchases = predictions.groupby(["country"])[
    ["predicted_label"]
].sum()

# Call the sort_values method with the parameter
# ascending = False to get the highest values.
# Call head method to limit to the 10 highest values.
total_predicted_purchases.sort_values(ascending=False).head(10)

# country
# United States    220
# Taiwan             8
# Canada             7
# India              2
# Japan              2
# Turkey             2
# Australia          1
# Brazil             1
# Germany            1
# Guyana             1
# Name: predicted_label, dtype: Int64
사용자당 구매 예측
각 웹사이트 방문자가 수행할 트랜잭션 수를 예측합니다.
--- 탭: SQL [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#sql] ---
이 쿼리는 GROUP BY 절을 제외하고 이전 섹션의 쿼리와 동일합니다. 여기서 GROUP BY 절인 GROUP BY fullVisitorId는 방문자 ID별로 결과를 그룹화하는 데 사용됩니다.


 Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
쿼리 편집기에서 다음 쿼리를 실행합니다.

SELECT
fullVisitorId,
SUM(predicted_label) as total_predicted_purchases
FROM
ML.PREDICT(MODEL `bqml_tutorial.sample_model`, (
SELECT
IFNULL(device.operatingSystem, "") AS os,
device.isMobile AS is_mobile,
IFNULL(totals.pageviews, 0) AS pageviews,
IFNULL(geoNetwork.country, "") AS country,
fullVisitorId
FROM
`bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
_TABLE_SUFFIX BETWEEN '20170701' AND '20170801'))
GROUP BY fullVisitorId
ORDER BY total_predicted_purchases DESC
LIMIT 10

다음과 같은 결과가 표시됩니다.

  +---------------------+---------------------------+
  |    fullVisitorId    | total_predicted_purchases |
  +---------------------+---------------------------+
  | 9417857471295131045 |                         4 |
  | 112288330928895942  |                         2 |
  | 2158257269735455737 |                         2 |
  | 489038402765684003  |                         2 |
  | 057693500927581077  |                         2 |
  | 2969418676126258798 |                         2 |
  | 5073919761051630191 |                         2 |
  | 7420300501523012460 |                         2 |
  | 0456807427403774085 |                         2 |
  | 2105122376016897629 |                         2 |
  +---------------------+---------------------------+

--- 탭: BigQuery DataFrames [https://cloud.google.com/bigquery/docs/create-machine-learning-model?hl=ko#bigquery-dataframes] ---
이 샘플을 사용해 보기 전에 BigQuery DataFrames를 사용하여 BigQuery 빠른 시작 [https://cloud.google.com/bigquery/docs/dataframes-quickstart?hl=ko]의 BigQuery DataFrames 설정 안내를 따르세요.
    자세한 내용은 BigQuery DataFrames 참고 문서 [https://cloud.google.com/python/docs/reference/bigframes/latest?hl=ko]를 확인하세요.
  BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
    자세한 내용은 로컬 개발 환경의 ADC 설정 [https://cloud.google.com/docs/authentication/set-up-adc-local-dev-environment?hl=ko]을 참조하세요.
   











  
  
  
  





  
  
  
    
  




  



  









  



  
  
  
  
  




















  





  
    
  
  











  









  




  



  


  
import bigframes.pandas as bpd

# Select model you'll use for predicting.
# `read_gbq_model` loads model data from
# BigQuery, but you could also use the `model`
# object from the previous steps.
model = bpd.read_gbq_model(
    your_model_id,  # For example: "bqml_tutorial.sample_model",
)

# The filters parameter limits the number of tables scanned by the query.
# The date range scanned is July 1, 2017 to August 1, 2017. This is the
# data you're using to make the prediction.
# It was collected in the month immediately following the time period
# spanned by the training data.
df = bpd.read_gbq_table(
    "bigquery-public-data.google_analytics_sample.ga_sessions_*",
    filters=[
        ("_table_suffix", ">=", "20170701"),
        ("_table_suffix", "<=", "20170801"),
    ],
)

operating_system = df["device"].struct.field("operatingSystem")
operating_system = operating_system.fillna("")
is_mobile = df["device"].struct.field("isMobile")
country = df["geoNetwork"].struct.field("country").fillna("")
pageviews = df["totals"].struct.field("pageviews").fillna(0)
full_visitor_id = df["fullVisitorId"]

features = bpd.DataFrame(
    {
        "os": operating_system,
        "is_mobile": is_mobile,
        "country": country,
        "pageviews": pageviews,
        "fullVisitorId": full_visitor_id,
    }
)

predictions = model.predict(features)

# Call groupby method to group predicted_label by visitor.
# Call sum method to get the total_predicted_label by visitor.
total_predicted_purchases = predictions.groupby(["fullVisitorId"])[
    ["predicted_label"]
].sum()

# Call the sort_values method with the parameter
# ascending = False to get the highest values.
# Call head method to limit to the 10 highest values.
total_predicted_purchases.sort_values(ascending=False).head(10)

# fullVisitorId
# 9417857471295131045    4
# 0376394056092189113    2
# 0456807427403774085    2
# 057693500927581077     2
# 112288330928895942     2
# 1280993661204347450    2
# 2105122376016897629    2
# 2158257269735455737    2
# 2969418676126258798    2
# 489038402765684003     2
# Name: predicted_label, dtype: Int64
삭제
이 페이지에서 사용한 리소스 비용이 Google Cloud 계정에 청구되지 않도록 하려면 다음 단계를 수행합니다.
만든 프로젝트를 삭제하거나 프로젝트는 유지한 채 데이터 세트를 삭제할 수 있습니다.
데이터 세트 삭제
프로젝트를 삭제하면 프로젝트의 데이터 세트와 테이블이 모두 삭제됩니다. 프로젝트를 다시 사용하려면 이 튜토리얼에서 만든 데이터 세트를 삭제할 수 있습니다.
Google Cloud 콘솔에서 BigQuery 페이지로 이동합니다.
BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko]
탐색기 창에서 만든 bqml_tutorial 데이터 세트를 선택합니다.
more_vert 작업 > 삭제를 클릭합니다.
데이터 세트 삭제 대화상자에서 delete를 입력하여 삭제 명령어를 확인합니다.
삭제를 클릭합니다.
프로젝트 삭제
프로젝트를 삭제하는 방법은 다음과 같습니다.
주의: 프로젝트 삭제가 미치는 영향은 다음과 같습니다.
프로젝트의 모든 항목이 삭제됩니다. 이 문서의 태스크에 기존 프로젝트를 사용한 경우 프로젝트를 삭제하면 프로젝트에서 수행한 다른 작업도 삭제됩니다.
커스텀 프로젝트 ID가 손실됩니다. 이 프로젝트를 만들 때 앞으로 사용할 커스텀 프로젝트 ID를 만들었을 수 있습니다. appspot.com URL과 같이 프로젝트 ID를 사용하는 URL을 보존하려면 전체 프로젝트를 삭제하는 대신 프로젝트 내에서 선택한 리소스만 삭제합니다.
여러 아키텍처, 튜토리얼, 빠른 시작을 살펴보려는 경우 프로젝트를 재사용하면 프로젝트 할당량 한도 초과를 방지할 수 있습니다.
In the Google Cloud console, go to the Manage resources page.
Go to Manage resources [https://console.cloud.google.com/iam-admin/projects?hl=ko]
In the project list, select the project that you want to delete, and then click Delete.
In the dialog, type the project ID, and then click Shut down to delete the project.
다음 단계
머신러닝 단기집중과정 [https://developers.google.com/machine-learning/crash-course/?hl=ko]을 참조하여 머신러닝을 알아보세요.
BigQuery ML 개요는 BigQuery ML 소개 [https://cloud.google.com/bigquery/docs/bqml-introduction?hl=ko]를 참조하세요.
Google Cloud 콘솔에 대해 자세히 알아보려면 Google Cloud 콘솔 사용 [https://cloud.google.com/bigquery/bigquery-web-ui?hl=ko]을 참고하세요.
도움이 되었나요?
의견 보내기