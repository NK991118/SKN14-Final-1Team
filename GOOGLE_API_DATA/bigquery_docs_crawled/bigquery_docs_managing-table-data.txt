Source URL: https://cloud.google.com/bigquery/docs/managing-table-data

BigQuery [https://cloud.google.com/bigquery?hl=ko]
Documentation [https://cloud.google.com/bigquery/docs?hl=ko]
가이드 [https://cloud.google.com/bigquery/docs/introduction?hl=ko]
도움이 되었나요?
의견 보내기
이 페이지의 내용
시작하기 전에 [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#before_you_begin]
테이블에 데이터 로드 [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#loading_data_into_a_table]
테이블 데이터 추가 및 덮어쓰기 [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#append-overwrite]
테이블 데이터 찾아보기 [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#browse-table]
필수 권한 [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#required_permissions]
테이블 데이터 관리
bookmark_border
이 문서에서는 BigQuery에서 테이블 데이터를 관리하는 방법을 설명합니다. BigQuery 테이블 데이터에 할 수 있는 작업은 다음과 같습니다.
테이블에 데이터 로드
테이블에 데이터 추가 또는 테이블 데이터 덮어쓰기
테이블 데이터 찾아보기(또는 미리보기)
테이블 데이터 쿼리
데이터 조작 언어(DML)를 사용하여 테이블 데이터 수정
테이블 데이터 복사
테이블 데이터 내보내기
테이블 스키마 관리에 대한 자세한 내용은 테이블 스키마 수정 [https://cloud.google.com/bigquery/docs/managing-table-schemas?hl=ko]을 참조하세요.
시작하기 전에
이 문서의 각 작업을 수행해야 하는 사용자에게 필요한 권한을 주는 역할을 부여하세요. 작업을 수행하는 데 필요한 권한(있는 경우)은 작업의 '필수 권한' 섹션에 나열되어 있습니다.
테이블에 데이터 로드
테이블을 만들 때 데이터를 로드 [https://cloud.google.com/bigquery/docs/loading-data?hl=ko]하거나, 빈 테이블을 만든 후 나중에 데이터를 로드할 수 있습니다. 데이터를 로드할 때는 지원되는 데이터 형식에 스키마 자동 감지 [https://cloud.google.com/bigquery/docs/schema-detect?hl=ko]를 사용하거나 스키마를 직접 지정 [https://cloud.google.com/bigquery/docs/schemas?hl=ko]할 수 있습니다.
데이터 로드에 자세한 내용은 소스 데이터 형식 및 위치에 대한 문서를 참조하세요.
Cloud Storage에서 데이터를 로드하는 방법에 대한 자세한 내용은 다음을 참조하세요.
Avro 데이터 로드 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-avro?hl=ko]
CSV 데이터 로드 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-csv?hl=ko]
JSON 데이터 로드 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-json?hl=ko]
Parquet 데이터 로드 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-parquet?hl=ko]
ORC 데이터 로드 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-orc?hl=ko]
Datastore 내보내기에서 데이터 로드 [https://cloud.google.com/bigquery/docs/loading-data-cloud-datastore?hl=ko]
Firestore 내보내기에서 데이터 로드 [https://cloud.google.com/bigquery/docs/loading-data-cloud-firestore?hl=ko]
로컬 소스에서 데이터를 로드하는 방법에 대한 자세한 내용은 로컬 파일에서 데이터 로드 [https://cloud.google.com/bigquery/docs/batch-loading-data?hl=ko]를 참조하세요.
테이블 데이터 추가 및 덮어쓰기
로드 또는 쿼리 작업을 수행하여 테이블 데이터를 덮어쓸 수 있습니다. 로드-추가 작업을 수행하거나 쿼리 결과를 테이블에 추가하여 기존 테이블에 데이터를 추가할 수도 있습니다.
데이터를 로드할 때 테이블 데이터를 추가하거나 덮어쓰는 자세한 방법은 소스 데이터 형식에 대한 다음 문서를 참조하세요.
테이블에 Avro 데이터 추가 또는 덮어쓰기 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-avro?hl=ko#appending_to_or_overwriting_a_table_with_avro_data]
테이블에 CSV 데이터 추가 또는 덮어쓰기 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-csv?hl=ko#appending_to_or_overwriting_a_table_with_csv_data]
테이블에 JSON 데이터 추가 또는 덮어쓰기 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-json?hl=ko#appending_to_or_overwriting_a_table_with_json_data]
테이블에 Parquet 데이터 추가 또는 덮어쓰기 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-parquet?hl=ko#appending_to_or_overwriting_a_table_with_parquet_data]
테이블에 ORC 데이터 추가 또는 덮어쓰기 [https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-orc?hl=ko#append_to_or_overwrite_a_table_with_orc_data]
Datastore 데이터로 테이블 추가 또는 덮어쓰기 [https://cloud.google.com/bigquery/docs/loading-data-cloud-datastore?hl=ko#appending_to_or_overwriting_a_table_with_cloud_datastore_data]
쿼리 결과를 사용하여 테이블에 데이터를 추가하거나 테이블을 덮어쓰려면 대상 테이블을 지정하고 쓰기 처리를 다음 중 하나로 설정합니다.
테이블에 추가 - 쿼리 결과를 기존 테이블에 추가합니다.
테이블 덮어쓰기 - 쿼리 결과를 사용하여 이름이 같은 기존 테이블을 덮어씁니다.
다음 쿼리를 사용하여 한 테이블의 레코드를 다른 테이블에 추가할 수 있습니다.
  INSERT INTO <projectID>.<datasetID>.<table1> (
    <column2>,
    <column3>) (SELECT * FROM <projectID>.<datasetID>.<table2>)
쿼리 결과를 사용한 데이터 추가 또는 덮어쓰기에 대한 자세한 내용은 쿼리 결과 쓰기 [https://cloud.google.com/bigquery/docs/writing-results?hl=ko#writing_query_results]를 참조하세요.
테이블 데이터 찾아보기
다음과 같은 방법으로 테이블 데이터를 찾아보거나 읽을 수 있습니다.
Google Cloud 콘솔 사용
bq 명령줄 도구의 bq head 명령어 사용
tabledata.list [https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/list?hl=ko] API 메서드 호출
클라이언트 라이브러리 사용
필수 권한
테이블 및 파티션 데이터를 읽으려면 bigquery.tables.getData Identity and Access Management(IAM) 권한이 필요합니다.
참고: bigquery.tables.getData 권한에 대한 IAM 거부 정책 [https://cloud.google.com/iam/docs/deny-overview?hl=ko]을 만들 때는 특수한 경우 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko#special_cases]를 고려하세요.
다음과 같은 사전 정의된 각 IAM 역할에는 테이블 및 파티션 데이터를 탐색하는 데 필요한 권한이 포함되어 있습니다.
roles/bigquery.dataViewer
roles/bigquery.dataEditor
roles/bigquery.dataOwner
roles/bigquery.admin
bigquery.datasets.create 권한이 있는 경우 사용자가 만든 데이터 세트의 테이블 및 파티션에서 데이터를 찾아볼 수 있습니다.
BigQuery의 IAM 역할과 권한에 대한 자세한 내용은 사전 정의된 역할 및 권한 [https://cloud.google.com/bigquery/docs/access-control?hl=ko]을 참조하세요.
테이블 데이터 찾아보기
테이블 데이터를 찾아보려면 다음 안내를 따르세요.
--- 탭: 콘솔 [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#%EC%BD%98%EC%86%94] ---
Google Cloud 콘솔에서 BigQuery 페이지를 엽니다.

BigQuery로 이동 [https://console.cloud.google.com/bigquery?hl=ko] 
탐색기 패널에서 프로젝트를 확장하고 데이터 세트를 선택합니다.
목록에서 테이블을 클릭합니다.
세부정보를 클릭하고 행 개수 값을 확인합니다. bq 명령줄 도구 또는 API를 사용하여 결과의 시작점을 제어하려면 이 값이 필요할 수 있습니다.
미리보기를 클릭합니다. 샘플 데이터 세트가 표시됩니다.

--- 탭: 명령줄 [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#%EB%AA%85%EB%A0%B9%EC%A4%84] ---
특정 수의 테이블 행에 있는 모든 열을 나열하려면 bq head 명령어를 --max_rows 플래그와 함께 실행합니다. --max_rows를 지정하지 않으면 기본값은 100입니다.

테이블의 일부 열(중첩 열 및 반복 열 포함)을 찾아보려면 --selected_fields 플래그를 사용하고 열을 쉼표로 구분된 목록으로 입력합니다.

테이블 데이터를 표시하기 전에 건너뛸 행 수를 지정하려면 --start_row=integer 플래그(또는 -s 단축키)를 사용합니다. 기본값은 0입니다. bq show 명령어로 테이블 정보를 검색 [https://cloud.google.com/bigquery/docs/tables?hl=ko#get_information_about_tables]하여 테이블의 행 수를 검색할 수 있습니다.

찾아볼 테이블이 기본 프로젝트가 아닌 다른 프로젝트에 있으면 프로젝트 ID를 project_id:dataset.table 형식으로 명령어에 추가합니다.

bq head \
--max_rows integer1 \
--start_row integer2 \
--selected_fields "columns" \
project_id:dataset.table

각 항목의 의미는 다음과 같습니다.


integer1은 표시할 행 수입니다.
integer2는 데이터를 표시하기 전에 건너뛸 행 수입니다.
columns는 쉼표로 구분된 열 목록입니다.
project_id는 프로젝트 ID입니다.
dataset는 테이블이 포함된 데이터 세트 이름입니다.
table은 찾아볼 테이블 이름입니다.


예시:

mydataset.mytable에서 처음 10행의 모든 열을 나열하려면 다음 명령어를 입력합니다. 여기서 mydataset는 기본 프로젝트에 있습니다.
bq head --max_rows=10 mydataset.mytable

mydataset.mytable에서 처음 100행의 모든 열을 나열하려면 다음 명령어를 입력합니다. 여기서 mydataset는 기본 프로젝트가 아닌 myotherproject에 있습니다.
bq head myotherproject:mydataset.mytable

mydataset.mytable에 field1 및 field2만 표시하려면 다음 명령어를 입력합니다. 이 명령어에서 --start_row 플래그를 사용하면 100번째 행으로 건너뜁니다.
여기서 mydataset.mytable은 기본 프로젝트에 있습니다.
bq head --start_row 100 --selected_fields "field1,field2" mydataset.mytable

bq head 명령어는 쿼리 작업을 만들지 않으므로 bq head 명령어는 쿼리 기록에 나타나지 않고 비용이 청구되지 않습니다.

--- 탭: API [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#api] ---
tabledata.list [https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/list?hl=ko]를 호출하여 테이블의 데이터를 찾아볼 수 있습니다.
tableId 매개변수에 테이블 이름을 지정하세요.

다음과 같은 선택적 매개변수를 구성하여 출력을 제어할 수 있습니다.


maxResults — 반환할 결과의 최대 수입니다.
selectedFields — 반환할 필드를 쉼표로 구분한 목록입니다. 지정하지 않으면 모든 열이 반환됩니다.
startIndex — 읽기를 시작할 행의 0부터 시작하는 색인입니다.

참고: 마지막 행을 벗어나서 startIndex를 요청하면 메서드가 성공적으로 반환되지만 rows 속성은 반환되지 않습니다. tables.get [https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get?hl=ko] 메서드를 호출하고 numRows 속성을 검사하여 테이블의 행 수를 확인할 수 있습니다.
반환되는 값은 JSON 객체에 래핑되므로 tabledata.list [https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/list?hl=ko] 참조 문서의 설명에 따라 객체를 파싱해야 합니다.

--- 탭: C# [https://cloud.google.com/bigquery/docs/managing-table-data?hl=ko#c] ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 C# 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery C# API 참고 문서 [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  
using Google.Api.Gax [https://cloud.google.com/dotnet/docs/reference/Google.Api.Gax/latest/Google.Api.Gax.html?hl=ko];
using Google.Apis.Bigquery.v2.Data;
using Google.Cloud.BigQuery.V2 [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.html?hl=ko];
using System;
using System.Linq;

public class BigQueryBrowseTable
{
    public void BrowseTable(
        string projectId = "your-project-id"
    )
    {
        BigQueryClient [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko] client = BigQueryClient [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko].Create [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko#Google_Cloud_BigQuery_V2_BigQueryClient_Create_System_String_Google_Apis_Auth_OAuth2_GoogleCredential_](projectId);
        TableReference tableReference = new TableReference()
        {
            TableId = "shakespeare",
            DatasetId = "samples",
            ProjectId = "bigquery-public-data"
        };
        // Load all rows from a table
        PagedEnumerable<TableDataList, BigQueryRow> result = client.ListRows [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryClient.html?hl=ko#Google_Cloud_BigQuery_V2_BigQueryClient_ListRows_Google_Apis_Bigquery_v2_Data_TableReference_Google_Apis_Bigquery_v2_Data_TableSchema_Google_Cloud_BigQuery_V2_ListRowsOptions_](
            tableReference: tableReference,
            schema: null
        );
        // Print the first 10 rows
        foreach (BigQueryRow [https://cloud.google.com/dotnet/docs/reference/Google.Cloud.BigQuery.V2/latest/Google.Cloud.BigQuery.V2.BigQueryRow.html?hl=ko] row in result.Take(10))
        {
            Console.WriteLine($"{row["corpus"]}: {row["word_count"]}");
        }
    }
}

--- 탭: tabpanel-go ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Go 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Go API 참고 문서 [https://godoc.org/cloud.google.com/go/bigquery]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
Go용 Cloud 클라이언트 라이브러리 [https://cloud.google.com/bigquery/docs/reference/libraries?hl=ko]는 기본적으로 자동 페이지 나누기를 수행하므로 사용자가 직접 페이지 나누기를 구현할 필요가 없습니다. 예를 들면 다음과 같습니다.





















  





  
    
  
  











  









  




  



  


  import (
	"context"
	"fmt"
	"io"

	"cloud.google.com/go/bigquery"
	"google.golang.org/api/iterator"
)

// browseTable demonstrates reading data from a BigQuery table directly without the use of a query.
// For large tables, we also recommend the BigQuery Storage API.
func browseTable(w io.Writer, projectID, datasetID, tableID string) error {
	// projectID := "my-project-id"
	// datasetID := "mydataset"
	// tableID := "mytable"
	ctx := context.Background()
	client, err := bigquery.NewClient(ctx, projectID)
	if err != nil {
		return fmt.Errorf("bigquery.NewClient: %v", err)
	}
	defer client.Close()

	table := client.Dataset(datasetID).Table(tableID)
	it := table.Read(ctx)
	for {
		var row []bigquery.Value [https://cloud.google.com/go/docs/reference/cloud.google.com/go/bigquery/latest/index.html?hl=ko#cloud_google_com_go_bigquery_Value]
		err := it.Next(&row)
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}
		fmt.Fprintln(w, row)
	}
	return nil
}

--- 탭: tabpanel-java ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Java 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Java API 참고 문서 [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/overview?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko];
import com.google.cloud.bigquery.BigQuery [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.html?hl=ko].TableDataListOption [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQuery.TableDataListOption.html?hl=ko];
import com.google.cloud.bigquery.BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko];
import com.google.cloud.bigquery.BigQueryOptions [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryOptions.html?hl=ko];
import com.google.cloud.bigquery.TableId [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableId.html?hl=ko];
import com.google.cloud.bigquery.TableResult [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.TableResult.html?hl=ko];

// Sample to directly browse a table with optional paging
public class BrowseTable {

  public static void runBrowseTable() {
    // TODO(developer): Replace these variables before running the sample.
    String table = "MY_TABLE_NAME";
    String dataset = "MY_DATASET_NAME";
    browseTable(dataset, table);
  }

  public static void browseTable(String dataset, String table) {
    try {
      // Initialize client that will be used to send requests. This client only needs to be created
      // once, and can be reused for multiple requests.
      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();

      // Identify the table itself
      TableId tableId = TableId.of(dataset, table);

      // Page over 100 records. If you don't need pagination, remove the pageSize parameter.
      TableResult result = bigquery.listTableData(tableId, TableDataListOption.pageSize(100));

      // Print the records
      result
          .iterateAll()
          .forEach(
              row -> {
                row.forEach(fieldValue -> System.out.print(fieldValue.toString() + ", "));
                System.out.println();
              });

      System.out.println("Query ran successfully");
    } catch (BigQueryException [https://cloud.google.com/java/docs/reference/google-cloud-bigquery/latest/com.google.cloud.bigquery.BigQueryException.html?hl=ko] e) {
      System.out.println("Query failed to run \n" + e.toString());
    }
  }
}

--- 탭: tabpanel-node.js ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Node.js 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Node.js API 참고 문서 [https://googleapis.dev/nodejs/bigquery/latest/index.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
Node.js용 Cloud 클라이언트 라이브러리 [https://cloud.google.com/bigquery/docs/reference/libraries?hl=ko]는 기본적으로 자동 페이지 나누기를 수행하므로 사용자가 직접 페이지 나누기를 구현할 필요가 없습니다. 예를 들면 다음과 같습니다.





















  





  
    
  
  











  









  




  



  


  
// Import the Google Cloud client library and create a client
const {BigQuery} = require('@google-cloud/bigquery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/overview.html?hl=ko]');
const bigquery = new BigQuery [https://cloud.google.com/nodejs/docs/reference/bigquery/latest/bigquery/bigquery.html?hl=ko]();

async function browseRows() {
  // Displays rows from "my_table" in "my_dataset".

  /**
   * TODO(developer): Uncomment the following lines before running the sample.
   */
  // const datasetId = "my_dataset";
  // const tableId = "my_table";

  // List rows in the table
  const [rows] = await bigquery
    .dataset(datasetId)
    .table(tableId)
    .getRows();

  console.log('Rows:');
  rows.forEach(row => console.log(row));
}

--- 탭: tabpanel-php ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 PHP 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery PHP API 참고 문서 [https://cloud.google.com/php/docs/reference/cloud-bigquery/latest/BigQueryClient?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
PHP용 Cloud 클라이언트 라이브러리 [https://cloud.google.com/bigquery/docs/reference/libraries?hl=ko]에서는 생성기 함수 rows를 사용하여 페이지 나누기를 자동으로 수행하고 반복을 통해 다음 결과 페이지를 가져옵니다.





















  





  
    
  
  











  









  




  



  


  use Google\Cloud\BigQuery\BigQueryClient;

/** Uncomment and populate these variables in your code */
// $projectId = 'The Google project ID';
// $datasetId = 'The BigQuery dataset ID';
// $tableId   = 'The BigQuery table ID';
// $maxResults = 10;

$maxResults = 10;
$startIndex = 0;

$options = [
    'maxResults' => $maxResults,
    'startIndex' => $startIndex
];
$bigQuery = new BigQueryClient([
    'projectId' => $projectId,
]);
$dataset = $bigQuery->dataset($datasetId);
$table = $dataset->table($tableId);
$numRows = 0;
foreach ($table->rows($options) as $row) {
    print('---');
    foreach ($row as $column => $value) {
        printf('%s: %s' . PHP_EOL, $column, $value);
    }
    $numRows++;
}

--- 탭: tabpanel-python ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Python 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Python API 참고 문서 [https://cloud.google.com/python/docs/reference/bigquery/latest?hl=ko]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
  




















  





  
    
  
  











  









  




  



  


  
from google.cloud import bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko]

# Construct a BigQuery client object.
client = bigquery [https://cloud.google.com/python/docs/reference/bigquery/latest/?hl=ko].Client [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko]()

# TODO(developer): Set table_id to the ID of the table to browse data rows.
# table_id = "your-project.your_dataset.your_table_name"

# Download all rows from a table.
rows_iter = client.list_rows [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_list_rows](table_id)  # Make an API request.

# Iterate over rows to make the API requests to fetch row data.
rows = list(rows_iter)
print("Downloaded {} rows from table {}".format(len(rows), table_id))

# Download at most 10 rows.
rows_iter = client.list_rows [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_list_rows](table_id, max_results=10)
rows = list(rows_iter)
print("Downloaded {} rows from table {}".format(len(rows), table_id))

# Specify selected fields to limit the results to certain columns.
table = client.get_table [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_get_table](table_id)  # Make an API request.
fields = table.schema[:2]  # First two columns.
rows_iter = client.list_rows [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_list_rows](table_id, selected_fields=fields, max_results=10)
rows = list(rows_iter)
print("Selected {} columns from table {}.".format(len(rows_iter.schema), table_id))
print("Downloaded {} rows from table {}".format(len(rows), table_id))

# Print row data in tabular format.
rows = client.list_rows [https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.client.Client.html?hl=ko#google_cloud_bigquery_client_Client_list_rows](table, max_results=10)
format_string = "{!s:<16} " * len(rows [https://cloud.google.com/python/docs/reference/bigquerystorage/latest/google.cloud.bigquery_storage_v1.reader.ReadRowsStream.html?hl=ko#google_cloud_bigquery_storage_v1_reader_ReadRowsStream_rows].schema)
field_names = [field.name for field in rows [https://cloud.google.com/python/docs/reference/bigquerystorage/latest/google.cloud.bigquery_storage_v1.reader.ReadRowsStream.html?hl=ko#google_cloud_bigquery_storage_v1_reader_ReadRowsStream_rows].schema]
print(format_string.format(*field_names))  # Prints column headers.
for row in rows:
    print(format_string.format(*row))  # Prints row data.

--- 탭: tabpanel-ruby ---
이 샘플을 사용해 보기 전에 BigQuery 빠른 시작: 클라이언트 라이브러리 사용 [https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries?hl=ko]의 Ruby 설정 안내를 따르세요.
        
      
      
  자세한 내용은 BigQuery Ruby API 참고 문서 [https://googleapis.dev/ruby/google-cloud-bigquery/latest/Google/Cloud/Bigquery.html]를 확인하세요.
  
    
    
      BigQuery에 인증하려면 애플리케이션 기본 사용자 인증 정보를 설정합니다.
      자세한 내용은 클라이언트 라이브러리의 인증 설정 [https://cloud.google.com/bigquery/docs/authentication?hl=ko#client-libs]을 참조하세요.
      
    
      






    
  
  
  
Ruby용 Cloud 클라이언트 라이브러리 [https://cloud.google.com/bigquery/docs/reference/libraries?hl=ko]에서는 Table#data 및 Data#next를 사용하여 페이지 매김이 자동으로 수행됩니다.






















  





  
    
  
  











  









  




  



  


  require "google/cloud/bigquery"

def browse_table
  bigquery = Google::Cloud::Bigquery [https://cloud.google.com/ruby/docs/reference/google-cloud-bigquery-analytics_hub/latest/Google-Cloud-Bigquery.html?hl=ko].new [https://cloud.google.com/ruby/docs/reference/google-cloud-bigquery/latest/Google-Cloud-Bigquery.html?hl=ko] project_id: "bigquery-public-data"
  dataset  = bigquery.dataset "samples"
  table    = dataset.table "shakespeare"

  # Load all rows from a table
  rows = table.data

  # Load the first 10 rows
  rows = table.data max: 10

  # Print row data
  rows.each { |row| puts row }
end
테이블 데이터 쿼리
다음 쿼리 작업 유형 중 하나를 사용하여 BigQuery 데이터를 쿼리 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko]할 수 있습니다.
대화형 쿼리 작업 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#queries]. 기본적으로 BigQuery는 가능한 한 빨리 실행되도록 설계된 대화형 쿼리 작업으로 쿼리를 실행합니다.
일괄 쿼리 작업 [https://cloud.google.com/bigquery/docs/running-queries?hl=ko#batch]. 일괄 쿼리는 대화형 쿼리보다 우선순위가 낮습니다. 프로젝트나 예약에서 사용 가능한 모든 컴퓨팅 리소스를 사용하는 경우 일괄 쿼리는 큐에 추가되어 큐에 남아 있을 가능성이 높습니다. 일괄 쿼리가 실행되기 시작하면 대화형 쿼리와 동일하게 실행됩니다. 자세한 내용은 쿼리 큐 [https://cloud.google.com/bigquery/docs/query-queues?hl=ko]를 참조하세요.
연속 쿼리 작업 [https://cloud.google.com/bigquery/docs/continuous-queries-introduction?hl=ko]. 이러한 작업을 사용하면 쿼리가 연속적으로 실행되므로 BigQuery에서 수신되는 데이터를 실시간으로 분석한 후 결과를 BigQuery 테이블에 쓰거나 결과를 Bigtable 또는 Pub/Sub로 내보낼 수 있습니다. 이 기능을 사용하여 통계를 만들어 즉시 조치, 실시간 머신러닝(ML) 추론 적용, 이벤트 기반 데이터 파이프라인 빌드 등 시간에 민감한 작업을 수행할 수 있습니다.
다음 메서드를 사용하여 쿼리 작업을 실행할 수 있습니다.
Google Cloud 콘솔 [https://cloud.google.com/bigquery/bigquery-web-ui?hl=ko#overview]에서 쿼리를 작성하고 실행합니다.
bq 명령줄 도구 [https://cloud.google.com/bigquery/bq-command-line-tool?hl=ko]에서 bq query 명령어를 실행합니다.
BigQuery REST API [https://cloud.google.com/bigquery/docs/reference/rest/v2?hl=ko]의 jobs.query [https://cloud.google.com/bigquery/docs/reference/v2/jobs/query?hl=ko] 또는 jobs.insert [https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert?hl=ko] 메서드를 프로그래매틱 방식으로 호출합니다.
BigQuery 클라이언트 라이브러리 [https://cloud.google.com/bigquery/docs/reference/libraries?hl=ko]를 사용합니다.
BigQuery 테이블 쿼리에 대한 자세한 내용은 BigQuery 데이터 쿼리 소개 [https://cloud.google.com/bigquery/docs/query-overview?hl=ko]를 참조하세요.
BigQuery 테이블에 저장된 데이터뿐만 아니라 외부에 저장된 데이터도 쿼리할 수 있습니다. 자세한 내용은 외부 데이터 소스 소개 [https://cloud.google.com/bigquery/external-data-sources?hl=ko]를 참조하세요.
테이블 데이터 수정
SQL의 DML 문을 사용하여 테이블의 데이터를 수정할 수 있습니다. DML 문을 사용하여 테이블의 행을 업데이트 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko#update_statement], 병합 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko#merge_statement], 삽입 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko#insert_statement], 삭제 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko#delete_statement]할 수 있습니다. 각 유형의 DML 문에 대한 구문 참조 및 예시는 GoogleSQL의 DML 문 [https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ko]을 참조하세요.
legacy SQL 언어는 DML 문을 지원하지 않습니다. legacy SQL을 사용하여 데이터를 업데이트하거나 삭제하려면 테이블을 삭제한 다음 새 데이터로 다시 만들어야 합니다. 또는 데이터를 수정하고 쿼리 결과를 새 대상 테이블에 쓰는 쿼리를 작성할 수도 있습니다.
테이블 데이터 복사
다음 방법을 사용하여 테이블을 복사할 수 있습니다.
Google Cloud 콘솔 사용
bq 명령줄 도구의 bq cp 명령어 사용
jobs.insert API 메서드 [https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert?hl=ko] 호출 및 복사 작업 [https://cloud.google.com/bigquery/docs/reference/rest/v2/Job?hl=ko#JobConfigurationTableCopy] 구성
클라이언트 라이브러리 사용
테이블 복사에 대한 자세한 내용은 테이블 복사 [https://cloud.google.com/bigquery/docs/managing-tables?hl=ko#copy-table]를 참조하세요.
테이블 데이터 내보내기
테이블 데이터를 CSV, JSON, Avro, Parquet(미리보기 [https://cloud.google.com/products?hl=ko#product-launch-stages]) 형식으로 Cloud Storage 버킷으로 내보낼 수 있습니다. 로컬 머신으로 내보내기는 지원되지 않습니다. 하지만 Google Cloud 콘솔을 사용하여 쿼리 결과를 다운로드하고 저장 [https://cloud.google.com/bigquery/docs/writing-results?hl=ko#downloading-saving-results-console]할 수는 있습니다.
자세한 내용은 테이블 데이터 내보내기 [https://cloud.google.com/bigquery/docs/exporting-data?hl=ko]를 참조하세요.
테이블 보안
BigQuery에서 테이블에 대한 액세스를 제어하려면 IAM으로 리소스에 대한 액세스 제어 [https://cloud.google.com/bigquery/docs/control-access-to-resources-iam?hl=ko]를 참고하세요.
다음 단계
데이터 로드에 대한 자세한 내용은 데이터 로드 소개 [https://cloud.google.com/bigquery/docs/loading-data?hl=ko]를 참조하세요.
데이터 쿼리에 대한 자세한 내용은 BigQuery 데이터 쿼리 소개 [https://cloud.google.com/bigquery/docs/query-overview?hl=ko]를 참조하세요.
테이블 스키마 수정에 대한 자세한 내용은 테이블 스키마 수정 [https://cloud.google.com/bigquery/docs/managing-table-schemas?hl=ko]을 참조하세요.
테이블 만들기 및 사용에 대한 자세한 내용은 테이블 만들기 및 사용 [https://cloud.google.com/bigquery/docs/tables?hl=ko]을 참조하세요.
테이블 관리에 대한 자세한 내용은 테이블 관리 [https://cloud.google.com/bigquery/docs/managing-tables?hl=ko]를 참조하세요.
도움이 되었나요?
의견 보내기