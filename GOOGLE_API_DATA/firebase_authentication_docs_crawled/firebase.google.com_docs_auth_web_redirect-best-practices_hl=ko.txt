Source URL: https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko
Title: 서드 파티 스토리지 액세스를 차단하는 브라우저에서 signInWithRedirect를 사용하기 위한 권장사항

의견 보내기

서드 파티 스토리지 액세스를 차단하는 브라우저에서 signInWithRedirect를 사용하기 위한 권장사항

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 문서에서는 서드 파티 쿠키를 차단하는 브라우저에서 리디렉션 로그인을 사용하기 위한 권장사항을 설명합니다. 모든 브라우저 간에 프로덕션 환경에서 signInWithRedirect() [https://firebase.google.com/docs/reference/js/auth.md?hl=ko#signinwithredirect]가 의도한 대로 작동하려면 여기에 나온 옵션 중 하나를 따라야 합니다.
참고: 2024년 6월 24일부터 Chrome M115 이상에서 리디렉션 로그인이 작동하려면 옵션 중 하나를 구현해야 합니다. 이는 Firefox 109 이상 및 Safari 16.1 이상에서는 이미 필요합니다.
개요

Firebase 인증 자바스크립트 SDK는 개발자와 사용자가 원활하게 signInWithRedirect() [https://firebase.google.com/docs/reference/js/auth.md?hl=ko#signinwithredirect] 흐름을 진행할 수 있도록 앱의 Firebase 호스팅 도메인에 연결되는 교차 출처 iframe을 사용합니다.
그러나 서드 파티 스토리지 액세스를 차단하는 브라우저에서는 이 메커니즘이 작동하지 않습니다.

사용자에게 브라우저에서 스토리지 파티션 나누기 기능을 중지하도록 요청할 수 없으므로 대신 사용 사례의 특성에 따라 다음 설정 옵션 중 하나를 앱에 적용해야 합니다.

firebaseapp.com의 하위 도메인에서 Firebase 호스팅으로 앱을 호스팅하는 경우에는 이 문제의 영향을 받지 않으며 어떠한 작업도 필요 없습니다.
커스텀 도메인이나 web.app의 하위 도메인에서 Firebase 호스팅으로 앱을 호스팅하는 경우 옵션 1 [https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko#update-authdomain]을 사용합니다.
Firebase 이외의 서비스로 앱을 호스팅하는 경우에는 옵션 2 [https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko#signinwithpopup], 옵션 3 [https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko#proxy-requests], 옵션 4 [https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko#self-host-helper-code], 옵션 5 [https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko#handle-signin-independently]를 사용합니다.

옵션 1: 커스텀 도메인을 authDomain으로 사용하도록 Firebase 구성 업데이트

커스텀 도메인을 사용하여 Firebase 호스팅으로 앱을 호스팅하는 경우 Firebase SDK를 구성하여 커스텀 도메인을 authDomain으로 사용할 수 있습니다. 이렇게 하면 앱과 인증 iframe에서 같은 도메인을 사용하므로 로그인 문제가 방지됩니다. Firebase 호스팅을 사용하지 않는 경우에는 다른 옵션을 사용해야 합니다. 인증에 사용하는 것과 동일한 프로젝트에 커스텀 도메인을 설정했는지 확인합니다.

커스텀 도메인을 인증 도메인으로 사용하도록 Firebase 구성을 업데이트하려면 다음을 수행합니다.

커스텀 도메인을 authDomain으로 사용하도록 Firebase JS SDK를 구성합니다.
Web   // Before
Web   // Before
```

사용자에게 팝업 로그인이 항상 적합한 것은 아닙니다. 기기나 플랫폼에서 팝업을 차단하는 경우가 많으며 모바일 사용자의 경우 흐름이 원활하지 않기 때문입니다. 앱에서 팝업을 사용할 수 없으면 다른 옵션 중 하나를 수행해야 합니다.

옵션 3: firebaseapp.com에 프록시 인증 요청

signInWithRedirect 흐름은 앱 도메인에서 Firebase 구성의 authDomain 매개변수에 지정된 도메인으로 리디렉션됩니다(기본적으로 '.firebaseapp.com'). authDomain은 ID 공급업체로 리디렉션되는 로그인 도우미 코드를 호스팅합니다. 성공하면 이 ID는 앱 도메인으로 다시 리디렉션됩니다.

인증 흐름이 앱 도메인으로 돌아오면 로그인 도우미 도메인의 브라우저 스토리지에 액세스합니다. 이 옵션과 다음 옵션(코드 자체 호스팅)은 교차 출처 스토리지 액세스를 제거합니다. 그렇지 않으면 브라우저에 의해 차단됩니다.

https://<app domain>/__/auth/에 대한 GET/POST 요청이 https://<project>.firebaseapp.com/__/auth/에 전달되도록 앱 서버에 리버스 프록시를 설정합니다.
전달이 브라우저에 표시되는지 확인합니다. 이 전달은 302 리디렉션을 통해 실행될 수 없습니다.

nginx를 사용하여 커스텀 도메인을 제공하는 경우 역방향 프록시 구성은 다음과 같습니다.
# reverse proxy for signin-helpers for popup/redirect sign in.
location /__/auth {
proxy_pass https://<project>.firebaseapp.com;
wget https://<project>.firebaseapp.com/__/auth/handler
wget https://<project>.firebaseapp.com/__/auth/handler.js
wget https://<project>.firebaseapp.com/__/auth/experiments.js
wget https://<project>.firebaseapp.com/__/auth/iframe
wget https://<project>.firebaseapp.com/__/auth/iframe.js
wget https://<project>.firebaseapp.com/__/firebase/init.json

위 파일을 앱 도메인 아래에서 호스팅합니다. 웹 서버가 https://<app domain>/__/auth/<filename> 및 https://<app domain>/__/firebase/init.json에 응답할 수 있는지 확인합니다.

다음은 파일을 다운로드하고 호스팅하는 샘플 서버 구현 [https://go.dev/play/p/yvHmY9Bd50N]입니다.
최신 버그 수정 및 기능이 적용되도록 정기적으로 파일을 다운로드하고 동기화하는 것이 좋습니다.
옵션 1 [https://firebase.google.com/docs/auth/web/redirect-best-practices?hl=ko#update-authdomain]의 단계를 수행하여 승인된 redirect_uri 및 authDomain을 업데이트합니다. 앱을 다시 배포하면 더 이상 교차 출처 스토리지에 액세스할 수 없습니다.

옵션 5: 공급업체 로그인을 개별적으로 처리
중요: 이 방법은 추가 SDK를 사용하는 복잡한 접근 방법이며 SAML 제공업체에 상당한 영향을 미칠 수 있습니다.
Firebase 인증 SDK는 복잡한 로직을 래핑하는 데 편리한 방법으로 signInWithPopup() [https://firebase.google.com/docs/reference/js/auth.md?hl=ko#signinwithpopup] 및 signInWithRedirect() [https://firebase.google.com/docs/reference/js/auth.md?hl=ko#signinwithredirect]를 제공하며 다른 SDK를 포함할 필요는 없습니다. 제공업체에 개별적으로 로그인한 후 signInWithCredential() [https://firebase.google.com/docs/reference/js/auth.md?hl=ko#signinwithcredential]을 사용하여 제공업체의 사용자 인증 정보를 Firebase 인증 사용자 인증 정보로 교환하면 한 메서드를 사용하지 않을 수 있습니다.
예를 들어 Google 로그인 SDK [https://developers.google.com/identity/gsi/web/guides/overview?hl=ko]인 샘플 코드 [https://github.com/google/google-api-javascript-client/blob/master/samples/authSample.html]를 사용하여 Google 계정 사용자 인증 정보를 가져온 후 다음 코드를 실행하여 새 Google 사용자 인증 정보를 인스턴스화할 수 있습니다.

Web   // `googleUser` from the onsuccess Google Sign In callback.
Web   // `googleUser` from the onsuccess Google Sign In callback.

Apple 사용자 인증 정보를 얻는 방법은 여기 [https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js/configuring_your_webpage_for_sign_in_with_apple]를 참조하세요.

의견 보내기