Source URL: https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko
Title: Microsoft 및 Unity를 사용하여 인증
bookmark_border

의견 보내기

Microsoft 및 Unity를 사용하여 인증

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용시작하기 전에 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#before_you_begin]Firebase.Auth.FirebaseAuth 클래스 액세스 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#access_the_firebaseauthfirebaseauth_class]Firebase SDK로 로그인 흐름 처리하기 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#handle_the_sign-in_flow_with_the_firebase_sdk]고급: 수동으로 로그인 과정 처리 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#advanced:-handle-the-sign-in-flow-manually]다음 단계 [https://firebase.google.com/docs/auth/unity/microsoft-oauth?hl=ko#next_steps]

Firebase SDK를 통해 엔드 투 엔드 로그인 과정을 실행하는 앱에 웹 기반의 일반 OAuth 로그인을 통합하여 사용자가 Microsoft Azure Active Directory와 같은 OAuth 제공업체를 통해 Firebase에 인증하도록 할 수 있습니다.
이 과정은 스마트폰 기반 Firebase SDK를 사용해야 하므로 Android 및 Apple 플랫폼에서만 지원됩니다.

시작하기 전에

Firebase Authentication [https://firebase.google.com/docs/reference/unity/namespace/firebase/auth?hl=ko]을 사용하려면 먼저 다음 작업을 해야 합니다.

Unity 프로젝트를 등록하고 Firebase를 사용하도록 구성합니다.

Unity 프로젝트에서 현재 Firebase를 사용하고 있다면 이미 등록되어 Firebase용으로 구성된 것입니다.
Unity 프로젝트가 없는 경우 샘플 앱 [https://github.com/google/mechahamster]을 다운로드하면 됩니다.

Firebase Unity SDK [https://firebase.google.com/download/unity?hl=ko](특히 FirebaseAuth.unitypackage)를 Unity 프로젝트에 추가합니다.

초기 설정 작업에 관한 자세한 안내는 Unity 프로젝트에 Firebase 추가 [https://firebase.google.com/docs/unity/setup?hl=ko#prerequisites]를 참조하세요.Unity 프로젝트에 Firebase를 추가할 때 Firebase Console [https://console.firebase.google.com/?hl=ko] 및 열려 있는 Unity 프로젝트 모두에서 작업을 수행해야 합니다. 예를 들어 Console에서 Firebase 구성 파일을 다운로드한 후 이 파일을 Unity 프로젝트로 이동하는 작업이 필요합니다.

Firebase.Auth.FirebaseAuth 클래스 액세스

FirebaseAuth 클래스는 모든 API 호출을 위한 게이트웨이입니다.

FirebaseAuth.DefaultInstance [https://firebase.google.com/docs/reference/unity/class/firebase/auth/firebase-auth?hl=ko#defaultinstance]를 통해 액세스할 수 있습니다.
Firebase.Auth.FirebaseAuth auth = Firebase.Auth.FirebaseAuth.DefaultInstance;

Firebase SDK로 로그인 흐름 처리하기

Firebase SDK로 로그인 과정을 처리하려면 다음 단계를 따르세요.

Microsoft에 적합한 제공업체 ID로 구성된 FederatedOAuthProviderData의 인스턴스를 생성합니다.
Firebase.Auth.FederatedOAuthProviderData providerData =
new Firebase.Auth.FederatedOAuthProviderData();
providerData.ProviderId = Firebase.Auth.MicrosoftAuthProvider.ProviderId;

선택사항: OAuth 요청과 함께 전송하고자 하는 커스텀 OAuth 매개변수를 추가로 지정합니다.
providerData.CustomParameters = new Dictionary<string,string>;

"user@firstadd.onmicrosoft.com");

Microsoft가 지원하는 매개변수 정보는 Microsoft OAuth 문서 [https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-protocols-oauth-code]를 참조하세요.
Firebase에서 요구하는 매개변수는 setCustomParameters()와 함께 전달할 수 없습니다. 이러한 매개변수에는 client_id, response_type, redirect_uri, state, scope, response_mode가 있습니다.

특정 Azure AD 테넌트의 사용자만 애플리케이션에 로그인하도록 허용하려면 Azure AD 테넌트의 도메인 이름 또는 테넌트의 GUID 식별자를 사용하면 됩니다. 이렇게 하려면 커스텀 매개변수 객체의 '테넌트' 필드를 지정합니다.

선택사항: 인증 제공업체에 요청하고자 하는 기본 프로필 범위를 넘는 OAuth 2.0 범위를 추가로 지정합니다.
providerData.Scopes = new List<string>();
providerData.Scopes.Add("mail.read");
providerData.Scopes.Add("calendars.read");

자세한 내용은 Microsoft 권한 및 동의 문서 [https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent]를 참조하세요.
제공업체 데이터가 구성되었으면 이를 사용하여 FederatedOAuthProvider를 만듭니다.
Firebase.Auth.FederatedOAuthProvider provider = new Firebase.Auth.FederatedOAuthProvider();
provider.SetProviderData(providerData);

인증 제공업체 객체를 사용해 Firebase에 인증합니다. 이는 다른 FirebaseAuth 작업과 달리 사용자가 인증 정보를 입력할 수 있는 웹 보기를 표시하여 UI를 제어합니다.

로그인 과정을 시작하려면 다음과 같이 SignInAndRetrieveDataWithCredentialAsync를 호출합니다.
auth.SignInWithProviderAsync(provider).ContinueOnMainThread(task => {
if (task.IsCanceled) {
Debug.LogError("SignInWithProviderAsync was canceled.");
return;
return;
Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User signed in successfully: {0} ({1})",
user.DisplayName, user.UserId);
Debug.LogError("LinkWithProviderAsync was canceled.");
return;
return;
Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User linked successfully: {0} ({1})",
user.DisplayName, user.UserId);
ReauthenticateWithProviderAsync에서도 동일한 패턴을 사용하여 최근 로그인한 적이 있어야 진행할 수 있는 중요한 작업에서 새로운 사용자 인증 정보를 가져올 수 있습니다.
user.ReauthenticateWithProviderAsync(provider).ContinueOnMainThread(task => {
if (task.IsCanceled) {
Debug.LogError("ReauthenticateWithProviderAsync was canceled.");
return;
Debug.LogError(
"ReauthenticateWithProviderAsync encountered an error: " +
task.Exception);
return;
Firebase.Auth.AuthResult authResult = task.Result;
Firebase.Auth.FirebaseUser user = authResult.User;
Debug.LogFormat("User reauthenticated successfully: {0} ({1})",
user.DisplayName, user.UserId);
Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
string name = user.DisplayName;
string email = user.Email;
System.Uri photo_url = user.PhotoUrl;

도움이 되었나요?

의견 보내기