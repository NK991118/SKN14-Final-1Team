Source URL: https://firebase.google.com/docs/auth/unity/manage-users?hl=ko
Title: Firebase에서 사용자 관리하기
bookmark_border

의견 보내기

Firebase에서 사용자 관리하기

bookmark_borderbookmark

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용사용자 생성 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#create_a_user]현재 로그인한 사용자 가져오기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#get_the_currently_signed-in_user]사용자 인증 정보 유지 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#persist_a_users_credential]사용자 프로필 가져오기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#get_a_users_profile]제공업체별 사용자 프로필 정보 가져오기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#get_a_users_provider-specific_profile_information]사용자 프로필 업데이트 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#update_a_users_profile]사용자 이메일 주소 설정 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#set_a_users_email_address]사용자에게 인증 메일 보내기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#send_a_user_a_verification_email]사용자 비밀번호 설정 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#set_a_users_password]비밀번호 재설정 이메일 보내기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#send_a_password_reset_email]사용자 삭제하기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#delete_a_user]사용자 재인증하기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#re-authenticate_a_user]사용자 계정 가져오기 [https://firebase.google.com/docs/auth/unity/manage-users?hl=ko#import_user_accounts]

사용자 생성

Firebase 프로젝트에서 신규 사용자를 생성할 때는 CreateUserWithEmailAndPassword [https://firebase.google.com/docs/auth/unity/password-auth?hl=ko#create_a_password-based_account] 메서드를 호출하는 방법과 Google 로그인 [https://firebase.google.com/docs/auth/unity/google-signin?hl=ko] 또는 Facebook 로그인 [https://firebase.google.com/docs/auth/unity/facebook-login?hl=ko]과 같은 제휴 ID 공급업체를 이용해 사용자의 최초 로그인을 처리하는 방법이 있습니다.

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '사용자' 페이지에서 비밀번호 인증을 사용하는 신규 사용자를 생성할 수도 있습니다.

현재 로그인한 사용자 가져오기

현재 사용자를 가져올 때 권장하는 방법은 다음과 같이 Auth 객체에 리스너를 설정하는 것입니다.

Firebase.Auth.FirebaseAuth auth;
Firebase.Auth.FirebaseUser user;

Debug.Log("Setting up Firebase Auth");
auth = Firebase.Auth.FirebaseAuth.DefaultInstance;
auth.StateChanged += AuthStateChanged;
AuthStateChanged(this, null);
if (!signedIn && user != null) {
Debug.Log("Signed out " + user.UserId);
if (signedIn) {
Debug.Log("Signed in " + user.UserId);
auth = null;
CurrentUser를 호출하여 현재 로그인한 사용자를 가져올 수도 있습니다. 사용자가 로그인 상태가 아니라면 CurrentUser는 null을 반환합니다. 사용자가 로그아웃한 경우 사용자의 IsValid()는 false를 반환합니다.
참고: 인증 객체의 초기화가 완료되지 않은 경우에도 CurrentUser가 null을 반환할 수 있습니다. 리스너를 사용하여 사용자의 로그인 상태를 추적하면 이러한 상황을 처리할 필요가 없습니다.
사용자 인증 정보 유지

사용자 인증 정보는 사용자가 로그인한 후에 로컬 키 저장소에 저장됩니다.  사용자 인증 정보의 로컬 캐시는 사용자가 로그아웃하면 삭제됩니다.  다음과 같이 키 저장소는 플랫폼에 따라 다릅니다.

Apple 플랫폼: Keychain Services [https://developer.apple.com/documentation/security/keychain_services]
Android: Android Keystore [https://developer.android.com/training/articles/keystore?hl=ko]
Windows: Credential Management API [https://docs.microsoft.com/en-us/windows/desktop/secauthn/authentication-functions#low-level-credentials-management-functions]
OS X: Keychain Services [https://developer.apple.com/documentation/security/keychain_services]
Linux: 사용자가 설치해야 하는 libsecret [https://developer.gnome.org/libsecret/]

사용자 프로필 가져오기

사용자의 프로필 정보를 가져오려면 Firebase.Auth.FirebaseUser 인스턴스의 접근자 메서드를 사용합니다. 예를 들면 다음과 같습니다.

Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
string name = user.DisplayName;
string email = user.Email;
System.Uri photo_url = user.PhotoUrl;
Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
foreach (var profile in user.ProviderData) {

string email = profile.Email;
System.Uri photoUrl = profile.PhotoUrl;
Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
Firebase.Auth.UserProfile profile = new Firebase.Auth.UserProfile {
DisplayName = "Jane Q. User",
PhotoUrl = new System.Uri("https://example.com/jane-q-user/profile.jpg"),
Debug.LogError("UpdateUserProfileAsync was canceled.");
return;
Debug.LogError("UpdateUserProfileAsync encountered an error: " + task.Exception);
return;
Debug.Log("User profile updated successfully.");
UpdateEmail 메서드로 사용자의 이메일 주소를 설정할 수 있습니다. 예를 들면 다음과 같습니다.

Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
user.UpdateEmailAsync("user@example.com").ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("UpdateEmailAsync was canceled.");
return;
Debug.LogError("UpdateEmailAsync encountered an error: " + task.Exception);
return;
Debug.Log("User email updated successfully.");
SendEmailVerification 메서드로 사용자에게 주소 인증 메일을 보낼 수 있습니다. 예를 들면 다음과 같습니다.

Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
user.SendEmailVerificationAsync().ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("SendEmailVerificationAsync was canceled.");
return;
Debug.LogError("SendEmailVerificationAsync encountered an error: " + task.Exception);
return;
Debug.Log("Email sent successfully.");
UpdatePassword 메서드로 사용자의 비밀번호를 설정할 수 있습니다. 예를 들면 다음과 같습니다.

Firebase.Auth.FirebaseUser user = auth.CurrentUser;
string newPassword = "SOME-SECURE-PASSWORD";
if (user != null) {
user.UpdatePasswordAsync(newPassword).ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("UpdatePasswordAsync was canceled.");
return;
Debug.LogError("UpdatePasswordAsync encountered an error: " + task.Exception);
return;
Debug.Log("Password updated successfully.");
SendPasswordResetEmail 메서드로 사용자에게 비밀번호 재설정 이메일을 보낼 수 있습니다. 예를 들면 다음과 같습니다.

string emailAddress = "user@example.com";
if (user != null) {
auth.SendPasswordResetEmailAsync(emailAddress).ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("SendPasswordResetEmailAsync was canceled.");
return;
Debug.LogError("SendPasswordResetEmailAsync encountered an error: " + task.Exception);
return;
Debug.Log("Password reset email sent successfully.");
Delete 메서드로 사용자 계정을 삭제할 수 있습니다. 예를 들면 다음과 같습니다.

Firebase.Auth.FirebaseUser user = auth.CurrentUser;
if (user != null) {
user.DeleteAsync().ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("DeleteAsync was canceled.");
return;
Debug.LogError("DeleteAsync encountered an error: " + task.Exception);
return;
Debug.Log("User deleted successfully.");
Firebase.Auth.FirebaseUser user = auth.CurrentUser;

Firebase.Auth.Credential credential =
Firebase.Auth.EmailAuthProvider.GetCredential("user@example.com", "password1234");

if (user != null) {
user.ReauthenticateAsync(credential).ContinueWith(task => {
if (task.IsCanceled) {
Debug.LogError("ReauthenticateAsync was canceled.");
return;
Debug.LogError("ReauthenticateAsync encountered an error: " + task.Exception);
return;
Debug.Log("User reauthenticated successfully.");