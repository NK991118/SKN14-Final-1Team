Source URL: https://firebase.google.com/docs/auth/android/google-signin?hl=ko
Title: Google on Android로 인증

의견 보내기

Google on Android로 인증

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

사용자가 Google 계정을 사용하여 Firebase에 인증하도록 설정할 수 있습니다.

시작하기 전에

아직 추가하지 않았다면 Android 프로젝트에 Firebase를 추가 [https://firebase.google.com/docs/android/setup?hl=ko]합니다.

모듈(앱 수준) Gradle 파일(일반적으로 <project>/<app-module>/build.gradle.kts 또는 <project>/<app-module>/build.gradle)에서 Android용 Firebase Authentication 라이브러리의 종속 항목을 추가합니다. 라이브러리 버전 관리 제어에는 Firebase Android BoM [https://firebase.google.com/docs/android/learn-more?hl=ko#bom]을 사용하는 것이 좋습니다.

또한 Firebase Authentication을 설정하는 과정에서 앱에 인증 관리자 SDK를 추가해야 합니다.

dependencies {
BoM을 사용하지 않고 Firebase 라이브러리 종속 항목을 추가합니다.

Firebase BoM을 사용하지 않도록 선택한 경우에는 종속 항목 줄에 각 Firebase 라이브러리 버전을 지정해야 합니다.
앱에서 여러 Firebase 라이브러리를 사용하는 경우 모든 버전이 호환되도록 BoM을 사용하여 라이브러리 버전을 관리하는 것이 좋습니다.

dependencies {
Firebase Console에서 Google을 로그인 방법으로 사용 설정합니다.
Firebase Console [https://console.firebase.google.com/?hl=ko]에서 인증 섹션을 엽니다.
로그인 방법 탭에서 Google 로그인 방법을 사용 설정하고 저장을 클릭합니다.

Console에 메시지가 표시되면 업데이트된 Firebase 구성 파일(google-services.json)을 다운로드합니다. 여기에 Google 로그인에 필요한 OAuth 클라이언트 정보가 포함됩니다.
업데이트된 구성 파일을 Android 스튜디오 프로젝트로 이동하여 기존의 오래된 구성 파일을 교체합니다.
(Android 프로젝트에 Firebase 추가 [https://firebase.google.com/docs/android/setup?hl=ko#add-config-file]를 참조하세요.)

Firebase에 인증

인증 관리자 문서 [https://developer.android.com/identity/sign-in/credential-manager-siwg?hl=ko]의 단계에 따라 앱에 Google 계정으로 로그인을 통합합니다. 대략적인 안내는 다음과 같습니다.

GetGoogleIdOption을 사용하여 Google 로그인 요청을 인스턴스화합니다. 그런 다음 GetCredentialRequest를 사용하여 인증 관리자 요청을 만듭니다.

Kotlin
.addCredentialOption(googleIdOption)
.build()GoogleSignInActivity.kt [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/kotlin/GoogleSignInActivity.kt#L66-L77]

Java
GetGoogleIdOption googleIdOption = new GetGoogleIdOption.Builder()
.setFilterByAuthorizedAccounts(true)
.setServerClientId(getString(R.string.default_web_client_id))
.build();

GetCredentialRequest request = new GetCredentialRequest.Builder()
.addCredentialOption(googleIdOption)
.build();GoogleSignInActivity.java [https://github.com/firebase/snippets-android/blob/268a3858585da19107220dbad9ceb8a5fd23241a/auth/app/src/main/java/com/google/firebase/quickstart/auth/GoogleSignInActivity.java#L88-L97]

위의 요청에서 setServerClientId 메서드에 '서버' 클라이언트 ID를 전달해야 합니다. OAuth 2.0 클라이언트 ID를 확인하는 방법은 다음과 같습니다.

Google Cloud 콘솔에서 사용자 인증 정보 페이지 [https://console.cloud.google.com/apis/credentials?hl=ko]를 엽니다.
웹 애플리케이션 유형의 클라이언트 ID가 백엔드 서버의 OAuth 2.0 클라이언트 ID입니다.

Google 계정으로 로그인을 통합한 후 로그인 활동의 코드가 다음과 유사한지 확인합니다.

Kotlin
private fun handleSignIn(credential: Credential) {

Log.w(TAG, "Credential is not of type Google ID!")
private void handleSignIn(Credential credential) {
&& credential.getType().equals(TYPE_GOOGLE_ID_TOKEN_CREDENTIAL)) {
Bundle credentialData = customCredential.getData();
GoogleIdTokenCredential googleIdTokenCredential = GoogleIdTokenCredential.createFrom(credentialData);

Log.w(TAG, "Credential is not of type Google ID!");
private lateinit var auth: FirebaseAuth
private FirebaseAuth mAuth;
override fun onStart() {
super.onStart()
updateUI(currentUser)
@Override
public void onStart() {
super.onStart();
FirebaseUser currentUser = mAuth.getCurrentUser();
updateUI(currentUser);
private fun firebaseAuthWithGoogle(idToken: String) {
val credential = GoogleAuthProvider.getCredential(idToken, null)
auth.signInWithCredential(credential)
.addOnCompleteListener(this) { task ->
if (task.isSuccessful) {
updateUI(user)
private void firebaseAuthWithGoogle(String idToken) {
AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);
mAuth.signInWithCredential(credential)
.addOnCompleteListener(this, task -> {
if (task.isSuccessful()) {
Log.d(TAG, "signInWithCredential:success");
FirebaseUser user = mAuth.getCurrentUser();
updateUI(user);
Log.w(TAG, "signInWithCredential:failure", task.getException());
updateUI(null);

다음 단계

사용자가 처음으로 로그인하면 신규 사용자 계정이 생성되고 사용자가 로그인할 때 사용한 사용자 인증 정보(사용자 이름과 비밀번호, 전화번호 또는 인증 제공업체 정보)에 연결됩니다. 이 신규 계정은 Firebase 프로젝트에 저장되며 사용자의 로그인 방법과 무관하게 프로젝트 내의 모든 앱에서 사용자 본인 확인에 사용할 수 있습니다.

앱의 FirebaseUser [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseUser?hl=ko] 객체에서 사용자의 기본 프로필 정보를 가져올 수 있습니다. 사용자 관리 [https://firebase.google.com/docs/auth/android/manage-users?hl=ko]를 참조하세요.
Firebase Realtime Database와 Cloud Storage 보안 규칙 [https://firebase.google.com/docs/database/security/user-security?hl=ko]의 auth 변수에서 로그인한 사용자의 고유 사용자 ID를 가져온 후 이 ID를 통해 사용자가 액세스할 수 있는 데이터를 관리할 수 있습니다.

인증 제공업체의 사용자 인증 정보를 기존 사용자 계정에 연결 [https://firebase.google.com/docs/auth/android/account-linking?hl=ko]하면 사용자가 여러 인증 제공업체를 통해 앱에 로그인할 수 있습니다.

사용자를 로그아웃시키려면 signOut [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth?hl=ko#signOut()]을 호출합니다. 또한 인증 관리자 문서 [https://developer.android.com/identity/sign-in/credential-manager-siwg?hl=ko#handle-sign-out]에 권장된 대로 모든 사용자 인증 정보 제공업체에서 현재 사용자 인증 정보 상태를 삭제해야 합니다.

Kotlin
private fun signOut() {

credentialManager.clearCredentialState(clearRequest)
updateUI(null)
private void signOut() {

ClearCredentialStateRequest clearRequest = new ClearCredentialStateRequest();
credentialManager.clearCredentialStateAsync(
clearRequest,
new CancellationSignal(),
Executors.newSingleThreadExecutor(),
new CredentialManagerCallback<>() {
@Override
public void onResult(@NonNull Void result) {
updateUI(null);
Log.e(TAG, "Couldn't clear user credentials: " + e.getLocalizedMessage());