Source URL: https://firebase.google.com/docs/auth/android/manage-users?hl=ko
Title: Firebase에서 사용자 관리하기

의견 보내기

Firebase에서 사용자 관리하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

사용자 생성

Firebase 프로젝트에서 신규 사용자를 생성할 때는 createUserWithEmailAndPassword [https://firebase.google.com/docs/auth/android/password-auth?hl=ko#create_a_password-based_account] 메서드를 호출하는 방법과 Google 로그인 [https://firebase.google.com/docs/auth/android/google-signin?hl=ko] 또는 Facebook 로그인 [https://firebase.google.com/docs/auth/android/facebook-login?hl=ko]과 같은 제휴 ID 공급업체를 이용해 사용자의 최초 로그인을 처리하는 방법이 있습니다.

또한 Firebase Console [https://console.firebase.google.com/?hl=ko] '인증' 섹션의 '사용자' 페이지에서 비밀번호 인증을 사용하는 신규 사용자를 생성할 수도 있습니다.

현재 로그인한 사용자 가져오기

현재 사용자를 가져올 때 권장하는 방법은 getCurrentUser 메서드를 호출하는 것입니다.
로그인한 사용자가 없으면 getCurrentUser는 null을 반환합니다.

Kotlin
val user = Firebase.auth.currentUser
if (user != null) {
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
if (user != null) {

인증 객체의 초기화가 완료되지 않은 경우에도 getCurrentUser가 null을 반환할 수 있습니다.

AuthStateListener [https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth.AuthStateListener?hl=ko]를 연결하면 기본 토큰의 상태가 변경될 때마다 콜백이 호출됩니다. 이를 통해
위에서 설명한 것과 같은 특이한 사례에 대처할 수 있습니다.

사용자 프로필 가져오기

사용자의 프로필 정보를 가져오려면 FirebaseUser 인스턴스의 접근자 메서드를 사용합니다. 예를 들면 다음과 같습니다.

Kotlin
val user = Firebase.auth.currentUser
user?.let {
val email = it.email
val photoUrl = it.photoUrl

FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
if (user != null) {
String name = user.getDisplayName();
String email = user.getEmail();
Uri photoUrl = user.getPhotoUrl();

String uid = user.getUid();
val user = Firebase.auth.currentUser
user?.let {
for (profile in it.providerData) {

val email = profile.email
val photoUrl = profile.photoUrl
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
if (user != null) {
for (UserInfo profile : user.getProviderData()) {
String providerId = profile.getProviderId();

String uid = profile.getUid();

String name = profile.getDisplayName();
String email = profile.getEmail();
Uri photoUrl = profile.getPhotoUrl();
val user = Firebase.auth.currentUser

val profileUpdates = userProfileChangeRequest {
displayName = "Jane Q. User"
photoUri = Uri.parse("https://example.com/jane-q-user/profile.jpg")
Log.d(TAG, "User profile updated.")
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

UserProfileChangeRequest profileUpdates = new UserProfileChangeRequest.Builder()
.setDisplayName("Jane Q. User")
.setPhotoUri(Uri.parse("https://example.com/jane-q-user/profile.jpg"))
.build();

user.updateProfile(profileUpdates)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User profile updated.");

Kotlin
val user = Firebase.auth.currentUser

user!!.updateEmail("user@example.com")
Log.d(TAG, "User email address updated.")
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

user.updateEmail("user@example.com")
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User email address updated.");

Kotlin
val user = Firebase.auth.currentUser

user!!.sendEmailVerification()
Log.d(TAG, "Email sent.")
FirebaseAuth auth = FirebaseAuth.getInstance();
FirebaseUser user = auth.getCurrentUser();

user.sendEmailVerification()
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "Email sent.");
auth.setLanguageCode("fr")
auth.setLanguageCode("fr");

Kotlin
val user = Firebase.auth.currentUser
val newPassword = "SOME-SECURE-PASSWORD"

user!!.updatePassword(newPassword)
Log.d(TAG, "User password updated.")
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
String newPassword = "SOME-SECURE-PASSWORD";

user.updatePassword(newPassword)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User password updated.");

Kotlin
val emailAddress = "user@example.com"

Firebase.auth.sendPasswordResetEmail(emailAddress)
Log.d(TAG, "Email sent.")
FirebaseAuth auth = FirebaseAuth.getInstance();
String emailAddress = "user@example.com";

auth.sendPasswordResetEmail(emailAddress)
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "Email sent.");
auth.setLanguageCode("fr")
auth.setLanguageCode("fr");

Kotlin
val user = Firebase.auth.currentUser!!

user.delete()
Log.d(TAG, "User account deleted.")
FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

user.delete()
.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
if (task.isSuccessful()) {
Log.d(TAG, "User account deleted.");
val user = Firebase.auth.currentUser!!

.getCredential("user@example.com", "password1234")

FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();

AuthCredential credential = EmailAuthProvider
.getCredential("user@example.com", "password1234");

.addOnCompleteListener(new OnCompleteListener<Void>() {
@Override
public void onComplete(@NonNull Task<Void> task) {
Log.d(TAG, "User re-authenticated.");