Source URL: https://developers.google.com/maps/documentation/javascript/place-autocomplete-new?hl=ko
Title: Place Autocomplete 위젯

의견 보내기

Place Autocomplete 위젯

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

유럽 경제 지역 (EEA) 개발자

청구서 수신 주소가 유럽 경제 지역에 있는 경우 2025년 7월 8일부터
Google Maps Platform EEA 서비스 약관 [https://cloud.google.com/terms/maps-platform/eea?hl=ko]
이 서비스 이용에 적용됩니다. 기능은 리전에 따라 다릅니다.
자세히 알아보기 [https://developers.google.com/maps/comms/eea/faq?hl=ko]

장소 자동 완성 위젯 [https://developers.google.com/maps/documentation/javascript/place-autocomplete-new?hl=ko]은 텍스트 입력란을 만들고 UI 선택 목록에 장소 예상 검색어를 제공하며 사용자의 선택에 대한 응답으로 장소 세부정보를 반환합니다. 장소 자동 완성 위젯을 사용하여 완전한 자체 포함 자동 완성 사용자 인터페이스를 웹페이지에 삽입합니다.

기본 요건

장소 자동 완성 기능을 사용하려면 Google Cloud 프로젝트에서 'Places API (신규)'를 사용 설정해야 합니다. 자세한 내용은 시작하기 [https://developers.google.com/maps/documentation/javascript/place-get-started?hl=ko]를 참고하세요.

새로운 소식

Place Autocomplete이 다음과 같이 개선되었습니다.

자동 완성 위젯 UI가 텍스트 입력 자리표시자, 예상 검색어 목록 로고, 장소 예상 검색어의 지역 현지화(RTL 언어 포함)를 지원합니다.
스크린 리더 및 키보드 상호작용에 대한 지원을 포함하여 접근성이 개선되었습니다.
자동 완성 위젯이 반환된 객체의 처리를 간소화하기 위해 새 장소 클래스 [https://developers.google.com/maps/documentation/javascript/place?hl=ko]를 반환합니다.
휴대기기 및 소형 화면에 대한 지원이 개선되었습니다.
성능이 향상되고 그래픽 모양이 개선되었습니다.

자동 완성 위젯 추가

자동 완성 위젯은 텍스트 입력란을 만들고 UI 선택 목록에 장소 예상 검색어를 제공하며 gmp-select 리스너를 사용하여 사용자 클릭에 대한 응답으로 장소 세부정보를 반환합니다. 이 섹션에서는 웹페이지 또는 Google 지도에 자동 완성 위젯을 추가하는 방법을 설명합니다.

웹페이지에 자동 완성 위젯 추가

웹페이지에 자동 완성 위젯을 추가하려면 새 google.maps.places.PlaceAutocompleteElement를 만들고 다음 예와 같이 페이지에 추가합니다.

TypeScript

placeAutocomplete.locationBias = center;

map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);index.ts [https://github.com/googlemaps-samples/js-api-samples/blob/4f42c487aec19ab2aa7ba0d4c9c77ff28e4eb404/dist/samples/place-autocomplete-map/docs/index.ts#L28-L37]

참고: TypeScript 및 Google 지도 사용에 관한 가이드 [https://developers.google.com/maps/documentation/javascript/using-typescript?hl=ko]를 읽어 보세요.

JavaScript

placeAutocomplete.locationBias = center;
map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);index.js [https://github.com/googlemaps-samples/js-api-samples/blob/4f42c487aec19ab2aa7ba0d4c9c77ff28e4eb404/dist/samples/place-autocomplete-map/docs/index.js#L27-L35]

전체 코드 예 보기 [https://developers.google.com/maps/documentation/javascript/place-autocomplete-new?hl=ko#example-maps]

자동 완성 예상 검색어 제한

기본적으로 Place Autocomplete는 사용자 위치 근처의 예상 검색어에 편중된 모든 장소 유형을 표시하며 사용자가 선택한 장소의 사용 가능한 모든 데이터 필드를 가져옵니다.
결과를 제한하거나 상세 검색하여 더 관련성 높은 예상 검색어를 표시하려면 PlaceAutocompleteElementOptions [https://developers.google.com/maps/documentation/javascript/reference/places-widget?hl=ko#PlaceAutocompleteElementOptions]를 설정하세요.

결과를 제한하면 자동 완성 위젯이 제한 지역 밖의 모든 결과를 무시합니다. 일반적인 방법은 결과를 지도 경계로 제한하는 것입니다. 결과를 상세 검색하면 자동 완성 위젯이 지정된 지역 내 결과를 표시하지만 일부 일치 항목이 해당 지역을 벗어날 수 있습니다.

경계나 지도 표시 영역을 제공하지 않으면 API가 IP 주소에서 사용자의 위치를 감지하려고 시도하고 해당 위치에 편중된 결과를 반환합니다. 가능하면 항상 경계를 설정하세요. 그렇지 않으면 각 사용자가 받는 예측이 서로 다를 수 있습니다. 또한 일반적으로 예측을 개선하려면 지도를 화면 이동하거나 확대/축소하여 설정한 적절한 표시 영역이나 개발자가 기기 위치 및 반경을 기반으로 설정한 표시 영역을 제공해야 합니다. 반경을 사용할 수 없는 경우에는 5km가 Place Autocomplete에 적절한 기본값으로 간주됩니다. 반경이 0인 표시 영역(단일 점), 가로가 100m 미만에 불과한 표시 영역 또는 지구 전체 둘레에 해당하는 표시 영역은 설정하지 마세요.

국가별 장소 검색 제한

장소 검색을 하나 이상의 특정 국가로 제한하려면 다음 스니펫에 표시된 대로 includedRegionCodes 속성을 사용하여 국가 코드를 지정합니다.

장소 검색결과 상세 검색

다음과 같이 locationBias 속성을 사용하고 반경을 전달하여 장소 검색결과를 원 영역에 배치합니다.

장소 검색결과를 특정 유형으로 제한

다음과 같이 includedPrimaryTypes 속성을 사용하고 하나 이상의 유형을 지정하여 장소 검색결과를 특정 유형으로 제한합니다.

selectedPlaceTitle.textContent = 'Selected Place:';
selectedPlaceInfo.textContent = JSON.stringify(
place.toJSON(), /* replacer */ null, /* space */ 2);

selectedPlaceTitle.textContent = 'Selected Place:';
selectedPlaceInfo.textContent = JSON.stringify(place.toJSON(), /* replacer */ null, /* space */ 2);

map.setZoom(17);

updateInfoWindow(content, place.location);
marker.position = place.location;

map.setZoom(17);
updateInfoWindow(content, place.location);
marker.position = place.location;
async function initMap(): Promise<void> {
selectedPlaceTitle.textContent = 'Selected Place:';
selectedPlaceInfo.textContent = JSON.stringify(
place.toJSON(), /* replacer */ null, /* space */ 2);
async function initMap() {
selectedPlaceTitle.textContent = 'Selected Place:';
selectedPlaceInfo.textContent = JSON.stringify(place.toJSON(), /* replacer */ null, /* space */ 2);
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Place Autocomplete element</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<p style="font-family: roboto, sans-serif">Search for a place here:</p>

<!-- prettier-ignore -->
<script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
({key: "AIzaSyA6myHzS10YXdcazAFalmXvDkrYCp5cLc8", v: "weekly"});</script>
</body>
</html>index.html [https://github.com/googlemaps-samples/js-api-samples/blob/4f42c487aec19ab2aa7ba0d4c9c77ff28e4eb404/dist/samples/place-autocomplete-element/docs/index.html#L8-L22]

샘플 사용해 보기

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps-samples/js-api-samples/tree/main/dist/samples/place-autocomplete-element/jsfiddle]

지도 자동 완성

이 예에서는 Google 지도에 자동 완성 위젯을 추가하는 방법을 보여줍니다.

TypeScript
google.maps.importLibrary("places")
]);

zoom: 13,
mapId: '4504f8b37365c3d0',
mapTypeControl: false,
placeAutocomplete.locationBias = center;

map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

map.setZoom(17);

updateInfoWindow(content, place.location);
marker.position = place.location;
infoWindow.setPosition(center);
infoWindow.open({
map,
anchor: marker,
shouldFocus: false,
google.maps.importLibrary("places")
]);
zoom: 13,
mapId: '4504f8b37365c3d0',
mapTypeControl: false,
placeAutocomplete.locationBias = center;
map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);
map.setZoom(17);
updateInfoWindow(content, place.location);
marker.position = place.location;
infoWindow.setPosition(center);
infoWindow.open({
map,
anchor: marker,
shouldFocus: false,
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Place Autocomplete map</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div class="place-autocomplete-card" id="place-autocomplete-card">
<p>Search for a place here:</p>
</div>
<div id="map"></div>

<!-- prettier-ignore -->
<script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
({key: "AIzaSyA6myHzS10YXdcazAFalmXvDkrYCp5cLc8", v: "weekly"});</script>
</body>
</html>index.html [https://github.com/googlemaps-samples/js-api-samples/blob/4f42c487aec19ab2aa7ba0d4c9c77ff28e4eb404/dist/samples/place-autocomplete-map/docs/index.html#L8-L25]

샘플 사용해 보기

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps-samples/js-api-samples/tree/main/dist/samples/place-autocomplete-map/jsfiddle]

장소 선택 도구 구성요소 사용

장소 선택 도구 구성요소는 최종 사용자가 자동 완성을 사용하여 특정 주소나 장소를 검색할 수 있는 텍스트 입력입니다. 이 라이브러리는 개발자가 더 나은 지도와 위치 기능을 더 빠르게 빌드하는 데 도움이 되는 웹 구성요소 모음인 확장 구성요소 라이브러리 [https://github.com/googlemaps/extended-component-library]의 일부입니다.

장소 선택 도구 구성기 [https://configure.mapsplatform.google/place-picker?hl=ko]를 사용하여 맞춤 장소 선택 도구 구성요소의 삽입 가능한 코드를 만든 다음 React, Angular와 같은 인기 프레임워크 또는 프레임워크 없이 사용할 수 있도록 내보냅니다.

의견 보내기