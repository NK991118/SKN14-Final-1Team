Source URL: https://developers.google.com/maps/documentation/javascript/dds-datasets/style-data-features?hl=ko
Title: 데이터 지형지물 스타일 지정

의견 보내기

데이터 지형지물 스타일 지정

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

플랫폼 선택:

Android [https://developers.google.com/maps/documentation/android-sdk/dds-datasets/style-data-features?hl=ko]

iOS [https://developers.google.com/maps/documentation/ios-sdk/dds-datasets/style-data-features?hl=ko]

JavaScript [https://developers.google.com/maps/documentation/javascript/dds-datasets/style-data-features?hl=ko]

데이터 세트 지형지물 레이어의 style 속성을 스타일 지정 로직이 포함될 수 있는 google.maps.FeatureStyleFunction 또는 레이어의 모든 지형지물의 스타일을 균일하게 지정하는 google.maps.FeatureStyleOptions로 설정하여 데이터 지형지물에 스타일을 설정합니다. 데이터 지형지물에 채우기(색상, 불투명도), 획(색상, 불투명도, 획 두께) 및 지름(점) 스타일을 적용할 수 있습니다. 이 페이지에서는 프로그래매틱 방식으로 데이터 세트에 액세스하고 그 지형지물의 스타일을 지정하는 방법을 설명하고 점, 다각형 및 다중선 도형 기반 데이터 지형지물의 스타일 지정 예를 보여줍니다.

데이터 세트에 데이터 기반 스타일을 지정하면 데이터 세트를 만드는 데 사용된 지리 공간 데이터 파일로부터 제공된 위도와 경도 좌표를 기반으로 데이터 지형지물을 렌더링합니다.

데이터 지형지물 속성

데이터 세트의 모든 데이터는 지형지물 스타일 함수에서 액세스할 수 있습니다. 데이터 지형지물 속성을 가져오려면 먼저 데이터 세트 내 모든 데이터가 포함된 데이터 세트 지형지물을 가져온 다음, 여기 표시된 대로 원하는 특정 데이터 속성을 가져옵니다.

TypeScript

index.js [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/dds-datasets-point/docs/index.js#L12-L17]

지형지물 스타일 옵션

지형지물 스타일 옵션 [https://developers.google.com/maps/documentation/javascript/reference/data-driven-styling?hl=ko#FeatureStyleOptions]에서는 데이터 지형지물 레이어 [https://developers.google.com/maps/documentation/javascript/reference/data-driven-styling?hl=ko#FeatureLayer]의 스타일을 정의합니다. 예를 들어 다각형의 채우기와 획 또는 점의 색상과 지름의 스타일을 지정합니다. 다음 예에서는 지형지물의 style 속성을 사용하여 직접 적용할 수 있는 지형지물 스타일 옵션을 보여줍니다.

TypeScript

index.js [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/dds-datasets-polyline/docs/index.js#L25-L27]

지형지물 스타일 함수

데이터 세트 지형지물의 스타일 지정 로직을 정의하려면 지형지물 스타일 함수를 사용하세요.
지형지물의 스타일을 지정하려면 style 속성을 google.maps.FeatureStyleFunction으로 설정하세요.
스타일 함수를 사용하여 지형지물 레이어에서 개별 지형지물의 스타일을 지정하는 로직을 정의할 수 있습니다. featureLayer.style이 설정되면 영향을 받는 지형지물 레이어의 모든 지형지물에 대해 스타일 함수가 실행됩니다. 스타일 속성을 설정할 때 함수가 적용됩니다. 업데이트하려면 스타일 속성을 다시 설정해야 합니다. 다음 예는 간단한 지형지물 스타일 함수를 보여줍니다.

TypeScript

lastClickedFeatureIds.includes(datasetFeature.datasetAttributes["globalid"])
) {
return styleClicked;
lastInteractedFeatureIds.includes(
datasetFeature.datasetAttributes["globalid"],
) {
return styleMouseMove;
CSV 데이터 파일을 발췌한 아래 부분에서, x열 및 y열은 지리적 위치에 사용됩니다. LatLng열은 포함되지만 지리적 위치는 두 열로 표현해야 하므로 이 예에서는 사용되지 않습니다. 다람쥐 개체수 조사 데이터 세트에는 관찰된 털 색깔 및 다람쥐의 행동과 관련된 매우 다양한 데이터 포인트가 포함됩니다(모두 보려면 가로로 스크롤해야 합니다).

| X | Y | UniqueSquirrelID | Hectare | Shift | Date | Hectare SquirrelNumber | Age | PrimaryFurColor | HighlightFurColor | CombinationofPrimaryandHighlightColor | Colornotes | Location | AboveGroundSighter Measurement | SpecificLocation | Running | Chasing | Climbing | Eating | Foraging | Other Activities | Kuks | Quaas | Moans | Tailflags | Tailtwitches | Approaches | Indifferent | Runsfrom | OtherInteractions | LatLng |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| -73.9561344937861 | 40.7940823884086 | 37F-PM-1014-03 | 37F | PM | 10142018 | 3 |  |  |  | + |  |  |  |  | false | false | false | false | false |  | false | false | false | false | false | false | false | false |  | POINT (-73.9561344937861 40.7940823884086) |
| -73.9688574691102 | 40.7837825208444 | 21B-AM-1019-04 | 21B | AM | 10192018 | 4 |  |  |  | + |  |  |  |  | false | false | false | false | false |  | false | false | false | false | false | false | false | false |  | POINT (-73.9688574691102 40.7837825208444) |
| -73.9742811484852 | 40.775533619083 | 11B-PM-1014-08 | 11B | PM | 10142018 | 8 |  | Gray |  | Gray+ |  | Above Ground | 10 |  | false | true | false | false | false |  | false | false | false | false | false | false | false | false |  | POINT (-73.97428114848522 40.775533619083) |
| -73.9596413903948 | 40.7903128889029 | 32E-PM-1017-14 | 32E | PM | 10172018 | 14 | Adult | Gray |  | Gray+ | Nothing selected as Primary. Gray selected as Highlights. Made executive adjustments. |  |  |  | false | false | false | true | true |  | false | false | false | false | false | false | false | true |  | POINT (-73.9596413903948 40.7903128889029) |
| -73.9702676472613 | 40.7762126854894 | 13E-AM-1017-05 | 13E | AM | 10172018 | 5 | Adult | Gray | Cinnamon | Gray+Cinnamon |  | Above Ground |  | on tree stump | false | false | false | false | true |  | false | false | false | false | false | false | false | false |  | POINT (-73.9702676472613 40.7762126854894) |
| -73.9683613516225 | 40.7725908847499 | 11H-AM-1010-03 | 11H | AM | 10102018 | 3 | Adult | Cinnamon | White | Cinnamon+White |  |  |  |  | false | false | false | false | true |  | false | false | false | false | true | false | true | false |  | POINT (-73.9683613516225 40.7725908847499) |
| -73.9541201789795 | 40.7931811701082 | 36H-AM-1010-02 | 36H | AM | 10102018 | 2 | Adult | Gray |  | Gray+ | just outside hectare | Ground Plane | FALSE |  | false | false | false | false | true |  | false | false | false | false | false | false | false | false |  | POINT (-73.9541201789795 40.7931811701082) |

점 데이터 지형지물 스타일 지정

이 예의 코드는 각 다람쥐의 기본 털 색깔과 부분 털 색깔을 조합한 CombinationofPrimaryandHighlightColor 속성을 기반으로 각 점의 채우기 색상과 획 색상의 스타일을 간단하게 지정합니다.

TypeScript
function setStyle(/* FeatureStyleFunctionOptions */ params) {
break;
case 'Cinnamon+':
return /* FeatureStyleOptions */ { fillColor: '#8b0000', pointRadius: 8 };
break;
case 'Cinnamon+Gray':
return /* FeatureStyleOptions */ { fillColor: '#8b0000', strokeColor: 'gray', pointRadius: 6 };
break;
case 'Cinnamon+White':
return /* FeatureStyleOptions */ { fillColor: '#8b0000', strokeColor: 'white', pointRadius: 6 };
break;
case 'Gray+':
return /* FeatureStyleOptions */ { fillColor: 'gray', pointRadius: 8 };
break;
case 'Gray+Cinnamon':
return /* FeatureStyleOptions */ { fillColor: 'gray', strokeColor: '#8b0000', pointRadius: 6 };
break;
case 'Gray+Cinnamon, White':
return /* FeatureStyleOptions */ { fillColor: 'silver', strokeColor: '#8b0000', pointRadius: 6 };
break;
case 'Gray+White':
return /* FeatureStyleOptions */ { fillColor: 'gray', strokeColor: 'white', pointRadius: 6 };
break;
default: // Color not defined.
return /* FeatureStyleOptions */ { fillColor: 'yellow', pointRadius: 8 };
break;

function setStyle(/* FeatureStyleFunctionOptions */ params) {

break;
case "Cinnamon+":
return /* FeatureStyleOptions */ { fillColor: "#8b0000", pointRadius: 8 };
break;
case "Cinnamon+Gray":
return /* FeatureStyleOptions */ {
fillColor: "#8b0000",
strokeColor: "gray",
pointRadius: 6,
case "Cinnamon+White":
return /* FeatureStyleOptions */ {
fillColor: "#8b0000",
strokeColor: "white",
pointRadius: 6,
case "Gray+":
return /* FeatureStyleOptions */ { fillColor: "gray", pointRadius: 8 };
break;
case "Gray+Cinnamon":
return /* FeatureStyleOptions */ {
fillColor: "gray",
strokeColor: "#8b0000",
pointRadius: 6,
case "Gray+Cinnamon, White":
return /* FeatureStyleOptions */ {
fillColor: "silver",
strokeColor: "#8b0000",
pointRadius: 6,
case "Gray+White":
return /* FeatureStyleOptions */ {
fillColor: "gray",
strokeColor: "white",
pointRadius: 6,
default: // Color not defined.
return /* FeatureStyleOptions */ { fillColor: "yellow", pointRadius: 8 };
break;
break;
case 'Cinnamon+':
return /* FeatureStyleOptions */ { fillColor: '#8b0000', pointRadius: 8 };
break;
case 'Cinnamon+Gray':
return /* FeatureStyleOptions */ { fillColor: '#8b0000', strokeColor: 'gray', pointRadius: 6 };
break;
case 'Cinnamon+White':
return /* FeatureStyleOptions */ { fillColor: '#8b0000', strokeColor: 'white', pointRadius: 6 };
break;
case 'Gray+':
return /* FeatureStyleOptions */ { fillColor: 'gray', pointRadius: 8 };
break;
case 'Gray+Cinnamon':
return /* FeatureStyleOptions */ { fillColor: 'gray', strokeColor: '#8b0000', pointRadius: 6 };
break;
case 'Gray+Cinnamon, White':
return /* FeatureStyleOptions */ { fillColor: 'silver', strokeColor: '#8b0000', pointRadius: 6 };
break;
case 'Gray+White':
return /* FeatureStyleOptions */ { fillColor: 'gray', strokeColor: 'white', pointRadius: 6 };
break;
default: // Color not defined.
return /* FeatureStyleOptions */ { fillColor: 'yellow', pointRadius: 8 };
break;

map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(attributionDiv);
attributionLabel.style.opacity = '0.7';
attributionLabel.style.fontFamily = 'Roboto,Arial,sans-serif';
attributionLabel.style.fontSize = '10px';
attributionLabel.style.padding = '2px';
attributionLabel.style.margin = '2px';
attributionLabel.textContent = 'Data source: NYC Open Data';
return attributionLabel;
title.classList.add('title');
legend.appendChild(title);
if (colors[k][1]) {
box.style.borderColor = colors[k][1];
txt.innerText = k;
wrapper.appendChild(box);
wrapper.appendChild(txt);
legend.appendChild(wrapper);

break;
case "Cinnamon+":
return /* FeatureStyleOptions */ { fillColor: "#8b0000", pointRadius: 8 };
break;
case "Cinnamon+Gray":
return /* FeatureStyleOptions */ {
fillColor: "#8b0000",
strokeColor: "gray",
pointRadius: 6,
case "Cinnamon+White":
return /* FeatureStyleOptions */ {
fillColor: "#8b0000",
strokeColor: "white",
pointRadius: 6,
case "Gray+":
return /* FeatureStyleOptions */ { fillColor: "gray", pointRadius: 8 };
break;
case "Gray+Cinnamon":
return /* FeatureStyleOptions */ {
fillColor: "gray",
strokeColor: "#8b0000",
pointRadius: 6,
case "Gray+Cinnamon, White":
return /* FeatureStyleOptions */ {
fillColor: "silver",
strokeColor: "#8b0000",
pointRadius: 6,
case "Gray+White":
return /* FeatureStyleOptions */ {
fillColor: "gray",
strokeColor: "white",
pointRadius: 6,
default: // Color not defined.
return /* FeatureStyleOptions */ { fillColor: "yellow", pointRadius: 8 };
break;

map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(attributionDiv);
attributionLabel.style.opacity = "0.7";
attributionLabel.style.fontFamily = "Roboto,Arial,sans-serif";
attributionLabel.style.fontSize = "10px";
attributionLabel.style.padding = "2px";
attributionLabel.style.margin = "2px";
attributionLabel.textContent = "Data source: NYC Open Data";
return attributionLabel;

title.classList.add("title");
legend.appendChild(title);

if (colors[k][1]) {
box.style.borderColor = colors[k][1];

txt.innerText = k;
wrapper.appendChild(box);
wrapper.appendChild(txt);
legend.appendChild(wrapper);
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Style a point data feature</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div id="map"></div>

<!-- prettier-ignore -->
<script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
({key: "AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg", v: "beta"});</script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/dds-datasets-point/docs/index.html#L8-L22]

샘플 사용해 보기

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/dds-datasets-point/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-dds-datasets-point&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.&hl=ko]

다각형 데이터 스타일 지정의 예

이 예에서는 다각형 도형 기반 데이터 지형지물의 스타일을 지정하는 방법을 보여줍니다.

데이터 세트에 관한 정보

이 예에서 사용되는 데이터 세트는 뉴욕시의 공원 [https://data.cityofnewyork.us/Recreation/Parks-Properties/enfh-gkve]을 묘사합니다.
데이터 세트 GeoJSON 파일의 다음 발췌 부분은 대표적인 지형지물 항목을 보여줍니다.

"type": "Feature",
"properties": {
"jurisdiction": "DPR",
"mapped": "False",
"zipcode": "11356",
"acres": "0.05",
"location": "College Pl., College Pt. Blvd., bet. 11 Ave. and 12 Ave.",
"nys_assembly": "27",
"councildistrict": "19",
"url": "http://www.nycgovparks.org/parks/Q042/",
"typecategory": "Triangle/Plaza",
"us_congress": "14",
"eapply": "Poppenhusen Park",
"parentid": "Q-07",
"gispropnum": "Q042",
"retired": "false",
"communityboard": "407",
"objectid": "6248",
"globalid": "F4810079-CBB9-4BE7-BBFA-B3C0C35D5DE5",
"name311": "Poppenhusen Park",
"department": "Q-07",
"pip_ratable": "true",
"subcategory": "Sitting Area/Triangle/Mall",
"precinct": "109",
"permit": "true",
"acquisitiondate": null,
"omppropid": "Q042",
"gisobjid": "100000301",
"signname": "Poppenhusen Park",
"address": null,
"permitparent": "Q-07",
"class": "PARK",
"nys_senate": "11",
"permitdistrict": "Q-07",
"borough": "Q",
"waterfront": "false"
function setStyle(/* FeatureStyleFunctionOptions */ params) {
case 'Parkway': // Color historical house sites red.
return /* FeatureStyleOptions */ {
strokeColor: 'red',
strokeWeight: 2,
strokeOpacity: 1,
fillColor: 'red',
fillOpacity: 0.5,
default: // Color other type categories green.
return /* FeatureStyleOptions */ {
strokeColor: 'green',
strokeWeight: 2,
strokeOpacity: 1,
fillColor: 'green',
fillOpacity: 0.3,

function setStyle(/* FeatureStyleFunctionOptions */ params) {
case "Parkway": // Color historical house sites red.
return /* FeatureStyleOptions */ {
strokeColor: "red",
strokeWeight: 2,
strokeOpacity: 1,
fillColor: "red",
fillOpacity: 0.5,
default: // Color other type categories green.
return /* FeatureStyleOptions */ {
strokeColor: "green",
strokeWeight: 2,
strokeOpacity: 1,
fillColor: "green",
fillOpacity: 0.3,
case 'Parkway': // Color historical house sites red.
return /* FeatureStyleOptions */ {
strokeColor: 'red',
strokeWeight: 2,
strokeOpacity: 1,
fillColor: 'red',
fillOpacity: 0.5,
default: // Color other type categories green.
return /* FeatureStyleOptions */ {
strokeColor: 'green',
strokeWeight: 2,
strokeOpacity: 1,
fillColor: 'green',
fillOpacity: 0.3,

map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(attributionDiv);
attributionLabel.style.opacity = '0.7';
attributionLabel.style.fontFamily = 'Roboto,Arial,sans-serif';
attributionLabel.style.fontSize = '10px';
attributionLabel.style.padding = '2px';
attributionLabel.style.margin = '2px';
attributionLabel.textContent = 'Data source: NYC Open Data';
return attributionLabel;
case "Parkway": // Color historical house sites red.
return /* FeatureStyleOptions */ {
strokeColor: "red",
strokeWeight: 2,
strokeOpacity: 1,
fillColor: "red",
fillOpacity: 0.5,
default: // Color other type categories green.
return /* FeatureStyleOptions */ {
strokeColor: "green",
strokeWeight: 2,
strokeOpacity: 1,
fillColor: "green",
fillOpacity: 0.3,

map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(attributionDiv);
attributionLabel.style.opacity = "0.7";
attributionLabel.style.fontFamily = "Roboto,Arial,sans-serif";
attributionLabel.style.fontSize = "10px";
attributionLabel.style.padding = "2px";
attributionLabel.style.margin = "2px";
attributionLabel.textContent = "Data source: NYC Open Data";
return attributionLabel;
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Style a polygon data feature with more detail</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div id="map"></div>

<!-- prettier-ignore -->
<script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
({key: "AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg", v: "beta"});</script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/dds-datasets-polygon-colors/docs/index.html#L8-L22]

샘플 사용해 보기

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/dds-datasets-polygon-colors/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-dds-datasets-polygon-colors&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.&hl=ko]

다중선 데이터 스타일 지정의 예

이 예에서는 다중선 도형 기반 데이터 지형지물의 스타일을 지정하는 방법을 보여줍니다.

데이터 세트에 관한 정보

이 예에서 사용되는 데이터 세트는 시애틀 지역의 다리 [https://data-seattlecitygis.opendata.arcgis.com/datasets/9db5967e01224efcafbfbb64b06ff68f_0/explore]를 보여줍니다.
데이터 세트 GeoJSON 파일의 다음 발췌 부분은 대표적인 지형지물 항목을 보여줍니다.

"type": "Feature",
"properties": {
"OBJECTID": 1,
"COMPTYPE": 66,
"COMPKEY": 515774,
"HANSEGKEY": 489781,
"UNITID": "BRG-935",
"UNITTYPE": " ",
"BRGUNITID": "BRG-935",
"UNITDESC_BRG": "YALE AVE BR REV LANE OC                                                                                                                                                                                                                                        ",
"UNITDESC_SEG": "HOWELL ST ON RP BETWEEN HOWELL ST AND I5 SB                                                                                                                                                                                                                    ",
"INSTDATE": null,
"EXPDATE": null,
"STATUS": " ",
"STATUSDT": null,
"CONDITION": " ",
"CONDDT": null,
"OWN": " ",
"LSTVERIFY": null,
"MAINTBY": " ",
"ADDBY": "GARCIAA",
"ADDDTTM": "2010-01-21T00:00:00Z",
"MODBY": null,
"MODDTTM": null,
"BR_NBR": 935,
"BR_CODE": " 935",
"BR_TYPE": "ST",
"BR_NAME": "YALE AVE BR REV LANE OC",
"BR_FACILITIES": "YALE AVE-SR 5 ON RAMP",
"BR_FEATURES": "SR 5 REV LANE",
"BR_RATING": 0,
"BR_INSET": 1,
"BR_GEO": "DT",
"BR_OWNER": "DOT",
"BR_OWNER_NAME": "State of Washington",
"GEOBASID": 0,
"XGEOBASID": 0,
"GISSEGKEY": 489781,
"EARTHQUAKE_RESPONSE_TEAM": " ",
"SHAPE_Length": 220.11891836147655

index.js [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/dds-datasets-polyline/docs/index.js#L25-L27]

샘플 소스 코드 전체 보기

TypeScript

map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(attributionDiv);
attributionLabel.style.opacity = '0.7';
attributionLabel.style.fontFamily = 'Roboto,Arial,sans-serif';
attributionLabel.style.fontSize = '10px';
attributionLabel.style.padding = '2px';
attributionLabel.style.margin = '2px';
attributionLabel.textContent = 'Data source: Seattle GeoData';
return attributionLabel;

map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(attributionDiv);
attributionLabel.style.opacity = "0.7";
attributionLabel.style.fontFamily = "Roboto,Arial,sans-serif";
attributionLabel.style.fontSize = "10px";
attributionLabel.style.padding = "2px";
attributionLabel.style.margin = "2px";
attributionLabel.textContent = "Data source: Seattle GeoData";
return attributionLabel;
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Style a polyline data feature</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div id="map"></div>

<!-- prettier-ignore -->
<script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
({key: "AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg", v: "beta"});</script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/dds-datasets-polyline/docs/index.html#L8-L22]

샘플 사용해 보기

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/dds-datasets-polyline/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-dds-datasets-polyline&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.&hl=ko]

의견 보내기