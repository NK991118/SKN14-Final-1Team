Source URL: https://developers.google.com/maps/documentation/places/ios-sdk/autocomplete?hl=ko
Title: Place Autocomplete

의견 보내기

Place Autocomplete

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

지원 중단 알림
공지:
initWithBounds:filter [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_fetcher?hl=ko#a44c0072a1b028fd6901e2ea072ca536b] 메서드는 v3.10.0부터 지원 중단되었으며 v4.0.0 이상에서는 지원되지 않습니다.
대신 GMSAutocompleteFetcher.h [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_fetcher?hl=ko]에서 initWithFilter: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_fetcher?hl=ko]를 사용하세요.
자세히 알아보기 [https://developers.google.com/maps/deprecations?hl=ko#ios-v4-deprecations]

공지:
GMSAutocompleteViewController [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_view_controller?hl=ko#ac06dcda1d3c7b0f5482e6dd354faee30],
GMSAutocompleteResultsViewController [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_results_view_controller?hl=ko#aadb1323be3d90dcc4c068f58acd8b371],
GMSAutocompleteTableDataSource [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_table_data_source?hl=ko#a8ee6c557eeb95c342be170587374b5bc]의 setAutocompleteBoundsUsingNorthEastCorner:SouthWestCorner 도우미 메서드는 v3.10.0부터 지원 중단되었으며 v4.0.0 이상에서는 지원되지 않습니다.
대신 locationBias [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_filter?hl=ko#af207d0926dc8f294598631125a79a4d5] 또는 locationRestriction [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_filter?hl=ko#adaf2a7ee97a6c127d35cf85e301034a6]을 사용하세요.
자세히 알아보기 [https://developers.google.com/maps/deprecations?hl=ko#ios-v4-deprecations]

알림:
GMSAutocompleteViewController.autocompleteBounds 및 GMSAutocompleteViewController.autocompleteBoundsMode 속성은 v3.9.0부터 지원 중단되었으며 v4.0.0 이상에서는 지원되지 않습니다.
동일한 기능을 이용하려면 GMSAutocompleteViewController.filter [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_filter?hl=ko]을 GMSAutocompleteFilter.locationBias [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_filter?hl=ko#af207d0926dc8f294598631125a79a4d5] 또는 GMSAutocompleteFilter.locationRestriction [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_filter?hl=ko#adaf2a7ee97a6c127d35cf85e301034a6]과 함께 사용하세요.

알림:
findAutocompletePredictionsFromQuery:bounds:boundsMode:filter:SessionToken:callback,
autocompleteQuery:bounds:boundsMode:filter:callback,
autocompleteQuery:bounds:boundsMode:filter:callback의 bounds 및 boundsMode 매개변수는 v3.9.0부터 지원 중단되었으며 v4.0.0 이상에서는 지원되지 않습니다. 동일한 기능을 이용하려면 findAutocompletePredictionsFromQuery:filter:sessionToken:callback [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_places_client?hl=ko#ab60773feec0e68751c5a7f1066b9d252)]을 GMSAutocompleteFilter.locationBias [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_filter?hl=ko#af207d0926dc8f294598631125a79a4d5] 또는 GMSAutocompleteFilter.locationRestriction [https://developers.google.com/maps/documentation/places/ios-sdk/reference/interface_g_m_s_autocomplete_filter?hl=ko#adaf2a7ee97a6c127d35cf85e301034a6]과 함께 사용하세요.

iOS용 Places SDK의 자동 완성 서비스는 사용자 검색어에 대한 응답으로 장소 예상 검색어를 반환합니다. 사용자가 입력하면 자동 완성 서비스가 비즈니스, 주소, 플러스 코드 [https://plus.codes/], 관심 장소와 같은 장소에 대한 추천을 반환합니다.

다음과 같은 방식으로 자동완성을 앱에 추가할 수 있습니다.

자동 완성 UI 컨트롤을 추가 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#autocomplete_ui_control]하여 개발 시간을 절약하고 일관된 사용자 경험을 보장합니다.
프로그래매틱 방식으로 장소 예측을 가져와 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#get_place_predictions] 맞춤 사용자 환경을 만드세요.

자동 완성 UI 컨트롤 추가

자동 완성 UI 컨트롤은 자동 완성 기능이 내장된 검색 대화상자입니다. 사용자가 검색어를 입력하면 컨트롤에 선택할 수 있는 예상 장소 목록이 표시됩니다. 사용자가 선택하면 GMSPlace [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlace?hl=ko] 인스턴스가 반환되며, 앱에서 이를 사용하여 선택한 장소에 관한 세부정보를 가져올 수 있습니다.

다음과 같은 방식으로 자동완성 UI 컨트롤을 앱에 추가할 수 있습니다.

전체 화면 컨트롤 추가 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#add_a_full-screen_control]
결과 컨트롤러 추가 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#add_a_results_control]
표 데이터 소스 사용 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#using_a_table_data_source]

전체 화면 컨트롤 추가

사용자가 선택할 때까지 자동 완성 UI가 앱의 UI를 일시적으로 대체하는 모달 컨텍스트가 필요한 경우 전체 화면 컨트롤을 사용합니다. 이 기능은 GMSAutocompleteViewController [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteResultsViewController?hl=ko] 클래스에서 제공합니다. 사용자가 장소를 선택하면 앱이 콜백을 수신합니다.

전체 화면 컨트롤을 앱에 추가하려면:

기본 앱에서 자동 완성 UI 컨트롤을 실행하는 UI 요소를 만듭니다(예: UIButton의 터치 핸들러).
상위 뷰 컨트롤러에서 GMSAutocompleteViewControllerDelegate [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Protocols/GMSAutocompleteViewControllerDelegate?hl=ko] 프로토콜을 구현합니다.
GMSAutocompleteViewController [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteResultsViewController?hl=ko]의 인스턴스를 만들고 상위 뷰 컨트롤러를 위임 속성으로 할당합니다.
반환할 장소 데이터 유형을 정의하는 GMSPlaceField [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Enums/GMSPlaceField?hl=ko]를 만듭니다.
GMSAutocompleteFilter [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteFilter?hl=ko]를 추가하여 쿼리를 특정 장소 유형 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#filter-types]으로 제한합니다.
[self presentViewController...]를 사용하여 GMSAutocompleteViewController [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteResultsViewController?hl=ko]를 표시합니다.
didAutocompleteWithPlace 위임 메서드에서 사용자의 선택을 처리합니다.
didAutocompleteWithPlace, didFailAutocompleteWithError, wasCancelled 대리자 메서드에서 컨트롤러를 닫습니다.

다음 예는 사용자가 버튼을 탭할 때 이에 응답하여 GMSAutocompleteViewController [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteResultsViewController?hl=ko]를 실행하는 한 가지 방법을 보여줍니다.

Swift
import UIKit
import GooglePlaces

class ViewController: UIViewController {

override func viewDidLoad() {
makeButton()

UInt(GMSPlaceField.placeID.rawValue))!
autocompleteController.placeFields = fields

autocompleteController.autocompleteFilter = filter

btnLaunchAc.setTitle("Launch autocomplete", for: .normal)
btnLaunchAc.addTarget(self, action: #selector(autocompleteClicked), for: .touchUpInside)
self.view.addSubview(btnLaunchAc)
UIApplication.shared.isNetworkActivityIndicatorVisible = true
UIApplication.shared.isNetworkActivityIndicatorVisible = false
Objective-C
#import "ViewController.h"
@import GooglePlaces;

@interface ViewController () <GMSAutocompleteViewControllerDelegate>

@end

@implementation ViewController {
GMSAutocompleteFilter *_filter;
[self makeButton];
GMSAutocompleteViewController *acController = [[GMSAutocompleteViewController alloc] init];
acController.delegate = self;

GMSPlaceField fields = (GMSPlaceFieldName | GMSPlaceFieldPlaceID);
acController.placeFields = fields;

_filter.types = @[ kGMSPlaceTypeBank ];
acController.autocompleteFilter = _filter;

UIButton *btnLaunchAc = [UIButton buttonWithType:UIButtonTypeCustom];
[btnLaunchAc addTarget:self
btnLaunchAc.frame = CGRectMake(5.0, 150.0, 300.0, 35.0);
btnLaunchAc.backgroundColor = [UIColor blueColor];
[self.view addSubview:btnLaunchAc];
NSLog(@"Place name %@", place.name);
NSLog(@"Place ID %@", place.placeID);
NSLog(@"Place attributions %@", place.attributions.string);
NSLog(@"Error: %@", [error description]);
UISearchController의 searchBar를 앱의 UI에 추가합니다.
didAutocompleteWithPlace 위임 메서드에서 사용자의 선택을 처리합니다.

UISearchController의 검색창을 앱의 UI에 배치하는 방법에는 여러 가지가 있습니다.

탐색 메뉴에 검색창 추가하기 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#adding_a_search_bar_to_the_navigation_bar]
뷰 상단에 검색창 추가 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#adding_a_search_bar_to_the_top_of_a_view]
팝오버 결과를 사용하여 검색창 추가 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#adding_a_search_bar_using_popover_results]

탐색 메뉴에 검색창 추가

다음 코드 예시는 결과 컨트롤러를 추가하고, 탐색 메뉴에 searchBar을 추가하고, 사용자의 선택을 처리하는 것을 보여줍니다.

Swift
class ViewController: UIViewController {

resultsViewController = GMSAutocompleteResultsViewController()
resultsViewController?.delegate = self

searchController = UISearchController(searchResultsController: resultsViewController)
searchController?.searchResultsUpdater = resultsViewController

navigationItem.titleView = searchController?.searchBar

UIApplication.shared.isNetworkActivityIndicatorVisible = true
UIApplication.shared.isNetworkActivityIndicatorVisible = false
Objective-C
-   (void)viewDidLoad {
_resultsViewController = [[GMSAutocompleteResultsViewController alloc] init];
_resultsViewController.delegate = self;

_searchController = [[UISearchController alloc]

self.navigationItem.titleView = _searchController.searchBar;

NSLog(@"Place name %@", place.name);
NSLog(@"Place address %@", place.formattedAddress);
NSLog(@"Place attributions %@", place.attributions.string);
NSLog(@"Error: %@", [error description]);
import UIKit
import GooglePlaces

class ViewController: UIViewController {

resultsViewController = GMSAutocompleteResultsViewController()
resultsViewController?.delegate = self

searchController = UISearchController(searchResultsController: resultsViewController)
searchController?.searchResultsUpdater = resultsViewController

view.addSubview(subView)
searchController?.searchBar.sizeToFit()
searchController?.hidesNavigationBarDuringPresentation = false

UIApplication.shared.isNetworkActivityIndicatorVisible = true
UIApplication.shared.isNetworkActivityIndicatorVisible = false
Objective-C
-   (void)viewDidLoad {
[super viewDidLoad];

_resultsViewController = [[GMSAutocompleteResultsViewController alloc] init];
_resultsViewController.delegate = self;

_searchController = [[UISearchController alloc]

UIView *subView = [[UIView alloc] initWithFrame:CGRectMake(0, 65.0, 250, 50)];

[subView addSubview:_searchController.searchBar];
[_searchController.searchBar sizeToFit];
[self.view addSubview:subView];

NSLog(@"Place name %@", place.name);
NSLog(@"Place address %@", place.formattedAddress);
NSLog(@"Place attributions %@", place.attributions.string);
NSLog(@"Error: %@", [error description]);
navigationController?.navigationBar.translucent = false
searchController?.hidesNavigationBarDuringPresentation = false

self.edgesForExtendedLayout = .top

Objective-C
self.navigationController.navigationBar.translucent = NO;
_searchController.hidesNavigationBarDuringPresentation = NO;

self.edgesForExtendedLayout = UIRectEdgeTop;

팝오버 결과를 사용하여 검색창 추가

다음 코드 예시는 탐색 메뉴 오른쪽에 검색창을 배치하고 팝오버에 결과를 표시하는 방법을 보여줍니다.

주의:
팝오버는 iPad와 iPhone 6 이상에서 가로 모드로만 표시됩니다. 다른 모든 기기에서는 전체 화면 뷰 컨트롤러로 대체됩니다.

Swift
import UIKit
import GooglePlaces

class ViewController: UIViewController {

resultsViewController = GMSAutocompleteResultsViewController()
resultsViewController?.delegate = self

searchController = UISearchController(searchResultsController: resultsViewController)
searchController?.searchResultsUpdater = resultsViewController

searchController?.modalPresentationStyle = .popover
UIApplication.shared.isNetworkActivityIndicatorVisible = true
UIApplication.shared.isNetworkActivityIndicatorVisible = false
Objective-C
-   (void)viewDidLoad {
[super viewDidLoad];

_resultsViewController = [[GMSAutocompleteResultsViewController alloc] init];
_resultsViewController.delegate = self;

_searchController = [[UISearchController alloc]

self.navigationItem.rightBarButtonItem =
[[UIBarButtonItem alloc] initWithCustomView:_searchController.searchBar];

_searchController.modalPresentationStyle = UIModalPresentationPopover;
NSLog(@"Place name %@", place.name);
NSLog(@"Place address %@", place.formattedAddress);
NSLog(@"Place attributions %@", place.attributions.string);
NSLog(@"Error: %@", [error description]);

didAutocompleteWithPlace, didFailAutocompleteWithError, wasCancelled 대리자 메서드에서 컨트롤러를 닫습니다.

다음 코드 예에서는 UISearchBar이 별도로 추가될 때 GMSAutocompleteTableDataSource [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteTableDataSource?hl=ko] 클래스를 사용하여 UIViewController의 표 뷰를 제어하는 방법을 보여줍니다.

Swift
import UIKit

class PlaceAutocompleteViewController: UIViewController {

private var tableView: UITableView!
private var tableDataSource: GMSAutocompleteTableDataSource!

override func viewDidLoad() {
super.viewDidLoad()

view.addSubview(searchBar)

tableDataSource = GMSAutocompleteTableDataSource()
tableDataSource.delegate = self

tableView = UITableView(frame: CGRect(x: 0, y: 64, width: self.view.frame.size.width, height: self.view.frame.size.height - 44))
tableView.delegate = tableDataSource
tableView.dataSource = tableDataSource

view.addSubview(tableView)
UIApplication.shared.isNetworkActivityIndicatorVisible = false
UIApplication.shared.isNetworkActivityIndicatorVisible = true
Objective-C
@import UIKit;

@interface PlaceAutocompleteViewController () <GMSAutocompleteTableDataSourceDelegate, UISearchBarDelegate>

@end

@implementation PlaceAutocompleteViewController {
UITableView *tableView;
GMSAutocompleteTableDataSource *tableDataSource;

UISearchBar *searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 20, self.view.frame.size.width, 44)];
searchBar.delegate = self;

[self.view addSubview:searchBar];

tableDataSource = [[GMSAutocompleteTableDataSource alloc] init];
tableDataSource.delegate = self;

tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 64, self.view.frame.size.width, self.view.frame.size.height - 44)];
tableView.delegate = tableDataSource;
tableView.dataSource = tableDataSource;

[self.view addSubview:tableView];
UIApplication.sharedApplication.networkActivityIndicatorVisible = NO;

UIApplication.sharedApplication.networkActivityIndicatorVisible = YES;

NSLog(@"Place name: %@", place.name);
NSLog(@"Place address: %@", place.formattedAddress);
NSLog(@"Place attributions: %@", place.attributions);
NSLog(@"Error %@", error.description);
UIAppearance 프로토콜 사용

UIAppearance 프로토콜 [https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAppearance_Protocol/index.html]을 사용하여 지정된 UI 요소의 모양 프록시를 가져올 수 있으며, 이를 사용하여 UI 요소의 색상을 설정할 수 있습니다. 수정하면 지정된 UI 요소의 모든 인스턴스가 영향을 받습니다. 예를 들어 다음 예에서는 UISearchBar에 포함된 경우 UITextField 클래스의 텍스트 색상을 녹색으로 전역적으로 변경합니다.

[[UITextField appearanceWhenContainedIn:[UISearchBar class], nil]
UIColor *darkGray = [UIColor darkGrayColor];
UIColor *lightGray = [UIColor lightGrayColor];

[[UINavigationBar appearance] setTintColor:lightGray];

NSAttributedString *attributedPlaceholder =
[[NSAttributedString alloc] initWithString:@"Search"

UIView *selectedBackgroundView = [[UIView alloc] init];
selectedBackgroundView.backgroundColor = [UIColor lightGrayColor];
[UITableViewCell appearanceWhenContainedIn:[GMSAutocompleteViewController class], nil]
.selectedBackgroundView = selectedBackgroundView;

UI 컨트롤 스타일 속성 설정

UI 컨트롤 요소의 일부에는 UIAppearance 프로토콜의 영향을 받지 않는 속성이 있으므로 직접 설정해야 합니다. 다음 코드 예시에서는 전경색과 배경색을 정의하고 이를 acController라는 UI 컨트롤 인스턴스에 적용하는 방법을 보여줍니다. ViewController.m의 onLaunchClicked 메서드에 다음 코드를 추가합니다.

UIColor *darkGray = [UIColor darkGrayColor];
UIColor *lightGray = [UIColor lightGrayColor];

acController.secondaryTextColor = [UIColor colorWithWhite:1.0f alpha:0.5f];
acController.primaryTextColor = lightGray;
acController.primaryTextHighlightColor = [UIColor grayColor];
acController.tableCellBackgroundColor = darkGray;
acController.tableCellSeparatorColor = lightGray;
acController.tintColor = lightGray;
참고: GMSAutocompleteViewController 및 GMSAutocompleteResultsViewController의 경우 인터페이스 빌더를 사용하여 이러한 값을 설정할 수 있습니다.

프로그래매틱 방식으로 장소 예상 검색어 가져오기

자동 완성 위젯에서 제공하는 UI 대신 맞춤 검색 UI를 만들 수 있습니다. 이렇게 하려면 앱이 프로그래매틱 방식으로 장소 예측을 가져와야 합니다. 앱은 다음 방법 중 하나로 예측된 장소 이름 또는 주소 목록을 가져올 수 있습니다.

GMSPlacesClient findAutocompletePredictionsFromQuery:에 전화 걸기 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#call_gmsplacesclient]
fetcher 사용 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#use_the_fetcher]

GMSPlacesClient findAutocompletePredictionsFromQuery:님에게 전화 거는 중

예측된 장소 이름 또는 주소 목록을 가져오려면 먼저 GMSPlacesClient를 인스턴스화 [https://developers.google.com/maps/documentation/places/ios-sdk/start?hl=ko#step-3-start-writing-code]한 다음 다음 매개변수를 사용하여 GMSPlacesClient
findAutocompletePredictionsFromQuery: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient?hl=ko#-findautocompletepredictionsfromquery:filter:sessiontoken:callback:] 메서드를 호출합니다.

사용자가 입력한 텍스트가 포함된 autocompleteQuery 문자열입니다.
각 개별 세션을 식별하는 데 사용되는 GMSAutocompleteSessionToken [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes?hl=ko#/c:objc(cs)GMSAutocompleteSessionToken] 앱은 각 자동 완성 요청 호출에 동일한 토큰을 전달한 다음, fetchPlacefromPlaceID: [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSPlacesClient?hl=ko]에 대한 후속 호출에서 해당 토큰을 장소 ID와 함께 전달하여 사용자가 선택한 장소의 장소 세부정보를 가져와야 합니다.
A
GMSAutocompleteFilter [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteFilter?hl=ko]
to:

결과를 특정 지역으로 편향시키거나 제한합니다.
결과를 특정 장소 유형 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/autocomplete?hl=ko#filter-types]으로 제한합니다.
위도 및 경도 경계로 지정된 특정 지역으로 결과를 편향시키는 GMSPlaceLocationBias/제한 객체입니다.

반환된 예측을 처리하는 콜백 메서드입니다.

아래 코드 예는 findAutocompletePredictionsFromQuery: 호출을 보여줍니다.

Swift
/**
*   Create a new session token. Be sure to use the same token for calling
*   findAutocompletePredictions, as well as the subsequent place details request.
*   This ensures that the user's query and selection are billed as a single session.
*/
filter.locationBias = GMSPlaceRectangularLocationOption( northEastBounds,
southWestBounds);

placesClient?.findAutocompletePredictions(fromQuery: "cheesebu",

filter: filter,
sessionToken: token,
callback: { (results, error) in
if let error = error {
print("Autocomplete error: \(error)")
return
Objective-C
/**
*   Create a new session token. Be sure to use the same token for calling
*   findAutocompletePredictionsFromQuery:, as well as the subsequent place details request.
*   This ensures that the user's query and selection are billed as a single session.
*/
GMSAutocompleteSessionToken *token = [[GMSAutocompleteSessionToken alloc] init];

GMSAutocompleteFilter *_filter = [[GMSAutocompleteFilter alloc] init];
_filter.types = @[ kGMSPlaceTypeBank ];

[_placesClient findAutocompletePredictionsFromQuery:@"cheesebu"
filter:_filter sessionToken:token callback:^(NSArray<GMSAutocompletePrediction *> * _Nullable results, NSError * _Nullable error) {
if (error != nil) {
NSLog(@"An error occurred %@", [error localizedDescription]);
return;
NSLog(@"Result %@ with PlaceID %@", result.attributedFullText, result.placeID);

다음 코드 예에서는 enumerateAttribute를 사용하여 사용자의 쿼리에 있는 텍스트와 일치하는 결과 부분을 굵은 텍스트로 강조 표시하는 방법을 보여줍니다.

Swift

Objective-C
UIFont *regularFont = [UIFont systemFontOfSize:[UIFont labelFontSize]];
UIFont *boldFont = [UIFont boldSystemFontOfSize:[UIFont labelFontSize]];

NSMutableAttributedString *bolded = [prediction.attributedFullText mutableCopy];
[bolded enumerateAttribute:kGMSAutocompleteMatchAttribute
inRange:NSMakeRange(0, bolded.length)
options:0
usingBlock:^(id value, NSRange range, BOOL *stop) {
UIFont *font = (value == nil) ? regularFont : boldFont;
[bolded addAttribute:NSFontAttributeName value:font range:range];

Fetcher 사용

처음부터 자동 완성 컨트롤을 빌드하려면 GMSPlacesClient [https://developers.google.com/maps/documentation/places/ios-sdk/reference?hl=ko]에서 autocompleteQuery 메서드를 래핑하는 GMSAutocompleteFetcher [https://developers.google.com/maps/documentation/places/ios-sdk/reference?hl=ko]를 사용하면 됩니다. 패처는 요청을 제한하여 가장 최근에 입력된 검색 텍스트의 결과만 반환합니다. UI 요소는 제공하지 않습니다.

GMSAutocompleteFetcher [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteFetcher?hl=ko]을 구현하려면 다음 단계를 따르세요.

GMSAutocompleteFetcherDelegate [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Protocols/GMSAutocompleteFetcherDelegate?hl=ko] 프로토콜을 구현합니다.
GMSAutocompleteFetcher [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteFetcher?hl=ko] 객체를 만듭니다.
사용자가 입력할 때 가져오기 도구에서 sourceTextHasChanged를 호출합니다.
didAutcompleteWithPredictions [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Protocols/GMSAutocompleteFetcherDelegate?hl=ko#-didautocompletewithpredictions:] 및 didFailAutocompleteWithError [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Protocols/GMSAutocompleteFetcherDelegate?hl=ko#-didfailautocompletewitherror:] 프로토콜 메서드를 사용하여 예측과 오류를 처리합니다.

다음 코드 예에서는 가져오기를 사용하여 사용자 입력을 가져오고 텍스트 뷰에 장소 일치 항목을 표시하는 방법을 보여줍니다. 장소 선택 기능이 생략되었습니다. FetcherSampleViewController는 FetcherSampleViewController.h에서 UIViewController에서 파생됩니다.

Swift
import UIKit
import GooglePlaces

class ViewController: UIViewController {

view.backgroundColor = .white
edgesForExtendedLayout = []

fetcher?.provide(token)

textField = UITextField(frame: CGRect(x: 5.0, y: 10.0,
width: view.bounds.size.width - 5.0,
height: 64.0))
textField?.autoresizingMask = .flexibleWidth
textField?.addTarget(self, action: #selector(textFieldDidChange(textField:)),
for: .editingChanged)

resultText = UITextView(frame: CGRect(x: 0, y: 65.0,
width: view.bounds.size.width,
height: view.bounds.size.height - 65.0))
resultText?.backgroundColor = UIColor(white: 0.95, alpha: 1.0)
resultText?.text = "No Results"
resultText?.isEditable = false

self.view.addSubview(textField!)
self.view.addSubview(resultText!)
Objective-C
#import "FetcherSampleViewController.h"
#import <GooglePlaces/GooglePlaces.h>

@interface FetcherSampleViewController () <GMSAutocompleteFetcherDelegate>

@end

@implementation FetcherSampleViewController {
UITextField *_textField;
UITextView *_resultText;
GMSAutocompleteFetcher* _fetcher;

self.view.backgroundColor = [UIColor whiteColor];
self.edgesForExtendedLayout = UIRectEdgeNone;

CLLocationCoordinate2D neBoundsCorner = CLLocationCoordinate2DMake(-33.843366, 151.134002);
CLLocationCoordinate2D swBoundsCorner = CLLocationCoordinate2DMake(-33.875725, 151.200349);

GMSAutocompleteFilter *autocompleteFilter = [[GMSAutocompleteFilter alloc] init];
autocompleteFilter.locationRestriction =
GMSPlaceRectangularLocationOption(neBoundsCorner, swBoundsCorner);

44.0f)];
_textField.autoresizingMask = UIViewAutoresizingFlexibleWidth;
[_textField addTarget:self
action:@selector(textFieldDidChange:)
self.view.bounds.size.height - 45.0f)];
_resultText.backgroundColor = [UIColor colorWithWhite:0.95f alpha:1.0f];
_resultText.text = @"No Results";
_resultText.editable = NO;
[self.view addSubview:_textField];
[self.view addSubview:_resultText];
NSLog(@"%@", textField.text);
[_fetcher sourceTextHasChanged:textField.text];
NSMutableString *resultsStr = [NSMutableString string];
for (GMSAutocompletePrediction *prediction in predictions) {
[resultsStr appendFormat:@"%@\n", [prediction.attributedPrimaryText string]];

자동 완성 결과 제한

자동 완성 UI 컨트롤을 설정하여 결과를 특정 지리적 지역으로 제한하거나 결과를 하나 이상의 장소 유형 또는 특정 국가로 필터링할 수 있습니다. 결과를 제한하려면 다음을 수행하세요.

정의된 지역 내 결과를 선호 (바이어스)하려면 GMSAutocompleteFilter에서 locationBias를 설정합니다 (정의된 지역 외부의 결과가 반환될 수도 있음). locationRestriction도 설정된 경우 locationBias이 무시됩니다.
정의된 지역 내의 결과만 표시 (제한)하려면 GMSAutocompleteFilter에서 locationRestriction를 설정합니다 (정의된 지역 내의 결과만 반환됨).

참고: 이 제한은 경로 전체에만 적용됩니다. 직사각형 경계 외부에 있는 종합적인 결과는 위치 제한과 겹치는 경로를 기반으로 반환될 수도 있습니다.

특정 장소 유형을 준수하는 결과만 반환하려면 GMSAutocompleteFilter에서 types를 설정하세요(예를 들어 TypeFilter.ADDRESS를 지정하면 위젯이 정확한 주소가 있는 결과만 반환함).
최대 5개의 지정된 국가 내의 결과만 반환하려면 GMSAutocompleteFilter에서 countries를 설정하세요.

특정 지역에 편중된 결과

정의된 지역 내의 결과를 선호 (편향)하려면 다음과 같이 GMSAutocompleteFilter에서 locationBias를 설정합니다.
northEast = CLLocationCoordinate2DMake(39.0, -95.0);  southWest =
CLLocationCoordinate2DMake(37.5, -100.0);  GMSAutocompleteFilter *filter =
[[GMSAutocompleteFilter alloc] init];  filter.locationBias =
GMSPlaceRectangularLocationOption(northEast, southWest);

결과를 특정 지역으로 제한

정의된 지역 내의 결과만 표시 (제한)하려면 다음과 같이 GMSAutocompleteFilter에서 locationRestriction을 설정합니다.
northEast = CLLocationCoordinate2DMake(39.0, -95.0);  southWest =
CLLocationCoordinate2DMake(37.5, -100.0);  GMSAutocompleteFilter *filter =
[[GMSAutocompleteFilter alloc] init];  filter.locationRestriction =
GMSPlaceRectangularLocationOption(northEast, southWest);

국가별로 결과 필터링

최대 5개의 지정된 국가 내에서 결과를 필터링하려면 다음과 같이 GMSAutocompleteFilter에서 countries를 설정합니다.
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.countries = @[ @"au", @"nz" ];

장소 유형 또는 유형 컬렉션으로 결과 필터링

GMSAutoCompleteFilter [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Classes/GMSAutocompleteFilter?hl=ko]의 types 속성을 설정하여 결과를 특정 유형 또는 유형 모음으로 제한합니다.
이 속성을 사용하여 장소 유형 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/supported_types?hl=ko]의 표 1, 2, 3에 나열된 필터를 지정합니다. 유형을 지정하지 않으면 모든 유형이 반환됩니다.

유형 또는 유형 컬렉션 필터를 지정하려면 다음 단계를 따르세요.

types 속성을 사용하여 장소 유형 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/supported_types?hl=ko]에 표시된 표 1과 표 2의 type 값을 최대 5개까지 지정합니다. 유형 값은 GMSPlaceType [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Constants?hl=ko]의 상수로 정의됩니다.
types 속성을 사용하여 장소 유형 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/supported_types?hl=ko]에 표시된 표 3에서 유형 컬렉션을 지정합니다. 유형 컬렉션 값은 GMSPlaceType [https://developers.google.com/maps/documentation/places/ios-sdk/reference/objc/Constants?hl=ko]의 상수로 정의됩니다.

이 요청에서는 표 3의 단일 유형만 허용됩니다. 표 3의 값을 지정하는 경우 표 1이나 표 2의 값은 지정할 수 없습니다. 이 경우 오류가 발생합니다.

예를 들어 특정 장소 유형을 준수하는 결과만 반환하려면 GMSAutocompleteFilter에서 types을 설정합니다. 다음 예시는 정확한 주소가 있는 결과만 반환하도록 필터를 설정하는 방법을 보여줍니다.
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.types = @[ kGMSPlaceTypeAirport, kGMSPlaceTypeAmusementPark ];

Place Autocomplete (기존) 최적화

이 섹션에서는 Place Autocomplete (Legacy) 서비스를 최대한 활용하는 데 도움이 되는 권장사항을 설명합니다.

다음은 일반 가이드라인입니다.

작동하는 사용자 인터페이스를 개발하는 가장 빠른 방법은 Maps JavaScript API 장소 자동 완성 (기존) 위젯 [https://developers.google.com/maps/documentation/javascript/places-autocomplete?hl=ko#add-autocomplete], Android용 Places SDK 장소 자동 완성 (기존) 위젯 [https://developers.google.com/maps/documentation/places/android-sdk/autocomplete?hl=ko#add_an_autocomplete_widget] 또는 iOS용 Places SDK 장소 자동 완성 (기존) UI 컨트롤 [https://developers.google.com/maps/documentation/places/ios-sdk/autocomplete?hl=ko#adding_an_autocomplete_ui_control]을 사용하는 것입니다.
처음부터 기본적인 Place Autocomplete (Legacy) 데이터 필드 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/place-data-fields?hl=ko]를 이해합니다.

위치 상세 검색 및 위치 제한 필드는 선택사항이지만 자동 완성 성능에 상당한 영향을 미칠 수 있습니다.
API가 오류를 반환하는 경우 오류 처리를 사용하여 앱의 성능이 적절히 저하되도록 합니다.
선택된 항목이 없을 때 앱에서 처리하고 사용자에게 계속할 수 있는 방법을 제공하도록 합니다.

비용 최적화 권장사항

기본 비용 최적화

Place Autocomplete (Legacy) 서비스 사용 비용을 최적화하려면 장소 세부정보 (Legacy) 및 Place Autocomplete (Legacy) 위젯에서 필드 마스크를 사용하여 필요한 장소 데이터 필드 [https://developers.google.com/maps/documentation/places/ios-sdk/legacy/place-data-fields?hl=ko]만 반환하세요.

고급 비용 최적화

요청당 가격 [https://developers.google.com/maps/billing-and-pricing/sku-details?hl=ko#ac-per-request]에 액세스하고 장소 세부정보 (레거시) 대신 선택된 장소에 대한 Geocoding API 결과 [https://developers.google.com/maps/documentation/geocoding/overview?hl=ko#results]를 요청하려면 Place Autocomplete (레거시)를 프로그래매틱 방식으로 구현해 보세요. Geocoding API와 연결된 요청당 가격은 다음 두 조건이 모두 충족되는 경우 세션당(세션 기반) 가격보다 비용 효과적입니다.

사용자가 선택한 장소의 위도/경도 또는 주소만 필요한 경우 Geocoding API는 장소 세부정보 (기존) 호출보다 낮은 비용으로 이 정보를 제공합니다.
사용자가 평균 네 개 이하의 Place Autocomplete (레거시) 예상 검색어 요청 내에서 자동 완성 예상 검색어를 선택하면 요청당 가격이 세션당 가격보다 비용 효과적일 수 있습니다.

요구에 맞는 Place Autocomplete (기존) 구현을 선택하는 데 도움이 필요하면 다음 질문에 대한 답변에 해당하는 탭을 선택하세요.
애플리케이션에 선택된 예상 검색어의 주소 및 위도/경도 이외의 정보가 필요한가요?
[TAB_GROUP_PLACEHOLDER_0]

비용은 Google Maps Platform 가격 목록 [https://developers.google.com/maps/billing-and-pricing/pricing?hl=ko]을 참고하세요.

성능 권장사항

다음 가이드라인에서는 Place Autocomplete (기존) 성능을 최적화하는 방법을 설명합니다.

Place Autocomplete (Legacy) 구현에 국가별 제한사항, 위치 상세 검색 [https://developers.google.com/maps/documentation/places/web-service/autocomplete?hl=ko#location_biasing], (프로그래매틱 구현의 경우) 언어 환경설정을 추가합니다. 위젯은 사용자의 브라우저 또는 휴대기기에서 언어 환경설정을 선택하므로 언어 환경설정이 필요하지 않습니다.

Place Autocomplete (기존)에 지도와 함께 제공된 경우 지도 표시 영역별로 위치를 상세 검색할 수 있습니다.
예상 검색어 중 원하는 결과 주소가 없어 사용자가 Place Autocomplete (Legacy) 예상 검색어 중 하나를 선택하지 않는 경우 원래 사용자 입력을 재사용하여 더 관련성 높은 결과를 얻을 수 있습니다.
사용자가 주소 정보만 입력할 것으로 예상되는 경우 Geocoding API [https://developers.google.com/maps/documentation/geocoding/overview?hl=ko] 호출 시 원래 사용자 입력을 재사용합니다.
사용자가 이름 또는 주소로 특정 장소에 대한 쿼리를 입력할 것으로 예상되는 경우 Find Place (Legacy) 요청 [https://developers.google.com/maps/documentation/places/web-service/search?hl=ko#FindPlaceRequests]을 사용합니다.
특정 지역에서만 결과가 예상되는 경우 위치 상세 검색 [https://developers.google.com/maps/documentation/places/web-service/autocomplete?hl=ko#location_biasing]을 사용합니다.
다음과 같은 경우에는 Geocoding API로 대체하는 것이 가장 좋습니다.
건물 내 특정 단위 또는 아파트 주소와 같은 하위 구역 주소를 입력하는 사용자 예를 들어 체코 주소인 'Stroupežnického 3191/17, Praha'를 바탕으로 Place Autocomplete (기존)에서 부분 예측이 이루어집니다.
사용자가 뉴욕시의 '23-30 29th St, Queens' 또는 하와이 카우아이섬의 '47-380 Kamehameha Hwy, Kaneohe'처럼 도로 구간 접두사가 있는 주소를 입력하는 경우

문제 해결

다양한 오류가 발생할 수 있지만 앱에서 경험할 가능성이 가장 큰 오류는 일반적으로 구성 오류 (예: 잘못된 API 키가 사용되었거나 API 키가 잘못 구성됨) 또는 할당량 오류 (앱이 할당량을 초과함)로 인해 발생합니다. 할당량에 대한 자세한 내용은 사용량 한도 [https://developers.google.com/maps/documentation/places/ios-sdk/usage-and-billing?hl=ko#usage-ilmits]를 참고하세요.

자동 완성 컨트롤 사용 시 발생하는 오류는 다양한 위임 프로토콜의 didFailAutocompleteWithError() 메서드에 반환됩니다. 제공된 NSError 객체의 code 속성이 GMSPlacesErrorCode 열거형의 값 중 하나로 설정됩니다.

의견 보내기