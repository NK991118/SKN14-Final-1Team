Source URL: https://developers.google.com/maps/documentation/android-sdk/examples/marker?hl=ko
Title: 지도에 정보 창을 포함하는 마커 추가하기

의견 보내기

지도에 정보 창을 포함하는 마커 추가하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 예시에서는 마커를 사용하여 지도에서 위치를 식별합니다. 사용자가 마커를 탭하면 정보 창이 표시됩니다.

자세한 내용은 문서 [https://developers.google.com/maps/documentation/android-sdk/marker?hl=ko]를 참고하세요.

시작하기

샘플 코드를 사용하기 전에 개발 환경을 구성해야 합니다.
자세한 내용은 Android용 Maps SDK 코드 샘플 [https://developers.google.com/maps/documentation/android-sdk/examples?hl=ko]을 참고하세요.

코드 보기

Kotlin

class MarkerDemoActivity :
AppCompatActivity(),
OnMarkerClickListener,
OnInfoWindowClickListener,
OnMarkerDragListener,
OnInfoWindowLongClickListener,
OnInfoWindowCloseListener,
OnMapAndViewReadyListener.OnGlobalLayoutAndMapReadyListener {

private val TAG = MarkerDemoActivity::class.java.name

"BRISBANE" to LatLng(-27.47093, 153.0235),
"MELBOURNE" to LatLng(-37.81319, 144.96298),
"DARWIN" to LatLng(-12.4634, 130.8456),
"SYDNEY" to LatLng(-33.87365, 151.20689),
"ADELAIDE" to LatLng(-34.92873, 138.59995),
"PERTH" to LatLng(-31.952854, 115.857342),
"ALICE_SPRINGS" to LatLng(-24.6980, 133.8807)

return window
return contents
else -> 0 // Passing 0 to setImageResource will clear the image view.

if (title != null) {
if (snippet != null && snippet.length > 12) {
snippetUi.text = SpannableString(snippet).apply {
setSpan(ForegroundColorSpan(Color.MAGENTA), 0, 10, 0)
setSpan(ForegroundColorSpan(Color.BLUE), 12, snippet.length, 0)
setContentView(R.layout.marker_demo)

topText = findViewById(R.id.top_text)

rotationBar = findViewById<SeekBar>(R.id.rotationSeekBar).apply {
max = 360
setOnSeekBarChangeListener(object: OnSeekBarChangeListener {

checkReadyThen { markerRainbow.map { it.rotation = rotation ?: 0f } }

options = findViewById<RadioGroup>(R.id.custom_info_window_options).apply {
setOnCheckedChangeListener { _, _ ->
if (lastSelectedMarker?.isInfoWindowShown == true) {
OnMapAndViewReadyListener(mapFragment, this)

with(map) {

setOnInfoWindowClickListener(this@MarkerDemoActivity)
setOnMarkerDragListener(this@MarkerDemoActivity)
setOnInfoWindowCloseListener(this@MarkerDemoActivity)
setOnInfoWindowLongClickListener(this@MarkerDemoActivity)

moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 50))

title = "Brisbane",
snippet = "Population: 2,074,200",
icon = BitmapDescriptorFactory
.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)
),

title = "Sydney",
snippet = "Population: 4,627,300",
icon = BitmapDescriptorFactory.fromResource(R.drawable.arrow),
infoWindowAnchorX = 0.5f,
infoWindowAnchorY = 0.5f
),

title = "Melbourne",
snippet = "Population: 4,137,400",
draggable = true
),

title = "Alice Springs",
icon = vectorToBitmap(
R.drawable.ic_android, Color.parseColor("#A4C639"))
),

title = "Perth",
snippet = "Population: 1,738,800"
),

"ADELAIDE" to PlaceDetails(
position = places.getValue("ADELAIDE"),
title = "Adelaide",
snippet = "Population: 1,213,000"

"DARWIN ${it + 1}", PlaceDetails(
position = places.getValue("DARWIN"),
title = "Darwin Marker ${it + 1}",
snippet = "z-index initially ${it + 1}",
zIndex = it.toFloat()
.position(position)
.title(title)
.snippet(snippet)
.icon(icon)
.infoWindowAnchor(infoWindowAnchorX, infoWindowAnchorY)
.draggable(draggable)
.zIndex(zIndex))

(0 until numMarkersInRainbow).mapTo(markerRainbow) {
map.addMarker(MarkerOptions().apply{
position(LatLng(
-30 + 10 * Math.sin(it * Math.PI / (numMarkersInRainbow - 1)),
135 - 10 * Math.cos(it * Math.PI / (numMarkersInRainbow - 1))))
title("Marker $it")
icon(BitmapDescriptorFactory.defaultMarker((it * 360 / numMarkersInRainbow)
.toFloat()))
flat(flatBox.isChecked)
rotation(rotationBar.progress.toFloat())
Log.e(TAG, "Resource not found")
return BitmapDescriptorFactory.defaultMarker()
vectorDrawable.intrinsicHeight, Bitmap.Config.ARGB_8888)
val canvas = Canvas(bitmap)
vectorDrawable.setBounds(0, 0, canvas.width, canvas.height)
DrawableCompat.setTint(vectorDrawable, color)
vectorDrawable.draw(canvas)
return BitmapDescriptorFactory.fromBitmap(bitmap)
addMarkersToMap()
Toast.makeText(this, "${marker.title} z-index set to ${marker.zIndex}",
Toast.LENGTH_SHORT).show()

lastSelectedMarker = marker

if (marker.position == places.getValue("PERTH")) {
val start = SystemClock.uptimeMillis()
val duration = 1500

val interpolator = BounceInterpolator()

handler.post(object : Runnable {
override fun run() {
val elapsed = SystemClock.uptimeMillis() - start
val t = Math.max(
1 - interpolator.getInterpolation(elapsed.toFloat() / duration), 0f)
marker.setAnchor(0.5f, 1.0f + 2 * t)

alpha = random.nextFloat()
Toast.makeText(this, "Click Info Window", Toast.LENGTH_SHORT).show()
Toast.makeText(this, "Close Info Window", Toast.LENGTH_SHORT).show()
Toast.makeText(this, "Info Window long click", Toast.LENGTH_SHORT).show()
Toast.makeText(this, R.string.map_not_ready, Toast.LENGTH_SHORT).show()

public class MarkerDemoActivity extends AppCompatActivity implements
OnMarkerClickListener,
OnInfoWindowClickListener,
OnMarkerDragListener,
OnSeekBarChangeListener,
OnInfoWindowLongClickListener,
OnInfoWindowCloseListener,
OnMapAndViewReadyListener.OnGlobalLayoutAndMapReadyListener {

private static final LatLng BRISBANE = new LatLng(-27.47093, 153.0235);

private static final LatLng MELBOURNE = new LatLng(-37.81319, 144.96298);

private static final LatLng DARWIN = new LatLng(-12.4634, 130.8456);

private static final LatLng SYDNEY = new LatLng(-33.87365, 151.20689);

private static final LatLng ADELAIDE = new LatLng(-34.92873, 138.59995);

private static final LatLng PERTH = new LatLng(-31.952854, 115.857342);

private static final LatLng ALICE_SPRINGS = new LatLng(-24.6980, 133.8807);

private final View mContents;

CustomInfoWindowAdapter() {
mWindow = getLayoutInflater().inflate(R.layout.custom_info_window, null);
mContents = getLayoutInflater().inflate(R.layout.custom_info_contents, null);
return mWindow;
return mContents;

String title = marker.getTitle();
TextView titleUi = ((TextView) view.findViewById(R.id.title));
if (title != null) {
SpannableString titleText = new SpannableString(title);
titleText.setSpan(new ForegroundColorSpan(Color.RED), 0, titleText.length(), 0);
titleUi.setText(titleText);
String snippet = marker.getSnippet();
TextView snippetUi = ((TextView) view.findViewById(R.id.snippet));
if (snippet != null && snippet.length() > 12) {
SpannableString snippetText = new SpannableString(snippet);
snippetText.setSpan(new ForegroundColorSpan(Color.MAGENTA), 0, 10, 0);
snippetText.setSpan(new ForegroundColorSpan(Color.BLUE), 12, snippet.length(), 0);
snippetUi.setText(snippetText);

private Marker mPerth;

private Marker mSydney;

private Marker mBrisbane;

private Marker mAdelaide;

private Marker mMelbourne;

private Marker mDarwin1;
private Marker mDarwin2;
private Marker mDarwin3;
private Marker mDarwin4;

/**
* Keeps track of the last selected marker (though it may no longer be selected).  This is
* useful for refreshing the info window.
*/
private Marker mLastSelectedMarker;

private final List<Marker> mMarkerRainbow = new ArrayList<Marker>();

private TextView mTopText;

private SeekBar mRotationBar;

private CheckBox mFlatBox;

private RadioGroup mOptions;

private final Random mRandom = new Random();

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.marker_demo);

mTopText = (TextView) findViewById(R.id.top_text);

mRotationBar = (SeekBar) findViewById(R.id.rotationSeekBar);
mRotationBar.setMax(360);
mRotationBar.setOnSeekBarChangeListener(this);

mFlatBox = (CheckBox) findViewById(R.id.flat);

mOptions = (RadioGroup) findViewById(R.id.custom_info_window_options);
mOptions.setOnCheckedChangeListener(new OnCheckedChangeListener() {
@Override
public void onCheckedChanged(RadioGroup group, int checkedId) {
if (mLastSelectedMarker != null && mLastSelectedMarker.isInfoWindowShown()) {
SupportMapFragment mapFragment =
(SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
new OnMapAndViewReadyListener(mapFragment, this);

mMap.setOnInfoWindowClickListener(this);
mMap.setOnMarkerDragListener(this);
mMap.setOnInfoWindowCloseListener(this);
mMap.setOnInfoWindowLongClickListener(this);

LatLngBounds bounds = new LatLngBounds.Builder()
.include(PERTH)
.include(SYDNEY)
.include(ADELAIDE)
.include(BRISBANE)
.include(MELBOURNE)
.include(DARWIN)
.build();
mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 50));
.position(BRISBANE)
.title("Brisbane")
.snippet("Population: 2,074,200")
.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));

.position(SYDNEY)
.title("Sydney")
.snippet("Population: 4,627,300")
.icon(BitmapDescriptorFactory.fromResource(R.drawable.arrow))
.infoWindowAnchor(0.5f, 0.5f));

.position(MELBOURNE)
.title("Melbourne")
.snippet("Population: 4,137,400")
.draggable(true));

.position(DARWIN)
.title("Darwin Marker 1")
.snippet("z-index 1")
.zIndex(1));
mDarwin2 = mMap.addMarker(new MarkerOptions()
.position(DARWIN)
.title("Darwin Marker 2")
.snippet("z-index 2")
.zIndex(2));
mDarwin3 = mMap.addMarker(new MarkerOptions()
.position(DARWIN)
.title("Darwin Marker 3")
.snippet("z-index 3")
.zIndex(3));
mDarwin4 = mMap.addMarker(new MarkerOptions()
.position(DARWIN)
.title("Darwin Marker 4")
.snippet("z-index 4")
.zIndex(4));

.position(PERTH)
.title("Perth")
.snippet("Population: 1,738,800"));
mAdelaide = mMap.addMarker(new MarkerOptions()
.position(ADELAIDE)
.title("Adelaide")
.snippet("Population: 1,213,000"));

.position(ALICE_SPRINGS)
.icon(vectorToBitmap(R.drawable.ic_android, Color.parseColor("#A4C639")))
.title("Alice Springs"));

boolean flat = mFlatBox.isChecked();

int numMarkersInRainbow = 12;
for (int i = 0; i < numMarkersInRainbow; i++) {
Marker marker = mMap.addMarker(new MarkerOptions()
.position(new LatLng(
-30 + 10 * Math.sin(i * Math.PI / (numMarkersInRainbow - 1)),
135 - 10 * Math.cos(i * Math.PI / (numMarkersInRainbow - 1))))
.title("Marker " + i)
.icon(BitmapDescriptorFactory.defaultMarker(i * 360 / numMarkersInRainbow))
.flat(flat)
.rotation(rotation));
mMarkerRainbow.add(marker);
Drawable vectorDrawable = ResourcesCompat.getDrawable(getResources(), id, null);
Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(),
vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
Canvas canvas = new Canvas(bitmap);
vectorDrawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
DrawableCompat.setTint(vectorDrawable, color);
vectorDrawable.draw(canvas);
return BitmapDescriptorFactory.fromBitmap(bitmap);
Toast.makeText(this, R.string.map_not_ready, Toast.LENGTH_SHORT).show();
return false;
addMarkersToMap();
for (Marker marker : mMarkerRainbow) {
marker.setFlat(flat);
for (Marker marker : mMarkerRainbow) {
marker.setRotation(rotation);
final long start = SystemClock.uptimeMillis();
final long duration = 1500;

final Interpolator interpolator = new BounceInterpolator();

handler.post(new Runnable() {
@Override
public void run() {
long elapsed = SystemClock.uptimeMillis() - start;
float t = Math.max(
1 - interpolator.getInterpolation((float) elapsed / duration), 0);
marker.setAnchor(0.5f, 1.0f + 2 * t);

if (t > 0.0) {
marker.setAlpha(mRandom.nextFloat());
marker.setZIndex(zIndex);
Toast.makeText(this, marker.getTitle() + " z-index set to " + zIndex,
Toast.LENGTH_SHORT).show();

mLastSelectedMarker = marker;
Toast.makeText(this, "Click Info Window", Toast.LENGTH_SHORT).show();
Toast.makeText(this, "Info Window long click", Toast.LENGTH_SHORT).show();
Android 스튜디오에서 File > New > Import Project를 선택합니다.
저장소를 저장한 위치로 이동하여 Kotlin 또는 Java를 위한 프로젝트 디렉터리를 선택합니다.

Kotlin: PATH-REPO/android-samples/ApiDemos/kotlin
Java: PATH-REPO/android-samples/ApiDemos/java

열기를 선택합니다. Android 스튜디오에서 Gradle 빌드 도구를 사용하여 프로젝트를 빌드합니다.
프로젝트의 local.properties 파일과 동일한 디렉터리에서 빈 secrets.properties 파일을 만듭니다. 자세한 내용은 프로젝트에 직접 생성한 API 키 추가하기 [https://developers.google.com/maps/documentation/android-sdk/config?hl=ko#step_3_add_your_api_key_to_the_project]를 참고하세요.
다음 문자열을 secrets.properties에 추가합니다(YOUR_API_KEY는 API 키의 값으로 변경).
MAPS_API_KEY=YOUR_API_KEY
앱을 실행합니다.

의견 보내기