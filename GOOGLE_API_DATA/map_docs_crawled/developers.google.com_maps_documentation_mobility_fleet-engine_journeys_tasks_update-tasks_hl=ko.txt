Source URL: https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/update-tasks?hl=ko
Title: 배송 차량 작업 업데이트

배송 차량 작업 업데이트

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 문서에서는 사용자가 다음에 익숙하다고 가정합니다.

배송 작업 만들기 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/create-shipment-tasks?hl=ko]
작업, 정류장, 차량 간의 관계를 자세히 다루는 예약된 작업 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/tasks-intro?hl=ko] 소개

실제 배송 시나리오에서 비즈니스는 배송 상품 작업을 운전자에게 할당하고, 운전자는 차량을 사용하여 주거지나 건물 단지의 배송실과 같은 계획된 위치의 수령인에게 배송합니다. Fleet Engine에서 작업을 생성하고 배송 차량 업데이트 요청을 발행하여 이를 모델링합니다. 그러면 이동할 정류장 목록으로 차량 엔티티가 업데이트됩니다. 각 정류장에 정류장에서 완료해야 할 작업 목록을 할당합니다.

언제든지 차량 작업을 업데이트할 수 있지만 일반적으로 다음 목적으로 업데이트합니다.

차량이 완료할 작업을 예약합니다. 차량에 새 정류장을 추가하는 업데이트 요청을 사용하거나 기존 정류장에 새 작업을 추가하는 업데이트 요청을 사용하여 이 작업을 수행할 수 있습니다.
지정된 차량 정류장과 연결된 기존 작업의 순서를 업데이트합니다.
작업 완료 위치를 변경합니다. 기본적으로 Fleet Engine은 작업 완료 위치를 작업과 연결된 차량 정류장과 동일한 위치로 표시합니다. 원하는 경우 개별 작업의 특정 위치를 지정할 수 있습니다. 예를 들어 여러 패키지를 배송하기 위해 대형 단지에 차량이 정차할 수 있으며 각 패키지에는 특정 우편 배송실이 할당됩니다.
업데이트된 순서에서 제외하려면 이전에 할당된 작업을 모두 닫습니다. 자세한 내용은 작업 완료 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/finalize-tasks?hl=ko]를 참고하세요.

배송 작업 예약 또는 변경

서버 환경에서 또는 신뢰할 수 있는 기기를 사용하여 작업을 관리하는 기능을 운전자에게 제공하는 경우 Driver SDK를 사용하여 차량에 할당된 작업을 예약하거나 변경할 수 있습니다. 경합 상태를 방지하고 단일 정보 소스를 유지하려면 한 가지 방법만 사용하세요.

배송을 한 차량에서 다른 차량으로 변경하려면 원래 작업을 종료 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/finalize-tasks?hl=ko#close-task]하고 다른 차량에 할당하기 전에 다시 만드세요. 이미 다른 차량에 할당된 작업을 포함하도록 배송 차량을 업데이트하면 오류가 발생합니다.
참고: 차량이 동일한 위치에서 완료해야 하는 여러 작업을 예약할 때는 정류장과 해당 정류장 위치와 연결된 작업 간에 일대다 연결을 만들어야 합니다. 중지 위치가 목록의 각 쌍에 대해 동일한 중지 작업 쌍 목록을 만들지 마세요. 이는 여정 공유를 사용하여 소비자에게 작업 상태를 공유하려는 경우에 유용합니다. 예를 들어 운전자가 단일 사무실 건물에 여러 번 배송하는 경우 모든 배송 작업을 단일 차량 정류장에 할당합니다.
할 일 업데이트에 필요한 필드

이 섹션에서는 차량의 작업을 업데이트할 때 설정해야 하는 필수 필드를 설명합니다. 선택적 필드가 제공되지 않습니다. 업데이트를 위해 차량 엔진은 엔티티의 다른 모든 필드를 무시합니다.

| 필수 입력란 | 값 |
| --- | --- |
| remainingVehicleJourneySegments | 실행해야 하는 순서대로 된 작업의 여정 세그먼트 목록입니다. 목록의 첫 번째 작업이 먼저 실행됩니다. |
| remainingVehicleJourneySegments[i].stop | 목록에서 i번째 작업의 중지입니다. |
| remainingVehicleJourneySegments[i].stop.plannedLocation | 정류장의 계획된 위치입니다. |
| remainingVehicleJourneySegments[i].stop.tasks | 이 차량 정류장에서 실행할 작업 목록입니다. |
| remainingVehicleJourneySegments[i].stop.state | State.NEW |

할 일 할당 예시

다음 예에서는 Java gRPC 라이브러리 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/client-libraries-tasks?hl=ko]와 HTTP REST 호출을 UpdateDeliveryVehicle에 사용하여 차량에 새 작업 두 개를 추가하는 방법을 보여줍니다.

gRPC static final String PROJECT_ID = "my-delivery-co-gcp-project";
static final String VEHICLE_ID = "vehicle-8241890";
static final String TASK1_ID = "task-756390";
static final String TASK2_ID = "task-849263";

DeliveryServiceBlockingStub deliveryService =
DeliveryServiceGrpc.newBlockingStub(channel);

String vehicleName = "providers/" + PROJECT_ID + "/deliveryVehicles/" + VEHICLE_ID;
DeliveryVehicle deliveryVehicle = DeliveryVehicle.newBuilder()
.addRemainingVehicleJourneySegments(VehicleJourneySegment.newBuilder()  // 1st stop
.setStop(VehicleStop.newBuilder()
.setPlannedLocation(LocationInfo.newBuilder()
.setPoint(LatLng.newBuilder()
.setLatitude(37.7749)
.setLongitude(122.4194)))
.addTasks(TaskInfo.newBuilder().setTaskId(TASK1_ID))
.setState(VehicleStop.State.NEW)))
.addRemainingVehicleJourneySegments(VehicleJourneySegment.newBuilder()  // 2nd stop
.setStop(VehicleStop.newBuilder()
.setPlannedLocation(LocationInfo.newBuilder()
.setPoint(LatLng.newBuilder()
.setLatitude(37.3382)
.setLongitude(121.8863)))
.addTasks(TaskInfo.newBuilder().setTaskId(TASK2_ID))
.setState(VehicleStop.State.NEW)))
.build();

UpdateDeliveryVehicleRequest updateDeliveryRequest =
UpdateDeliveryVehicleRequest.newBuilder()  // No need for the header
.setName(vehicleName)
.setDeliveryVehicle(deliveryVehicle)
.setUpdateMask(FieldMask.newBuilder().addPaths("remaining_vehicle_journey_segments"))
.build();

try {
DeliveryVehicle updatedDeliveryVehicle =
deliveryService.updateDeliveryVehicle(updateDeliveryVehicleRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:
break;
case PERMISSION_DENIED:
break;

실험적: 실험적 기능으로, 이제 LocationInfo(gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#locationinfo] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko]) 필드에서 LatLng와 함께 또는 LatLng 대신 place (gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#maps.fleetengine.delivery.v1.LocationInfo.FIELDS.string.maps.fleetengine.delivery.v1.LocationInfo.place] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko#FIELDS.place])를 사용할 수 있습니다.
다음 단계

중지 상태 업데이트 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/update-stops?hl=ko]