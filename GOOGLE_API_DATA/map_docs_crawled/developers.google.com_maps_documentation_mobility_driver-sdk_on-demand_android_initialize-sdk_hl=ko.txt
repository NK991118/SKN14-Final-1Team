Source URL: https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/initialize-sdk?hl=ko
Title: 드라이버 SDK 초기화

드라이버 SDK 초기화

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Driver SDK를 사용하기 전에 다음 단계에 따라 Navigation SDK와 Driver SDK를 초기화해야 합니다.

NavigationApi에서 Navigator 객체를 가져옵니다.

자바NavigationApi.getNavigator(
this, // Activity
new NavigationApi.NavigatorListener() {
@Override
public void onNavigatorReady(Navigator navigator) {

KotlinNavigationApi.getNavigator(
this, // Activity
object : NavigatorListener() {
override fun onNavigatorReady(navigator: Navigator) {
NavigationApi.getRoadSnappedLocationProvider(application))
.build();

Kotlinval driverContext =
DriverContext.builder(application)
.setProviderId(providerId)
.setVehicleId(vehicleId)
.setAuthTokenFactory(authTokenFactory)
.setNavigator(navigator)
.setRoadSnappedLocationProvider(NavigationApi.getRoadSnappedLocationProvider(application))
.build()

DriverContext 객체를 사용하여 *DriverApi을 초기화합니다.

자바RidesharingDriverApi ridesharingDriverApi = RidesharingDriverApi.createInstance(driverContext);

Kotlinval ridesharingDriverApi = RidesharingDriverApi.createInstance(driverContext)

API 객체에서 RidesharingVehicleReporter를 가져옵니다.
(*VehicleReporter는 NavigationVehicleReporter를 확장합니다.)

자바RidesharingVehicleReporter vehicleReporter = ridesharingDriverApi.getRidesharingVehicleReporter();

Kotlinval vehicleReporter = ridesharingDriverApi.getRidesharingVehicleReporter()

SSL/TLS 관련 참고사항

내부적으로 Driver SDK 구현은 SSL/TLS를 사용하여 Fleet Engine 서비스와 안전하게 통신합니다. Android API 버전 23 이하에서는 서버와 통신하기 위해 SecurityProvider 패치가 필요할 수 있습니다. Android에서 SSL을 사용하는 방법에 관한 자세한 내용은 보안 GMS 제공자 [https://developer.android.com/training/articles/security-gms-provider?hl=ko]를 참고하세요.
이 도움말에는 보안 제공자를 패치하는 코드 샘플도 포함되어 있습니다.

다음 단계

차량 준비하기 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/vehicle-ready?hl=ko]