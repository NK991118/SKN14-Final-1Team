Source URL: https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko
Title: Maps JavaScript API 애플리케이션을 v2에서 v3으로 업그레이드

의견 보내기

Maps JavaScript API 애플리케이션을 v2에서 v3으로 업그레이드

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 페이지의 내용개요 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#overview]Maps JavaScript API V3의 변경사항 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#changes-in-v3-of-the-maps-javascript-api]애플리케이션 업그레이드 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#upgrade-your-application]새로운 키 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#your-new-key]API 로드 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#load-the-api]google.maps 네임스페이스 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#the-google.maps-namespace]더 이상 사용되지 않는 코드 삭제 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#remove-obsolete-code]코드 비교 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#compare-code]요약 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#summary]상세 참조 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#detailed-reference]이벤트 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#events]MVC 지원의 새로운 이벤트 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#new-event-for-mvc-support]이벤트 리스너 삭제 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#remove-event-listeners]DOM 이벤트 수신 대기 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#listen-to-dom-events]이벤트에서 전달된 인수 사용 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#use-passed-arguments-in-events]컨트롤 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#controls]컨트롤 유형 변화 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#changes-in-control-types]지도에 컨트롤 추가 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#add-controls-to-the-map]지도의 위치 컨트롤 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#position-controls-on-the-map]맞춤 컨트롤 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#custom-controls]오버레이 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#overlays]오버레이 추가 및 삭제 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#add-and-remove-overlays]드래그 가능한 마커 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#markers]아이콘 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#icons]다중선 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#polylines]다각형 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#polygons]사용자가 수정 가능한 도형 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#user-editable-shapes]정보 창 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#info-windows]지면 오버레이 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#ground-overlays]지도 유형 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#map-types]공통 지도 유형 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#common-map-types]최대 확대/축소 이미지 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#maximum-zoom-imagery]항공 이미지 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#aerial-perspective-imagery]레이어 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#layers]지원되는 계층 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#supported-layers]KML 및 GeoRSS 레이어 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#kml-and-georss-layers]교통정보 레이어 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#the-traffic-layer]서비스 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#services]지오코딩 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#geocoding]경로 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#directions]스트리트 뷰 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#street-view]

2021년 5월 26일부터 Maps JavaScript API v2를 더 이상 사용할 수 없습니다. 따라서 사이트의 v2 지도 작동이 중지되고 JavaScript 오류가 반환됩니다. 사이트에서 지도를 계속 사용하려면 Maps JavaScript API v3으로 이전하세요. 이 가이드를 통해 이 과정을 진행하실 수 있습니다.

개요
모든 애플리케이션의 이전 프로세스는 약간 다르지만 모든 프로젝트에 공통적인 몇 가지 단계가 있습니다.

새 키를 받습니다. 이제 Maps JavaScript API는 Google Cloud 콘솔을 사용하여 키를 관리합니다. 아직 v2 키를 사용하고 있다면 이전을 시작하기 전에 새 API 키 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#newkey]를 가져와야 합니다.

API 부트스트랩을 업데이트합니다. 대부분의 애플리케이션은 다음 코드로 Maps JavaScript API v3을 로드합니다.
<script src="//maps.googleapis.com/maps/api/js?key=YOUR_API_KEY"></script>

코드를 업데이트합니다. 필요한 변경사항의 양은 애플리케이션에 따라 크게 달라집니다. 일반적인 변경사항은 다음과 같습니다.

항상 google.maps 네임스페이스를 참조합니다. v3에서는 모든 Maps JavaScript API 코드가 전역 네임스페이스 대신 google.maps.* 네임스페이스에 저장됩니다. 또한 이 프로세스의 일환으로 대부분의 객체 이름이 변경되었습니다. 예를 들어 이제 GMap2 대신 google.maps.Map를 로드합니다.

사용하지 않는 메서드에 대한 참조를 삭제합니다. GDownloadURL 및 GLog와 같은 여러 범용 유틸리티 메서드가 삭제되었습니다.
이 기능을 서드 파티 유틸리티 라이브러리로 대체하거나 코드에서 이러한 참조를 삭제합니다.
(선택사항) 코드에 라이브러리를 추가합니다. 각 앱에서 사용될 API 부분만 로드하면 되도록 많은 기능이 유틸리티 라이브러리로 외부화되었습니다.

(선택사항) v3 externs를 사용하도록 프로젝트를 구성합니다.
v3 extern은 Closure 컴파일러 [https://developers.google.com/closure/compiler?hl=ko]로 코드의 유효성을 검사하거나 IDE에서 자동 완성을 트리거하는 데 사용할 수 있습니다.
고급 컴파일 및 외부 참조 [https://developers.google.com/closure/compiler/docs/api-tutorial3?hl=ko]에 대해 자세히 알아보세요.

테스트하고 반복하세요. 아직 할 일이 남아 있지만 좋은 소식은 새 v3 지도 애플리케이션을 만드는 데 한 걸음 더 다가가게 되었다는 것입니다.

Maps JavaScript API V3의 변경사항

이전을 계획하기 전에 Maps JavaScript API v2와 Maps JavaScript API v3의 차이점을 이해하는 데 시간을 할애해야 합니다. 최신 버전의 Maps JavaScript API는 최신 JavaScript 프로그래밍 기법, 라이브러리 사용 증가, 간소화된 API에 중점을 두고 처음부터 다시 작성되었습니다.
API에 많은 새로운 기능이 추가되었으며 익숙한 기능 중 일부가 변경되거나 삭제되었습니다. 이 섹션에서는 두 버전 간의 주요 차이점을 설명합니다.

v3 API 변경 사항:

핵심 라이브러리가 간소화되었습니다. 많은 보조 함수가 라이브러리 [https://developers.google.com/maps/documentation/javascript/libraries?hl=ko]로 이동되어 Core API의 로드 및 파싱 시간이 줄어들고 모든 기기에서 지도가 빠르게 로드됩니다.

다각형 렌더링, 마커 배치와 같은 여러 기능의 성능이 개선되었습니다.

모바일 프록시 및 기업 방화벽에서 사용하는 공유 주소를 더 잘 수용하기 위한 클라이언트 측 사용량 한도 [https://developers.google.com/maps/premium/usage-limits?hl=ko]에 대한 새로운 접근 방식입니다.

여러 최신 브라우저 [https://developers.google.com/maps/documentation/javascript/browsersupport?hl=ko] 및 모바일 브라우저에 대한 지원을 추가했습니다. Internet Explorer 6 지원이 삭제되었습니다.

많은 범용 도우미 클래스(
GLog [https://developers.google.com/maps/documentation/javascript/v2/reference?hl=ko#GLog] 또는
GDownloadUrl [https://developers.google.com/maps/documentation/javascript/v2/reference?hl=ko#GDownloadUrl])를 삭제했습니다. 오늘날 Closure [https://developers.google.com/closure?hl=ko] 또는 jQuery [http://jquery.com/]와 같이 유사한 기능을 제공하는 우수한 JavaScript 라이브러리가 많이 있습니다.

모든 모바일 기기에서 로드되는 HTML5 스트리트 뷰가 구현되었습니다.

직접 찍은 사진으로 맞춤 스트리트 뷰 [https://developers.google.com/maps/documentation/javascript/services?hl=ko#CustomStreetView] 파노라마를 만들어 스키장, 매물 주택 또는 기타 흥미로운 장소의 파노라마를 공유할 수 있습니다.

스타일 지정 지도 [https://developers.google.com/maps/documentation/javascript/maptypes?hl=ko#StyledMaps] 맞춤설정을 사용하면 기본 지도의 요소 표시를 고유한 시각적 스타일에 맞게 변경할 수 있습니다.

ElevationService [https://developers.google.com/maps/documentation/javascript/elevation?hl=ko] 및 Distance Matrix [https://developers.google.com/maps/documentation/javascript/distancematrix?hl=ko]와 같은 여러 새로운 서비스 지원

개선된 경로 서비스는 대체 경로, 경로 최적화 (여행하는 영업사원 문제 [http://en.wikipedia.org/wiki/Travelling_salesman_problem]의 근사 솔루션), 자전거 경로 (자전거 레이어 [https://developers.google.com/maps/documentation/javascript/overlays?hl=ko#BicyclingLayer] 포함), 대중교통 경로, 드래그 가능한 경로 [https://developers.google.com/maps/documentation/javascript/services?hl=ko#DraggableDirections]를 제공합니다.

Geocoding API v2의 accuracy 값보다 더 정확한 유형 [https://developers.google.com/maps/documentation/geocoding/overview?hl=ko#Types] 정보를 제공하는 업데이트된 Geocoding 형식입니다.

단일 지도에 여러 정보 창 [https://developers.google.com/maps/documentation/javascript/overlays?hl=ko#InfoWindows] 지원

애플리케이션 업그레이드

새로운 키
Maps JavaScript API v3은 v2의 새로운 키 시스템을 사용합니다. 애플리케이션에서 이미 v3 키를 사용하고 있을 수 있으며, 이 경우 변경할 필요가 없습니다. 확인하려면 Maps JavaScript API를 로드하는 URL에서 key 매개변수를 확인하세요. 키 값이 'ABQIAA'로 시작하면 v2 키를 사용하고 있는 것입니다. v2 키가 있는 경우 마이그레이션의 일환으로 v3 키로 업그레이드해야 합니다. 업그레이드하면 다음과 같은 이점이 있습니다.

Google Cloud 콘솔에서 API 사용량을 모니터링 [https://cloud.google.com/apis/docs/monitoring?hl=ko]할 수 있습니다.
필요한 경우 할당량을 추가로 구매 [https://developers.google.com/maps/documentation/javascript/usage?hl=ko#increase_quota]할 수 있습니다.
Google에서 개발자의 애플리케이션과 관련하여 연락을 취할 수 있습니다.

키는 Maps JavaScript API v3을 로드할 때 전달됩니다.
API 키 생성에 대해 자세히 알아보기 [https://developers.google.com/maps/documentation/javascript/get-api-key?hl=ko]

업무용 Google 지도 API 고객인 경우 key 매개변수 대신 client 매개변수와 함께 클라이언트 ID를 사용하고 있을 수 있습니다. 클라이언트 ID는 Maps JavaScript API v3에서 계속 지원되며 키 업그레이드 프로세스를 거칠 필요가 없습니다.

API 로드

코드에서 먼저 수정해야 할 사항은 API를 로드하는 방법입니다. v2에서는 http://maps.google.com/maps 요청을 통해 Maps JavaScript API를 로드합니다. Maps JavaScript API v3를 로드하는 경우 다음과 같이 변경해야 합니다.

새 v3 키로 key 매개변수를 업데이트합니다. 업무용 Google 지도 API 고객은 client 매개변수를 사용해야 합니다.
(Google Maps Platform 프리미엄 요금제만 해당) client 매개변수가 Google Maps Platform 프리미엄 요금제 개발자 가이드 [https://developers.google.com/maps/premium/overview?hl=ko#authentication-and-authorization]에 설명된 대로 제공되는지 확인합니다.
v 매개변수를 삭제하여 최신 출시 버전을 요청하거나 v3 버전 관리 [https://developers.google.com/maps/documentation/javascript/versions?hl=ko] 스킴에 따라 값을 변경합니다.
(선택사항) hl 매개변수를 language로 바꾸고 값을 유지합니다.
(선택사항) libraries 매개변수를 추가하여 선택적 라이브러리 [https://developers.google.com/maps/documentation/javascript/libraries?hl=ko]를 로드합니다.

가장 간단한 경우 v3 부트스트랩은 API 키 매개변수만 지정합니다.
<script src="//maps.googleapis.com/maps/api/js?key=YOUR_API_KEY"></script>

아래 예에서는 독일어로 최신 버전의 Maps JavaScript API v2를 요청합니다.

<script src="//maps.google.com/maps?file=api&v=2.x&key=YOUR_API_KEY&hl=de"></script>

아래 예시는 v3 요청과 같습니다.

<script src="//maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&language=de"></script>

google.maps 네임스페이스

Maps JavaScript API v3에서 가장 눈에 띄는 변경사항은 google.maps 네임스페이스의 도입일 것입니다. v2 API는 기본적으로 모든 객체를 전역 네임스페이스에 배치하므로 이름 충돌이 발생할 수 있습니다. v3 내에서 모든 객체는 google.maps 네임스페이스 내에 있습니다.

애플리케이션을 v3로 이전할 때는 새 네임스페이스를 활용하도록 코드를 변경해야 합니다. 안타깝게도 'G'를 검색하여 'google.maps'로 대체해도 완전히 작동하지는 않습니다. 하지만 코드를 검토할 때 적용할 만한 좋은 경험칙입니다. 다음은 v2와 v3의 상응하는 클래스의 몇 가지 예입니다.

| v2 | v3 |
| --- | --- |
| GMap2 | google.maps.Map |
| GLatLng | google.maps.LatLng |
| GInfoWindow | google.maps.InfoWindow |
| GMapOptions | google.map.MapOptions |
| G_API_VERSION | google.maps.version |
| GPolyStyleOptions | google.maps.PolygonOptions or google.maps.PolylineOptions |

더 이상 사용되지 않는 코드 삭제
Maps JavaScript API v3에는 v2의 대부분의 기능에 상응하는 기능이 있습니다. 하지만 더 이상 지원되지 않는 클래스도 있습니다. 이전의 일환으로 이러한 클래스를 서드 파티 유틸리티 라이브러리로 대체하거나 코드에서 이러한 참조를 삭제해야 합니다. Closure [https://developers.google.com/closure?hl=ko] 또는 jQuery [http://jquery.com/]와 같이 유사한 기능을 제공하는 우수한 JavaScript 라이브러리가 많이 있습니다.

다음 클래스는 Maps JavaScript API v3에 상응하는 클래스가 없습니다.

| GBounds | GLanguage |
| --- | --- |
| GBrowserIsCompatible | GLayer |
| GControl | GLog |
| GControlAnchor | GMercatorProjection |
| GControlImpl | GNavLabelControl |
| GControlPosition | GObliqueMercator |
| GCopyright | GOverlay |
| GCopyrightCollection | GPhotoSpec |
| GDownloadUrl | GPolyEditingOptions |
| GDraggableObject | GScreenOverlay |
| GDraggableObjectOptions | GStreetviewFeatures |
| GFactualGeocodeCache | GStreetviewLocation |
| GGeoAddressAccuracy | GStreetviewOverlay |
| GGeocodeCache | GStreetviewUserPhotosOptions |
| GGoogleBar | GTileLayerOptions |
| GGoogleBarAdsOptions | GTileLayerOverlayOptions |
| GGoogleBarLinkTarget | GTrafficOverlayOptions |
| GGoogleBarListingTypes | GUnload |
| GGoogleBarOptions | GXml |
| GGoogleBarResultList | GXmlHttp |
| GInfoWindowTab | GXslt |
| GKeyboardHandler |  |

코드 비교
다음은 v2 API와 v3 API로 작성된 두 애플리케이션을 비교한 내용입니다.

<!DOCTYPE html>
<html>
<head>
<script src="//maps.google.com/maps?file=api&v=2&key=YOUR_API_KEY"></script>
<style>
html, body, #map { height: 100%; margin: 0; }
</style>
<script>
function initialize() {
if (GBrowserIsCompatible()) {
map.setUIToDefault();

map.addOverlay(new GMarker(new GLatLng(37.4419, -122.1419)));

</script>
</head>
<body>
<div id="map"></div>
</body>
</html>

보시다시피 두 애플리케이션에는 몇 가지 차이점이 있습니다. 눈에 띄는 변경 사항은 다음과 같습니다.

API를 로드하는 주소가 변경되었습니다.
GBrowserIsCompatible() 및 GUnload() 메서드는 v3에서 더 이상 필요하지 않으며 API에서 삭제되었습니다.
GMap2 객체가 API의 중앙 객체로 google.maps.Map로 대체됩니다.
속성이 옵션 클래스를 통해 로드됩니다. 위 예에서는 인라인 MapOptions [https://developers.google.com/maps/documentation/javascript/reference?hl=ko#MapOptions] 객체를 사용하여 지도 로드에 필요한 세 가지 속성(center, zoom, mapTypeId)을 설정합니다.
v3에서는 기본 UI가 기본값입니다. MapOptions [https://developers.google.com/maps/documentation/javascript/reference?hl=ko#MapOptions] 객체에서 disableDefaultUI 속성을 true로 설정하여 사용 중지할 수 있습니다.

요약
이제 Maps JavaScript API의 v2에서 v3로 이전하는 데 관련된 몇 가지 주요 사항을 살펴봤습니다.
알아야 할 정보가 더 있지만 이는 애플리케이션에 따라 다릅니다. 다음 섹션에는 발생할 수 있는 특정 케이스에 대한 이전 안내가 포함되어 있습니다. 또한 업그레이드 프로세스 중에 유용할 수 있는 몇 가지 리소스도 있습니다.

Maps JavaScript API v3 개발자 문서 [https://developers.google.com/maps/documentation/javascript/tutorial?hl=ko]는 API와 작동 방식에 대해 자세히 알아볼 수 있는 최고의 리소스입니다.
Maps JavaScript API v3 참조 [https://developers.google.com/maps/documentation/javascript/reference?hl=ko]를 통해 v3 API의 새로운 클래스와 메서드에 관해 자세히 알아볼 수 있습니다.
Stack Overflow 커뮤니티는 코드 관련 질문을 할 수 있는 좋은 장소입니다. 사이트에서 Maps JavaScript API와 관련된 질문과 답변에는 'google-maps [http://stackoverflow.com/questions/tagged/google-maps]' 또는 'google-maps-api-3 [http://stackoverflow.com/questions/tagged/google-maps-api-3]' 태그가 사용됩니다.
Google Maps Platform 프리미엄 요금제 고객은 Google Maps Platform 프리미엄 요금제 문서 [https://developers.google.com/maps/premium/overview?hl=ko#authentication-and-authorization]를 읽어보세요.
Google Geo 개발자 블로그 [http://googlegeodevelopers.blogspot.com/]에서 API의 최신 변경사항을 확인할 수 있습니다.

이 문서에 관해 문제가 있거나 궁금한 점이 있으면 이 페이지 상단의 의견 보내기 링크를 사용하세요.

상세 참조

이 섹션에서는 Maps JavaScript API의 v2 및 v3에서 가장 많이 사용되는 기능을 자세히 비교합니다. 참조의 각 섹션은 개별적으로 읽을 수 있도록 설계되었습니다. 이 참조를 전체적으로 읽지 말고, 이 자료에서 사례별로 이전을 지원하는 내용을 찾아 사용하는 것이 좋습니다.

이벤트 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#events] - 이벤트를 등록하고 처리합니다.
컨트롤 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#controls] - 지도에 표시되는 탐색 컨트롤을 조작합니다.
오버레이 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#overlays] - 지도에 객체를 추가하고 수정합니다.
지도 유형 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#maptypes]: 기본 지도를 구성하는 타일입니다.

레이어 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#layers] - KML 또는 트래픽 레이어와 같은 콘텐츠를 그룹으로 추가하고 수정합니다.
서비스 [https://developers.google.com/maps/documentation/javascript/v2tov3?hl=ko#services] - Google의 지오코딩, 경로 또는 스트리트 뷰 서비스를 사용합니다.

이벤트
Maps JavaScript API v3의 이벤트 모델은 v2에서 사용된 모델과 유사하지만 내부적으로 많은 부분이 변경되었습니다.

MVC 지원의 새로운 이벤트
v3 API는 MVC 상태 변화를 반영하여 새로운 이벤트 유형을 추가합니다. 이제 두 가지 유형의 이벤트가 있습니다.

사용자 이벤트 (예: '클릭' 마우스 이벤트)는 DOM에서 Maps JavaScript API로 전파됩니다. 이러한 이벤트는 표준 DOM 이벤트와 별개이며 서로 구분됩니다.
MVC 상태 변경 알림에는 Maps API 객체의 변경사항이 반영되며 property_changed 규칙을 사용하여 이름이 지정됩니다.

각 Maps API 객체는 다양한 이름이 지정된 이벤트를 내보냅니다. 특정 이벤트에 관심이 있는 애플리케이션은 해당 이벤트에 대한 이벤트 리스너를 등록하고 이벤트가 수신되면 코드를 실행해야 합니다. 이 이벤트 기반 메커니즘은 네임스페이스가 GEvent에서 google.maps.event로 변경된 점을 제외하고 Maps JavaScript API v2와 v3에서 동일합니다.

GEvent.addListener(map, 'click', function() {
alert('You clicked the map.');

DOM (문서 객체 모델) 이벤트를 캡처하고 이에 응답하려면 v3에서 v2의 GEvent.addDomListener() 메서드와 동일한 google.maps.event.addDomListener() 정적 메서드를 제공합니다.

이벤트에서 전달된 인수 사용

UI 이벤트는 이벤트 리스너에서 액세스할 수 있는 이벤트 인수를 전달하는 경우가 많습니다. v3의 대부분의 이벤트 인수가 API의 객체에 대해 더 일관되도록 단순화되었습니다. 자세한 내용은 v3 참조 [https://developers.google.com/maps/documentation/javascript/reference?hl=ko]를 참고하세요.

v3 이벤트 리스너에는 overlay 인수가 없습니다. v3 지도에 click 이벤트를 등록하면 사용자가 기본 지도를 클릭할 때만 콜백이 발생합니다. 클릭에 반응해야 하는 경우 클릭 가능한 오버레이에 추가 콜백을 등록할 수 있습니다.

map.setUIToDefault();

GEvent.addListener(map,'click', function(overlay, latlng) {
if (latlng) {

google.maps.event.addListener(map, 'click', function(event) {
Maps JavaScript API는 사용자가 지도와 상호작용할 수 있는 UI 컨트롤을 표시합니다. API를 사용하여 이러한 컨트롤이 표시되는 방식을 맞춤설정할 수 있습니다.

컨트롤 유형 변화

v3 API를 통해 control 유형에 몇 가지 변경사항이 도입되었습니다.

v3 API는 지형 지도를 비롯한 추가 지도 유형 [https://developers.google.com/maps/documentation/javascript/maptypes?hl=ko]과 맞춤 지도 유형을 추가하는 기능을 지원합니다.
v2 계층적 제어인 GHierarchicalMapTypeControl를 더 이상 사용할 수 없습니다.
google.maps.MapTypeControlStyle.HORIZONTAL_BAR 컨트롤을 사용하여 유사한 효과를 얻을 수 있습니다.

v2에서 GMapTypeControl로 제공되는 가로 레이아웃은 v3에서 사용할 수 없습니다.

지도에 컨트롤 추가

Maps JavaScript API v2를 사용하면 지도 객체의 addControl() 메서드를 통해 지도에 컨트롤을 추가할 수 있습니다. v3에서는 컨트롤에 직접 액세스하거나 수정하는 대신 연결된 MapOptions 객체를 수정합니다. 다음 샘플은 지도에서 다음 컨트롤을 추가하도록 맞춤설정하는 방법을 보여줍니다.

사용자가 이용 가능한 지도 유형을 전환할 수 있는 버튼
지도 배율

map.addControl(new GScaleControl());

지도의 위치 컨트롤

v3에서는 컨트롤의 위치에 상당히 많은 변화가 있었습니다. v2에서 addControl() 메서드는 지도의 모서리에 대한 상대 컨트롤 위치를 지정할 수 있는 선택적 두 번째 매개변수를 사용합니다.

v3에서는 컨트롤 옵션의 position 속성을 통해 컨트롤의 위치를 설정합니다. 이러한 컨트롤의 위치는 절대적이지 않습니다. 대신 API는 지정된 제약 조건 (예: 지도 크기) 내에서 기존 지도 요소 주변에 '흐르게' 배치하여 컨트롤을 지능적으로 배치합니다.
이 레이아웃을 사용하면 기본 컨트롤이 컨트롤과 호환됩니다.
자세한 내용은 v3에서 위치 지정 제어 [https://developers.google.com/maps/documentation/javascript/controls?hl=ko#ControlPositioning]를 참고하세요.

다음 코드는 위 샘플에서 컨트롤 위치를 다시 지정합니다.

G_ANCHOR_TOP_LEFT, new GSize(10, 10)));

G_ANCHOR_BOTTOM_RIGHT, new GSize(20, 20)));

맞춤 컨트롤

Maps JavaScript API를 사용하여 맞춤 탐색 컨트롤을 만듭니다.
v2 API로 컨트롤을 맞춤설정하려면 GControl 클래스의 서브클래스를 만들고 initialize() 및 getDefaultPosition() 메서드의 핸들러를 정의합니다.
v3에는 GControl 클래스와 동등한 클래스가 없습니다. 대신 컨트롤은 DOM 요소로 표시됩니다. v3 API를 사용하여 맞춤 컨트롤을 추가하려면 생성자에서 컨트롤의 DOM 구조를 Node의 하위 요소 (예: <div> 요소)로 만들고 DOM 이벤트를 처리하는 이벤트 리스너를 추가합니다. Node를 지도의 controls[position] 배열에 푸시하여 지도에 맞춤 컨트롤의 인스턴스를 추가합니다.

위에 언급된 인터페이스 요구사항을 준수하는 HomeControl 클래스 구현 (자세한 내용은 맞춤 컨트롤 [https://developers.google.com/maps/documentation/javascript/controls?hl=ko#CustomControls] 문서 참고)을 고려할 때 다음 코드 샘플은 지도에 맞춤 컨트롤을 추가하는 방법을 보여줍니다.

map.addControl(new HomeControl(),
GControlPosition(G_ANCHOR_TOP_RIGHT, new GSize(10, 10)));

homeControlDiv);

오버레이

오버레이는 지도에 '추가'하여 점, 선, 영역 또는 객체의 모음을 지정하는 객체를 반영합니다.

오버레이 추가 및 삭제

오버레이로 표현되는 객체 유형은 v2와 v3에서 동일하지만 다르게 처리됩니다.

v2 API의 오버레이는 GMap2 객체의 addOverlay() 및 removeOverlay() 메서드를 사용하여 지도에 추가 및 삭제되었습니다. v3에서는 연결된 오버레이 옵션 클래스의 map 속성을 사용하여 지도 오버레이에 지도를 할당합니다.
오버레이 객체의 setMap() 메서드를 호출하고 원하는 지도를 지정하여 오버레이를 직접 추가하거나 삭제할 수도 있습니다. 오버레이를 삭제하려면 지도 속성을 null로 설정하세요.

v3에는 clearOverlays() 메서드가 없습니다.
오버레이 집합을 관리하려면 오버레이를 보유하는 배열을 만들어야 합니다. 이 배열을 사용하면 배열의 각 오버레이에서 setMap()를 호출할 수 있습니다 (오버레이를 삭제해야 하는 경우 null 전달).

드래그 가능한 마커

기본적으로 마커는 클릭은 가능하지만 드래그는 불가능합니다. 다음 두 샘플은 드래그 가능한 마커를 추가합니다.

v3 API는 이 과정을 다소 단순화했습니다.
마커의 icon 속성을 맞춤 이미지의 URL로 설정하면 API에서 아이콘의 크기를 자동으로 조정합니다.

Maps JavaScript API는 복잡한 아이콘도 지원합니다.
복잡한 아이콘에는 여러 타일, 복잡한 도형이 포함되거나 이미지가 다른 오버레이에 비례하여 표시되는 방식의 '비슷한 항목 순서'가 지정될 수 있습니다. v2에서 마커에 도형을 추가하려면 각 GIcon 인스턴스에 추가 속성을 지정하고 이를 GMarker 생성자에 옵션으로 전달해야 합니다. v3에서는 이 방식으로 지정된 아이콘의 icon 속성을 Icon 유형의 객체로 설정해야 합니다.
v3에서 마커 섀도우는 지원되지 않습니다.

다음 예는 아이콘의 투명한 부분을 클릭할 수 없는 오스트레일리아 본다이 해변의 해변 깃발을 보여줍니다.

map.setUIToDefault();

flagIcon.imageMap = [1, 1, 1, 20, 18, 20, 18 , 1];

new GLatLng(1.352083, 103.819836),
new GLatLng(-33.867139, 151.207114)
],
'#FF0000', 3, 0.5, {
geodesic: true

new google.maps.LatLng(1.352083, 103.819836),
new google.maps.LatLng(-33.867139, 151.207114)
],
strokeColor: '#FF0000',
strokeOpacity: 0.5,
strokeWeight: 3,
geodesic: true

인코딩된 폴리라인
v3에서는 인코딩된 다중선 [https://developers.google.com/maps/documentation/javascript/v2/overlays?hl=ko#Encoded_Polylines]에서 직접 Polyline 객체를 만드는 기능이 지원되지 않습니다. 대신 The Geometry Library [https://developers.google.com/maps/documentation/javascript/geometry?hl=ko]에서 다중선을 인코딩하고 디코딩하는 메서드를 제공합니다. 이 라이브러리를 로드하는 방법에 관한 자세한 내용은 v3 Maps API의 라이브러리 [https://developers.google.com/maps/documentation/javascript/libraries?hl=ko]를 참고하세요.

아래 예에서는 동일하게 인코딩된 다중선을 그립니다. v3 코드는 google.maps.geometry.encoding 네임스페이스의 decodePath() 메서드를 사용합니다.

다각형

폴리곤은 폐쇄된 루프 내 영역을 정의합니다. Polyline 객체와 마찬가지로 Polygon 객체는 순서가 지정된 일련의 점으로 구성됩니다. v3 Polygon 클래스는 v2 GPolygon 클래스와 거의 동일합니다. 단, 루프를 닫기 위해 더 이상 경로 끝에서 시작 정점을 반복할 필요가 없다는 점이 다릅니다. v3 API는 마지막 좌표를 첫 번째 좌표에 연결하는 획을 그려 다각형을 자동으로 닫습니다. 다음 코드 스니펫은 버뮤다 삼각형을 나타내는 다각형을 만듭니다.

new GLatLng(18.466465, -66.118292),
new GLatLng(32.321384, -64.75737),
new GLatLng(25.774252, -80.190262)
],
'#FF0000', 2, 0.8, '#FF0000', 0.35);

map.addOverlay(bermudaTriangle);

new google.maps.LatLng(18.466465, -66.118292),
new google.maps.LatLng(32.321384, -64.75737)
],
strokeColor: '#FF0000',
strokeWeight: 2,
strokeOpacity: 0.8,
fillColor: '#FF0000',
fillOpacity: 0.35

사용자가 수정 가능한 도형

폴리라인과 폴리곤을 사용자가 편집하게 만들 수도 있습니다. 다음 코드 스니펫은 동일합니다.

map.addOverlay(polyline);
polyline.enableEditing();

polyline.setMap(map);
polyline.setEditable(true);

고급 그리기 기능에 관한 자세한 내용은 v3 문서의 그리기 라이브러리 [https://developers.google.com/maps/documentation/javascript/drawinglayer?hl=ko]를 참고하세요.

정보 창

InfoWindow는 지도 위의 플로팅 창에 콘텐츠를 표시합니다. v2와 v3 정보 창은 몇 가지 중요한 차이가 있습니다.

v2 API는 지도당 GInfoWindow만 지원하는 반면 v3 API는 각 지도에서 여러 개의 동시 InfoWindow를 지원합니다.

지도를 클릭해도 v3 InfoWindow가 열려 있는 상태로 유지됩니다. v2 GInfoWindow는 지도를 클릭하면 자동으로 닫힙니다. Map 객체에 click 리스너를 추가하여 v2 동작을 에뮬레이션할 수 있습니다.

v3 API는 탭이 있는 InfoWindow를 기본적으로 지원하지 않습니다.

지면 오버레이

지도에 이미지를 배치하려면 GroundOverlay 객체를 사용해야 합니다. GroundOverlay의 생성자는 v2와 v3에서 기본적으로 동일합니다. 이미지의 URL과 이미지의 경계를 매개변수로 지정합니다.

다음 예에서는 뉴저지주 뉴어크의 오래된 지도를 지도에 오버레이로 배치합니다.

new GLatLng(40.765641, -74.139235));

map.addOverlay(overlay);

new google.maps.LatLng(40.765641, -74.139235));

overlay.setMap(map);

지도 유형

v2와 v3에서 사용할 수 있는 지도 유형은 약간 다르지만 모든 기본 지도 유형은 두 API 버전에서 모두 사용할 수 있습니다. 기본적으로 v2는 표준 '페인팅된' 도로 지도 타일을 사용합니다. 그러나 v3에서는 google.maps.Map 객체를 만들 때 특정 맵 유형을 제공해야 합니다.

공통 지도 유형

v2와 v3에서는 4가지 기본 지도 유형을 사용할 수 있습니다.

MapTypeId.ROADMAP (G_NORMAL_MAP 대체)는 도로 지도 뷰를 표시합니다.
MapTypeId.SATELLITE (G_SATELLITE_MAP 대체) Google 어스 위성 이미지를 표시합니다.
MapTypeId.HYBRID (G_HYBRID_MAP 대체)는 일반 뷰와 위성 뷰를 혼합하여 표시합니다.
MapTypeId.TERRAIN (G_PHYSICAL_MAP 대체)는 지형 정보를 기반으로 실제 지도를 표시합니다.

다음은 지형 뷰에 대한 지형을 설정하는 v2와 v3의 예시입니다.

map.setMapType(G_PHYSICAL_MAP);

map.setMapTypeId(google.maps.MapTypeId.TERRAIN);

Maps JavaScript API v3에서는 덜 일반적인 지도 유형도 몇 가지 변경했습니다.

지구 이외의 천체용 지도 타일은 v3 API에서 지도 유형으로 사용할 수 없지만 맞춤 지도 유형으로 액세스할 수 있습니다. 예를 보려면 이 맞춤 지도 유형 예 [https://developers.google.com/maps/documentation/javascript/examples/maptype-image?hl=ko]를 참고하세요.

v3에는 v2의 G_SATELLITE_3D_MAP 유형을 대체하는 특수 지도 유형이 없습니다. 대신 이 라이브러리 [http://github.com/googlemaps/js-v3-earth-api]를 사용하여 v3 지도에 Google 어스 플러그인을 통합할 수 있습니다.

최대 확대/축소 이미지

위성 이미지를 높은 확대/축소 수준에서 제공하지 못할 수도 있습니다. 확대/축소 수준을 설정하기 전에 사용 가능한 최대 확대/축소 수준을 알고 싶다면 google.maps.MaxZoomService 클래스를 사용하세요. 이 클래스는 v2의 GMapType.getMaxZoomAtLatLng() 메서드를 대체합니다.

map.setCenter(point);
map.setMapType(G_HYBRID_MAP);

map.getCurrentMapType().getMaxZoomAtLatLng(point,
myLatlng,

지원되는 도시 지도 [http://maps.google.com/maps/ms?ie=UTF8&msa=0&msid=112099477591857711257.00048ad05c320f746f5c2&hl=ko]에서 45도 이미지를 사용할 수 있는 도시를 확인할 수 있습니다. 45도 이미지를 사용할 수 있으면 Maps API Satellite 버튼에 하위 메뉴 옵션이 추가됩니다.

레이어
레이어는 하나 이상의 오버레이로 구성된 지도상의 객체입니다. 단일 단위로 조작할 수 있으며 일반적으로 객체 모음을 반영합니다.

지원되는 계층

v3 API는 여러 가지 계층에 액세스를 제공합니다. 이러한 레이어는 다음 영역에서 v2 GLayer 클래스와 겹칩니다.

KmlLayer 객체는 KML 및 GeoRSS 요소를 v3 오버레이로 렌더링하여 v2 GeoXml 레이어에 상응하는 기능을 제공합니다.
TrafficLayer 객체는 v2 GTrafficOverlay 오버레이와 마찬가지로 교통 상황을 나타내는 레이어를 렌더링합니다.

이러한 계층은 v2와는 다릅니다. 차이점은 아래에 설명되어 있습니다. setMap()을 호출하고 레이어를 표시할 Map 객체를 전달하여 지도에 추가할 수 있습니다.

지원되는 레이어에 관한 자세한 내용은 레이어 문서 [https://developers.google.com/maps/documentation/javascript/layers?hl=ko]를 참고하세요.

KML 및 GeoRSS 레이어

Maps JavaScript API는 지리 정보를 표시하기 위한 KML 및 GeoRSS 데이터 형식을 지원합니다. KML 또는 GeoRSS 파일을 지도에 포함하려면 공개적으로 액세스할 수 있어야 합니다. v3에서는 이러한 데이터 형식이 v2의 GGeoXml 객체를 대체하는 KmlLayer 인스턴스를 사용하여 표시됩니다.

v3 API는 KML을 렌더링할 때 더 유연하여 InfoWindows를 숨기고 클릭 응답을 수정할 수 있습니다. 자세한 내용은 v3 KML 및 GeoRSS 레이어 [https://developers.google.com/maps/documentation/javascript/kmllayer?hl=ko] 문서를 참조하세요.

KmlLayer를 렌더링할 때는 크기 및 복잡성 제한사항이 적용됩니다. 자세한 내용은 KmlLayer 문서 [https://developers.google.com/maps/documentation/javascript/kmllayer?hl=ko#overview]를 참고하세요.

다음 샘플에서는 KML 파일 로드 방법을 비교합니다.

geoXml = new GGeoXml(
'https://googlearchive.github.io/js-v2-samples/ggeoxml/cta.kml');

map.addOverlay(geoXml);

교통정보 레이어

v3에서는 TrafficLayer 객체를 사용하여 지도에 실시간 교통정보를 추가할 수 있습니다 (지원되는 경우). 요청 시 트래픽 정보가 제공됩니다. 다음 예는 로스앤젤레스의 교통 정보를 보여줍니다.

map.setUIToDefault();

map.addOverlay(trafficInfo);

v2와 달리 v3에는 TrafficLayer 생성자에 대한 옵션이 없습니다. v3에서는 사고가 제공되지 않습니다.

서비스

지오코딩

Maps JavaScript API는 사용자 입력에서 동적으로 주소를 지오코딩하기 위한 geocoder 객체를 제공합니다. 알려진 정적 주소를 지오코딩하려면 Geocoding API [https://developers.google.com/maps/documentation/geocoding?hl=ko] 문서를 참고하세요.

Geocoding API [https://developers.google.com/maps/documentation/geocoding?hl=ko]가 대대적으로 업그레이드 및 개선되어 새로운 기능이 추가되고 데이터가 표시되는 방식이 변경되었습니다.

v2 API의 GClientGeocoder는 전방 및 역방향 지오코딩을 위한 두 가지 방법과 지오코딩 실행 방식에 영향을 미치는 추가 메서드를 제공했습니다. 반면 v3 Geocoder 객체는 입력 검색어(지오코딩 요청 [https://developers.google.com/maps/documentation/javascript/geocoding?hl=ko#GeocodingRequests] 객체 형식)가 포함된 객체 리터럴과 콜백 메서드를 사용하는 geocode() 메서드만 제공합니다. 요청에 텍스트 address 속성이 포함되어 있는지 또는 LatLng 객체가 포함되어 있는지에 따라 Geocoding API는 전방 지오코딩 응답 또는 역지오코딩 응답을 반환합니다. 지오코딩 요청에 추가 필드를 전달하여 지오코딩이 실행되는 방식에 영향을 줄 수 있습니다.

텍스트 address를 포함하면 전방 지오코딩이 트리거되며 이는 getLatLng() 메서드를 호출하는 것과 같습니다.

latLng 객체를 포함하면 역지오코딩이 트리거되며 이는 getLocations() 메서드를 호출하는 것과 같습니다.

bounds 속성을 포함하면 표시 영역 편향 [https://developers.google.com/maps/documentation/javascript/geocoding?hl=ko#GeocodingViewports]이 사용 설정되며 이는 setViewport() 메서드를 호출하는 것과 같습니다.

region 속성을 포함하면 지역 코드 편향 [https://developers.google.com/maps/documentation/javascript/geocoding?hl=ko#GeocodingRegionCodes]이 사용 설정되며 이는 setBaseCountryCode() 메서드를 호출하는 것과 같습니다.

v3의 Geocoding 응답 [https://developers.google.com/maps/documentation/javascript/geocoding?hl=ko#GeocodingResponses]은 v2 응답과 매우 다릅니다. v3 API는 v2에서 사용하는 중첩 구조를 파싱하기 더 쉬운 더 평면적인 구조로 대체합니다. 또한 v3 응답은 더 자세합니다. 각 결과에는 각 결과의 해상도를 더 잘 파악하는 데 도움이 되는 여러 주소 구성요소 [https://developers.google.com/maps/documentation/javascript/geocoding?hl=ko#GeocodingAddressTypes]가 있습니다.

다음 코드는 텍스트 주소를 가져와 지오코딩의 첫 번째 결과를 표시합니다.

function geocode_result_handler(response) {
if (!response || response.Status.code != 200) {
alert('Geocoding failed. ' + response.Status.code);
response.Placemark[0].ExtendedData.LatLonBox.west
), new GLatLng(
response.Placemark[0].ExtendedData.LatLonBox.north,
response.Placemark[0].ExtendedData.LatLonBox.east
));
map.setCenter(bounds.getCenter(),
map.getBoundsZoomLevel(bounds));
response.Placemark[0].Point.coordinates[0]);
infoPanel.innerHTML += '<p>1st result is <em>' +
'</em> of <em>' +
AccuracyDescription[response.Placemark[0].
AddressDetails.Accuracy] +
'</em> at <tt>' + latlng + '</tt></p>';
map.clearOverlays();

map.addOverlay(marker);
geocoder.getLocations(address, geocode_result_handler);
map.setCenter(new GLatLng(38, 15), 2);
map.setUIToDefault();

infoPanel = document.getElementById('info-panel');
infoPanel.innerHTML += '<p>1st result for geocoding is <em>' +
result[0].geometry.location_type.toLowerCase() +
'</em> to <em>' +
result[0].formatted_address + '</em> of types <em>' +
result[0].types.join('</em>, <em>').replace(/_/, ' ') +
'</em> at <tt>' + result[0].geometry.location +
'</tt></p>';
if (marker) {
marker.setPosition(result[0].geometry.location);
marker.setTitle(marker_title);
geocoder.geocode({'address': address}, geocode_result_handler);
Maps JavaScript API v3에서는 경로를 계산하기 위해 v2의 GDirections 클래스를 DirectionsService 클래스로 대체합니다.

v3의 route() 메서드는 v2 API의 load() 및 loadFromWaypoints() 메서드 모두를 대체합니다. 이 메서드는 입력 검색어와 응답 수신 시 실행할 콜백 메서드가 포함된 단일 DirectionsRequest 객체 리터럴을 사용합니다. v2의 GDirectionsOptions 객체 리터럴과 마찬가지로 이 객체 리터럴에 옵션을 제공할 수 있습니다.

Maps JavaScript API v3에서는 경로 요청을 제출하는 작업이 요청 렌더링 작업과 분리되었으며, 이제 DirectionsRenderer 클래스로 처리됩니다. setMap() 및 setDirections() 메서드를 통해 DirectionsRenderer 객체를 지도 또는 DirectionsResult 객체에 연결할 수 있습니다. 렌더러는 MVCObject이므로 속성의 변경사항을 감지하고 연결된 경로가 변경된 경우 지도를 업데이트합니다.

다음 코드는 주소의 보행자 전용 도로를 사용하여 특정 위치로 가는 도보 경로를 요청하는 방법을 보여줍니다. v3만 더블린 동물원의 보행자 전용 도로에 대한 도보 경로를 제공할 수 있습니다.

map = new GMap2(document.getElementById('map'));
map.setCenter(origin, 10);
map.setUIToDefault();

directions = new GDirections(map, directionsPanel);

directions.loadFromWaypoints(
[origin, destination], {
travelMode: 'G_TRAVEL_MODE_WALKING',

map = new google.maps.Map(
directionsRenderer.setMap(map);
directionsService.route({
origin: origin,
destination: destination,
travelMode: google.maps.DirectionsTravelMode.WALKING
Google 스트리트 뷰는 서비스 범위 내 지정된 위치에서 360도 양방향 뷰를 제공합니다. v3 API는 스트리트 뷰 이미지를 표시하는 데 Flash® 플러그인이 필요했던 v2와 달리 브라우저 내에서 기본적으로 스트리트 뷰를 지원합니다.

스트리트 뷰 이미지는 v3의 StreetViewPanorama 객체 또는 v2의 GStreetviewPanorama 객체를 사용하여 지원됩니다. 이러한 클래스는 인터페이스가 다르지만 동일한 역할을 합니다. 즉, div 컨테이너를 스트리트 뷰 이미지와 연결하고 스트리트 뷰 파노라마의 위치와 시점을 지정할 수 있도록 합니다.

function initialize() {

GEvent.addListener(myPano, "error", handleNoFlash);
return;

v3에서 스트리트 뷰는 기본적으로 활성화되어 있습니다. 지도에 스트리트 뷰 페그맨 컨트롤이 표시되고 API는 지도 div를 재사용하여 스트리트 뷰 파노라마를 표시합니다. 다음 코드는 360도 파노라마를 별도의 div로 분리하여 v2 동작을 에뮬레이션하는 방법을 보여줍니다.

GEvent.addListener(myPano, 'error', handleNoFlash);
map.setUIToDefault();

GEvent.addListener(map, 'click', function(overlay, latlng) {
if (marker) {
marker.setLatLng(latlng);
map.addOverlay(marker);
Math.sin(latlng.latRadians()) -
Math.sin(panoData.location.latlng.latRadians()) *
Math.cos(latlng.latRadians()) * Math.cos(dLon);
return;

function initialize() {

panorama = new google.maps.StreetViewPanorama(

panorama.setPano(panoData.location.pano);

panorama.setPov({
heading: bearing,
pitch: 0,
zoom: 1
marker.setMap(panorama);