Source URL: https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/trip-details?hl=ko
Title: 차량의 목적지 설정

차량의 목적지 설정

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 섹션에서는 서버가 차량에 여정을 매칭한 후 차량의 목적지를 설정하는 방법을 설명합니다.

시작하기 전에

이 섹션을 완료하려면 다음을 완료해야 합니다.

Driver SDK 초기화 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/initialize-sdk?hl=ko]
차량 준비하기 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/vehicle-ready?hl=ko]
Fleet Engine에서 여정 만들기 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/trips/create-trip?hl=ko]

운전자 앱에서 목적지 설정

소비자를 운전자와 페어링한 후 다음 단계에 따라 운전자 앱에서 여정의 목적지를 구성해야 합니다.

GetTrip(), UpdateTrip(), GetVehicle()에서 반환하는 Fleet Engine의 경유지 컬렉션에서 차량의 목적지를 가져옵니다.
Android용 Navigation SDK 메서드 setDestination() [https://developers.google.com/maps/documentation/navigation/android-sdk/reference/com/google/android/libraries/navigation/Navigator?hl=ko#public-abstract-listenableresultfuturenavigator.routestatus-setdestination-waypoint-destination]를 호출하여 목적지를 설정합니다.
참고: 소비자 앱에서 여정을 올바르게 렌더링하려면 setDestination()에 제공된 지리적 위도/경도 좌표가 여정의 경유지에 있는 좌표와 일치해야 합니다. 자세한 내용은 튜토리얼 단일 대상으로 라우팅 [https://developers.google.com/maps/documentation/navigation/android-sdk/route?hl=ko] 및 여러 대상으로 라우팅 [https://developers.google.com/maps/documentation/navigation/android-sdk/multi-destination?hl=ko]을 참고하세요.

다음 예는 운전자 앱에서 목적지를 설정하는 방법을 보여줍니다.

자바private void navigateToLocation(LatLng locationLatLng, RoutingOptions routingOptions) {
Waypoint destination = Waypoint.newBuilder().setLocation(locationLatLng).build();

ListenableResultFuture<Navigator.RouteStatus> pendingRoute =
mNavigator.setDestination(destination, travelMode);

new ListenableResultFuture.OnResultListener<Navigator.RouteStatus>() {
@Override
public void onResult(Navigator.RouteStatus code) {
switch (code) {
case OK:
Navigator.AudioGuidance.VOICE_ALERTS_AND_GUIDANCE);

new SimulationOptions().speedMultiplier(5));
break;
break;
case NETWORK_ERROR:
displayMessage("Error starting navigation: Network error.");
break;
case ROUTE_CANCELED:
displayMessage("Error starting navigation: Route canceled.");
break;
default:
displayMessage("Error starting navigation: "
+ String.valueOf(code));

object : ListenableResultFuture.OnResultListener<Navigator.RouteStatus>() {
override fun onResult(code: Navigator.RouteStatus) {
when (code) {
Navigator.RouteStatus.OK -> {

.getSimulator()
.simulateLocationsAlongExistingRoute(SimulationOptions().speedMultiplier(5))