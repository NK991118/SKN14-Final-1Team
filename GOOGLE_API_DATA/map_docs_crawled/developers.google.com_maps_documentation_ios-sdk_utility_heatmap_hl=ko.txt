Source URL: https://developers.google.com/maps/documentation/ios-sdk/utility/heatmap?hl=ko
Title: 히트맵

의견 보내기

히트맵

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

플랫폼 선택:

Android [https://developers.google.com/maps/documentation/android-sdk/utility/heatmap?hl=ko]

iOS [https://developers.google.com/maps/documentation/ios-sdk/utility/heatmap?hl=ko]

JavaScript [https://developers.google.com/maps/documentation/javascript/heatmaplayer?hl=ko]

이 페이지에서는 iOS용 Maps SDK 유틸리티 라이브러리 [https://github.com/googlemaps/google-maps-ios-utils]에서 사용할 수 있는 히트맵 유틸리티를 설명합니다.
히트맵은 지도에 데이터 지점의 분포와 밀도를 표현하는 데 유용합니다.

이 동영상에서는 지도에서 다수의
데이터 지점이 필요한 데이터의 경우, 마커를 대신하여 히트맵을 사용하는 방법을 설명합니다.

히트맵을 사용하면 사용자가 지도에서 데이터 지점의 분포와 상대적 강도를 쉽게 이해할 수 있습니다. 히트맵은 각 위치에 마커를 배치하는 대신 색상을 사용하여 데이터의 분포를 나타냅니다.

아래 예시에서 빨간색은 오스트레일리아 빅토리아 주에서 경찰서가 집중된 지역을 나타냅니다.

지도의 히트맵

참고: gradient 속성을 사용하여 히트맵에 내가 원하는 색상을 설정할 수 있습니다. 히트맵의 색상과 기타 속성을 맞춤설정 [https://developers.google.com/maps/documentation/ios-sdk/utility/heatmap?hl=ko#customize]하는 방법을 알아보세요.
아직 라이브러리를 설정하지 않았다면 이 페이지의 나머지 부분을 읽기 전에 설정 가이드 [https://developers.google.com/maps/documentation/ios-sdk/utility/setup?hl=ko]를 따르세요.

간단한 히트맵 추가

지도에 히트맵을 추가하려면 각 관심 위치의 좌표로 구성된 데이터 세트가 필요합니다. 먼저 GMUHeatmapTileLayer 인스턴스를 만들어 map 속성을 GMSMapView로 설정합니다.
히트맵을 사용하기 전에 기본 지도가 로드되도록 앱의 viewDidLoad() 함수에서 이 작업을 실행합니다. 그런 다음 GMUWeightedLatLng 객체 컬렉션을 GMUHeatmapTileLayer 인스턴스에 전달합니다.

이 유틸리티는 GMUWeightedLatLng 객체의 컬렉션을 허용하는 GMUHeatmapTileLayer 클래스를 제공합니다. 제공된 반경, 그라데이션 및 불투명도 옵션에 따라 다양한 확대/축소 수준의 타일 이미지를 생성합니다.

세부 단계:

GMUHeatmapTileLayer 인스턴스를 만들어 map 속성을 GMSMapView로 설정합니다 (앱의 viewDidLoad() 함수에서 이 작업을 실행).
GMUWeightedLatLng 객체 컬렉션을 GMUHeatmapTileLayer 인스턴스에 전달합니다.
GMUHeatmapTileLayer.map를 호출하여 지도 뷰를 전달합니다.

Swift
class Heatmap: UIViewController {

private var mapView: GMSMapView!
private var heatmapLayer: GMUHeatmapTileLayer!

override func viewDidLoad() {
super.viewDidLoad()
heatmapLayer = GMUHeatmapTileLayer()
heatmapLayer.map = mapView
return
Objective-C
@implementation Heatmap {
GMSMapView *_mapView;
GMUHeatmapTileLayer *_heatmapLayer;
_heatmapLayer = [[GMUHeatmapTileLayer alloc] init];
_heatmapLayer.map = _mapView;
NSURL *path = [NSBundle.mainBundle URLForResource:@"police_stations" withExtension:@"json"];
NSData *data = [NSData dataWithContentsOfURL:path];
NSArray *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];

NSMutableArray<GMUWeightedLatLng *> *list = [[NSMutableArray alloc] init];
[json enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
NSDictionary *item = (NSDictionary *)obj;
CLLocationDegrees lat = [(NSNumber *) [item valueForKey:@"lat"] doubleValue];
CLLocationDegrees lng = [(NSNumber *) [item valueForKey:@"lng"] doubleValue];
GMUWeightedLatLng *coords = [[GMUWeightedLatLng alloc] initWithCoordinate:CLLocationCoordinate2DMake(lat, lng)
colors: gradientColors,
startPoints: gradientStartPoints,
colorMapSize: 256

Objective-C
NSArray<UIColor *> *gradientColors = @[UIColor.greenColor, UIColor.redColor];
NSArray<NSNumber *> *gradientStartPoints = @[@0.2, @1.0];
_heatmapLayer.gradient = [[GMUGradient alloc] initWithColors:gradientColors
startPoints:gradientStartPoints
heatmapLayer.opacity = 0.7

Objective-C
_heatmapLayer.opacity = 0.7;

기존 옵션 업데이트

이미 설정된 옵션을 업데이트하려면 다음 단계를 따르세요.

옵션을 원하는 값으로 업데이트합니다.
GMUHeatmapTileLayer.clearTileCache()를 호출합니다.

데이터 세트 변경

히트맵이 빌드된 데이터 세트를 변경하려면 다음 단계를 따르세요.

데이터 수집을 업데이트합니다. GMUHeatmapTileLayer.weightedData를 사용하여 GMUWeightedLatLng 배열을 전달합니다.
GMUHeatmapTileLayer.clearTileCache()를 호출합니다.

참고: 히트맵에 지점을 추가하거나 히트맵에서 지점을 삭제하려면 먼저 데이터 컬렉션을 업데이트한 후 GMUHeatmapTileLayer.weightedData를 사용하세요.
히트맵 삭제

히트맵을 삭제하려면 GMUHeatmapTileLayer.map를 호출하고 nil을 전달합니다.

Swift
heatmapLayer.map = nil

Objective-C
_heatmapLayer.map = nil;

데모 앱 보기

히트맵 구현의 다른 예는 유틸리티 라이브러리와 함께 제공되는 데모 앱에서 HeatmapViewController를 참고하세요.
설정 가이드 [https://developers.google.com/maps/documentation/ios-sdk/utility/setup?hl=ko]에서는 데모 앱을 실행하는 방법을 보여줍니다.

의견 보내기