Source URL: https://developers.google.com/maps/documentation/urls/android-intents?hl=ko
Title: Android용 Google 지도 인텐트

Android용 Google 지도 인텐트

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Android용 Google 지도 앱 [https://play.google.com/store/apps/details?id=com.google.android.apps.maps&hl=ko]은 표시, 검색, 내비게이션 또는 스트리트 뷰 모드에서 Google 지도를 실행하는 데 사용할 수 있는 여러 인텐트를 노출합니다. 앱에 지도를 삽입하려면 Android용 Maps SDK 빠른 시작 [https://developers.google.com/maps/documentation/android-sdk/start?hl=ko]을 참고하세요.
참고: 지도 URL [https://developers.google.com/maps/documentation/urls/guide?hl=ko]을 사용하면 범용 교차 플랫폼 URL을 구성하여 Google 지도를 실행하고 검색하고 경로를 찾고 지도 뷰를 표시하고 파노라마 이미지를 표시할 수 있습니다. 교차 플랫폼 지도 URL을 사용하여 Google 지도를 실행하는 것이 좋습니다. 이러한 범용 URL을 사용하면 사용자가 사용하는 플랫폼에 관계없이 지도 요청을 더 광범위하게 처리할 수 있기 때문입니다.
모바일 플랫폼에서만 작동할 수 있는 기능 (예: 세부 경로 내비게이션)에만 Android용 지도 인텐트를 사용해야 합니다.
Android Automotive OS (AAOS) 플랫폼에는 구체적인 고려사항과 사용 가능한 추가 인텐트가 있습니다. 자세한 내용은 Android Automotive 인텐트용 Google 지도 [https://developer.android.com/training/cars/platforms/automotive-os/android-intents-automotive?hl=ko] 문서를 참고하세요.

개요

인텐트를 사용하면 Intent [https://developer.android.com/reference/android/content/Intent?hl=ko] 객체에서 실행할 작업 (예: '지도 표시' 또는 '공항까지의 경로 표시')을 설명하여 다른 앱에서 활동을 시작할 수 있습니다. Android용 Google 지도 앱 [https://play.google.com/store/apps/details?id=com.google.android.apps.maps&hl=ko]은 다양한 인텐트를 지원하므로 Google 지도 앱을 실행하고 다음 네 가지 작업 중 하나를 실행할 수 있습니다.

지정된 위치와 확대/축소 수준으로 지도를 표시합니다.
위치나 장소를 검색하고 지도에 표시합니다.
한 위치에서 다른 위치로 찾아가는 길을 요청합니다. 운전, 도보, 자전거 등 세 가지 이동 수단에 대한 경로를 반환할 수 있습니다.
Google 스트리트 뷰에서 파노라마 이미지를 표시합니다.

이 페이지에서는 Android용 Google 지도 앱과 함께 사용할 수 있는 인텐트에 대해 설명합니다. 인텐트에 관한 자세한 내용은 인텐트 및 인텐트 필터 [https://developer.android.com/guide/components/intents-filters?hl=ko] 및 일반 인텐트 [https://developer.android.com/guide/components/intents-common?hl=ko]를 참고하세요.

인텐트 요청

인텐트로 Google 지도를 실행하려면 먼저 작업, URI, 패키지를 지정하는 Intent [https://developer.android.com/reference/android/content/Intent?hl=ko] 객체를 만들어야 합니다.

작업: 모든 Google 지도 인텐트는 뷰 작업(ACTION_VIEW)으로 호출됩니다.
URI: Google 지도 인텐트는 선택한 작업을 지정하는 URL로 인코딩된 [https://developer.android.com/guide/components/google-maps-intents?hl=ko#urlencoding] URI와 작업을 실행하는 데 사용할 데이터를 사용합니다.
패키지: setPackage("com.google.android.apps.maps")를 호출하면 Android용 Google 지도 앱이 인텐트를 처리합니다. 패키지가 설정되지 않으면 시스템에서 Intent를 처리할 수 있는 앱을 결정합니다. 사용 가능한 앱이 여러 개인 경우 사용자에게 사용할 앱을 선택하라는 메시지가 표시될 수 있습니다.
참고: Android Automotive OS (AAOS)에서는 패키지 이름 com.google.android.apps.maps도 사용됩니다. 그러나 AAOS에는 구체적인 고려사항과 추가 인텐트가 있습니다. AAOS 관련 동작 및 기능에 관한 자세한 내용은 Android Automotive용 Google 지도 인텐트 문서 [https://developer.android.com/training/cars/platforms/automotive-os/android-intents-automotive?hl=ko]를 참고하세요.

Intent를 만든 후에는 여러 가지 방법으로 시스템이 관련 앱을 실행하도록 요청할 수 있습니다. 일반적인 방법은 Intent를 startActivity() [https://developer.android.com/reference/android/content/Context?hl=ko#startActivity(android.content.Intent)] 메서드에 전달하는 것입니다. 시스템은 필요한 앱(이 경우 Google 지도)을 실행하고 상응하는 Activity [https://developer.android.com/reference/android/app/Activity?hl=ko]를 시작합니다.

자바// Create a Uri from an intent string. Use the result to create an Intent.
Uri gmmIntentUri = Uri.parse("google.streetview:cbll=46.414382,10.013988");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);

Kotlin// Create a Uri from an intent string. Use the result to create an Intent.
val gmmIntentUri = Uri.parse("google.streetview:cbll=46.414382,10.013988")

시스템이 인텐트에 응답할 수 있는 앱을 식별할 수 없는 경우 앱이 비정상 종료될 수 있습니다. 따라서 이러한 인텐트 중 하나를 사용자에게 표시하기 전에 먼저 수신 애플리케이션이 설치되어 있는지 확인합니다.

앱이 인텐트를 수신할 수 있는지 확인하려면 Intent [https://developer.android.com/reference/android/content/Intent?hl=ko] 객체에서 resolveActivity() [https://developer.android.com/reference/android/content/Intent?hl=ko#resolveActivity(android.content.pm.PackageManager)]를 호출합니다. 결과가 null이 아니면 인텐트를 처리할 수 있는 앱이 하나 이상 있으며 startActivity() [https://developer.android.com/reference/android/content/Context?hl=ko#startActivity(android.content.Intent)]를 호출해도 됩니다. 결과가 null인 경우 인텐트를 사용하지 마세요. 가능하다면 인텐트를 호출하는 기능을 사용 중지하세요.

자바if (mapIntent.resolveActivity(getPackageManager()) != null) {
...
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
if (mapIntent.resolveActivity(getPackageManager()) != null) {
startActivity(mapIntent);
mapIntent.setPackage("com.google.android.apps.maps")
mapIntent.resolveActivity(packageManager)?.let {
startActivity(mapIntent)

Google Maps 인텐트에 전달되는 모든 문자열은 URI 인코딩되어야 합니다. 예를 들어 1st & Pike, Seattle 문자열은 1st%20%26%20Pike%2C%20Seattle이 됩니다.
문자열의 공백은 %20로 인코딩되거나 더하기 기호(+)로 대체될 수 있습니다.

android.net.Uri parse() 메서드를 사용하여 문자열을 인코딩할 수 있습니다.
예를 들면 다음과 같습니다.

자바Uri gmmIntentUri =
Uri.parse("geo:37.7749,-122.4192?q=" + Uri.encode("1st & Pike, Seattle"));

Kotlinval gmmIntentUri =
Uri.parse("geo:37.7749,-122.4192?q=" + Uri.encode("1st & Pike, Seattle"))

지도 표시

geo: 인텐트를 사용하여 지정된 위치 및 확대/축소 수준으로 지도를 표시합니다.
geo:latitude,longitude?z=zoom

매개변수

latitude 및 longitude는 지도의 중심점을 설정합니다.
z는 선택적으로 지도의 초기 확대/축소 수준을 설정합니다. 허용되는 값은 0 (전 세계)~21 (개별 건물)입니다. 상한선은 선택한 위치에서 사용 가능한 지도 데이터에 따라 다를 수 있습니다.

예

자바// Creates an Intent that loads a map of San Francisco
Uri gmmIntentUri = Uri.parse("geo:37.7749,-122.4194");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlin// Creates an Intent that loads a map of San Francisco
val gmmIntentUri = Uri.parse("geo:37.7749,-122.4194")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

위치 검색

이 인텐트를 사용하여 지정된 뷰포트 내에 검색 쿼리를 표시합니다. 검색어에 결과가 하나만 있는 경우 이 인텐트를 사용하여 특정 장소나 주소(예: 명소, 비즈니스, 지형지물, 마을)에 핀을 표시할 수 있습니다.
geo:latitude,longitude?q=query
geo:0,0?q=my+street+address
geo:0,0?q=latitude,longitude(label)

매개변수

지도 표시하는 데 사용되는 매개변수 외에도 다음 매개변수를 지원합니다.

q는 지도에서 강조 표시할 장소를 정의합니다. q 매개변수는 모든 검색 요청에 필요합니다. 위치를 장소 이름 또는 주소로 허용합니다. 문자열은 URL 인코딩 [https://developers.google.com/maps/url-encoding?hl=ko]되어야 하므로 City Hall, New York, NY와 같은 주소는 City+Hall,New+York,NY로 변환해야 합니다.
label를 사용하면 지도에서 식별된 장소에 맞춤 라벨을 설정할 수 있습니다. label는 문자열로 지정해야 합니다.

카테고리 검색

일반 검색어를 전달하면 Google 지도에서 지정한 위도 및 경도 근처에서 기준에 맞는 위치를 찾으려고 시도합니다. 위치가 지정되지 않은 경우 Google 지도에서 주변 등록정보를 찾으려고 시도합니다. 예를 들면 다음과 같습니다.

자바// Search for restaurants nearby
Uri gmmIntentUri = Uri.parse("geo:0,0?q=restaurants");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);
Uri gmmIntentUri = Uri.parse("geo:37.7749,-122.4194?q=restaurants");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlin// Search for restaurants nearby.
val gmmIntentUri = Uri.parse("geo:0,0?q=restaurants")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)
Uri.parse("geo:37.7749,-122.4194?q=restaurants")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

그림 1. 샌프란시스코 음식점 검색

쿼리 문자열과 함께 확대/축소 매개변수를 지정하여 검색 결과를 더욱 편향되게 할 수 있습니다. 다음 예에서는 10배 확대를 추가하여 근처가 아닌 도시 수준에서 음식점을 찾으려고 시도합니다.

자바Uri gmmIntentUri = Uri.parse("geo:37.7749,-122.4194?z=10&q=restaurants");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlinval gmmIntentUri =
Uri.parse("geo:37.7749,-122.4194?z=10&q=restaurants")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

위치 검색

특정 주소를 검색하면 해당 위치에 핀이 표시됩니다.

자바Uri gmmIntentUri = Uri.parse("geo:0,0?q=1600 Amphitheatre Parkway, Mountain+View, California");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlinval gmmIntentUri =
Uri.parse("geo:0,0?q=1600 Amphitheatre Parkway, Mountain+View, California")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

위의 예에서는 위도와 경도를 0,0로 설정하지만 주소를 쿼리 문자열로 전달합니다. 특정 위치를 검색할 때는 위도와 경도가 필요하지 않습니다. 하지만 정확한 주소를 모르는 경우 좌표를 지정하여 검색 결과에 편향을 줄 수 있습니다. 예를 들어 'Main Street' 주소를 검색하면 결과가 너무 많이 반환될 수 있습니다.

자바// Searching for 'Main Street' returns too many results.
Uri gmmIntentUri = Uri.parse("geo:0,0?q=101+main+street");

Kotlin// Searching for 'Main Street' returns too many results.
val gmmIntentUri = Uri.parse("geo:0,0?q=101+main+street")

인텐트 URI에 위도와 경도를 추가하면 결과가 특정 지역을 향해 편향됩니다.

자바// Searches for 'Main Street' near San Francisco.
Uri gmmIntentUri = Uri.parse("geo:37.7749,-122.4194?q=101+main+street");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlin// Searches for 'Main Street' near San Francisco.
val gmmIntentUri =
Uri.parse("geo:37.7749,-122.4194?q=101+main+street")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

검색에서 단일 값을 반환한다는 것을 알고 있다면 선택적 라벨을 전달하는 것이 좋습니다. 라벨은 문자열로 지정해야 하며 지도 마커 아래에 표시됩니다. 라벨은 q가 위도 및 경도 좌표로 지정된 경우에만 사용할 수 있습니다.

자바// Display a label at the location of Google's Sydney office.
Uri gmmIntentUri = Uri.parse("geo:0,0?q=Google+Sydney@-33.8666,151.1957");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlin// Display a label at the location of Google's Sydney office.
val gmmIntentUri =
Uri.parse("geo:0,0?q=-33.8666,151.1957(Google+Sydney)")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

상세 주소나 위도 및 경도 대신 Plus Code [http://plus.codes/]를 사용하여 알려진 위치에 핀을 표시할 수 있습니다.

자바// Display the location of Google, San Francisco using a global plus code.
Uri gmmIntentUri = Uri.parse("http://plus.codes/849VQJQ5+XX");
Kotlin// Display the location of Google, San Francisco using a global plus code.

운전 시 d (기본값)
자전거 b
오토바이용 l
도보로 w 이동

avoid는 경로에서 피해야 하는 지형지물을 설정합니다. avoid는 선택사항이며 다음 중 하나 이상으로 설정할 수 있습니다.

통행료 t
고속도로 h
페리: f

예

다음 Intent는 호주 시드니의 타롱가 동물원으로 가는 세부 경로 내비게이션을 요청합니다.

자바Uri gmmIntentUri = Uri.parse("google.navigation:q=Taronga+Zoo,+Sydney+Australia");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlinval gmmIntentUri =
Uri.parse("google.navigation:q=Taronga+Zoo,+Sydney+Australia")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

그림 2. 타롱가 동물원까지의 경로

통행료를 지불하거나 페리를 타지 않으려면 이러한 특징을 피하는 경로를 요청할 수 있습니다.

자바Uri gmmIntentUri = Uri.parse("google.navigation:q=Taronga+Zoo,+Sydney+Australia&avoid=tf");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlinval gmmIntentUri =
Uri.parse("google.navigation:q=Taronga+Zoo,+Sydney+Australia&avoid=tf")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

운동을 하고 싶다면 대신 자전거 경로를 요청할 수 있습니다.

자바Uri gmmIntentUri = Uri.parse("google.navigation:q=Taronga+Zoo,+Sydney+Australia&mode=b");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlinval gmmIntentUri =
Uri.parse("google.navigation:q=Taronga+Zoo,+Sydney+Australia&mode=b")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

오토바이를 타고 가려면 경로에 자동차가 다닐 수 없는 좁은 도로와 오솔길을 포함하도록 요청할 수 있습니다. 다음 intent는 인도의 경로를 반환합니다.

자바Uri gmmIntentUri = Uri.parse("google.navigation:q=Connaught+Place,+New+Delhi,Delhi&mode=l");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlinval gmmIntentUri =
Uri.parse("google.navigation:q=Connaught+Place,+New+Delhi,Delhi&mode=l")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

스트리트 뷰 파노라마 표시

google.streetview 인텐트를 사용하여 Google 스트리트 뷰를 실행합니다. Google 스트리트 뷰는 노출 지역 [https://maps.google.com/maps/about/behind-the-scenes/streetview/?hl=ko#where] 전반에 걸쳐 지정된 위치의 파노라마 뷰를 제공합니다. 사용자 제공 포토스피어 [https://www.google.com/maps/views/home?hl=ko] 및 스트리트 뷰 특별 컬렉션 [https://www.google.com/maps/views/streetview?hl=ko]도 사용할 수 있습니다.
google.streetview:cbll=latitude,longitude&cbp=0,bearing,0,zoom,tilt
google.streetview:panoid=id&cbp=0,bearing,0,zoom,tilt

매개변수

모든 google.streetview URI에는 cbll 또는 panoid 매개변수가 포함되어야 합니다.

cbll는 위도와 경도를 쉼표로 구분된 값(46.414382,10.013988)으로 허용합니다. 앱은 이 위치에 가장 근접한 위치에서 촬영된 파노라마를 표시합니다. 스트리트 뷰 이미지는 주기적으로 업데이트되며 매번 약간 다른 위치에서 사진이 촬영될 수 있으므로 이미지가 업데이트될 때 위치가 다른 파노라마로 이동할 수 있습니다.
panoid는 특정 파노라마 ID입니다. panoid 및 cbll가 모두 지정된 경우 Google 지도에서는 파노라마 ID를 사용합니다. Android 앱은 StreetViewPanoramaLocation [https://developer.android.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation?hl=ko] 객체에서 파노라마 ID를 사용할 수 있습니다.
cbp는 카메라의 초기 방향을 조정하는 선택적 매개변수입니다. cbp 매개변수는 쉼표로 구분된 5개의 값을 사용하며, 이 값은 모두 선택사항입니다. 가장 중요한 값은 각각 방위, 확대/축소, 기울기를 설정하는 두 번째, 네 번째, 다섯 번째 값입니다. 첫 번째 및 세 번째 값은 지원되지 않으며 0로 설정해야 합니다.

bearing: 북쪽에서 시계 방향으로 카메라의 나침반 방향을 도 단위로 나타냅니다. 정북쪽은 0도, 동쪽은 90도, 남쪽은 180도, 서쪽은 270도입니다.

방위각 래핑에 전달되는 값입니다. 즉, 0°, 360°, 720°는 모두 같은 방향을 가리킵니다. 방위각은 쉼표로 구분된 5개 값 중 두 번째 값으로 정의됩니다.

zoom: 카메라의 확대/축소 수준을 설정합니다. 기본 확대/축소 수준은 0으로 설정됩니다. 확대/축소 1은 두 배로 확대됩니다. 확대/축소는 0과 현재 파노라마의 최대 확대/축소 수준 사이에서 제한됩니다. 즉, 이 범위를 벗어나는 값은 범위 내에 있는 가장 가까운 극값으로 설정됩니다. 예를 들어 값 -1은 0으로 설정됩니다.
확대/축소는 5개의 쉼표로 구분된 값 중에서 네 번째 값입니다.
tilt: 카메라의 위 또는 아래 각도를 지정합니다. 범위는 -90~0도, 0~90도입니다. 90도는 똑바로 아래를 향하고 0도는 수평으로 중앙에 놓고 -90도는 똑바로 위로 향합니다.

예

다음은 스트리트 뷰 인텐트를 사용하는 몇 가지 예입니다.

자바// Displays an image of the Swiss Alps.
Uri gmmIntentUri = Uri.parse("google.streetview:cbll=46.414382,10.013988");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);
Uri gmmIntentUri = Uri.parse("google.streetview:panoid=Iaa2JyfIggYAAAQfCZU9KQ");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);
Uri gmmIntentUri = Uri.parse("google.streetview:cbll=29.9774614,31.1329645&cbp=0,30,0,0,-15");
Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
mapIntent.setPackage("com.google.android.apps.maps");
startActivity(mapIntent);

Kotlin// Displays an image of the Swiss Alps.
val gmmIntentUri =
Uri.parse("google.streetview:cbll=46.414382,10.013988")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)
Uri.parse("google.streetview:panoid=Iaa2JyfIggYAAAQfCZU9KQ")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)
Uri.parse("google.streetview:cbll=29.9774614,31.1329645&cbp=0,30,0,0,-15")
val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)
mapIntent.setPackage("com.google.android.apps.maps")
startActivity(mapIntent)

그림 3. 스트리트 뷰의 피라미드