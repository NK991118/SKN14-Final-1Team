Source URL: https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/update-stops?hl=ko
Title: 중지 상태 업데이트

중지 상태 업데이트

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 문서에서는 사용자가 다음에 익숙하다고 가정합니다.

배송 작업 만들기 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/create-shipment-tasks?hl=ko]
작업, 정류장, 차량 간의 관계를 자세히 다루는 예약된 작업 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/tasks-intro?hl=ko] 소개

Fleet Engine 기본사항의 예약된 작업 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/tasks-intro?hl=ko]에 설명된 대로 작업을 만들고 이를 차량 정류장과 연결하여 운전자가 작업을 완료할 수 있도록 작업과 차량이 정차할 것으로 예상되는 위치 간의 실제 연결을 모델링합니다.

여기에서 Fleet Engine에 업데이트를 전송하여 작업 여정에서 최적의 라우팅 및 상태 업데이트를 실행할 수 있도록 하여 수명 주기 전반에 걸쳐 작업 진행 상황을 관리합니다. 이를 수행하는 한 가지 주요 방법은 차량이 정류장에 접근하고, 정류장에 도착하고, 정류장을 떠날 때 차량 정류장을 업데이트하는 것입니다.
이를 통해 차량 운영자와 최종 사용자의 작업 진행 상황에 관한 보고 및 분석이 가능합니다. 이러한 상태 업데이트는 다음과 같습니다.

이동 중: VehicleStop의 STATE enum은 ENROUTE를 사용하여 정류장이 차량 여정 목록에서 다음 정류장임을 나타냅니다.
작업의 관점에서 이는 중지와 연결된 작업이 완료할 목록에서 다음에 온다는 의미입니다.
도착함: VehicleStop의 STATE 열거형은 ARRIVED를 사용하여 차량이 정류장에 도착했음을 나타냅니다. 작업의 관점에서 이는 중지와 연결된 작업이 활발하게 진행되지 않음을 의미합니다.
완료됨: 차량의 정류장 목록에서 정류장을 삭제하여 정류장을 완료로 표시합니다. 이렇게 하면 Fleet Engine에서 연결된 모든 작업을 자동으로 CLOSED로 표시합니다. 작업 종료에 대한 자세한 내용은 작업 완료 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/finalize-tasks?hl=ko]를 참고하세요.

이 문서에서는 서버 측 접근 방식을 사용하여 업데이트 중지 상태를 업데이트하는 방법을 설명합니다. 신뢰할 수 있는 기기를 사용하여 작업을 관리할 수 있는 기능을 운전자에게 제공하는 경우 운전자 앱에서 이 작업을 수행할 수도 있습니다. 경합 상태를 방지하고 단일 정보 소스를 유지하려면 한 가지 방법만 사용하세요.

차량이 정류장으로 이동 중

차량이 다음 정류장으로의 탐색을 시작하면 시스템에서 Fleet Engine에 알려야 합니다. 이렇게 하면 예상 도착 시간과 경로 계산이 개선됩니다.

업데이트 중지에 필요한 필드

Fleet Engine은 알림을 위해 엔티티의 다른 모든 필드를 무시합니다.

| 필드 | 값 |
| --- | --- |
| remainingVehicleJourneySegments | 상태가 State.NEW로 표시된 나머지 차량 정류장 목록입니다. |

중지 예시로 가는 경로

다음 예에서는 Java gRPC 라이브러리 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/client-libraries-tasks?hl=ko] 또는 HTTP REST 호출을 사용하여 UpdateDeliveryVehicle에 차량이 다음 정류장으로 이동 중임을 Fleet Engine에 알리는 방법을 보여줍니다.다른 모든 정류장은 새로 표시됩니다.

gRPC static final String PROJECT_ID = "my-delivery-co-gcp-project";
static final String VEHICLE_ID = "vehicle-8241890";

DeliveryServiceBlockingStub deliveryService =
DeliveryServiceGrpc.newBlockingStub(channel);

DeliveryVehicle deliveryVehicle = DeliveryVehicle.newBuilder()

UpdateDeliveryVehicleRequest updateDeliveryVehicleRequest =
UpdateDeliveryVehicleRequest.newBuilder()  // No need for the header
.setName(vehicleName)
.setDeliveryVehicle(deliveryVehicle)
.setUpdateMask(FieldMask.newBuilder().addPaths("remaining_vehicle_journey_segments"))
.build();

try {
DeliveryVehicle updatedDeliveryVehicle =
deliveryService.updateDeliveryVehicle(updateDeliveryVehicleRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:
break;
case PERMISSION_DENIED:
break;

실험적: 실험적 기능으로, 이제 LocationInfo(gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#locationinfo] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko]) 필드에서 LatLng와 함께 또는 LatLng 대신 place (gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#maps.fleetengine.delivery.v1.LocationInfo.FIELDS.string.maps.fleetengine.delivery.v1.LocationInfo.place] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko#FIELDS.place])를 사용할 수 있습니다.
차량이 정류장에 도착함

차량이 정류장에 도착하면 Fleet Engine에 알려야 합니다.

업데이트 중지에 필요한 필드

Fleet Engine은 알림을 위해 엔티티의 다른 모든 필드를 무시합니다.

| 필드 | 값 |
| --- | --- |
| remainingVehicleJourneySegments | 상태가 State.NEW로 표시된 나머지 차량 정류장 목록입니다. |

정류장 도착 예시

다음 예에서는 Java gRPC 라이브러리 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/client-libraries-tasks?hl=ko] 또는 UpdateDeliveryVehicle에 대한 HTTP REST 호출을 사용하여 차량이 정류장에 도착했음을 Fleet Engine에 알리는 방법을 보여줍니다. 다른 모든 정류장은 새로 표시됩니다.

gRPC  static final String PROJECT_ID = "my-delivery-co-gcp-project";
static final String VEHICLE_ID = "vehicle-8241890";

DeliveryServiceBlockingStub deliveryService =
DeliveryServiceGrpc.newBlockingStub(channel);

String vehicleName = "providers/" + PROJECT_ID + "/deliveryVehicles/" + VEHICLE_ID;
DeliveryVehicle deliveryVehicle = DeliveryVehicle.newBuilder()

UpdateDeliveryVehicleRequest updateDeliveryVehicleRequest =
UpdateDeliveryVehicleRequest.newBuilder()  // No need for the header
.setName(vehicleName)
.setDeliveryVehicle(deliveryVehicle)
.setUpdateMask(FieldMask.newBuilder()
.addPaths("remaining_vehicle_journey_segments"))
.build();

try {
DeliveryVehicle updatedDeliveryVehicle =
deliveryService.updateDeliveryVehicle(updateDeliveryVehicleRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:
break;
case PERMISSION_DENIED:
break;

실험적: 실험적 기능으로, 이제 LocationInfo(gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#locationinfo] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko]) 필드에서 LatLng와 함께 또는 LatLng 대신 place (gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#maps.fleetengine.delivery.v1.LocationInfo.FIELDS.string.maps.fleetengine.delivery.v1.LocationInfo.place] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko#FIELDS.place])를 사용할 수 있습니다.
차량이 정차를 완료함

차량이 정차를 완료하면 Fleet Engine에 알려야 합니다. 이로 인해 중지와 연결된 모든 작업이 CLOSED 상태로 설정됩니다.

업데이트 중지에 필요한 필드

Fleet Engine은 알림을 위해 엔티티의 다른 모든 필드를 무시합니다.

| 필드 | 값 |
| --- | --- |
| remainingVehicleJourneySegments | 상태가 State.NEW로 표시된 나머지 차량 정류장 목록입니다. 목록의 첫 번째 정류장은 상태가 State.ENROUTE로 표시되어야 합니다. |

중지 예시를 완료합니다.

다음 예에서는 Java gRPC 라이브러리 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/client-libraries-tasks?hl=ko] 또는 UpdateDeliveryVehicle에 대한 HTTP REST 호출을 사용하여 차량이 정류장에 도착했음을 Fleet Engine에 알리는 방법을 보여줍니다. 다른 모든 정류장은 새로 표시됩니다.

gRPC  static final String PROJECT_ID = "my-delivery-co-gcp-project";
static final String VEHICLE_ID = "vehicle-8241890";

DeliveryServiceBlockingStub deliveryService =
DeliveryServiceGrpc.newBlockingStub(channel);

String vehicleName = "providers/" + PROJECT_ID + "/deliveryVehicles/" + VEHICLE_ID;
DeliveryVehicle deliveryVehicle = DeliveryVehicle.newBuilder()

UpdateDeliveryVehicleRequest updateDeliveryVehicleRequest =
UpdateDeliveryVehicleRequest.newBuilder()  // no need for the header
.setName(vehicleName)
.setDeliveryVehicle(deliveryVehicle)
.setUpdateMask(FieldMask.newBuilder()
.addPaths("remaining_vehicle_journey_segments"))
.build();

try {
DeliveryVehicle updatedDeliveryVehicle =
deliveryService.updateDeliveryVehicle(updateDeliveryVehicleRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:
break;
case PERMISSION_DENIED:
break;

실험적: 실험적 기능으로, 이제 LocationInfo(gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#locationinfo] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko]) 필드에서 LatLng와 함께 또는 LatLng 대신 place (gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#maps.fleetengine.delivery.v1.LocationInfo.FIELDS.string.maps.fleetengine.delivery.v1.LocationInfo.place] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/LocationInfo?hl=ko#FIELDS.place])를 사용할 수 있습니다.
다음 단계

할 일 마무리하기 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/finalize-tasks?hl=ko]