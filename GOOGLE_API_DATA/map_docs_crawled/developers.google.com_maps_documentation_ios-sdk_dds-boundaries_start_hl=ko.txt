Source URL: https://developers.google.com/maps/documentation/ios-sdk/dds-boundaries/start?hl=ko
Title: 시작하기

의견 보내기

시작하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

플랫폼 선택:

Android [https://developers.google.com/maps/documentation/android-sdk/dds-boundaries/start?hl=ko]

iOS [https://developers.google.com/maps/documentation/ios-sdk/dds-boundaries/start?hl=ko]

JavaScript [https://developers.google.com/maps/documentation/javascript/dds-boundaries/start?hl=ko]

경계를 위한 데이터 기반 스타일 지정을 사용하려면 지도 ID를 만들어야 합니다. 그런 다음 새 지도 스타일을 만들고 필요한 경계 지형지물 레이어를 선택한 다음 스타일을 지도 ID와 연결해야 합니다.

지도 ID 만들기

mapID [https://developers.google.com/maps/documentation/get-map-id?hl=ko]는 Google 지도의 단일 인스턴스를 나타내는 고유 식별자입니다. Google Cloud 콘솔에서 언제든지 지도 ID를 만들고 지도 ID와 연결된 스타일을 업데이트할 수 있습니다.

새 지도 스타일 만들기

새 지도 스타일을 만들려면 지도 스타일 관리 [https://developers.google.com/maps/documentation/ios-sdk/cloud-customization/map-styles?hl=ko]의 안내에 따라 스타일을 만드세요. 완료되면 새로 만든 지도 ID와 스타일을 연결합니다.
실험용: 이 기능은 밝은 지도 스타일에만 설정할 수 있습니다. 이 기능이 사용 설정된 밝은 지도 스타일을 지도 ID [https://developers.google.com/maps/documentation/ios-sdk/map-ids/mapid-over?hl=ko]에 연결하면 사용 설정된 레이어를 어두운 지도 스타일에서도 사용할 수 있습니다.
지형지물 레이어 선택

Google Cloud 콘솔에서 표시할 지형지물 레이어를 선택할 수 있습니다. 이에 따라 지도에 표시될 경계의 종류 (예: 지역, 주)가 결정됩니다.
중요: 최적의 성능을 얻으려면 필요한 레이어만 선택하세요.
지형지물 레이어 관리

Google Cloud 콘솔에서 지도 스타일 페이지로 이동 [https://console.cloud.google.com/project/_/google/maps-apis/studio/styles?hl=ko]합니다.
메시지가 표시되면 프로젝트를 선택합니다.
지도 스타일을 선택합니다.
지형지물 레이어 드롭다운을 클릭하여 레이어를 추가하거나 삭제합니다.
저장을 클릭해 변경사항을 저장하여 지도에서 사용할 수 있게 합니다.

지도 초기화 코드 업데이트

이 단계에서는 하나 이상의 지형지물 레이어가 사용 설정된 스타일과 연결된 지도 ID가 필요합니다. Cloud 콘솔에서 지도 ID가 올바르게 설정되었는지 확인하려면 지도 관리 [https://console.cloud.google.com/google/maps-apis/studio/maps?hl=ko]에서 구성된 방식을 검토하세요.

Swift
Objective-C
GMSMapID *mapID = [GMSMapID mapIDWithIdentifier:@"MAP_ID"];
GMSMapView *mapView = [GMSMapView mapWithFrame:CGRectZero mapID:mapID camera:[GMSCameraPosition cameraWithLatitude:40 longitude:-80 zoom:7]];

중요: 테스트의 경우 앱 코드에서 mapId: DEMO_MAP_ID [https://developers.google.com/maps/documentation/ios-sdk/reference/objc/Classes/GMSMapID?hl=ko]를 사용하면 지도 ID [https://developers.google.com/maps/documentation/get-map-id?hl=ko]를 만들고 구성하는 단계를 건너뛸 수 있습니다.
DEMO_MAP_ID는 테스트 용도로만 사용됩니다. 프로덕션 환경에서는 DEMO_MAP_ID를 사용하지 마세요.
지도에 지형지물 레이어 추가

지도의 지형지물 레이어에 대한 참조를 가져오려면 지도를 초기화할 때 mapView.featureLayer(of:) [https://developers.google.com/maps/documentation/ios-sdk/reference/objc/Classes/GMSMapView?hl=ko#-featurelayeroffeaturetype:]를 호출하세요.

Swift
Objective-C
GMSFeatureLayer *layer = [mapView featureLayerOfFeatureType:GMSFeatureTypeLocality];

지도 기능 확인

경계를 위한 데이터 기반 스타일 지정을 사용하려면 Google Cloud 콘솔에서 사용 설정되고 지도 ID와 연결된 기능이 필요합니다. 지도 ID는 변경될 수 있으므로 GMSMapView [https://developers.google.com/maps/documentation/ios-sdk/reference/objc/Classes/GMSMapView?hl=ko]에서 mapView.mapCapabilities [https://developers.google.com/maps/documentation/ios-sdk/reference/objc/Classes/GMSMapView?hl=ko#mapcapabilities]를 호출하여 특정 기능 (예: 데이터 기반 스타일 지정)을 호출하기 전에 사용할 수 있는지 확인할 수 있습니다.

GMSViewDelegate [https://developers.google.com/maps/documentation/ios-sdk/reference/objc/Protocols/GMSMapViewDelegate?hl=ko]를 구독하여 지도 기능의 변경사항을 감지할 수도 있습니다. 이 예에서는 프로토콜을 사용하여 데이터 기반 스타일 지정 요구사항을 확인하는 방법을 보여줍니다.

Swift
class SampleViewController: UIViewController {

private lazy var mapView: GMSMapView = GMSMapView(frame: .zero, mapID: GMSMapID(identifier: "YOUR_MAP_ID"), camera: GMSCameraPosition(latitude: 40, longitude: -80, zoom: 7))

override func loadView() {
self.view = mapView
mapView.delegate = self
Objective-C
@interface SampleViewController: UIViewController <GMSMapViewDelegate>
@end

@implementation SampleViewController
- (void)loadView {
GMSMapView *mapView = [GMSMapView mapWithFrame:CGRectZero mapID:[GMSMapID mapIDWithIdentifier:@"MAP_ID"] camera:[GMSCameraPosition cameraWithLatitude:40 longitude:-80 zoom:7]];
mapView.delegete = self;
self.view = mapView;