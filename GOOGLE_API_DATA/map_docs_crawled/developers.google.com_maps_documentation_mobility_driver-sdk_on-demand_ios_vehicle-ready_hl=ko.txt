Source URL: https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/ios/vehicle-ready?hl=ko
Title: 차량 준비

차량 준비

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 섹션에서는 차량을 운행에 대비하는 방법을 보여줍니다. 백엔드에서 차량을 여정에 매칭하려면 다음 단계를 모두 완료해야 합니다.

리스너 설정

Driver SDK를 초기화하고 GMTDRidesharingDriverAPI 인스턴스를 만든 후 이벤트 리스너를 설정하여 Fleet Engine과 백엔드로 전송된 차량 업데이트의 성공 또는 실패를 모니터링할 수 있습니다. 이러한 리스너는 백엔드와의 통신이 실패하는 경우 운전자에게 알리는 등 운전자 앱 내에서 작업을 트리거할 수 있습니다.

차량 업데이트 이벤트 수신 대기

운전자가 운전자 앱에서 위치 업데이트를 사용 설정하면 Driver SDK가 GMTDVehicleReporter 클래스를 통해 Fleet Engine과 고객 백엔드에 정기적인 차량 업데이트를 전송합니다. GMTDVehicleReporterListener 프로토콜을 설정하여 업데이트 이벤트에 앱이 응답하도록 할 수 있습니다.

GMTDVehicleReporterListener를 사용하면 다음 이벤트를 처리할 수 있습니다.

vehicleReporter:didSucceedVehicleUpdate [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/reference/ios/protocol_g_m_t_d_vehicle_reporter_listener-p?hl=ko#a3882e0ff1b3e89d47f501c194818baf5]

백엔드 서비스가 차량 위치 및 상태 업데이트를 수신했음을 드라이버 앱에 알립니다.
vehicleReporter:didFailVehicleUpdate:withError [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/reference/ios/protocol_g_m_t_d_vehicle_reporter_listener-p?hl=ko#a494bc226e6a36c4a4528d35919ce5085]

차량 업데이트가 실패했음을 리스너에게 알립니다. 드라이버가 위치 업데이트를 사용 설정한 경우 GMTDVehicleReporter 클래스는 계속해서 최신 데이터를 Fleet Engine에 전송합니다.

다음 예에서는 이러한 이벤트를 처리하도록 GMTDVehicleReporterListener를 설정하는 방법을 보여줍니다.

Swiftimport GoogleRidesharingDriver

private let providerID = "INSERT_YOUR_PROVIDER_ID"

class SampleViewController: UIViewController, GMTDVehicleReporterListener {
private let mapView: GMSMapView

override func viewDidLoad() {
Objective-C/**
*   SampleViewController.h
*/
@interface SampleViewController : UIViewController<GMTDVehicleReporterListener>
@end

/**
*   SampleViewController.m
*/
#import "SampleViewController.h"
#import "SampleAccessTokenProvider.h"
#import <GoogleRidesharingDriver/GoogleRidesharingDriver.h>

static NSString *const PROVIDER_ID = @"INSERT_YOUR_PROVIDER_ID";

@implementation SampleViewController {
GMSMapView *_mapView;
Navigation SDK는 GMSRoadSnappedLocationProvider 클래스를 통해 Driver SDK에 위치 업데이트를 제공합니다. 이러한 업데이트를 수신하려면 GMTDVehicleReporter를 리스너로 설정해야 합니다.
참고: 마지막 위치 업데이트 이후 기기가 이동하지 않은 경우 GMSRoadSnappedLocationProvider 클래스는 더 나은 성능을 위해 위치 업데이트를 지속적으로 전송하지 않습니다. 예를 들어 운전자가 자동차에서 유휴 상태로 대기하는 경우입니다. 새 위치 업데이트를 전송하고 GMSRoadSnappedLocationProvider에서 startUpdatingLocation를 호출한 후 GMTDVehicleReporter를 리스너로 설정한 경우 GMSRoadSnappedLocationProvider를 중지했다가 시작해야 합니다.
Swiftimport GoogleRidesharingDriver

private let providerID = "INSERT_YOUR_PROVIDER_ID"

class SampleViewController: UIViewController, GMTDVehicleReporterListener {
private let mapView: GMSMapView

override func viewDidLoad() {
roadSnappedLocationProvider.startUpdatingLocation()
Objective-C/**
*   SampleViewController.h
*/
@interface SampleViewController : UIViewController<GMTDVehicleReporterListener>
@end

/**
*   SampleViewController.m
*/
#import "SampleViewController.h"
#import "SampleAccessTokenProvider.h"
#import <GoogleRidesharingDriver/GoogleRidesharingDriver.h>

static NSString *const PROVIDER_ID = @"INSERT_YOUR_PROVIDER_ID";

@implementation SampleViewController {
GMSMapView *_mapView;
[_mapView.roadSnappedLocationProvider startUpdatingLocation];
Driver SDK는 운전자의 현재 탐색 경로와 일치하도록 경로를 설정합니다. 정확한 위치 업데이트를 보장하려면 setDestinations에서 웨이포인트를 Fleet Engine의 목적지와 일치하도록 설정하세요.

다음 예는 위치 업데이트를 사용 설정하는 방법을 보여줍니다.

Swiftimport GoogleRidesharingDriver

private let providerID = "INSERT_YOUR_PROVIDER_ID"

class SampleViewController: UIViewController, GMTDVehicleReporterListener {
private let mapView: GMSMapView

override func viewDidLoad() {
Objective-C/**
*   SampleViewController.m
*/
#import "SampleViewController.h"
#import "SampleAccessTokenProvider.h"
#import <GoogleRidesharingDriver/GoogleRidesharingDriver.h>

static NSString *const PROVIDER_ID = @"INSERT_YOUR_PROVIDER_ID";

@implementation SampleViewController {
GMSMapView *_mapView;
Swiftimport GoogleRidesharingDriver

private let providerID = "INSERT_YOUR_PROVIDER_ID"

class SampleViewController: UIViewController, GMTDVehicleReporterListener {
private let mapView: GMSMapView

override func viewDidLoad() {
Objective-C#import "SampleViewController.h"
#import "SampleAccessTokenProvider.h"
#import <GoogleRidesharingDriver/GoogleRidesharingDriver.h>

static NSString *const PROVIDER_ID = @"INSERT_YOUR_PROVIDER_ID";

@implementation SampleViewController {
GMSMapView *_mapView;