Source URL: https://developers.google.com/maps/documentation/navigation/ios-sdk/nav-only-feed?hl=ko
Title: 세부 경로 안내 데이터 피드에 대한 세부정보

의견 보내기

세부 경로 안내 데이터 피드에 대한 세부정보

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

세부 경로 데이터 피드는 지도 기반 내비게이션 안내를 위해 설계되지 않은 기기에 내비게이션 전용 정보를 제공합니다. 사용자가 제공한 요소로 예정된 기동을 제공합니다.

아이콘 (왼쪽, 오른쪽, U턴)
회전교차로에서 번호 표시
도로 이름
다음 탐색 단계 또는 최종 목적지까지의 예상 거리와 시간

턴바이턴 피드를 사용하여 소형 화면 디스플레이와 같이 전체 탐색 SDK UI가 적합하지 않은 환경을 만들 수 있습니다. 예를 들어 이 기능을 이륜차 운전자에게 사용할 수 있습니다. 이 경우 탐색 전용 안내를 투영하여 운전자가 최소한의 방해 요소로 목적지에 더 빠르고 자신감 있게 도착할 수 있도록 지원할 수 있습니다.

필수 탐색 표시 요소

각 탐색 단계의 기본 필드는 전체 도로 이름, 조작, 단계의 총 거리이며 GMSNavigationStepInfo [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigationStepInfo?hl=ko]에서 사용할 수 있습니다.

전체 여정의 경우 현재 단계 또는 목적지까지 남은 시간과 거리를 표시할 수 있으며, 이 모든 정보는 GMSNavigationNavInfo [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigationNavInfo?hl=ko]에서 확인할 수 있습니다.
오른쪽 이미지는 이러한 필수 탐색 요소의 예를 보여줍니다.

이벤트 리스너 설정

탐색 전용 데이터를 사용하려면 didChangeNavInfo 이벤트의 이벤트 리스너를 구현해야 합니다. 이벤트 리스너 내에서 여행 및 단계 정보에 액세스하여 사용자에게 세부 경로 안내를 제공합니다.

이벤트 핸들러를 구현하려면 지도의 뷰 컨트롤러가 GMSNavigatorListener [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Protocols/GMSNavigatorListener?hl=ko] 프로토콜을 구현해야 합니다. iOS용 Navigation SDK에서 이벤트를 처리하는 방법에 관한 자세한 내용은 탐색 이벤트 수신 대기 [https://developers.google.com/maps/documentation/navigation/ios-sdk/events?hl=ko]를 참고하세요.

didChangeNavInfo 이벤트 처리

didChangeNavInfo 이벤트의 리스너를 만들어 앱에 턴바이턴 지원을 추가합니다. 이벤트 리스너에서 다음 클래스와 enum을 사용하여 턴바이턴 탐색을 제어합니다.

GMSNavigationNavInfo [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigationNavInfo?hl=ko]
— 탐색 상태에 관한 정보를 정의하는 클래스입니다.
GMSNavigationStepInfo [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigationStepInfo?hl=ko] - 탐색 경로를 따라가는 단일 단계에 관한 정보를 정의하는 클래스입니다.
GMSNavigationNavState [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Enums/GMSNavigationNavState?hl=ko] - 이동 중, 경로 재탐색, 중지와 같은 탐색의 현재 상태를 정의하는 열거형입니다.
GMSNavigationDrivingSide [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Enums/GMSNavigationDrivingSide?hl=ko]: 이 단계가 우측통행 또는 좌측통행 경로에 있는지 정의하는 enum입니다.
GMSNavigationManeuver [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Enums/GMSNavigationManeuver?hl=ko]
— 취할 탐색 작업(예: 좌회전 또는 우회전)을 정의하는 열거형입니다.

다음은 didChangeNavInfo 이벤트의 이벤트 리스너의 예입니다.

Swift  // ViewController.swift
class SomeViewController: UIViewController {
...
mapView.navigator?.add(self);
...
...
Objective-C  // ViewController.h
@interface SomeViewController () <GMSNavigatorListener>

@end

...
GMSNavigationStepInfo *currentStep = navInfo.currentStep;
if (currentStep) {
...
roadNameLabel.text = currentStep.simpleRoadName;
...
Navigation SDK는 탐색 회전 카드에 차선을 GMSNavigationLane 및 GMSNavigationLaneDirection 데이터 객체로 나타냅니다. GMSNavigationLane 객체는 탐색 중 특정 차선을 나타내며 이 차선에서 할 수 있는 모든 회전을 설명하는 GMSNavigationLaneDirection 객체 목록이 있습니다.

차선에서 운전자가 따라야 하는 권장 방향은 recommended 필드를 사용하여 표시됩니다.

차선 안내 예시

다음 스니펫은 이전 스크린샷에 표시된 레인의 데이터 표현을 보여줍니다.
GMSNavigationLaneDirections =
[{/*GMSNavigationLaneShape=*/
GMSNavigationLaneShapeNormalLeft, /*recommended=*/ true}]

GMSNavigationLaneDirections =
[{/*GMSNavigationLaneShape=*/
GMSNavigationLaneShapeNormalLeft, /*recommended=*/ true}]

GMSNavigationLaneDirections =
[{/*GMSNavigationLaneShape=*/
GMSNavigationLaneShapeStraight, /*recommended=*/ false}]

GMSNavigationLaneDirections =
[{/*GMSNavigationLaneShape=*/
GMSNavigationLaneShapeStraight, /*recommended=*/ false},

차선 안내 이미지

Navigation SDK는 GMSNavigationStepInfo에 의해 전달되는 각 탐색 단계의 차선 이미지 생성을 지원합니다. 이러한 아이콘은 CarPlay의 이미지 크기 조정 가이드 [https://developer.apple.com/design/human-interface-guidelines/carplay#Icons-and-images]에 적합합니다.

Swift
options.screenMetrics = UIScreen.mainScreen

Objective-C
GMSNavigationStepInfo *stepInfo = navInfo.currentStep;

GMSNavigationStepImageOptions *options = [[GMSNavigationStepImageOptions alloc] init];
options.maneuverImageSize = GMSNavigationManeuverImageSizeSquare96;
options.screenMetrics = UIScreen.mainScreen;

UIImage* maneuverImage = [stepInfo maneuverImageWithOptions:options];

기동 아이콘 만들기

GMSNavigationManeuver [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Enums/GMSNavigationManeuver?hl=ko] 열거형은 탐색 중에 발생할 수 있는 각 가능한 동작을 정의하며 GMSNavigationStepInfo [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigationStepInfo?hl=ko]의 maneuver 속성에서 지정된 단계의 동작을 가져올 수 있습니다.

기동 아이콘을 만들고 관련 기동과 페어링해야 합니다.
일부 동작의 경우 GMSNavigationManeuverDestinationLeft 및 GMSNavigationManeuverDestinationRight과 같은 아이콘에 일대일 매핑을 설정할 수 있습니다. 하지만 일부 기동은 다른 기동과 특성을 공유하므로 하나의 아이콘에 두 개 이상의 기동을 매핑하는 것이 좋습니다. 예를 들어 GMSNavigationManeuverTurnLeft 및 GMSNavigationManeuverOnRampLeft은 모두 좌회전 아이콘에 매핑될 수 있습니다.

일부 기동에는 추가 '시계 방향' 또는 '반시계 방향' 라벨이 포함되어 있으며, 이는 SDK가 국가의 운전 방향에 따라 결정합니다. 예를 들어 도로의 왼쪽에서 운전하는 국가에서는 운전자가 시계 방향으로 로터리 또는 유턴을 하는 반면, 오른쪽 도로 국가에서는 시계 반대 방향으로 이동합니다. Navigation SDK는 왼쪽 또는 오른쪽 교통에서 기동이 발생하는지 감지하고 적절한 기동을 출력합니다. 따라서 시계 방향 회전과 반시계 방향 회전의 기동 아이콘이 다를 수 있습니다.

펼쳐서 다양한 기동의 예시 아이콘 보기

|  |  |
| --- | --- |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |
|  |  |

생성된 아이콘 사용

Navigation SDK는 지정된 GMSNavigationStepInfo의 안내 아이콘 생성을 지원합니다. 이러한 아이콘은 CarPlay 이미지 크기 조정 가이드 [https://developer.apple.com/design/human-interface-guidelines/carplay#Icons-and-images]에 적합합니다.

Swift
options.screenMetrics = UIScreen.mainScreen

Objective-C
GMSNavigationStepInfo *stepInfo = navInfo.currentStep;

GMSNavigationStepImageOptions *options = [[GMSNavigationStepImageOptions alloc] init];
options.maneuverImageSize = GMSNavigationManeuverImageSizeSquare96;
options.screenMetrics = UIScreen.mainScreen;

UIImage* maneuverImage = [stepInfo maneuverImageWithOptions:options];

의견 보내기