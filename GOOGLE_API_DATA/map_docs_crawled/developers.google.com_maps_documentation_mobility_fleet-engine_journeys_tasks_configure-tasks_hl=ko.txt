Source URL: https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/configure-tasks?hl=ko
Title: 태스크 구성

태스크 구성

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 문서에서는 태스크를 만들고 사용하는 방법을 이해하고 있다고 가정합니다. 다음과 같은 방법으로 배송 작업을 구성하는 구체적인 예를 제공합니다.

배송 작업의 타겟 기간 설정: 작업이 완료될 기간을 설정합니다.
작업 공개 상태 맞춤설정: 고객 또는 Fleet 운영자에게 표시되는 작업 활동의 공개 상태를 맞춤설정합니다.

배송 작업의 필드에 관한 자세한 내용은 배송 작업 만들기 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/create-shipment-tasks?hl=ko]를 참고하세요.
기존 작업에 관한 추가 정보를 업데이트할 때는 작업에 대해 업데이트하는 필드 외에도 작업의 관련 식별자를 포함해야 합니다.

타겟 기간 설정

타겟 시간 범위는 태스크가 완료되어야 하는 TimeWindow [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#timewindow]입니다. 예를 들어 배송 수령인에게 배송 시간대를 전달하는 경우 작업 타겟 시간대를 사용하여 이 시간대를 포착하고 알림을 생성하거나 이를 사용하여 이전 이동 실적을 분석할 수 있습니다.

타겟 시간 범위는 시작 시간과 종료 시간으로 구성되며 모든 작업 유형에서 설정할 수 있습니다. 타겟 시간대는 라우팅 동작에 영향을 미치지 않습니다.

다음 예에서는 Java gRPC 라이브러리 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/client-libraries-tasks?hl=ko#java]를 사용하여 시간 범위를 설정하는 방법 또는 UpdateTask [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rest/v1/providers.tasks/patch?hl=ko]에 HTTP REST 요청을 실행하는 방법을 보여줍니다. 작업 생성 시 이 필드를 설정할 수도 있습니다.

gRPC  static final String PROJECT_ID = "my-delivery-co-gcp-project";
static final String TASK_ID = "task-8241890";

DeliveryServiceBlockingStub deliveryService =
DeliveryServiceGrpc.newBlockingStub(channel);

String taskName = "providers/" + PROJECT_ID + "/tasks/" + TASK_ID;
Task task = Task.newBuilder()
.setName(taskName)
.setTargetTimeWindow(
TimeWindow.newBuilder()
.setStartTime(Timestamp.newBuilder().setSeconds(1680123600))
.setEndTime(Timestamp.newBuilder().setSeconds(1680130800)))
.build();

UpdateTaskRequest updateTaskRequest =
UpdateTaskRequest.newBuilder()  // No need for the header
.setTask(task)
.setUpdateMask(FieldMask.newBuilder().addPaths("targetTimeWindow"))
.build();

try {
Task updatedTask = deliveryService.updateTask(updateTaskRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:
break;
case PERMISSION_DENIED:
break;
RESTHTTP를 사용하여 작업 시간 범위를 설정하려면 PATCH를 호출하고 updateMask를 사용하여 targetTimeWindow 매개변수를 업데이트합니다.

PATCH https://fleetengine.googleapis.com/v1/providers/<project_id>/tasks/<id>?updateMask=targetTimeWindow

여기서 <id>는 작업의 고유 식별자입니다. 요청 헤더에는 값이 Bearer <token>인 Authorization 필드가 포함되어야 합니다. 여기서 <token>은 서비스 계정 역할 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/set-up-fleet/service-accounts?hl=ko] 및 JSON 웹 토큰 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/set-up-fleet/jwt?hl=ko]에 설명된 가이드라인에 따라 서버에서 발급됩니다.
# Set JWT, PROJECT_ID, and TASK_ID in the local environment
curl -X PATCH "https://fleetengine.googleapis.com/v1/providers/${PROJECT_ID}/tasks/${TASK_ID}?updateMask=targetTimeWindow" \
-H "Content-type: application/json" \
-H "Authorization: Bearer ${JWT}" \
--data-binary @- << EOM
"targetTimeWindow": {
"startTime": "2023-03-29T21:00:00Z",
"endTime": "2023-03-29T23:00:00Z"

작업 공개 상태 맞춤설정

기본적으로 Fleet Engine은 배송을 받는 고객과 배송을 추적하는 차량 운영자 모두에게 표시할 수 있는 작업 활동에 대한 가시성을 제공합니다. 여기에는 고객에게 택배 배송 상태에 관한 알림을 보내기 전에 정차 횟수를 표시하는 등의 정보가 포함됩니다. 비즈니스 모델에 더 적합하도록 작업별로 이 정보를 맞춤설정할 수 있습니다.

이 섹션에서는 지도에서 추적된 객체의 공개 상태 규칙을 설명합니다.
이러한 규칙은 다음 두 가지 카테고리의 객체에 적용됩니다.

위치 마커 표시 여부
다중선, 예상 도착 시간 등 활성 차량 작업의 작업 데이터 공개 상태

참고: 지원팀에 문의 [https://console.cloud.google.com/google/maps-apis/support?hl=ko]하여 프로젝트의 기본 공개 상태 구성을 맞춤설정할 수도 있습니다.
위치 마커 표시 규칙

Fleet Engine은 배송 상태와 관계없이 지도에 표시된 배송 위치의 위치 마커를 표시합니다.

작업 데이터 공개 상태 규칙

이 섹션에서는 작업 데이터에 적용되는 기본 공개 상태 규칙을 설명합니다.
활성 차량 작업만 맞춤설정할 수 있습니다. 즉, 픽업 및 하차 작업에만 맞춤설정된 공개 상태 규칙을 적용할 수 있습니다.

다음 작업은 맞춤설정할 수 없습니다.

예약된 중지
Unavailability tasks(일정 없음 작업)
비활성 차량 작업

일정 없음 작업 공개 상태 규칙

기본적으로 하나 이상의 재고 없음 작업이 추적 중인 작업에 할당된 경우 차량이 지도에 표시되지 않습니다. 예를 들어 운전자가 휴식을 취하거나 추적된 배송 경로에서 차량에 연료를 공급하는 경우입니다. 예상 도착 시간과 예상 작업 완료 시간은 계속 표시됩니다. 이 규칙은 맞춤설정할 수 없습니다.

활성 차량 작업 표시

TaskTrackingInfo [https://developers.google.com/maps/documentation/javascript/reference/journey-sharing-fleet-engine-entities?hl=ko#TaskTrackingInfo] 객체는 배송 추적 라이브러리를 사용하여 표시할 수 있는 여러 데이터 요소를 제공합니다. 기본적으로 이러한 필드는 작업이 차량에 할당된 경우와 차량이 작업에서 5개 정류장 이내에 있는 경우에 표시됩니다. 작업이 완료되거나 취소되면 공개 상태가 종료됩니다.

Fleet Engine 내에서 작업을 만들거나 업데이트할 때 작업에 TaskTrackingViewConfig [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/tasks/rpc/maps.fleetengine.delivery.v1?hl=ko#tasktrackingviewconfig]을 설정하여 작업별로 공개 상태 구성을 맞춤설정할 수 있습니다. 이렇게 하면 개별 데이터 요소를 사용할 수 있도록 규칙이 생성됩니다.

다음 표에는 공개 상태 규칙을 적용할 수 있는 필드가 나와 있습니다.

| 표시 규칙의 차량 작업 필드 |
| --- |
| 경로 다중선 도착 예상 시간 예상 작업 완료 시간 작업까지 남은 운전 거리 남은 정지 횟수 차량 위치 |

이 표에는 위에 나열된 필드에 사용할 수 있는 공개 상태 옵션이 표시되어 있습니다.

| 공개 상태 옵션 |
| --- |
| 남은 정지 횟수 예상 도착 시간까지의 시간 남은 운전 거리 항상 표시 표시되지 않음 |
참고: 각 데이터 요소는 하나의 공개 상태 옵션과만 연결할 수 있습니다.
OR 또는 AND를 사용하여 기준을 결합할 수 없습니다.
경로 다중선 및 차량 위치 공개 상태 규칙

추적된 경로의 경우 경로 다중선의 공개 상태는 차량의 공개 상태에 따라 달라집니다. 차량이 표시되지 않는 활성 경로에 경로 폴리라인이 표시되면 표시된 폴리라인의 끝에서 차량 위치를 추론할 수 있습니다. 따라서 경로 폴리라인 공개 상태는 차량 공개 상태보다 제한적이거나 더 제한적이어야 합니다.

유효한 경로 폴리라인 / 차량 위치 공개 상태 조합을 제공하려면 다음 규칙을 따르세요.

경로 다중선과 차량 위치가 동일한 공개 상태 옵션을 지정합니다.

이 시나리오에서는 폴리라인과 차량 위치가 다음을 포함한 동일한 옵션을 설정합니다.

남은 정류장 수
ETA까지의 기간
남은 주행 거리

규칙을 준수하려면 경로 폴리라인 표시 여부 값이 차량 표시 여부에 설정된 값보다 작거나 같아야 합니다. 이 예시에서 폴리라인의 나머지 중지 기준은 차량에 지정된 값 5보다 작은 3으로 설정됩니다. 즉, 추적된 여정이 작업 위치에서 5개 정류장 떨어진 곳에 도달하면 차량이 표시되지만 여정이 3개 정류장 떨어진 곳에 도달할 때까지 해당 차량의 경로가 표시되지 않습니다.
```js
"taskTrackingViewConfig": {
"routePolylinePointsVisibility": {
"remainingStopCountThreshold": 3
static final String TASK_ID = "task-8241890";

DeliveryServiceBlockingStub deliveryService =
DeliveryServiceGrpc.newBlockingStub(channel);

String taskName = "providers/" + PROJECT_ID + "/tasks/" + TASK_ID;
Task task = Task.newBuilder()
.setName(taskName)
.setTaskTrackingViewConfig(
TaskTrackingViewConfig.newBuilder()
.setRoutePolylinePointsVisibility(
VisibilityOption.newBuilder().setRemainingStopCountThreshold(3))
.setEstimatedArrivalTimeVisibility(
VisibilityOption.newBuilder().remainingDrivingDistanceMetersThreshold(5000))
.setRemainingStopCountVisibility(
VisibilityOption.newBuilder().setNever(true)))
.build();

UpdateTaskRequest updateTaskRequest =
UpdateTaskRequest.newBuilder()  // No need for the header
.setTask(task)
.setUpdateMask(FieldMask.newBuilder().addPaths("taskTrackingViewConfig"))
.build();

try {
Task updatedTask = deliveryService.updateTask(updateTaskRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:
break;
case PERMISSION_DENIED:
break;
RESTHTTP를 사용하여 작업 추적 보기 구성 창을 설정하려면 PATCH를 호출하고 updateMask를 사용하여 taskTrackingViewConfig 매개변수를 업데이트합니다.

PATCH https://fleetengine.googleapis.com/v1/providers/<project_id>/tasks/<id>?updateMask=taskTrackingViewConfig

예를 들면 다음과 같습니다.
# Set JWT, PROJECT_ID, and TASK_ID in the local environment
curl -X PATCH "https://fleetengine.googleapis.com/v1/providers/${PROJECT_ID}/tasks/${TASK_ID}?updateMask=taskTrackingViewConfig" \
-H "Content-type: application/json" \
-H "Authorization: Bearer ${JWT}" \
--data-binary @- << EOM
"taskTrackingViewConfig": {
"routePolylinePointsVisibility": {
"remainingStopCountThreshold": 3

다음 단계

할 일 삭제 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/delete-task?hl=ko]