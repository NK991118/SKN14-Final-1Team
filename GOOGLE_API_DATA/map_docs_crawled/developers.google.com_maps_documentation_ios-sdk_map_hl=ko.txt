Source URL: https://developers.google.com/maps/documentation/ios-sdk/map?hl=ko
Title: 지도 추가

의견 보내기

지도 추가

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

플랫폼 선택:

Android [https://developers.google.com/maps/documentation/android-sdk/map?hl=ko]

iOS [https://developers.google.com/maps/documentation/ios-sdk/map?hl=ko]

JavaScript [https://developers.google.com/maps/documentation/javascript/maptypes?hl=ko]

참고: 이 문서에서는 iOS 애플리케이션에 Google 지도를 추가하는 방법을 설명합니다. Google 지도 독립형 애플리케이션을 실행하는 방법을 알아보려면 URL 스키마 [https://developers.google.com/maps/documentation/ios-sdk/urlscheme?hl=ko] 문서를 참고하세요.

지도는 UIView의 서브클래스인 GMSMapView [https://developers.google.com/maps/documentation/ios-sdk/reference/objc/Classes/GMSMapView?hl=ko] 클래스에 의해 API에서 표현됩니다. 지도는 iOS용 Maps SDK의 가장 중요한 객체이며 마커, 다중선 등의 다른 객체를 추가, 삭제, 관리하는 데 필요한 메서드를 제공합니다.

소개

iOS용 Maps SDK를 사용하면 iOS 애플리케이션에 Google 지도를 표시할 수 있습니다. 이 지도는 Google 지도 [https://itunes.apple.com/app/id585027354] iOS 앱에 표시되는 지도와 모양이 동일하며 SDK에서 다수의 동일한 기능을 노출합니다.

매핑 기능 외에도 API에서는 iOS UI 모델과 일치하는 다양한 상호작용을 지원합니다. 예를 들어 탭, 더블 탭과 같은 사용자 동작에 반응하는 응답자를 정의하여 지도와의 상호작용을 설정할 수 있습니다.

지도 객체를 사용할 때 주요 클래스는 GMSMapView 클래스입니다.
GMSMapView는 다음 작업을 자동으로 처리합니다.

Google 지도 서비스에 연결
지도 타일 다운로드
기기 화면에 타일 표시
화면 이동 및 확대/축소와 같은 다양한 컨트롤 표시
화면 이동 및 확대/축소 동작 시 지도를 이동하거나 확대/축소하여 응답

지도의 보기 각도를 기울여 두 손가락 동작에 응답합니다.

이러한 자동 작업 외에 GMSMapView 클래스에서 노출하는 속성과 메서드를 통해 지도의 동작과 모양을 제어할 수 있습니다. GMSMapView를 사용하여 마커, 지상 오버레이, 다중선을 추가 및 삭제하고, 표시되는 지도 유형을 변경하고, GMSCameraPosition [https://developers.google.com/maps/documentation/ios-sdk/reference/objc/Classes/GMSCameraPosition?hl=ko] 클래스를 통해 지도에 표시되는 항목을 제어합니다.

SwiftUI로 지도 빌드하기

SwiftUI는 선언적 접근 방식을 사용하여 UI를 만드는 추가 방법을 제공합니다. SwiftUI에 뷰가 다양한 다양한 상태와 함께 어떻게 표시되는지 확인할 수 있으며, 나머지는 시스템에서 자동으로 처리합니다. SwiftUI는 이벤트 또는 사용자 작업에 의해 기본 상태가 변경될 때마다 뷰 업데이트를 처리합니다.

iOS용 Maps SDK는 UIKit를 기반으로 빌드되며 SwiftUI 호환 뷰를 제공하지 않습니다. SwiftUI에서 지도를 추가하려면 UIViewRepresentable 또는 UIViewControllerRepresentable를 준수해야 합니다. 자세한 내용은 Codelab SwiftUI로 iOS 앱에 지도 추가하기 [https://developers.google.com/codelabs/maps-platform/maps-platform-ios-swiftui?hl=ko#0]를 참고하세요.

지도 추가

지도를 추가하는 기본 단계는 다음과 같습니다.

SDK를 가져오고, API 키를 획득하고, 필수 프레임워크를 추가하려면 다음 단계를 따르세요.

Google Cloud 콘솔에서 설정 [https://developers.google.com/maps/documentation/ios-sdk/cloud-setup?hl=ko]
API 키 사용하기 [https://developers.google.com/maps/documentation/ios-sdk/get-api-key?hl=ko]
Xcode 프로젝트 설정 [https://developers.google.com/maps/documentation/ios-sdk/config?hl=ko]
AppDelegate에서 GMSServices의 provideAPIKey: 클래스 메서드에 API 키를 제공합니다.
ViewController를 만들거나 업데이트합니다. 이 뷰 컨트롤러가 표시될 때 지도가 표시되는 경우 viewDidLoad 메서드 내에서 지도를 만들어야 합니다.
지도 뷰를 초기화할 때 GMSMapViewOptions로 구성 옵션을 설정합니다. 속성에는 frame, camera, mapID,backgroundColor 또는 screen이 포함됩니다.
GMSCameraPosition 객체를 사용하여 지도 옵션 [https://developers.google.com/maps/documentation/ios-sdk/configure-map?hl=ko#map_options] camera 속성을 설정합니다. 지도의 중심과 확대/축소 수준을 지정합니다.
GMSMapView
options: 메서드를 사용하여 GMSMapView 클래스를 만들고 인스턴스화합니다. 이 지도가 뷰 컨트롤러의 유일한 뷰로 사용되는 경우 지도 옵션 frame의 기본값인 CGRectZero를 뷰 frame로 사용할 수 있습니다. 지도의 크기가 자동으로 조정됩니다.
GMSMapView 객체를 뷰 컨트롤러의 뷰로 설정합니다. 예를 들면 self.view = mapView;입니다.

아래 예시는 싱가포르 도심을 중심으로 하는 지도를 앱에 추가합니다.

Swift
import GoogleMaps

class MapObjects : UIViewController {
override func viewDidLoad() {
super.viewDidLoad()

Objective-C
- (void)viewDidLoad {
[super viewDidLoad];

GMSMapViewOptions *options = [[GMSMapViewOptions alloc] init];
options.camera = [GMSCameraPosition cameraWithLatitude:1.285
longitude:103.848

GMSMapView *mapView = [[GMSMapView alloc] initWithOptions:options];
self.view = mapView;