Source URL: https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/configure-project?hl=ko
Title: Google Cloud 콘솔 프로젝트 구성

Google Cloud 콘솔 프로젝트 구성

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

Android용 Driver SDK를 사용하도록 Google Cloud 콘솔 프로젝트를 설정하고 구성하려면 다음 단계를 따르세요.

모바일 앱 프로젝트 설정 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/configure-project?hl=ko#auth-project]
앱에 Driver SDK를 추가 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/configure-project?hl=ko#add-sdk]합니다.
앱에 API 키를 추가 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/configure-project?hl=ko#add-key]합니다.
앱에 필수 저작자 표시를 포함합니다 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/configure-project?hl=ko#include-attributions].

각 단계에 대한 자세한 내용은 다음 섹션을 참고하세요.
참고: 앱이 minSdkVersion 23 이상을 타겟팅해야 합니다.
모바일 앱 프로젝트 설정

이 섹션에서는 Driver SDK용 모바일 앱 프로젝트를 구성하는 방법을 설명합니다.

모바일 앱 프로젝트를 구성하려면 다음 단계를 따르세요.

모빌리티 프로젝트용 Google Cloud 콘솔 개발 프로젝트와 API 키가 없는 경우 이를 설정해야 합니다. 자세한 내용은 Fleet Engine 프로젝트 만들기 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/set-up-fleet/create-project?hl=ko]를 참고하세요.
Google Cloud 콘솔에서 Fleet Engine에 사용 중인 것과 동일한 Google Cloud 콘솔 프로젝트 및 API 키를 선택합니다.
API 및 서비스를 선택하고 Android용 Maps SDK를 검색하여 사용 설정합니다.

앱에 Driver SDK 추가

Driver SDK는 Google Maven 저장소에서 사용할 수 있습니다. 저장소에는 SDK의 프로젝트 객체 모델 (.pom) 파일과 Javadoc이 포함됩니다.

앱에 Driver SDK를 추가하려면 Gradle 또는 Maven 구성에 Driver SDK 및 Navigation SDK 종속 항목을 추가합니다.
참고: Driver SDK는 Navigation SDK에 종속됩니다. 이 예와 같이 종속 항목을 Navigation SDK의 명시적으로 정의된 버전으로 설정합니다.
그렇지 않으면 예시 코드 블록을 생략하여 프로젝트가 항상 주요 출시 버전 내에서 최신 버전의 Navigation SDK를 다운로드하도록 합니다. 최신 버전의 Driver SDK와 Navigation SDK의 결합된 동작은 출시 전에 엄격한 테스트를 거쳤습니다.
다음 예시에서 VERSION_NUMBER를 선택한 버전의 Driver SDK로 대체합니다.

Gradlebuild.gradle에 다음을 추가합니다.
dependencies {
...
implementation 'com.google.android.libraries.mapsplatform.transportation:transportation-driver:VERSION_NUMBER'
implementation 'com.google.android.libraries.navigation:navigation:5.0.0'
Mavenpom.xml에 다음을 추가합니다.
<dependencies>
...
<dependency>
<groupId>com.google.android.libraries.mapsplatform.transportation.driver</groupId>
<artifactId>transportation-driver</artifactId>
<version>VERSION_NUMBER</version>
</dependency>
<dependency>
<groupId>com.google.android.libraries.navigation</groupId>
<artifactId>navigation</artifactId>
<version>5.0.0</version>
</dependency>
</dependencies>

앱에 API 키 추가

앱에 Driver SDK를 추가한 후 API 키를 추가합니다. 개발 프로젝트를 설정할 때 획득한 프로젝트 API 키를 사용해야 합니다. 자세한 내용은 모바일 앱 프로젝트 설정 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/configure-project?hl=ko#auth-project]을 참고하세요.

이 섹션에서는 앱에서 더욱 안전하게 참조할 수 있도록 API 키를 저장하는 방법을 설명합니다. API 키 보안 권장사항에 대한 자세한 내용은 API 보안 권장사항 [https://developers.google.com/maps/api-security-best-practices?hl=ko#restrict_apikey]에 관한 Google Maps Platform 도움말을 참고하세요.
중요: 버전 제어 시스템에 API 키를 체크인하지 마세요. 대신 프로젝트의 루트 디렉터리에 있는 local.properties 파일에 저장합니다. local.properties 파일에 관한 자세한 내용은 Gradle 속성 파일 [https://developer.android.com/studio/build?hl=ko#properties-files]을 참고하세요.
이 작업을 간소화하려면 GitHub 문서 Android용 Secrets Gradle 플러그인 [https://github.com/google/secrets-gradle-plugin]을 사용하세요.

플러그인을 설치하고 API 키를 저장하려면 다음 단계를 따르세요.

루트 수준 build.gradle 파일을 열고 buildscript 아래 dependencies 요소에 다음 코드를 추가합니다.

Groovybuildscript {
dependencies {
Groovyid 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

Kotlinid("com.google.android.libraries.mapsplatform.secrets-gradle-plugin")

Android 스튜디오를 사용하는 경우 프로젝트를 Gradle과 동기화합니다. 자세한 내용은 Gradle로 프로젝트 동기화 [https://developer.android.com/studio/build?hl=ko#sync-files]를 참고하세요.
프로젝트 수준 디렉터리에서 local.properties를 열고 다음 코드를 추가합니다. YOUR_API_KEY를 직접 생성한 API 키로 변경합니다.

MAPS_API_KEY=YOUR_API_KEY
AndroidManifest.xml 파일에서 com.google.android.geo.API_KEY로 이동한 후 android:value 속성을 다음과 같이 업데이트합니다.
<meta-data
android:name="com.google.android.geo.API_KEY"
android:value="${MAPS_API_KEY}" />

다음 예는 샘플 앱의 전체 매니페스트를 보여줍니다.
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.driverapidemo" >
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:supportsRtl="true"
android:theme="@style/_AppTheme" >

<meta-data
android:name="com.google.android.geo.API_KEY"
android:value="${MAPS_API_KEY}" />

<activity android:name=".MainActivity" >
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>
참고: 최상의 탐색 환경을 위해 운전자는 android.permission.ACCESS_COARSE_LOCATION 및 android.permission.ACCESS_FINE_LOCATION 권한을 부여해야 합니다. 앱 내에서 런타임에 두 권한을 모두 요청해야 합니다.
앱에 필수 저작자 표시 포함

앱에서 Driver SDK를 사용하는 경우 앱의 법적 고지 섹션에 저작자 표시 텍스트와 오픈소스 라이선스를 포함해야 합니다. 저작자 표시는 독립적인 메뉴 항목 또는 정보 메뉴 항목의 일부로 포함하는 것이 좋습니다.

라이선스 정보는 압축 해제된 AAR 파일의 'third_party_licenses.txt' 파일에서 확인할 수 있습니다.

오픈소스 알림을 포함하는 방법은 오픈소스 알림 포함 [https://developers.google.com/android/guides/opensource?hl=ko]을 참고하세요.

다음 단계

종속 항목 선언 [https://developers.google.com/maps/documentation/mobility/driver-sdk/on-demand/android/dependencies?hl=ko]