Source URL: https://developers.google.com/maps/documentation/javascript/routes/get-a-route

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
홈 [https://developers.google.com/?hl=ko]
제품 [https://developers.google.com/products?hl=ko]
Google Maps Platform [https://developers.google.com/maps?hl=ko]
문서 [https://developers.google.com/maps/documentation?hl=ko]
Web [https://developers.google.com/maps/web?hl=ko]
Maps JavaScript API [https://developers.google.com/maps/documentation/javascript?hl=ko]
의견 보내기
경로 찾기
경로는 시작 위치(출발지)와 종료 위치(목적지) 사이의 탐색 가능한 경로입니다. 도보, 자전거, 다양한 유형의 차량 등 여러 이동 수단의 경로를 선택할 수 있습니다. 거리, 경로 탐색 예상 시간, 예상 통행료, 경로 탐색 단계별 안내와 같은 경로 세부정보를 요청할 수도 있습니다.
computeRoutes() [https://developers.google.com/maps/documentation/javascript/reference/route?hl=ko#Route.computeRoutes] 메서드를 호출하여 두 위치 간의 경로를 요청합니다. 다음 예에서는 요청을 정의한 다음 computeRoutes()를 호출하여 경로를 가져오는 방법을 보여줍니다.
  // Import the Routes library.
  const { Route } = await google.maps.importLibrary('routes');

  // Define a computeRoutes request.
  const request = {
    origin: 'Mountain View, CA',
    destination: 'San Francisco, CA',
  };

  // Call the computeRoutes() method to get routes.
  const {routes} = await Route.computeRoutes(request);
    
반환할 필드 선택
경로를 요청할 때는 필드 마스크를 사용하여 응답에서 반환해야 하는 정보를 지정해야 합니다. 필드 마스크에서 경로 클래스 속성 [https://developers.google.com/maps/documentation/javascript/reference/route?hl=ko#Route-Properties]의 이름을 지정할 수 있습니다.
필드 마스크를 사용하면 불필요한 데이터를 요청하지 않아도 되므로 응답 지연 시간을 줄이고 시스템에 필요하지 않은 정보를 반환하지 않을 수 있습니다.
다음 스니펫에 표시된 대로 ComputeRoutesRequest.fields [https://developers.google.com/maps/documentation/javascript/reference/route?hl=ko#ComputeRoutesRequest.fields] 속성을 설정하여 필요한 필드 목록을 지정합니다.
경로의 위치 지정
경로를 계산하려면 최소한 경로 출발지와 경로 목적지, 필드 마스크를 지정해야 합니다. 경로를 따라 중간 경유지를 지정할 수도 있고, 경유지를 사용하여 경로를 따라 정차 지점이나 통과 지점을 추가하는 등의 작업을 할 수도 있습니다.
ComputeRoutesRequest에서 다음 방법 중 하나로 위치를 지정할 수 있습니다.
장소 [https://developers.google.com/maps/documentation/javascript/routes/get-a-route?hl=ko#place] (권장)
위도/경도 좌표 [https://developers.google.com/maps/documentation/javascript/routes/get-a-route?hl=ko#lat-lng]
주소 문자열 [https://developers.google.com/maps/documentation/javascript/routes/get-a-route?hl=ko#address-string] ('Chicago, IL' 또는 'Darwin, NT, Australia')
플러스 코드 [https://developers.google.com/maps/documentation/javascript/routes/get-a-route?hl=ko#plus-code]
요청에서 모든 경유지의 위치를 동일한 방식으로 지정하거나 혼합할 수 있습니다. 예를 들어 출발지 경유지에 위도/경도 좌표를 사용하고 목적지 경유지에 장소 객체를 사용할 수 있습니다.
효율성과 정확성을 위해 위도/경도 좌표 또는 주소 문자열 대신 장소 객체를 사용하세요. 장소 ID는 명시적으로 고유하며 액세스 포인트 및 교통 변수와 같은 라우팅에 지오코딩 이점을 제공합니다. 이러한 방법은 위치를 지정하는 다른 방법으로 인해 발생할 수 있는 다음 상황을 방지하는 데 도움이 됩니다.
위도/경도 좌표를 사용하면 해당 좌표에 가장 가까운 도로로 위치가 스냅될 수 있습니다. 이 도로가 숙소로 연결되는 진입로가 아닐 수도 있고 목적지로 빠르고 안전하게 연결되는 도로가 아닐 수도 있습니다.
경로를 계산하려면 먼저 Routes API로 주소 문자열을 지오코딩하여 위도/경도 좌표로 변환해야 합니다. 이 변환은 성능에 영향을 미칠 수 있습니다.
장소 객체로 위치 지정 (권장)
장소를 사용하여 위치를 지정하려면 새 Place 인스턴스를 만듭니다. 다음 스니펫은 origin 및 destination의 새 Place 인스턴스를 만든 다음 ComputeRoutesRequest에서 사용하는 방법을 보여줍니다.
위도/경도 좌표
위치를 위도/경도 좌표로 지정하려면 새 google.maps.LatLngLiteral, google.maps.LatLngAltitude 또는 google.maps.LatLngAltitudeLiteral 인스턴스를 만듭니다. 다음 스니펫은 origin 및 destination의 새 google.maps.LatLngLiteral 인스턴스를 만든 다음 computeRoutesRequest에서 사용하는 방법을 보여줍니다.
주소 문자열
주소 문자열은 문자열로 표현된 실제 주소입니다 (예: '1600 Amphitheatre Parkway, Mountain View, CA'). 지오코딩은 주소 문자열을 위도 및 경도 좌표 (예: 위도 37.423021 및 경도 -122.083739)로 변환하는 과정입니다.
주소 문자열을 경유지의 위치로 전달하면 Routes 라이브러리가 내부적으로 문자열을 지오코딩하여 위도 및 경도 좌표로 변환합니다.
다음 스니펫은 origin 및 destination의 주소 문자열을 사용하여 ComputeRoutesRequest을 만드는 방법을 보여줍니다.
주소의 지역 설정
불완전한 주소 문자열을 경유지 위치로 전달하면 API에서 잘못된 지오코딩된 위도/경도 좌표를 사용할 수 있습니다. 예를 들어 운전 경로의 출발지를 'Toledo'로, 목적지를 'Madrid'로 지정하는 요청을 합니다.
// Define a request with an incomplete address string.
const request = {
  origin: 'Toledo',
  destination: 'Madrid',
};
    
이 예에서는 'Toledo'가 스페인이 아닌 미국 오하이오주의 도시로 해석됩니다. 따라서 요청은 빈 배열을 반환하며 이는 경로가 없음을 의미합니다.
regionCode 매개변수를 포함하여 특정 지역에 편중된 결과를 반환하도록 API를 구성할 수 있습니다. 이 매개변수는 지역 코드를 ccTLD ('최상위 도메인') [https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains] 2자리 값으로 지정합니다. 대부분의 ccTLD 코드는 ISO 3166-1 코드와 동일하지만 일부 주목할 만한 예외가 있습니다. 예를 들어 영국의 ccTLD는 'uk' (.co.uk)이지만 ISO 3166-1 코드는 'gb' (기술적으로 '그레이트브리튼 북아일랜드 연합왕국'의 법인)입니다.
regionCode 매개변수가 포함된 'Toledo'에서 'Madrid'로의 경로 요청은 'Toledo'가 스페인의 도시로 해석되므로 적절한 결과를 반환합니다.
const request = {
  origin: 'Toledo',
  destination: 'Madrid',
  region: 'es', // Specify the region code for Spain.
};
    
플러스 코드
정확한 주소가 없는 사람이 많아 배송을 받기 어려울 수 있습니다. 주소가 있는 사용자는 뒷문이나 하역장과 같은 더 구체적인 위치에서 배송을 받는 것을 선호할 수 있습니다.
플러스 코드는 실제 주소가 없는 사람이나 장소의 상세 주소와 같습니다. 도로명과 번호가 포함된 주소 대신 플러스 코드는 위도/경도 좌표를 기반으로 하며 숫자와 문자로 표시됩니다.
Google은 모든 사람과 모든 것에 주소의 이점을 제공하기 위해 Plus Code [https://maps.google.com/pluscodes/?hl=ko]를 개발했습니다. 플러스 코드는 위도/경도 좌표에서 파생된 인코딩된 위치 참조로 1/8000도x1/8000도 (적도에서 14mx14m) 이하의 영역을 나타냅니다. Plus Code는 상세 주소가 없는 장소나 건물에 번호가 지정되지 않거나 거리 이름이 없는 장소의 상세 주소 대신 사용할 수 있습니다.
Plus Code는 글로벌 코드 또는 복합 코드로 형식이 지정되어야 합니다.
글로벌 코드는 4자리 지역 코드와 6자 이상의 로컬 코드로 구성됩니다. 예를 들어 주소가 '1600 Amphitheatre Parkway, Mountain View, CA'인 경우 전역 코드는 '849V'이고 지역 코드는 'CWC8+R9'입니다. 그런 다음 전체 10자리 플러스 코드를 사용하여 위치 값을 '849VCWC8+R9'로 지정합니다.
복합 코드는 명시적인 위치와 결합된 6자 이상의 로컬 코드로 구성됩니다. 예를 들어 주소 '450 Serra Mall, Stanford, CA 94305, USA'의 지역 코드는 'CRHJ+C3'입니다. 복합 주소의 경우 지역 코드를 주소의 도시, 주, 우편번호, 국가 부분과 결합하여 'CRHJ+C3 Stanford, CA 94305, USA' 형식으로 만듭니다.
다음 스니펫은 더하기 코드를 사용하여 경로 출발지와 목적지의 경유지를 지정하여 경로를 계산하는 방법을 보여줍니다.
의견 보내기