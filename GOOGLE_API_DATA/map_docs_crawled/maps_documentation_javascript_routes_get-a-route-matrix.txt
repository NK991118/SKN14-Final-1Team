Source URL: https://developers.google.com/maps/documentation/javascript/routes/get-a-route-matrix

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
홈 [https://developers.google.com/?hl=ko]
제품 [https://developers.google.com/products?hl=ko]
Google Maps Platform [https://developers.google.com/maps?hl=ko]
문서 [https://developers.google.com/maps/documentation?hl=ko]
Web [https://developers.google.com/maps/web?hl=ko]
Maps JavaScript API [https://developers.google.com/maps/documentation/javascript?hl=ko]
의견 보내기
경로 매트릭스 가져오기
경로 매트릭스는 경로 정보의 2차원 배열로, 행은 출발지에 해당하고 열은 목적지에 해당합니다. 출발지 및 목적지 목록이 주어지면 경로 매트릭스 클래스는 각 출발지에서 시작하여 각 목적지에서 끝나는 경로의 거리와 소요 시간을 계산합니다. Route Matrix 클래스를 사용하여 여러 출발지와 목적지의 경로 거리와 시간을 계산합니다.
요청 한도
RouteMatrix.computeRouteMatrix() 메서드는 주소 또는 장소 인스턴스를 사용하는 경유지 및 항목에 대해 다음 요청 한도를 적용합니다. 항목은 경로 행렬의 각 출발지와 목적지 간의 경로이므로 항목 수는 출발지 수에 목적지 수를 곱한 값입니다. 예를 들어 출발지가 10개이고 목적지가 10개인 경우 항목은 100개입니다.
항목 수는 TRANSIT 경로가 아닌 경로의 경우 625개를 초과할 수 없습니다.
TRANSIT 경로를 지정하는 경우 항목 수는 100개를 초과할 수 없습니다.
TRAFFIC_AWARE_OPTIMAL를 지정하는 경우 항목 수는 100개를 초과할 수 없습니다.
주소 또는 장소 인스턴스를 사용하여 출발지 또는 목적지를 지정하는 경우 이 방식으로 총 50개까지 지정할 수 있습니다.
경로 매트릭스 요청 예시
다음 예는 ComputeRouteMatrixRequest을 보여줍니다. 이 예에서는 다음을 수행합니다.
출발지 2개와 목적지 2개의 배열을 지정하는 방법을 보여줍니다. 이 메서드는 각 출발지에서 각 목적지까지의 경로를 계산하므로 응답에는 4개의 경로가 포함됩니다.
배열에서 첫 번째 요소는 색인 0에 있고 두 번째 요소는 색인 1에 있습니다.
반환할 필드를 지정합니다. 이 예에서는 각 경로에 대해 durationMillis, distanceMeters, condition를 반환하도록 요청을 구성합니다.
다음 예와 같이 응답에는 모든 출발지 및 목적지 경유지의 조합에 대한 네 가지 가능한 경로가 포함됩니다.
"matrix": {
  "rows": [
    {
      "items": [
        {
          "condition": "ROUTE_EXISTS",
          "distanceMeters": 202587,
          "durationMillis": 10040000
        },
        {
          "condition": "ROUTE_EXISTS",
          "distanceMeters": 252734,
          "durationMillis": 12240000
        }
      ]
    },
    {
      "items": [
        {
          "condition": "ROUTE_EXISTS",
          "distanceMeters": 166135,
          "durationMillis": 6596000
        },
        {
          "condition": "ROUTE_EXISTS",
          "distanceMeters": 216282,
          "durationMillis": 8797000
        }
      ]
    }
  ]
}
    
출발지 및 목적지 색인을 사용하여 2D 배열에서 해당하는 RouteMatrixItem를 찾아 결과의 각 경로를 식별합니다. 예를 들어 요청의 색인 1에 있는 출발지와 목적지 0에서 계산된 경로를 설명하는 RouteMatrixItem는 RouteMatrix.rows 배열의 두 번째 요소와 RouteMatrixRow.items 배열의 첫 번째 요소에 있습니다.
다음 코드 스니펫은 특정 출발지와 목적지의 경로를 찾기 위해 RouteMatrixItem를 식별하는 방법을 보여줍니다.
// Find the route for origin 'x' and destination 'y'.
const {matrix} = await RouteMatrix.computeRouteMatrix(request);
const myRouteMatrixItem = matrix.rows[x].items[y];
    
반환할 필드 선택
경로 매트릭스를 요청할 때는 필드 마스크를 사용하여 응답에서 반환해야 하는 정보를 지정해야 합니다.
필드 마스크를 사용하면 불필요한 데이터를 요청하지 않아도 되므로 응답 지연 시간을 줄이고 시스템에 필요하지 않은 정보를 반환하지 않을 수 있습니다.
다음 스니펫에 표시된 대로 ComputeRoutesMatrixRequest.fields [https://developers.google.com/maps/documentation/javascript/reference/route-matrix?hl=ko#ComputeRouteMatrixRequest.fields] 속성을 설정하여 필요한 필드 목록을 지정합니다.
fields: ['durationMillis', 'distanceMeters', 'condition'],
    
사용할 필드 마스크 결정
사용할 필드를 결정하고 필드 마스크를 구성하는 방법은 다음과 같습니다.
['*'] 필드 마스크를 사용하여 모든 필드를 요청합니다.
주의: 개발 중에 이 와일드 카드 필드 마스크를 사용하여 필요한 필드를 확인할 수 있지만 프로덕션에서는 사용하지 마세요. 프로덕션에서 모든 필드를 요청하면 비용이 증가하고 응답 시간이 길어집니다. 이 필드 마스크에는 고급 기능이 자동으로 포함되므로 고급 기능이 추가되면 비용이 예기치 않게 증가할 수도 있습니다. 대신 비용과 요청 응답 시간을 최소화하기 위해 필요한 필드만 요청하세요.
원하는 필드의 RouteMatrixItem 클래스에서 필드의 계층 구조를 확인합니다.
이전 단계에 표시된 필드의 계층 구조를 사용하여 다음 형식으로 필드 마스크를 구성합니다.
topLevelField[.secondLevelField][.thirdLevelField][...]
예를 들어 다음 RouteMatrixItem의 경우:
  "travelAdvisory": {
    "fuelConsumptionMicroliters": 0,
    "tollInfo": {
      "estimatedPrices": [
        {
          "currencyCode": "USD",
          "units": 4,
          "nanos": 400000000
        }
      ]
    }
  },
    
RouteMatrixItem의 tollInfo 필드만 반환하려면 필드 마스크는 다음과 같습니다.
fields: ['travelAdvisory.tollInfo']
예상 연료 소비량을 요청하려면 필드 마스크는 다음과 같습니다.
fields: ['travelAdvisory.fuelConsumptionMicroliters']
두 가지를 모두 요청하려면 필드 마스크는 다음과 같습니다.
fields: ['travelAdvisory.fuelConsumptionMicroliters', 'travelAdvisory.tollInfo']
전체 여행 권고를 요청하려면 필드 마스크는 다음과 같습니다.
fields: ['travelAdvisory']
속성 계층 구조는 RouteMatrix.computeRouteMatrix에만 사용할 수 있으며 Route.computeRoutes에는 지원되지 않습니다.
의견 보내기