Source URL: https://developers.google.com/maps/documentation/android-sdk/dds-boundaries/start?hl=ko
Title: 시작하기

의견 보내기

시작하기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

플랫폼 선택:

Android [https://developers.google.com/maps/documentation/android-sdk/dds-boundaries/start?hl=ko]

iOS [https://developers.google.com/maps/documentation/ios-sdk/dds-boundaries/start?hl=ko]

JavaScript [https://developers.google.com/maps/documentation/javascript/dds-boundaries/start?hl=ko]

경계에 데이터 기반 스타일을 설정하려면 다음 단계를 따르세요.

새 지도 렌더러 사용 설정

업그레이드된 지도 렌더기는 Android용 Maps SDK 버전 18.0.0부터 사용할 수 있습니다. 이 렌더기를 통해 클라우드 기반 지도 스타일 지정 등의 여러 가지 개선된 Android용 Maps SDK에 관한 기능을 이용할 수 있습니다.

Android용 Maps SDK 버전 18.2.0이 출시됨에 따라 Google은 기본 렌더기를 기존 렌더기에서 업그레이드된 지도 렌더기로 전환했습니다. 새 앱을 빌드하거나 기존 앱을 다시 빌드할 때 업그레이드된 지도 렌더기가 앱에서 기본적으로 사용됩니다.
주의: 앱에서 경계에 데이터 기반 스타일을 사용하려면 업그레이드된 지도 렌더기로 앱을 빌드해야 합니다. 기존 앱에 경계를 위한 데이터 기반 스타일 지정을 추가하는 경우, 앱에서 업그레이드된 지도 렌더기를 사용하도록 앱을 다시 빌드하세요. 자세한 정보는 새 지도 렌더기 [https://developers.google.com/maps/documentation/android-sdk/renderer?hl=ko]에서 참고하세요.
지도 ID 만들기

새 지도 ID를 만들려면 지도 ID 만들기 [https://developers.google.com/maps/documentation/get-map-id?hl=ko#create-a-map-id]의 단계를 따르세요. 지도 유형은 Android로 설정해야 합니다.

새 지도 스타일 만들기

새 지도 스타일을 만들려면 지도 스타일 관리 [https://developers.google.com/maps/documentation/android-sdk/cloud-customization/map-styles?hl=ko]의 안내에 따라 스타일을 만들어 방금 만든 지도 ID와 연결 [https://developers.google.com/maps/documentation/android-sdk/cloud-customization/map-styles?hl=ko#associate-style-with-map-id]하세요.
실험용: 이 기능은 밝은 지도 스타일에만 설정할 수 있습니다. 이 기능이 사용 설정된 밝은 지도 스타일을 지도 ID [https://developers.google.com/maps/documentation/android-sdk/map-ids/mapid-over?hl=ko]에 연결하면 사용 설정된 레이어를 어두운 지도 스타일에서도 사용할 수 있습니다.
새 지도 스타일에서 지형지물 레이어를 선택합니다.

Google API 콘솔에서 새 지도 스타일에 표시할 지형지물 레이어를 선택할 수 있습니다. 지형지물 레이어에 따라 지도에 표시될 경계의 종류 (예: 지역, 주)가 결정됩니다.
중요: 최적의 성능을 얻으려면 필요한 레이어만 선택하세요.

Google API 콘솔에서 지도 스타일 페이지로 이동 [https://console.cloud.google.com/project/_/google/maps-apis/studio/styles?hl=ko]합니다.
메시지가 표시되면 프로젝트를 선택합니다.
지도 스타일을 선택합니다.
지형지물 레이어 드롭다운을 클릭하여 레이어를 추가하거나 삭제합니다.
저장을 클릭해 변경사항을 저장하여 지도에서 사용할 수 있게 합니다.

지도 초기화 코드 업데이트

이 단계에서는 방금 만든 지도 ID가 필요합니다. 지도 ID는 지도 관리 [https://console.cloud.google.com/google/maps-apis/studio/maps?hl=ko] 페이지에서 찾을 수 있습니다.

지도 ID를 초기화 코드에 추가하려면 앱에 지도 ID 추가하기 [https://developers.google.com/maps/documentation/get-map-id?hl=ko#add-a-map-id-to-your-app]를 참고하세요.

지도의 지형지물 레이어에 액세스

FeatureLayer [https://developers.google.com/android/reference/com/google/android/gms/maps/model/FeatureLayer?hl=ko] 객체를 사용하여 우편번호 또는 지역 지형지물 레이어와 같은 지도의 각 지형지물 레이어를 나타냅니다. 지도가 초기화될 때 지형지물 레이어 객체에 액세스하려면 GoogleMap.getFeatureLayer() [https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap?hl=ko#getFeatureLayer(com.google.android.gms.maps.model.FeatureLayerOptions)]을 호출합니다.

자바
private FeatureLayer postalCodeLayer;
@Override
public void onMapReady(GoogleMap map) {
.featureType(FeatureType.POSTAL_CODE)
.build());
...
private var postalCodeLayer: FeatureLayer? = null
override fun onMapReady(googleMap: GoogleMap) {
.featureType(FeatureType.POSTAL_CODE)
.build())
...
FeatureLayer 객체가 있으면 해당 지형지물의 경계 다각형에 스타일을 적용할 수 있습니다.
참고: 지도에 지정된 유형의 FeatureLayer이 없거나 지도 ID를 지정하지 않아 경계의 데이터 기반 스타일 지정이 사용 설정되지 않은 경우 이 호출은 반환되지만 오류가 로깅됩니다. FeatureLayer.isAvailable() [https://developers.google.com/android/reference/com/google/android/gms/maps/model/FeatureLayer?hl=ko#isAvailable()] 메서드를 사용하여 FeatureLayer가 사용 가능한지 확인합니다.
지도 기능 확인(필수)

경계에 대한 데이터 기반 스타일 지정에는 지도 ID가 필요합니다. 지도 ID가 누락되었거나 잘못된 지도 ID가 전달된 경우 경계의 데이터 기반 스타일을 로드할 수 없습니다. 문제 해결 단계로 MapCapabilities [https://developers.google.com/android/reference/com/google/android/gms/maps/model/MapCapabilities?hl=ko]를 사용하여 경계의 데이터 기반 스타일 지정이 지원되는지 확인할 수 있습니다.
주의: 일부 기기에서는 새 지도 렌더기가 지원되지 않아 경계에 데이터 기반 스타일을 표시할 수 없습니다. 런타임에 MapCapabilities를 사용하여 지원 여부를 확인하세요. 경계의 데이터 기반 스타일 지정이 지원되지 않으면 대체 옵션을 정의하세요.
새 지도 렌더기의 기기 요구사항은 지원되는 기기 [https://developers.google.com/maps/documentation/android-sdk/renderer?hl=ko#supported-devices]를 참고하세요.
Kotlin
val capabilities: MapCapabilities = googleMap.getMapCapabilities()
System.out.println("Data-driven Styling is available: " + capabilities.isDataDrivenStylingAvailable())
Java
MapCapabilities capabilities = googleMap.getMapCapabilities();
System.out.println("Data-driven Styling is available: " + capabilities.isDataDrivenStylingAvailable());

의견 보내기