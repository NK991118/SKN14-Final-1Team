Source URL: https://developers.google.com/maps/documentation/android-sdk/polygon-tutorial?hl=ko
Title: 경로 및 영역을 나타내는 다중선 및 다각형

의견 보내기

경로 및 영역을 나타내는 다중선 및 다각형

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 튜토리얼에서는 Google 지도를 Android 앱에 추가하고 지도에서 다중선과 다각형을 사용하여 경로와 영역을 나타내는 방법을 설명합니다.

튜토리얼에 따라 Android용 Maps SDK를 사용하여
Android 앱을 빌드하세요. 권장되는 개발 환경은
Android 스튜디오 [https://developer.android.com/studio/?hl=ko]입니다.

코드 가져오기

GitHub에서 Google Maps Android API v2 샘플 저장소를 클론하거나 다운로드 [https://github.com/googlemaps-samples/android-samples]합니다.

활동의 Java 버전을 확인하세요.

코드 표시/숨기기

import android.os.Bundle;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CustomCap;
import com.google.android.gms.maps.model.Dash;
import com.google.android.gms.maps.model.Dot;
import com.google.android.gms.maps.model.Gap;
import com.google.android.gms.maps.model.JointType;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.PatternItem;
import com.google.android.gms.maps.model.Polygon;
import com.google.android.gms.maps.model.PolygonOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.maps.model.RoundCap;
import java.util.Arrays;
import java.util.List;

/**
* An activity that displays a Google map with polylines to represent paths or routes,
* and polygons to represent areas.
*/
public class PolyActivity extends AppCompatActivity
implements
OnMapReadyCallback,
GoogleMap.OnPolylineClickListener,
GoogleMap.OnPolygonClickListener {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
.findFragmentById(R.id.map);
mapFragment.getMapAsync(this);
Polyline polyline1 = googleMap.addPolyline(new PolylineOptions()
.clickable(true)
.add(
new LatLng(-35.016, 143.321),
new LatLng(-34.747, 145.592),
new LatLng(-34.364, 147.891),
new LatLng(-33.501, 150.217),
new LatLng(-32.306, 149.248),
new LatLng(-32.491, 147.309)));

Polyline polyline2 = googleMap.addPolyline(new PolylineOptions()
.clickable(true)
.add(
new LatLng(-29.501, 119.700),
new LatLng(-27.456, 119.672),
new LatLng(-25.971, 124.187),
new LatLng(-28.081, 126.555),
new LatLng(-28.848, 124.229),
new LatLng(-28.215, 123.938)));
polyline2.setTag("B");
stylePolyline(polyline2);

Polygon polygon1 = googleMap.addPolygon(new PolygonOptions()
.clickable(true)
.add(
new LatLng(-27.457, 153.040),
new LatLng(-33.852, 151.211),
new LatLng(-37.813, 144.962),
new LatLng(-34.928, 138.599)));

Polygon polygon2 = googleMap.addPolygon(new PolygonOptions()
.clickable(true)
.add(
new LatLng(-31.673, 128.892),
new LatLng(-31.952, 115.857),
new LatLng(-17.785, 122.258),
new LatLng(-12.4258, 130.7932)));
polygon2.setTag("beta");
stylePolygon(polygon2);

googleMap.setOnPolygonClickListener(this);
private static final int POLYLINE_STROKE_WIDTH_PX = 12;

/**
* Styles the polyline, based on type.
* @param polyline The polyline object that needs styling.
*/
private void stylePolyline(Polyline polyline) {
String type = "";
new CustomCap(
BitmapDescriptorFactory.fromResource(R.drawable.ic_arrow), 10));
break;
case "B":
break;
polyline.setWidth(POLYLINE_STROKE_WIDTH_PX);
polyline.setColor(COLOR_BLACK_ARGB);
polyline.setJointType(JointType.ROUND);
private static final PatternItem DOT = new Dot();
private static final PatternItem GAP = new Gap(PATTERN_GAP_LENGTH_PX);

/**
* Listens for clicks on a polyline.
* @param polyline The polyline object that the user has clicked.
*/
@Override
public void onPolylineClick(Polyline polyline) {
Toast.makeText(this, "Route type " + polyline.getTag().toString(),
Toast.LENGTH_SHORT).show();
polygon.setStrokeColor(color);
color = polygon.getFillColor() ^ 0x00ffffff;
polygon.setFillColor(color);

Toast.makeText(this, "Area type " + polygon.getTag().toString(), Toast.LENGTH_SHORT).show();
private static final int COLOR_DARK_GREEN_ARGB = 0xff388E3C;
private static final int COLOR_LIGHT_GREEN_ARGB = 0xff81C784;
private static final int COLOR_DARK_ORANGE_ARGB = 0xffF57F17;
private static final int COLOR_LIGHT_ORANGE_ARGB = 0xffF9A825;

private static final int POLYGON_STROKE_WIDTH_PX = 8;
private static final int PATTERN_DASH_LENGTH_PX = 20;
private static final PatternItem DASH = new Dash(PATTERN_DASH_LENGTH_PX);

Arrays.asList(DOT, GAP, DASH, GAP);

/**
* Styles the polygon, based on type.
* @param polygon The polygon object that needs styling.
*/
private void stylePolygon(Polygon polygon) {
String type = "";
List<PatternItem> pattern = null;
int strokeColor = COLOR_BLACK_ARGB;
int fillColor = COLOR_WHITE_ARGB;

switch (type) {
strokeColor = COLOR_DARK_GREEN_ARGB;
fillColor = COLOR_LIGHT_GREEN_ARGB;
break;
case "beta":
strokeColor = COLOR_DARK_ORANGE_ARGB;
fillColor = COLOR_LIGHT_ORANGE_ARGB;
break;
polygon.setStrokeWidth(POLYGON_STROKE_WIDTH_PX);
polygon.setStrokeColor(strokeColor);
polygon.setFillColor(fillColor);

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.GoogleMap.OnPolygonClickListener
import com.google.android.gms.maps.GoogleMap.OnPolylineClickListener
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.google.android.gms.maps.model.CustomCap
import com.google.android.gms.maps.model.Dash
import com.google.android.gms.maps.model.Dot
import com.google.android.gms.maps.model.Gap
import com.google.android.gms.maps.model.JointType
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.PatternItem
import com.google.android.gms.maps.model.Polygon
import com.google.android.gms.maps.model.PolygonOptions
import com.google.android.gms.maps.model.Polyline
import com.google.android.gms.maps.model.PolylineOptions
import com.google.android.gms.maps.model.RoundCap

/**
* An activity that displays a Google map with polylines to represent paths or routes,
* and polygons to represent areas.
*/
class PolyActivity : AppCompatActivity(), OnMapReadyCallback, OnPolylineClickListener, OnPolygonClickListener {

override fun onCreate(savedInstanceState: Bundle?) {
super.onCreate(savedInstanceState)

.findFragmentById(R.id.map) as SupportMapFragment?
mapFragment?.getMapAsync(this)
.clickable(true)
.add(
LatLng(-35.016, 143.321),
LatLng(-34.747, 145.592),
LatLng(-34.364, 147.891),
LatLng(-33.501, 150.217),
LatLng(-32.306, 149.248),
LatLng(-32.491, 147.309)))

val polyline2 = googleMap.addPolyline(PolylineOptions()
.clickable(true)
.add(
LatLng(-29.501, 119.700),
LatLng(-27.456, 119.672),
LatLng(-25.971, 124.187),
LatLng(-28.081, 126.555),
LatLng(-28.848, 124.229),
LatLng(-28.215, 123.938)))
polyline2.tag = "B"
stylePolyline(polyline2)

.clickable(true)
.add(
LatLng(-27.457, 153.040),
LatLng(-33.852, 151.211),
LatLng(-37.813, 144.962),
LatLng(-34.928, 138.599)))

val polygon2 = googleMap.addPolygon(PolygonOptions()
.clickable(true)
.add(
LatLng(-31.673, 128.892),
LatLng(-31.952, 115.857),
LatLng(-17.785, 122.258),
LatLng(-12.4258, 130.7932)))
polygon2.tag = "beta"
stylePolygon(polygon2)

googleMap.setOnPolygonClickListener(this)
private val POLYLINE_STROKE_WIDTH_PX = 12

/**
* Styles the polyline, based on type.
* @param polyline The polyline object that needs styling.
*/
private fun stylePolyline(polyline: Polyline) {
BitmapDescriptorFactory.fromResource(R.drawable.ic_arrow), 10f)
polyline.width = POLYLINE_STROKE_WIDTH_PX.toFloat()
polyline.color = COLOR_BLACK_ARGB
polyline.jointType = JointType.ROUND
private val DOT: PatternItem = Dot()
private val GAP: PatternItem = Gap(PATTERN_GAP_LENGTH_PX.toFloat())

/**
* Listens for clicks on a polyline.
* @param polyline The polyline object that the user has clicked.
*/
override fun onPolylineClick(polyline: Polyline) {
Toast.makeText(this, "Route type " + polyline.tag.toString(),
Toast.LENGTH_SHORT).show()
color = polygon.fillColor xor 0x00ffffff
polygon.fillColor = color
Toast.makeText(this, "Area type ${polygon.tag?.toString()}", Toast.LENGTH_SHORT).show()
private val COLOR_DARK_GREEN_ARGB = -0xc771c4
private val COLOR_LIGHT_GREEN_ARGB = -0x7e387c
private val COLOR_DARK_ORANGE_ARGB = -0xa80e9
private val COLOR_LIGHT_ORANGE_ARGB = -0x657db
private val POLYGON_STROKE_WIDTH_PX = 8
private val PATTERN_DASH_LENGTH_PX = 20

private val DASH: PatternItem = Dash(PATTERN_DASH_LENGTH_PX.toFloat())

/**
* Styles the polygon, based on type.
* @param polygon The polygon object that needs styling.
*/
private fun stylePolygon(polygon: Polygon) {
strokeColor = COLOR_DARK_GREEN_ARGB
fillColor = COLOR_LIGHT_GREEN_ARGB
strokeColor = COLOR_DARK_ORANGE_ARGB
fillColor = COLOR_LIGHT_ORANGE_ARGB
polygon.strokeWidth = POLYGON_STROKE_WIDTH_PX.toFloat()
polygon.strokeColor = strokeColor
polygon.fillColor = fillColor
Android 스튜디오에 Google Play 서비스 패키지를
추가 [https://developer.android.com/studio/intro/update.html?hl=ko#sdk-manager]합니다.
이 튜토리얼을 읽기 전에 Google Maps Android API v2 샘플 저장소를 클론하거나 다운로드 [https://github.com/googlemaps-samples/android-samples]하지 않았다면 지금 진행합니다.
튜토리얼 프로젝트를 가져옵니다.

Android 스튜디오에서 File > New > Import Project를 선택합니다.
Google Maps Android API v2 샘플 저장소를
다운로드한 후 저장한 위치로 이동합니다.
다음 위치에서 Polygons 프로젝트를 찾습니다.
PATH-TO-SAVED-REPO/android-samples/tutorials/java/Polygons(Java) 또는
PATH-TO-SAVED-REPO/android-samples/tutorials/kotlin/Polygons(Kotlin)
프로젝트 디렉터리를 선택한 다음 Open을 클릭합니다. 이제 Android 스튜디오에서 Gradle 빌드 도구를
사용하여 프로젝트를 빌드합니다.

필요한 API 사용 설정 및 API 키 가져오기

이 튜토리얼을 완료하려면 필요한 API가 사용 설정되고 Android용 Maps SDK를 사용할 수 있도록
승인된 API 키가 포함된 Google Cloud 프로젝트가 필요합니다.
자세한 내용은 다음을 참고하세요.

Google Cloud 프로젝트 설정 [https://developers.google.com/maps/documentation/android-sdk/cloud-setup?hl=ko]
API 키 사용하기 [https://developers.google.com/maps/documentation/android-sdk/get-api-key?hl=ko]

앱에 API 키 추가

프로젝트의 local.properties 파일을 엽니다.
다음 문자열을 추가한 다음 YOUR_API_KEY를 API 키 값으로
대체합니다.
MAPS_API_KEY=YOUR_API_KEY

앱을 빌드할 때 아래 [https://developers.google.com/maps/documentation/android-sdk/polygon-tutorial?hl=ko#manifest] 설명된 대로
Android용 Secrets Gradle 플러그인 [https://github.com/google/secrets-gradle-plugin]에서
API 키를 복사하여 이를 Android 매니페스트에서 빌드 변수로
제공합니다.

앱 빌드 및 실행

앱을 빌드 및 실행하려면 다음 안내를 따르세요.

컴퓨터에 Android 기기를 연결합니다. 안내 [https://developer.android.com/studio/run/device.html?hl=ko]에 따라
Android 기기에서 개발자 옵션을 사용 설정하고
기기를 감지하도록 시스템을 구성합니다.

또는 Android Virtual Device(AVD) Manager [https://developer.android.com/studio/run/managing-avds.html?hl=ko]를
사용하여 가상 기기를 구성할 수 있습니다. 에뮬레이터를 선택할 때 Google API가 포함된 이미지를
선택해야 합니다. 자세한 내용은
Android 스튜디오 프로젝트 설정 [https://developers.google.com/maps/documentation/android-sdk/config?hl=ko]을 참고하세요.
Android 스튜디오에서 Run 메뉴 옵션(또는 재생 버튼 아이콘)을 클릭합니다.
표시되는 메시지에 따라 기기를 선택합니다.

Android 스튜디오에서 Gradle을 호출하여 앱을 빌드한 다음 기기 또는 에뮬레이터에서
앱을 실행합니다.

이 페이지의 이미지와 비슷하게, 오스트레일리아 위에 다각형 두 개가 오버레이된
지도가 표시됩니다.

문제 해결:

지도가 표시되지 않으면 위에서 설명한 대로 [https://developers.google.com/maps/documentation/android-sdk/polygon-tutorial?hl=ko#api-key] API 키를 가져와
앱에 추가했는지 확인하세요. Android 스튜디오의 Android Monitor [https://developer.android.com/studio/debug/am-logcat.html?hl=ko]에 있는 로그에 API 키 관련 오류 메시지가 있는지 확인합니다.
Android 스튜디오 디버깅 도구 [https://developer.android.com/studio/debug/am-logcat.html?hl=ko]를 사용하여 로그를 확인하고 앱을
디버깅하세요.

코드 이해하기

여기에서는 유사한 앱을 빌드하는 방법을 이해할 수 있도록
Polygons 앱의 가장 중요한 부분을
설명합니다.

Android 매니페스트 확인

앱의 AndroidManifest.xml 파일에서 다음 요소를 확인합니다.

meta-data 요소를 추가하여 앱이 컴파일된 Google Play 서비스의
버전을 삽입합니다.
<meta-data
android:name="com.google.android.gms.version"
android:value="@integer/google_play_services_version" />

API 키를 지정하는 meta-data 요소를 추가합니다. 이 튜토리얼에 포함된 샘플에서는
API 키의 값을 앞부분에서 정의한 키의 이름(MAPS_API_KEY)과 일치하는
빌드 변수에 매핑합니다.
앱을 빌드할 때 Android용 Secrets Gradle 플러그인 [https://github.com/google/secrets-gradle-plugin]에서
local.properties 파일의 키를 매니페스트 빌드 변수로
제공합니다.
<meta-data
android:name="com.google.android.geo.API_KEY"
android:value="${MAPS_API_KEY}" />

build.gradle 파일에서 다음 행이 API 키를 Android 매니페스트에
전달합니다.
id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

다음은 매니페스트의 전체 예입니다.

<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<manifest xmlns:android="http://schemas.android.com/apk/res/android">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:supportsRtl="true"
android:theme="@style/AppTheme">

<meta-data
android:name="com.google.android.gms.version"
android:value="@integer/google_play_services_version" />

<!--
The API key for Google Maps-based APIs.
-->
<meta-data
android:name="com.google.android.geo.API_KEY"
android:value="${MAPS_API_KEY}" />

<activity
android:name="com.example.polygons.PolyActivity"
android:exported="true"
android:label="@string/title_activity_maps">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

지도 추가

Android용 Maps SDK를 사용하여 지도를 표시합니다.

활동의 레이아웃 파일인 activity_maps.xml에
<fragment> 요소를 추가합니다. 이 요소는 지도의
컨테이너 역할을 하고 GoogleMap [https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap?hl=ko] 객체에 대한 액세스 권한을 제공하도록
SupportMapFragment [https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment?hl=ko]를 정의합니다. 이 튜토리얼에서는 이전 버전 Android 프레임워크와의 호환성을 위해 지도 프래그먼트의 Android 지원 라이브러리 버전을 사용합니다.

<!--
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<fragment xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools"
android:id="@+id/map"
android:name="com.google.android.gms.maps.SupportMapFragment"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context="com.example.polygons.PolyActivity" />

활동의 onCreate() [https://developer.android.com/reference/android/app/Activity.html?hl=ko#onCreate(android.os.Bundle)] 메서드에서 레이아웃 파일을 콘텐츠 뷰로
설정합니다. FragmentManager.findFragmentById() [https://developer.android.com/reference/android/app/FragmentManager.html?hl=ko#findFragmentById(int)]를 호출하여
지도 프래그먼트에 대한 핸들을 가져옵니다. 그런 다음
getMapAsync() [https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment?hl=ko#getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)]를 사용하여 지도 콜백에 등록합니다.

Java@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
.findFragmentById(R.id.map);
mapFragment.getMapAsync(this);

.findFragmentById(R.id.map) as SupportMapFragment?
mapFragment?.getMapAsync(this)
Javapublic class PolyActivity extends AppCompatActivity
implements
OnMapReadyCallback,
GoogleMap.OnPolylineClickListener,
GoogleMap.OnPolygonClickListener {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
.findFragmentById(R.id.map);
mapFragment.getMapAsync(this);
Polyline polyline1 = googleMap.addPolyline(new PolylineOptions()
.clickable(true)
.add(
new LatLng(-35.016, 143.321),
new LatLng(-34.747, 145.592),
new LatLng(-34.364, 147.891),
new LatLng(-33.501, 150.217),
new LatLng(-32.306, 149.248),
new LatLng(-32.491, 147.309)));

googleMap.setOnPolygonClickListener(this);

.findFragmentById(R.id.map) as SupportMapFragment?
mapFragment?.getMapAsync(this)
.clickable(true)
.add(
LatLng(-35.016, 143.321),
LatLng(-34.747, 145.592),
LatLng(-34.364, 147.891),
LatLng(-33.501, 150.217),
LatLng(-32.306, 149.248),
LatLng(-32.491, 147.309)))

googleMap.setOnPolygonClickListener(this)
JavaPolyline polyline1 = googleMap.addPolyline(new PolylineOptions()
.clickable(true)
.add(
new LatLng(-35.016, 143.321),
new LatLng(-34.747, 145.592),
new LatLng(-34.364, 147.891),
new LatLng(-33.501, 150.217),
new LatLng(-32.306, 149.248),
new LatLng(-32.491, 147.309)));PolyActivity.java [https://github.com/googlemaps-samples/android-samples/blob/41588f7b704fb495902b1347572ccf7d3d4d23ab/tutorials/java/Polygons/app/src/main/java/com/example/polygons/PolyActivity.java#L82-L90]

Kotlinval polyline1 = googleMap.addPolyline(PolylineOptions()
.clickable(true)
.add(
LatLng(-35.016, 143.321),
LatLng(-34.747, 145.592),
LatLng(-34.364, 147.891),
LatLng(-33.501, 150.217),
LatLng(-32.306, 149.248),
LatLng(-32.491, 147.309)))PolyActivity.kt [https://github.com/googlemaps-samples/android-samples/blob/41588f7b704fb495902b1347572ccf7d3d4d23ab/tutorials/kotlin/Polygons/app/src/main/java/com/example/polygons/PolyActivity.kt#L74-L82]

다중선의 클릭 이벤트를 처리하려면 다중선의 clickable 옵션을
true로 설정합니다. 이 튜토리얼의 뒷부분에 이벤트 처리에 대해 자세히 설명되어
있습니다.

다중선과 함께 임의의 데이터 저장

다중선 및 기타 도형 객체와 함께 임의의 데이터 객체를 저장할 수 있습니다.

Polyline.setTag() [https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline?hl=ko#setTag(java.lang.Object)]를 호출하여 다중선과 함께 데이터 객체를
저장합니다. 아래 코드에서는 다중선의 유형을 나타내는 임의의 태그(A)를
정의합니다.

JavaPolyline polyline1 = googleMap.addPolyline(new PolylineOptions()
.clickable(true)
.add(
new LatLng(-35.016, 143.321),
new LatLng(-34.747, 145.592),
new LatLng(-34.364, 147.891),
new LatLng(-33.501, 150.217),
new LatLng(-32.306, 149.248),
new LatLng(-32.491, 147.309)));

Kotlinval polyline1 = googleMap.addPolyline(PolylineOptions()
.clickable(true)
.add(
LatLng(-35.016, 143.321),
LatLng(-34.747, 145.592),
LatLng(-34.364, 147.891),
LatLng(-33.501, 150.217),
LatLng(-32.306, 149.248),
LatLng(-32.491, 147.309)))

다음 섹션에 설명된 대로 Polyline.getTag() [https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline?hl=ko#getTag()]를 사용하여
데이터를 가져옵니다.

다중선에 맞춤 스타일 지정 추가

PolylineOptions [https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions?hl=ko] 객체에서 다양한 스타일 속성을
지정할 수 있습니다. 스타일 지정 옵션에는 획 색상,
획 두께, 획 패턴, 연결부 유형, 시작 및 끝 모양이 있습니다. 특정
속성을 지정하지 않으면 API에서 해당 속성에 기본값을
사용합니다.

다음 코드에서는 선 끝에 둥근 모양을 적용하고, 선의 시작 부분에는 다중선의
유형에 따라 다른 모양을 적용합니다. 여기에서 유형은
다중선의 데이터 객체에 저장된 임의의 속성입니다. 샘플에서는
획 두께, 획 색상, 연결부 유형도 지정합니다.

Javaprivate static final int COLOR_BLACK_ARGB = 0xff000000;
private static final int POLYLINE_STROKE_WIDTH_PX = 12;

/**
* Styles the polyline, based on type.
* @param polyline The polyline object that needs styling.
*/
private void stylePolyline(Polyline polyline) {
String type = "";
new CustomCap(
BitmapDescriptorFactory.fromResource(R.drawable.ic_arrow), 10));
break;
case "B":
break;
polyline.setWidth(POLYLINE_STROKE_WIDTH_PX);
polyline.setColor(COLOR_BLACK_ARGB);
polyline.setJointType(JointType.ROUND);
Kotlinprivate val COLOR_BLACK_ARGB = -0x1000000
private val POLYLINE_STROKE_WIDTH_PX = 12

/**
* Styles the polyline, based on type.
* @param polyline The polyline object that needs styling.
*/
private fun stylePolyline(polyline: Polyline) {
BitmapDescriptorFactory.fromResource(R.drawable.ic_arrow), 10f)
polyline.width = POLYLINE_STROKE_WIDTH_PX.toFloat()
polyline.color = COLOR_BLACK_ARGB
polyline.jointType = JointType.ROUND
Javapublic class PolyActivity extends AppCompatActivity
implements
OnMapReadyCallback,
GoogleMap.OnPolylineClickListener,
GoogleMap.OnPolygonClickListener {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
.findFragmentById(R.id.map);
mapFragment.getMapAsync(this);
Polyline polyline1 = googleMap.addPolyline(new PolylineOptions()
.clickable(true)
.add(
new LatLng(-35.016, 143.321),
new LatLng(-34.747, 145.592),
new LatLng(-34.364, 147.891),
new LatLng(-33.501, 150.217),
new LatLng(-32.306, 149.248),
new LatLng(-32.491, 147.309)));

googleMap.setOnPolygonClickListener(this);

.findFragmentById(R.id.map) as SupportMapFragment?
mapFragment?.getMapAsync(this)
.clickable(true)
.add(
LatLng(-35.016, 143.321),
LatLng(-34.747, 145.592),
LatLng(-34.364, 147.891),
LatLng(-33.501, 150.217),
LatLng(-32.306, 149.248),
LatLng(-32.491, 147.309)))

googleMap.setOnPolygonClickListener(this)
Javaprivate static final int PATTERN_GAP_LENGTH_PX = 20;
private static final PatternItem DOT = new Dot();
private static final PatternItem GAP = new Gap(PATTERN_GAP_LENGTH_PX);

/**
* Listens for clicks on a polyline.
* @param polyline The polyline object that the user has clicked.
*/
@Override
public void onPolylineClick(Polyline polyline) {
Toast.makeText(this, "Route type " + polyline.getTag().toString(),
Toast.LENGTH_SHORT).show();
Kotlinprivate val PATTERN_GAP_LENGTH_PX = 20
private val DOT: PatternItem = Dot()
private val GAP: PatternItem = Gap(PATTERN_GAP_LENGTH_PX.toFloat())

/**
* Listens for clicks on a polyline.
* @param polyline The polyline object that the user has clicked.
*/
override fun onPolylineClick(polyline: Polyline) {
Toast.makeText(this, "Route type " + polyline.tag.toString(),
Toast.LENGTH_SHORT).show()
Java// Add polygons to indicate areas on the map.
Polygon polygon1 = googleMap.addPolygon(new PolygonOptions()
.clickable(true)
.add(
new LatLng(-27.457, 153.040),
new LatLng(-33.852, 151.211),
new LatLng(-37.813, 144.962),
new LatLng(-34.928, 138.599)));
Kotlin// Add polygons to indicate areas on the map.
val polygon1 = googleMap.addPolygon(PolygonOptions()
.clickable(true)
.add(
LatLng(-27.457, 153.040),
LatLng(-33.852, 151.211),
LatLng(-37.813, 144.962),
LatLng(-34.928, 138.599)))
Javaprivate static final int COLOR_WHITE_ARGB = 0xffffffff;
private static final int COLOR_DARK_GREEN_ARGB = 0xff388E3C;
private static final int COLOR_LIGHT_GREEN_ARGB = 0xff81C784;
private static final int COLOR_DARK_ORANGE_ARGB = 0xffF57F17;
private static final int COLOR_LIGHT_ORANGE_ARGB = 0xffF9A825;

private static final int POLYGON_STROKE_WIDTH_PX = 8;
private static final int PATTERN_DASH_LENGTH_PX = 20;
private static final PatternItem DASH = new Dash(PATTERN_DASH_LENGTH_PX);

Arrays.asList(DOT, GAP, DASH, GAP);

/**
* Styles the polygon, based on type.
* @param polygon The polygon object that needs styling.
*/
private void stylePolygon(Polygon polygon) {
String type = "";
List<PatternItem> pattern = null;
int strokeColor = COLOR_BLACK_ARGB;
int fillColor = COLOR_WHITE_ARGB;

switch (type) {
strokeColor = COLOR_DARK_GREEN_ARGB;
fillColor = COLOR_LIGHT_GREEN_ARGB;
break;
case "beta":
strokeColor = COLOR_DARK_ORANGE_ARGB;
fillColor = COLOR_LIGHT_ORANGE_ARGB;
break;
polygon.setStrokeWidth(POLYGON_STROKE_WIDTH_PX);
polygon.setStrokeColor(strokeColor);
polygon.setFillColor(fillColor);
Kotlinprivate val COLOR_WHITE_ARGB = -0x1
private val COLOR_DARK_GREEN_ARGB = -0xc771c4
private val COLOR_LIGHT_GREEN_ARGB = -0x7e387c
private val COLOR_DARK_ORANGE_ARGB = -0xa80e9
private val COLOR_LIGHT_ORANGE_ARGB = -0x657db
private val POLYGON_STROKE_WIDTH_PX = 8
private val PATTERN_DASH_LENGTH_PX = 20

private val DASH: PatternItem = Dash(PATTERN_DASH_LENGTH_PX.toFloat())

/**
* Styles the polygon, based on type.
* @param polygon The polygon object that needs styling.
*/
private fun stylePolygon(polygon: Polygon) {
strokeColor = COLOR_DARK_GREEN_ARGB
fillColor = COLOR_LIGHT_GREEN_ARGB
strokeColor = COLOR_DARK_ORANGE_ARGB
fillColor = COLOR_LIGHT_ORANGE_ARGB
polygon.strokeWidth = POLYGON_STROKE_WIDTH_PX.toFloat()
polygon.strokeColor = strokeColor
polygon.fillColor = fillColor