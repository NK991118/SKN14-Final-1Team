Source URL: https://developers.google.com/maps/documentation/navigation/android-sdk/set-up-project-v4?hl=ko
Title: 프로젝트 설정 -- 버전 4.99 이하

의견 보내기

프로젝트 설정 -- 버전 4.99 이하

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

중요: 이 가이드는 Android 버전 4.99 이하의 내비게이션 SDK를 사용하는 프로젝트에만 적용됩니다. 프로젝트를 버전 5.0 이상으로 업데이트한 경우 최신 패키지 설치, 버전, 종속 항목 세부정보에 관한 설정 안내 [https://developers.google.com/maps/documentation/navigation/android-sdk/set-up-project?hl=ko]를 따르세요.

이 가이드에는 Android용 Navigation SDK 사용을 위한 빌드 구성 요구사항이 나열되어 있습니다. 이 안내에서는 Android IDE가 설치되어 있고 Android 개발에 익숙하다고 가정합니다.
경고: Navigation SDK (버전 4.0)부터 API는 더 이상 Android KitKat 또는 Lollipop (4.4~5.1)을 지원하지 않습니다.
Navigation SDK 사용을 위한 최소 요구사항

이러한 요구사항은 Android용 Navigation SDK 버전 4.99 이하에 적용됩니다.

Google Cloud 콘솔 [https://console.cloud.google.com/?hl=ko]

Navigation SDK가 사용 설정된 프로젝트 프로비저닝은 Google Maps Platform 담당자에게 문의하세요.
앱이 API 수준 30 이상을 타겟팅해야 합니다.
Navigation SDK로 빌드된 앱을 실행하려면 Android 기기에 Google Play 서비스 [https://developers.google.com/android/guides/overview?hl=ko]가 설치되고 사용 설정되어 있어야 합니다.
저작자 표시 및 라이선스 텍스트 [https://developers.google.com/maps/documentation/navigation/android-sdk/set-up-project-v4?hl=ko#include_the_required_attributions_in_your_app]를 앱에 추가해야 합니다.

프로젝트 설정: Cloud 콘솔 프로젝트 및 Android 프로젝트

앱을 빌드하거나 테스트하려면 먼저 Cloud 콘솔 프로젝트를 만들고 API 키 사용자 인증 정보를 추가해야 합니다. Navigation SDK에 액세스하려면 프로젝트에 프로비저닝이 있어야 합니다. Cloud 콘솔 프로젝트 내의 모든 키에 Navigation SDK에 대한 동일한 액세스 권한이 부여됩니다. 하나의 키에 연결된 개발 프로젝트가 두 개 이상일 수 있습니다. 콘솔 프로젝트가 이미 있는 경우 현재 프로젝트에 키를 추가할 수 있습니다.

프로젝트를 설정하는 데 필요한 정보:

Google Maps Platform 담당자의 이름입니다.
Cloud 콘솔 프로젝트의 이름입니다.
나중에 필요한 패키지 이름이 있는 Android 앱 개발 프로젝트의 이름입니다.
개발 머신의 SHA-1 인증서 디지털 지문입니다.

설정 방법

즐겨 사용하는 웹브라우저에서 Cloud 콘솔에 로그인하고 Cloud 콘솔 [https://console.cloud.google.com/?hl=ko] 프로젝트를 만듭니다.
Android 스튜디오와 같은 IDE에서 Android 앱 개발 프로젝트를 만들고 패키지 이름을 기록해 둡니다.
Google Maps Platform 담당자에게 연락하여 Cloud 콘솔 프로젝트의 Navigation SDK에 대한 액세스 권한을 제공하세요.
웹브라우저에서 Cloud 콘솔 대시보드를 사용하는 동안 제한이 있는 API 키를 생성할 사용자 인증 정보를 만듭니다.
API 키 페이지의 애플리케이션 제한사항 영역에서 Android 앱을 클릭합니다.
패키지 이름 및 디지털 지문 추가를 클릭한 다음 개발 프로젝트의 패키지 이름과 해당 키의 SHA-1 디지털 지문을 입력합니다.
저장을 클릭합니다.

프로젝트에 Navigation SDK 추가

Navigation SDK는 Maven을 사용하거나 AAR 번들 [https://developer.android.com/studio/projects/android-library.html?hl=ko#aar-contents]로 사용할 수 있습니다.
개발 프로젝트를 만든 후 다음 방법 중 하나를 사용하여 SDK를 통합할 수 있습니다.
중요: 프로젝트에서 Maven 종속 항목을 사용하여 Android용 Navigation SDK를 연결해야 합니다. 향후에는 AAR 번들 다운로드를 사용할 수 없습니다.
Navigation SDK v4.5 이상에 Maven 사용 (권장)

다음에서는 google() Maven 저장소를 사용합니다. 이는 프로젝트에 Navigation SDK를 추가하는 가장 간단하고 권장되는 방법입니다.
참고: 이 접근 방식은 이전 아티팩트 ID를 사용하는 Navigation SDK에 종속된 일부 라이브러리와 호환되지 않습니다. 여기에는 Driver SDK v4.4 이하 버전이 포함됩니다.
Gradle 또는 Maven 구성에 다음 종속 항목을 추가하고 VERSION_NUMBER 자리표시자를 Android용 Navigation SDK 버전으로 대체합니다.

Gradle모듈 수준 build.gradle에 다음을 추가합니다.
dependencies {
...
implementation 'com.google.android.libraries.navigation:navigation:VERSION_NUMBER'
Mavenpom.xml에 다음을 추가합니다.
<dependencies>
...
<dependency>
<groupId>com.google.android.libraries.navigation</groupId>
<artifactId>navigation</artifactId>
<version>VERSION_NUMBER</version>
</dependency>
</dependencies>

Maps SDK를 사용하는 종속 항목이 있는 경우 Maps SDK를 사용하는 선언된 각 종속 항목에서 종속 항목을 제외해야 합니다.
<dependencies>
<dependency>
<groupId>project.that.brings.in.maps</groupId>
<artifactId>MapsConsumer</artifactId>
<version>1.0</version>
<exclusions>
<!-- Navigation SDK already bundles Maps SDK. You must exclude it to prevent duplication-->
<exclusion>  <!-- declare the exclusion here -->
<groupId>com.google.android.gms</groupId>
<artifactId>play-services-maps</artifactId>
</exclusion>
</exclusions>
</dependency>
</dependencies>

v4.5 이전의 Navigation SDK 또는 Driver SDK와 함께 Maven 사용

Navigation SDK는 v4 버전의 나머지 기간 동안 원래 Maven 저장소를 사용하여 계속 사용할 수 있습니다. 이 라이브러리는 위의 버전과 동일한 업데이트가 적용된 동일한 라이브러리이며 전환 중에 Driver SDK 및 기타 라이브러리와의 호환성을 제공합니다.
이 종속 항목을 사용하려면 컴파일할 때 gcloud을 사용하여 클라우드 프로젝트에 로그인해야 합니다.

Consumer SDK 문서의 기본 요건 [https://developers.google.com/maps/documentation/transportation-logistics/on-demand-rides-deliveries-solution/trip-order-progress/consumer-sdk/consumer_sdk_quickstart_android?hl=ko#prerequisites] 섹션에 설명된 대로 Google의 Maven 저장소에 액세스할 수 있도록 환경을 설정합니다. Navigation SDK에 대한 액세스는 작업공간 그룹을 통해 제어됩니다.
Gradle 또는 Maven 구성에 다음 종속 항목을 추가하고 VERSION_NUMBER 자리표시자를 Navigation SDK 버전으로 대체합니다.

Gradle모듈 수준 build.gradle에 다음을 추가합니다.
dependencies {
...
implementation 'com.google.android.maps:navsdk:VERSION_NUMBER'
Mavenpom.xml에 다음을 추가합니다.
<dependencies>
...
<dependency>
<groupId>com.google.android.maps</groupId>
<artifactId>navsdk</artifactId>
<version>VERSION_NUMBER</version>
</dependency>
</dependencies>

Maps SDK를 사용하는 종속 항목이 있는 경우 Maps SDK를 사용하는 선언된 각 종속 항목에서 종속 항목을 제외해야 합니다.
<dependencies>
<dependency>
<groupId>project.that.brings.in.maps</groupId>
<artifactId>MapsConsumer</artifactId>
<version>1.0</version>
<exclusions>
<!-- Navigation SDK already bundles Maps SDK. You must exclude it to prevent duplication-->
<exclusion>  <!-- declare the exclusion here -->
<groupId>com.google.android.gms</groupId>
<artifactId>play-services-maps</artifactId>
</exclusion>
</exclusions>
</dependency>
</dependencies>

다운로드한 AAR 번들 사용 (권장되지 않음)

Navigation SDK는 AAR 번들 [https://developer.android.com/studio/projects/android-library.html?hl=ko#aar-contents]로도 제공됩니다.
개발 프로젝트를 만든 후 SDK를 통합할 수 있습니다. 이 안내에서는 IDE로 Android 스튜디오를 사용한다고 가정합니다.

공유 Google Drive [https://drive.google.com/drive/folders/1FLR7wtNgLlbn0nThbLMIMtoRzt4bGOwk?hl=ko]에서 최신 버전의 Navigation SDK를 다운로드하고 추출합니다. 액세스 권한이 없으면 담당자에게 문의하세요.
Android 스튜디오에서 프로젝트를 열고 SDK Manager를 사용하여 Google Play 서비스 패키지를 추가 [https://developer.android.com/studio/intro/update.html?hl=ko#sdk-manager]합니다.
ZIP 파일 디렉터리에서 libs/google_navigation_navmap.aar를 프로젝트의 app/libs 디렉터리에 복사합니다.
모듈 수준 build.gradle에 다음을 추가합니다.
implementation(name: 'google_navigation_navmap', ext: 'aar')

최상위 build.gradle에 다음을 추가합니다.
allprojects {
...
Gradle Scripts 폴더에서 local.properties 파일을 열고 android.useDeprecatedNdk=true를 추가합니다.

Gradle 빌드 스크립트 업데이트

build.gradle (Module:app) 파일을 열고 다음 가이드라인을 사용하여 Navigation SDK 요구사항을 충족하도록 설정을 업데이트하고 최적화 옵션 설정도 고려하세요.

Navigation SDK에 필요한 설정

minSdkVersion을 23 이상으로 설정합니다.
targetSdkVersion을 30 이상으로 설정합니다.
javaMaxHeapSize를 늘리는 dexOptions 설정을 추가합니다.
추가 라이브러리의 위치를 설정합니다.
Navigation SDK용 repositories 및 dependencies 추가
종속 항목의 버전 번호를 사용 가능한 최신 버전으로 바꿉니다.

빌드 시간을 줄이는 선택적 설정

R8/ProGuard를 사용하여 코드 축소 및 리소스 축소 [https://developer.android.com/studio/build/shrink-code.html?hl=ko]를 사용 설정하여 종속 항목에서 사용하지 않는 코드와 리소스를 삭제합니다. R8/ProGuard 단계 실행에 시간이 너무 오래 걸리는 경우 개발 작업을 위해 multidex [https://developer.android.com/studio/build/multidex?hl=ko]를 사용 설정하는 것이 좋습니다.
빌드에 포함된 언어 번역 수 줄이기: 개발 중에 한 언어에 대해 resConfigs를 설정합니다. 최종 빌드의 경우 실제로 사용하는 언어에 대해 resConfigs를 설정합니다. 기본적으로 Gradle에는 Navigation SDK에서 지원하는 모든 언어의 리소스 문자열이 포함됩니다.

다음은 애플리케이션의 Gradle 빌드 스크립트의 예입니다. 사용 중인 Navigation SDK 버전이 이 문서보다 약간 앞서거나 뒤처질 수 있으므로 업데이트된 종속 항목 세트는 샘플 앱 [https://developers.google.com/maps/documentation/navigation/android-sdk/try-demo?hl=ko]을 확인하세요.
apply plugin: 'com.android.application'
apply plugin: 'com.google.cloud.artifactregistry.gradle-plugin'

ext {
androidxVersion = "1.0.0"
lifecycle_version = "1.1.1"
buildToolsVersion '28.0.3'

defaultConfig {
applicationId "<your id>"
targetSdkVersion 30
versionCode 1
versionName "1.0"
multiDexEnabled true
proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
targetCompatibility JavaVersion.VERSION_1_8

Google 지도 프로젝트에 Android용 Secrets Gradle 플러그인을 설치하려면 다음 단계를 따르세요.

Android 스튜디오에서 최상위 수준 build.gradle.kts 또는 build.gradle 파일을 열고 다음 코드를 buildscript 아래 dependencies 요소에 추가합니다.

Kotlin
buildscript {
dependencies {
classpath("com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:2.0.1")
buildscript {
dependencies {
classpath "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:2.0.1"
plugins {
plugins {

최상위 수준 디렉터리에서 secrets.properties 파일과 동일한 폴더에 local.defaults.properties 파일을 만든 후 다음 코드를 추가합니다.

참고: 아래에 표시된 대로 코드를 입력하세요. DEFAULT_API_KEY를 API 키로 바꾸지 마세요.

MAPS_API_KEY=DEFAULT_API_KEY

이 파일의 목적은 secrets.properties 파일이 없는 경우 빌드에 실패하지 않도록 API 키의 백업 위치를 제공하는 것입니다. 이는 버전 제어 시스템에서 secrets.properties가 빠진 앱을 복제하거나 API 키를 제공하는 secrets.properties 파일을 아직 로컬에서 생성하지 않은 경우 발생할 수 있습니다.

AndroidManifest.xml 파일에서 com.google.android.geo.API_KEY로 이동한 후 android:value attribute를 업데이트합니다.
<meta-data> 태그가 존재하지 않으면 <application> 태그의 하위 요소로 태그를 만듭니다.

<meta-data
android:name="com.google.android.geo.API_KEY"
android:value="${MAPS_API_KEY}" />
참고:
com.google.android.geo.API_KEY는 API 키의 권장되는 메타데이터 이름입니다. 이 이름의 키는 Android 플랫폼에서 Android용 Navigation SDK 등
여러 Google 지도 기반 API를 인증하는 데
사용할 수 있습니다. 이전 버전과의 호환성을 위해 API에서는
com.google.android.maps.v2.API_KEY 이름도 지원합니다. 이 기존 이름을
사용하면 Android 지도 API v2에 대한 인증만 가능합니다. 애플리케이션에서는
API 키 메타데이터 이름을 하나만 지정할 수 있습니다. 두 개가 모두 지정되면 API에서
예외가 발생합니다.

Android 스튜디오에서 모듈 수준 build.gradle.kts 또는 build.gradle 파일을 열고 secrets 속성을 수정합니다. secrets 속성이 없으면 추가합니다.

플러그인의 속성을 수정하여 propertiesFileName을 secrets.properties로 설정하고, defaultPropertiesFileName을 local.defaults.properties로 설정하고, 다른 속성을 설정합니다.

Kotlin
secrets {

secrets {

LICENSES.txt

의견 보내기