Source URL: https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/trips/update-trip?hl=ko
Title: 이동 업데이트 및 상태 관리

이동 업데이트 및 상태 관리

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 문서에서는 여행을 업데이트하고 상태를 관리하는 방법을 설명합니다. 여기에는 필드 마스크를 사용하여 여행의 관련 필드를 설정하는 작업이 포함됩니다. 이 가이드에서는 이 사이트에 설명된 대로 Fleet Engine을 설정했고 여정에 할당된 차량을 사용하고 있다고 가정합니다.

여행 업데이트 기본사항

시스템은 다음과 같은 상황에서 Fleet Engine을 사용하여 여정을 업데이트합니다.

여행이 생성된 후 차량을 여행에 할당하는 경우
이동 상태가 변경되는 경우(예: 차량이 경유지를 통과하는 경우)
승객 수, 하차 지점 등 여행 필드를 업데이트하는 경우

여행을 업데이트하려면 gRPC 또는 REST를 사용하여 요청을 전송합니다.

UpdateTrip() 메서드: gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/trips/rpc/maps.fleetengine.v1?hl=ko#maps.fleetengine.v1.TripService] 또는 REST [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/trips/rest/v1/providers.trips/update?hl=ko]
UpdateTripRequest 메시지: gRPC [https://developers.google.com/maps/documentation/mobility/fleet-engine/reference/trips/rpc/maps.fleetengine.v1?hl=ko#updatetriprequest]만 해당

Fleet Engine: 서비스 계정 역할 [https://developers.google.com/maps/documentation/mobility/fleet-engine/essentials/set-up-fleet/service-accounts?hl=ko]에 설명된 대로 프로젝트의 서비스 계정에 적절한 사용자 인증 정보를 사용합니다.

여행 필드 업데이트

단일 목적지 여행 만들기의 여행 필드 [https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/trips/create-trip?hl=ko#trip-fields]에 설명된 여행 필드를 업데이트할 수 있습니다. 예를 들어 이동을 만든 후 먼저 차량을 찾은 다음 이동을 수행할 차량과 연결되도록 이동의 vehicle_id 필드를 업데이트하는 것이 일반적입니다.
중요: 새 여정에만 vehicle_id를 설정할 수 있습니다. 여행의 차량을 변경하려면 여행 상태를 NEW로 설정한 다음 다른 차량을 할당해야 합니다.
필드 마스크 사용

필드 마스크는 API 호출자가 요청이 가져오거나 업데이트해야 하는 필드를 나열하는 방법입니다. FieldMask [https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask]를 사용하면 불필요한 작업을 방지하고 성능을 개선할 수 있습니다. Fleet Engine은 모든 리소스에서 필드를 업데이트하는 데 필드 마스크를 사용합니다.

차량 ID로 여정 업데이트

Fleet Engine이 경로를 따라 차량을 추적할 수 있도록 차량 ID로 이동을 구성해야 합니다. 다음 코드 샘플은 차량 ID로 이동을 업데이트하는 방법을 보여줍니다.
static final String PROJECT_ID = "my-rideshare-co-gcp-project";
static final String TRIP_ID = "trip-8241890";

String tripName = "providers/" + PROJECT_ID + "/trips/" + TRIP_ID;

TripServiceBlockingStub tripService = TripService.newBlockingStub(channel);

Trip trip = Trip.newBuilder()
.setVehicleId("8241890")
.build();

UpdateTripRequest updateTripRequest =
UpdateTripRequest.newBuilder()      // No need for the header.
.setName(tripName)
.setTrip(trip)
.setUpdateMask(FieldMask.newBuilder().addPaths("vehicle_id"))
.build();

Trip updatedTrip = tripService.updateTrip(updateTripRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:                    // Neither the trip nor vehicle exist.
break;
case PERMISSION_DENIED:
break;
static final String TRIP_ID = "trip-8241890";

String tripName = "providers/" + PROJECT_ID + "/trips/" + TRIP_ID;

TripServiceBlockingStub tripService = TripService.newBlockingStub(channel);

Trip trip = Trip.newBuilder()
.setTripStatus(TripStatus.ARRIVED_AT_PICKUP)
.build();

UpdateTripRequest updateTripRequest = UpdateTripRequest.newBuilder()
.setName(tripName)
.setTrip(trip)
.setUpdateMask(FieldMask.newBuilder().addPaths("trip_status"))
.build();

Trip updatedTrip = tripService.updateTrip(updateTripRequest);
Status s = e.getStatus();
switch (s.getCode()) {
case NOT_FOUND:            // The trip doesn't exist.
break;
case FAILED_PRECONDITION:  // The given trip status is invalid.
break;
case PERMISSION_DENIED:
break;