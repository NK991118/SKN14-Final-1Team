Source URL: https://developers.google.com/maps/documentation/javascript/elevation?hl=ko
Title: 고도 서비스

의견 보내기

고도 서비스

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

참고: 서버 측 라이브러리

이 페이지에서는 Maps JavaScript API와 함께 사용할 수 있는 클라이언트 측 서비스를 설명합니다.
서버에서 Google 지도 웹 서비스를 사용하려면 Google 지도 서비스용 Node.js 클라이언트 [https://developers.google.com/maps/web-services/client-library?hl=ko]를 참고하세요. 이 링크의 페이지에는 Google 지도 서비스용 Java 클라이언트, Python 클라이언트, Go 클라이언트도 소개되어 있습니다.

개요

참고 항목: Maps JavaScript API 참조:
고도 [https://developers.google.com/maps/documentation/javascript/reference/elevation?hl=ko]

고도 서비스는 해저 지형(음수 값 반환)을 포함하는 지표면 위치의 고도 데이터를 제공합니다. 사용자가 요청하는 정확한 위치의 정확한 고도 측정값을 Google이 보유하고 있지 않는 경우에는 가장 가까운 위치 4곳의 보간 평균 값을 반환합니다.

ElevationService 객체는 전 세계 위치의 고도 데이터를 쿼리할 수 있는 간단한 인터페이스를 제공합니다. 또한 경로를 따라 샘플링된 고도 데이터를 요청할 수도 있어, 이를 통해 경로를 따라 등거리 고도 변화를 계산할 수 있습니다. ElevationService 객체는 고도 요청을 받고 고도 데이터를 반환하는 Google 지도 API 고도 서비스와 통신합니다.

고도 서비스를 사용하여 하이킹 및 자전거 애플리케이션, 모바일 위치 지정 애플리케이션 또는 저해상도 측량 애플리케이션을 개발할 수 있습니다.

시작하기

Maps JavaScript API에서 고도 서비스를 사용하려면 먼저 Google Cloud 콘솔에서 Maps JavaScript API에 설정한 것과 동일한 프로젝트에서 Elevation API를 사용 설정해야 합니다.
사용 설정된 API의 목록을 보려면 다음 단계를 따르세요.

Google Cloud 콘솔 [https://console.cloud.google.com/project/_/apiui/apis/enabled?utm_source=Docs_EnabledAPIsView&hl=ko]로 이동합니다.

프로젝트 선택 버튼을 클릭한 후 Maps JavaScript API를 위해 설정한 것과 동일한 프로젝트를 선택하고 열기를 클릭합니다.
대시보드의 API 목록에서 Elevation API를 찾습니다.
목록에 API가 표시되면 완료된 것입니다. API가 표시되지 않으면 API를 사용 설정하세요.

페이지 상단에서 API 사용 설정을 선택하여 라이브러리 탭을 표시합니다. 또는 왼쪽 사이드 메뉴에서 라이브러리를 선택합니다.
Elevation API를 검색한 후 결과 목록에서 선택합니다.

사용 설정을 선택합니다. 과정이 완료되면 Elevation API가 대시보드의 API 목록에 표시됩니다.

가격 정보 및 정책
가격 책정
JavaScript 고도 서비스의 가격 및 사용 정책에 대해 알아보려면 Elevation API의 사용량 및 결제 [https://developers.google.com/maps/documentation/elevation/usage-and-billing?hl=ko]를 참고하세요.

정책
고도 서비스는 Elevation API에 대해 설명된 정책 [https://developers.google.com/maps/documentation/elevation/policies?hl=ko]에 따라 사용해야 합니다.

고도 요청

Google Maps API는 외부 서버를 호출해야 하므로 고도 서비스 액세스는 비동기식입니다. 따라서 요청 완료 시 실행할 콜백 메서드를 전달해야 합니다. 이 콜백 메서드에서 결과를 처리해야 합니다. 고도 서비스는 상태 코드(ElevationStatus) 및 개별 ElevationResult 객체의 배열을 반환합니다.

ElevationService는 다음 두 가지 유형의 요청을 처리합니다.

getElevationForLocations() 메서드를 사용한 별도의 위치 요청. 이 요청에는 LocationElevationRequest 객체를 사용하여 하나 이상의 위치 목록이 전달됩니다.
getElevationAlongPath() 메서드를 사용한 경로에 있는 일련의 연결된 지점의 고도 요청. 이 요청에는 PathElevationRequest 객체 내의 순서가 지정된 경로 꼭짓점의 집합이 전달됩니다. 경로를 따라 고도를 요청할 때는 해당 경로를 따라 추출하고자 하는 샘플의 수를 나타내는 매개변수도 전달해야 합니다.

각 메서드는 반환된 ElevationResult 및 ElevationStatus 객체를 처리하기 위한 콜백 메서드도 전달해야 합니다.

위치 고도 요청

LocationElevationRequest 객체 리터럴에는 다음 필드가 포함되어 있습니다.

locations[]: LatLng

서비스 할당량을 초과하지 않는 한 배열 내에 원하는 수의 좌표를 전달할 수 있습니다.
여러 좌표를 전달하는 경우 반환되는 데이터의 정확도가 단일 좌표에 대해 데이터를 요청할 경우보다 낮을 수도 있습니다.

샘플링된 경로 고도 요청

PathElevationRequest 객체 리터럴에는 다음 필드가 포함되어 있습니다.

path[]: LatLng,
samples: Number

위치 지정 요청과 마찬가지로 path 매개변수는 경도 및 위도 값의 집합을 지정합니다. 하지만 위치 지정 요청과 달리 path는 순서가 지정된 꼭짓점의 집합을 지정합니다. 경로 요청은 꼭짓점의 고도 데이터를 반환하는 대신 경로의 길이를 따라 샘플링되며, 여기에서 각 샘플은 끝점을 포함하여 다른 샘플에서 같은 거리만큼 떨어져 있습니다.

고도 응답

각각의 유효한 요청에 대해 고도 서비스는 정의된 콜백에 ElevationStatus 객체와 함께 ElevationResult 객체의 집합을 반환합니다.

고도 상태

각 고도 요청은 콜백 함수 내에 ElevationStatus 코드를 반환합니다. status 코드에는 다음 값 중 하나가 포함됩니다.

OK - 서비스 요청이 성공적이었음을 나타냅니다.
INVALID_REQUEST - 서비스 요청의 형식이 잘못되었음을 나타냅니다.
OVER_QUERY_LIMIT - 요청자가 할당량을 초과했음을 나타냅니다.
REQUEST_DENIED - 서비스에서 요청이 완료되지 않았음을 나타냅니다. 잘못된 매개변수가 원인일 가능성이 큽니다.
UNKNOWN_ERROR - 알 수 없는 오류를 나타냅니다.

OK의 상태 코드를 검사하여 콜백이 성공했는지 확인해야 합니다.

고도 결과

성공 시 콜백 함수의 results 인수에 ElevationResult 객체의 집합이 포함됩니다.
이러한 객체에는 다음과 같은 요소가 포함됩니다.

고도 데이터를 계산 중인 위치의 location 요소(LatLng 객체 포함). 경로 요청의 경우 location 요소 집합에 경로를 따라 샘플링된 지점이 포함됩니다.
위치의 고도를 미터 단위로 나타내는 elevation 요소.
고도가 보간된 데이터 점 사이의 최대 거리를 미터 단위로 나타내는 resolution 값. 해상도를 알 수 없는 경우에는 이 속성이 누락됩니다. 여러 지점이 전달되면 고도 데이터의 정밀도가 떨어지고 resolution 값이 커집니다. 특정 지점의 가장 정확한 고도 값을 구하려면 독립적으로 퀴리해야 합니다.

고도 예

다음 코드는 지도 클릭을 LocationElevationRequest 객체를 사용한 고도 요청으로 변환합니다.

TypeScript
function initMap(): void {

location: google.maps.LatLng,
elevator: google.maps.ElevationService,
infowindow: google.maps.InfoWindow
) {
.getElevationForLocations({
locations: [location],

"The elevation at this point <br>is " +
results[0].elevation +
" meters."
function initMap() {
.getElevationForLocations({
locations: [location],
"The elevation at this point <br>is " +
results[0].elevation +
" meters.",

function initMap(): void {

path: google.maps.LatLngLiteral[],
elevator: google.maps.ElevationService,
map: google.maps.Map
) {
.getElevationAlongPath({
path: path,
samples: 256,

data.addColumn("number", "Elevation");

for (let i = 0; i < results.length; i++) {
data.addRow(["", results[i].elevation]);

function initMap() {
.getElevationAlongPath({
path: path,
samples: 256,
data.addColumn("number", "Elevation");

for (let i = 0; i < results.length; i++) {
data.addRow(["", results[i].elevation]);