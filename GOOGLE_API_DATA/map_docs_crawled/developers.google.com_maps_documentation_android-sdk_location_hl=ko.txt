Source URL: https://developers.google.com/maps/documentation/android-sdk/location?hl=ko
Title: 위치 데이터

의견 보내기

위치 데이터

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

모바일 애플리케이션의 고유한 기능 중 하나는 위치 인식입니다.
모바일 사용자는 어디서나 기기를 휴대하므로 앱에 위치 인식 기능을 추가하면 사용자 상황에 보다 적합한 환경을 제공할 수 있습니다.

코드 샘플

GitHub의 ApiDemos 저장소 [https://github.com/googlemaps-samples/android-samples/blob/main/ApiDemos]에는 지도에서의 위치 사용을 보여주는 샘플이 있습니다.

Kotlin

MyLocationDemoActivity [https://github.com/googlemaps-samples/android-samples/blob/main/ApiDemos/kotlin/app/src/gms/java/com/example/kotlindemos/MyLocationDemoActivity.kt]: 런타임 권한 등
내 위치 레이어 [https://developers.google.com/maps/documentation/android-sdk/location?hl=ko#my-location] 사용
LocationSourceDemoActivity [https://github.com/googlemaps-samples/android-samples/blob/main/ApiDemos/kotlin/app/src/gms/java/com/example/kotlindemos/LocationSourceDemoActivity.kt]: 맞춤
LocationSource [https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource?hl=ko] 사용
CurrentPlaceDetailsOnMap [https://github.com/googlemaps-samples/android-samples/blob/main/tutorials/kotlin/CurrentPlaceDetailsOnMap/app/src/main/java/com/example/currentplacedetailsonmap/MapsActivityCurrentPlace.kt]: Android 기기의
현재 위치 찾기 및 해당 위치에 있는 장소(비즈니스
또는 기타 관심 장소)의 세부정보 표시. 지도에 현재 장소의 세부정보 [https://developers.google.com/maps/documentation/android-sdk/current-place-tutorial?hl=ko]를 표시하는 방법에 관한 튜토리얼을 참고하세요.

Java

MyLocationDemoActivity [https://github.com/googlemaps-samples/android-samples/blob/main/ApiDemos/java/app/src/gms/java/com/example/mapdemo/MyLocationDemoActivity.java]: 런타임 권한 등
내 위치 레이어 [https://developers.google.com/maps/documentation/android-sdk/location?hl=ko#my-location] 사용
LocationSourceDemoActivity [https://github.com/googlemaps-samples/android-samples/blob/main/ApiDemos/java/app/src/gms/java/com/example/mapdemo/LocationSourceDemoActivity.java]: 맞춤
LocationSource [https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource?hl=ko] 사용
CurrentPlaceDetailsOnMap [https://github.com/googlemaps-samples/android-samples/blob/main/tutorials/java/CurrentPlaceDetailsOnMap/app/src/main/java/com/example/currentplacedetailsonmap/MapsActivityCurrentPlace.java]: Android 기기의
현재 위치 찾기 및 해당 위치에 있는 장소(비즈니스
또는 기타 관심 장소)의 세부정보 표시. 지도에 현재 장소의 세부정보 [https://developers.google.com/maps/documentation/android-sdk/current-place-tutorial?hl=ko]를 표시하는 방법에 관한 튜토리얼을 참고하세요.

위치 데이터 사용하기

Android 기기에서 사용할 수 있는 위치 데이터에는
(여러 기술을 조합하여 찾아낸) 기기의 정확한 현재 위치,
이동 방향과 수단, 기기가 지오펜싱, 즉 사전 정의된 지리적 경계를 넘었는지
여부가 포함됩니다. 애플리케이션의 필요에 따라
여러 가지 위치 데이터 사용 방법 중에서 선택할 수
있습니다.

내 위치 레이어를 사용하면 간단한 방법으로 기기의 위치를 지도에 표시할 수
있지만 데이터는 제공되지 않습니다.
위치 데이터에 대한 모든 프로그래매틱 요청에 Google Play 서비스 Location API를
사용하는 것이 좋습니다.
LocationSource [https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource?hl=ko] 인터페이스를 사용하면 맞춤 위치 제공업체를
제공할 수 있습니다.

위치 정보 액세스 권한

앱에서 사용자의 위치에 액세스해야 하는 경우 앱에 관련
Android 위치 정보 액세스 권한을 추가하여 권한을 요청해야 합니다.

Android에서는 두 가지 위치 정보 액세스 권한을 제공합니다(ACCESS_COARSE_LOCATION 및 ACCESS_FINE_LOCATION). 선택한 권한에 따라 API에서 반환하는 위치의 정확도가 결정됩니다.

android.permission.ACCESS_COARSE_LOCATION [https://developer.android.com/reference/android/Manifest.permission.html?hl=ko#ACCESS_COARSE_LOCATION]
- API가 기기의 대략적인 위치를 반환할 수 있게 합니다. 이 권한은 대략적인 위치 정확성 [https://developer.android.com/training/location/permissions?hl=ko#accuracy]에 관한 문서에 설명된 대로 위치 서비스에서 추정하는 기기 위치를 제공합니다.
android.permission.ACCESS_FINE_LOCATION [https://developer.android.com/reference/android/Manifest.permission.html?hl=ko#ACCESS_FINE_LOCATION]
- API가 위성 위치 확인 시스템(GPS), Wi-Fi, 모바일 데이터 등의 이용 가능한 위치 데이터를 바탕으로 최대한 정확하게 위치를 파악할 수 있게 합니다.
참고: Android 12(API 수준 31) 이상에서는 앱이 ACCESS_FINE_LOCATION 런타임 권한을 요청하더라도 앱이 대략적인 위치 정보만 가져오도록 사용자가 요청할 수 있습니다. 이를 처리하려면 단일 런타임 요청에서 ACCESS_FINE_LOCATION 및 ACCESS_COARSE_LOCATION 권한을 모두 요청해야 합니다. 사용자가 대략적인 위치 정보만 허용할 수 있음 [https://developer.android.com/training/location/permissions?hl=ko#request-location-access-runtime]을 참고하세요.

앱 매니페스트에 권한 추가

앱이 작동하기 위해 대략적인 위치만 있으면 되는 경우 다음과 같이 앱의 매니페스트 파일에 ACCESS_COARSE_LOCATION 권한을 추가합니다.

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.myapp" >
...
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
...
</manifest>

그러나 정확한 위치가 필요한 경우 앱의 매니페스트 파일에 ACCESS_COARSE_LOCATION 및 ACCESS_FINE_LOCATION 권한을 모두 추가합니다.

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.myapp" >
...
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
...
</manifest>

런타임 권한 요청

Android 6.0(Marshmallow)에서는 새로운 권한 처리 모델이 도입되어
사용자의 앱 설치 및 업그레이드 과정이 간소화됩니다. 앱이
API 수준 23 이상을 타겟팅하는 경우 새 권한 모델을 사용할 수 있습니다.

앱이 새 권한 모델을 지원하고 기기에서 Android 6.0(Marshmallow) 이상이 실행되고 있다면,
사용자가 앱을 설치하거나 업그레이드할 때 권한을 부여할 필요가 없습니다.
앱에서 런타임에 필요한 권한이 있는지 확인하고
없는 경우 권한을 요청해야
합니다. 시스템에서 사용자에게 권한을 요청하는 대화상자를 표시합니다.

최고의 사용자 환경을 제공하려면 상황에 따라 권한을 요청하는 것이 중요합니다.
위치가 앱의 작동에 필수적인 경우 앱 시작 시
위치 정보 액세스 권한을 요청해야 합니다. 이 작업을 처리하는 좋은 방법은 사용자에게
권한이 필요한 이유를 설명하는 시작 화면 또는 마법사를 사용하는
것입니다.

앱의 일부 기능에만 권한이 필요한 경우에는
위치 정보 액세스 권한이 필요한 작업을 실행할 때 권한을
요청해야 합니다.

사용자가 권한을 부여하지 않은 경우에는 앱에서 적절히 처리해야
합니다. 예를 들어 특정 기능에 권한이 필요한 경우 앱에서 해당 기능을
사용 중지할 수 있습니다. 일정 권한이 있어야 앱이 제대로 작동하는 경우 앱에서 모든 기능을 사용 중지하고 사용자에게 권한을 부여해야 한다는 알림을 표시할 수 있습니다.

다음 코드 샘플에서는 내 위치 레이어를 사용 설정하기 전에 AndroidX 라이브러리를 이용해
권한 부여 여부를 확인합니다. 그런 다음 지원 라이브러리에서
ActivityCompat.OnRequestPermissionsResultCallback [https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html?hl=ko]을
구현하여 권한 요청의 결과를
처리합니다.

Kotlin

import android.Manifest
import android.annotation.SuppressLint
import android.content.pm.PackageManager
import android.location.Location
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.app.ActivityCompat.OnRequestPermissionsResultCallback
import androidx.core.content.ContextCompat
import com.example.kotlindemos.PermissionUtils.PermissionDeniedDialog.Companion.newInstance
import com.example.kotlindemos.PermissionUtils.isPermissionGranted
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener
import com.google.android.gms.maps.GoogleMap.OnMyLocationClickListener
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment

/**
* This demo shows how GMS Location can be used to check for changes to the users location.  The
* "My Location" button uses GMS Location to set the blue dot representing the users location.
* Permission for [Manifest.permission.ACCESS_FINE_LOCATION] and [Manifest.permission.ACCESS_COARSE_LOCATION]
* are requested at run time. If either permission is not granted, the Activity is finished with an error message.
*/
class MyLocationDemoActivity : AppCompatActivity(),
OnMyLocationButtonClickListener,
OnMyLocationClickListener, OnMapReadyCallback,
OnRequestPermissionsResultCallback {
/**
* Flag indicating whether a requested permission has been denied after returning in
* [.onRequestPermissionsResult].
*/
private var permissionDenied = false
private lateinit var map: GoogleMap
override fun onCreate(savedInstanceState: Bundle?) {
super.onCreate(savedInstanceState)
setContentView(R.layout.my_location_demo)
val mapFragment =
supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment?
mapFragment?.getMapAsync(this)
googleMap.setOnMyLocationButtonClickListener(this)
googleMap.setOnMyLocationClickListener(this)
enableMyLocation()
this,
Manifest.permission.ACCESS_FINE_LOCATION
) == PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(
this,
Manifest.permission.ACCESS_COARSE_LOCATION
) == PackageManager.PERMISSION_GRANTED
) {
map.isMyLocationEnabled = true
return
this,
Manifest.permission.ACCESS_FINE_LOCATION
) || ActivityCompat.shouldShowRequestPermissionRationale(
this,
Manifest.permission.ACCESS_COARSE_LOCATION
) {
PermissionUtils.RationaleDialog.newInstance(
LOCATION_PERMISSION_REQUEST_CODE, true
).show(supportFragmentManager, "dialog")
return
ActivityCompat.requestPermissions(
this,
arrayOf(
Manifest.permission.ACCESS_FINE_LOCATION,
Manifest.permission.ACCESS_COARSE_LOCATION
),
LOCATION_PERMISSION_REQUEST_CODE
Toast.makeText(this, "MyLocation button clicked", Toast.LENGTH_SHORT)
.show()
requestCode: Int,
permissions: Array<String>,
grantResults: IntArray
) {
if (requestCode != LOCATION_PERMISSION_REQUEST_CODE) {
super.onRequestPermissionsResult(
requestCode,
permissions,
grantResults
return
permissions,
grantResults,
Manifest.permission.ACCESS_FINE_LOCATION
) || isPermissionGranted(
permissions,
grantResults,
Manifest.permission.ACCESS_COARSE_LOCATION
) {
if (permissionDenied) {
permissionDenied = false

import android.Manifest.permission;
import android.annotation.SuppressLint;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener;
import com.google.android.gms.maps.GoogleMap.OnMyLocationClickListener;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;

import android.Manifest;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import android.widget.Toast;

/**
* This demo shows how GMS Location can be used to check for changes to the users location.  The "My
* Location" button uses GMS Location to set the blue dot representing the users location.
* Permission for {@link android.Manifest.permission#ACCESS_FINE_LOCATION} and {@link
* android.Manifest.permission#ACCESS_COARSE_LOCATION} are requested at run time. If either
* permission is not granted, the Activity is finished with an error message.
*/
public class MyLocationDemoActivity extends AppCompatActivity
implements
OnMyLocationButtonClickListener,
OnMyLocationClickListener,
OnMapReadyCallback,
ActivityCompat.OnRequestPermissionsResultCallback {

/**
* Request code for location permission request.
* @see #onRequestPermissionsResult(int, String[], int[])
*/
private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;

/**
* Flag indicating whether a requested permission has been denied after returning in {@link
* #onRequestPermissionsResult(int, String[], int[])}.
*/
private boolean permissionDenied = false;

private GoogleMap map;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.my_location_demo);

SupportMapFragment mapFragment =
(SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
mapFragment.getMapAsync(this);
map.setOnMyLocationButtonClickListener(this);
map.setOnMyLocationClickListener(this);
enableMyLocation();
== PackageManager.PERMISSION_GRANTED
|| ContextCompat.checkSelfPermission(this, permission.ACCESS_COARSE_LOCATION)
== PackageManager.PERMISSION_GRANTED) {
map.setMyLocationEnabled(true);
return;
PermissionUtils.requestLocationPermissions(this, LOCATION_PERMISSION_REQUEST_CODE, true);
Toast.makeText(this, "MyLocation button clicked", Toast.LENGTH_SHORT).show();
Toast.makeText(this, "Current location:\n" + location, Toast.LENGTH_LONG).show();
@NonNull int[] grantResults) {
if (requestCode != LOCATION_PERMISSION_REQUEST_CODE) {
super.onRequestPermissionsResult(requestCode, permissions, grantResults);
return;
Manifest.permission.ACCESS_FINE_LOCATION) || PermissionUtils
.isPermissionGranted(permissions, grantResults,
Manifest.permission.ACCESS_COARSE_LOCATION)) {
if (permissionDenied) {
permissionDenied = false;
PermissionUtils.PermissionDeniedDialog
.newInstance(true).show(getSupportFragmentManager(), "dialog");

import android.annotation.SuppressLint
import android.location.Location
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener
import com.google.android.gms.maps.GoogleMap.OnMyLocationClickListener
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.maps.example.R

internal class MyLocationLayerActivity : AppCompatActivity(),
OnMyLocationButtonClickListener,
OnMyLocationClickListener,
OnMapReadyCallback {

override fun onCreate(savedInstanceState: Bundle?) {
super.onCreate(savedInstanceState)
setContentView(R.layout.activity_my_location)
val mapFragment =
supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
mapFragment.getMapAsync(this)
map.setOnMyLocationButtonClickListener(this)
map.setOnMyLocationClickListener(this)
Toast.makeText(this, "MyLocation button clicked", Toast.LENGTH_SHORT)
.show()

import android.annotation.SuppressLint;
import android.location.Location;
import android.os.Bundle;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;

class MyLocationLayerActivity extends AppCompatActivity
implements GoogleMap.OnMyLocationButtonClickListener,
GoogleMap.OnMyLocationClickListener,
OnMapReadyCallback {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_my_location);

SupportMapFragment mapFragment =
(SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
mapFragment.getMapAsync(this);
map.setOnMyLocationButtonClickListener(this);
map.setOnMyLocationClickListener(this);
Toast.makeText(this, "MyLocation button clicked", Toast.LENGTH_SHORT)
.show();
UiSettings.setMyLocationButtonEnabled(false)를 호출하여 내 위치 버튼이 표시되지 않도록 할 수
있습니다.

앱에서 다음과 같은 이벤트에 응답할 수 있습니다.

사용자가 내 위치 버튼을 클릭하면 앱이
GoogleMap.OnMyLocationButtonClickListener [https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationButtonClickListener?hl=ko]에서
onMyLocationButtonClick() 콜백을 수신합니다.
사용자가 내 위치의 파란색 점을 클릭하면 앱이 GoogleMap.OnMyLocationClickListener [https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationClickListener?hl=ko]에서 onMyLocationClick() 콜백을 수신합니다.

Google Play 서비스 Location API

Google Play 서비스 Location API [https://developer.android.com/google/play-services/location.html?hl=ko]는 Android 애플리케이션에
위치 인식 기능을 추가하기 위해 자주 사용되는 방법입니다. 이 API에는
다음 작업을 처리할 수 있는 기능이 포함되어 있습니다.

기기 위치 파악
위치 변경 수신 대기
기기 이동 시 교통수단 파악
사전 정의된 지역(지오펜싱이라고 함) 만들고 모니터링하기

Location API를 사용하면 전력 소비가 적은 위치 인식 애플리케이션을 쉽게
빌드할 수 있습니다. Android용 Maps SDK와 마찬가지로
Location API는 Google Play 서비스 SDK의 일부로 배포됩니다. Location API에
대한 자세한 내용은 Android 교육 과정의
위치 인식 가능한 앱 만들기 [https://developer.android.com/training/location/index.html?hl=ko] 또는 Location API 참조 [https://developers.google.com/android/reference/com/google/android/gms/location/package-summary?hl=ko]를
참고하세요. 코드 예는 Google Play 서비스 SDK의 일부로
포함되어 있습니다.

의견 보내기