Source URL: https://developers.google.com/maps/documentation/tile/use-renderer?hl=ko
Title: 3D 타일 렌더기 사용

의견 보내기

3D 타일 렌더기 사용

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

유럽 경제 지역 (EEA) 개발자

청구서 수신 주소가 유럽 경제 지역에 있는 경우 2025년 7월 8일부터
Google Maps Platform EEA 서비스 약관 [https://cloud.google.com/terms/maps-platform/eea?hl=ko]이 서비스 이용에 적용됩니다. 자세히 알아보기 [https://developers.google.com/maps/comms/eea/faq?hl=ko]
또한 Map Tiles API의 특정 콘텐츠가 더 이상 반환되지 않습니다.
자세히 알아보기 [https://developers.google.com/maps/comms/eea/map-tiles?hl=ko]

포토리얼리스틱 3D 타일은 OGC 표준 glTF 형식 [https://portal.ogc.org/files/102132]으로 제공되므로 OGC 3D 타일 사양을 지원하는 렌더러를 사용하여 3D 시각화를 빌드할 수 있습니다. 예를 들어 Cesium [https://cesium.com/platform/]은 3D 시각화를 렌더링하기 위한 기본 오픈소스 라이브러리입니다.

CesiumJS 사용

CesiumJS는 웹에서 3D 시각화를 위한 오픈소스 JavaScript 라이브러리입니다.
CesiumJS 사용에 관한 자세한 내용은 CesiumJS 학습 [https://cesium.com/learn/cesiumjs-learn/]을 참고하세요.
도움말: 여러 CesiumJS 코드 샘플의 데모는 CesiumJS 렌더러 예시 [https://developers.google.com/maps/documentation/tile/use-renderer?hl=ko#cesiumjs-renderer-examples]를 참고하세요.
사용자 컨트롤

CesiumJS 타일 렌더러에는 표준 사용자 컨트롤 세트가 있습니다.

| 작업 | 설명 |
| --- | --- |
| 팬 뷰 | 왼쪽 클릭 후 드래그 |
| 뷰 확대/축소 | 마우스 오른쪽 버튼을 클릭한 상태로 드래그하거나 마우스 휠을 스크롤합니다. |
| 보기 회전 | Ctrl + 왼쪽/오른쪽 클릭 후 드래그 또는 가운데 클릭 후 드래그 |

권장사항

CesiumJS 3D 로드 시간을 줄이는 방법에는 여러 가지가 있습니다. 예를 들면 다음과 같습니다.

렌더링 HTML에 다음 문을 추가하여 동시 요청을 사용 설정합니다.
Cesium.RequestScheduler.requestsByServer["tile.googleapis.com:443"] = <REQUEST_COUNT>

REQUEST_COUNT가 높을수록 타일 로드 속도가 빨라집니다. 하지만 REQUEST_COUNT가 10보다 크고 캐시가 사용 중지된 Chrome 브라우저에서 로드하면 알려진 Chrome 문제 [https://bugs.chromium.org/p/chromium/issues/detail?id=1428295]가 발생할 수 있습니다.
대부분의 사용 사례에서는 최적의 성능을 위해 REQUEST_COUNT를 18로 설정하는 것이 좋습니다.
세부정보 수준 건너뛰기를 사용 설정합니다. 자세한 내용은 이 Cesium 문제 [https://github.com/CesiumGS/cesium/issues/3857]를 참고하세요.

showCreditsOnScreen: true를 사용 설정하여 데이터 출처를 올바르게 표시해야 합니다. 자세한 내용은 정책 [https://developers.google.com/maps/documentation/tile/policies?hl=ko#cesiumjs]을 참고하세요.

렌더링 측정항목

프레임 속도를 확인하려면 초당 requestAnimationFrame [https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame] 메서드가 호출되는 횟수를 확인하세요.

프레임 지연 시간이 계산되는 방식을 확인하려면 PerformanceDisplay [https://github.com/CesiumGS/cesium/blob/9295450e64c3077d96ad579012068ea05f97842c/packages/engine/Source/Scene/PerformanceDisplay.js#L83] 클래스를 참고하세요.

CesiumJS 렌더러 예시

루트 타일셋 URL을 제공하기만 하면 Map Tiles API의 3D 타일과 함께 CesiumJS 렌더러를 사용할 수 있습니다.

간단한 예시

다음 예에서는 CesiumJS 렌더러를 초기화한 다음 루트 타일셋을 로드합니다.
<!DOCTYPE html>
<head>
<meta charset="utf-8">
<title>CesiumJS 3D Tiles Simple Demo</title>
<script src="https://ajax.googleapis.com/ajax/libs/cesiumjs/1.105/Build/Cesium/Cesium.js"></script>
<link href="https://ajax.googleapis.com/ajax/libs/cesiumjs/1.105/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
</head>
<body>
<div id="cesiumContainer"></div>
<script>

Cesium.RequestScheduler.requestsByServer["tile.googleapis.com:443"] = 18;

Places API 통합

Places API [https://developers.google.com/maps/documentation/places/web-service?hl=ko]와 함께 CesiumJS를 사용하여 자세한 정보를 검색할 수 있습니다. 자동 완성 위젯을 사용하여 장소의 표시 영역으로 이동할 수 있습니다. 이 예에서는 이 안내를 따라 [https://developers.google.com/maps/documentation/javascript/places-autocomplete?hl=ko] 사용 설정된 Places Autocomplete API와 이 안내를 따라 [https://developers.google.com/maps/documentation/javascript/cloud-setup?hl=ko#enabling-apis] 사용 설정된 Maps JavaScript API를 사용합니다.
<!DOCTYPE html>
<head>
<meta charset="utf-8" />
<title>CesiumJS 3D Tiles Places API Integration Demo</title>
<script src="https://ajax.googleapis.com/ajax/libs/cesiumjs/1.105/Build/Cesium/Cesium.js"></script>
<link href="https://ajax.googleapis.com/ajax/libs/cesiumjs/1.105/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
</head>
<body>
<label for="pacViewPlace">Go to a place: </label>
<input
type="text"
id="pacViewPlace"
name="pacViewPlace"
placeholder="Enter a location..."
style="width: 300px"
/>
<div id="cesiumContainer"></div>
<script>
Cesium.RequestScheduler.requestsByServer["tile.googleapis.com:443"] = 18;

viewport.getSouthWest().lng(), viewport.getNorthEast().lat(),
viewport.getSouthWest().lng(), viewport.getSouthWest().lat(),
viewport.getNorthEast().lng(), viewport.getSouthWest().lat(),
viewport.getNorthEast().lng(), viewport.getNorthEast().lat(),
]),
width: 10,
clampToGround: true,
material: Cesium.Color.RED,
autocomplete.addListener("place_changed", () => {
viewer.entities.removeAll();
src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initAutocomplete"
></script>
</body>

드론 뷰 회전

타일셋을 통해 애니메이션을 적용하도록 카메라를 제어할 수 있습니다. Places API 및 Elevation API와 결합하면 이 애니메이션은 관심 지점의 대화형 드론 플라이오버를 시뮬레이션합니다.

이 코드 샘플은 자동 완성 위젯에서 선택한 장소를 둘러보도록 합니다.

참고: 이 코드 샘플을 사용하려면 3D 타일에 사용하는 것과 동일한 프로젝트에서 Places API [https://console.cloud.google.com/apis/library/places-backend.googleapis.com?hl=ko], Maps JavaScript API [https://console.cloud.google.com/apis/library/maps-backend.googleapis.com?hl=ko], Elevation API [https://console.cloud.google.com/apis/library/elevation-backend.googleapis.com?hl=ko]를 사용 설정해야 합니다. 각 페이지로 이동하여 페이지 상단의 파란색 막대에 있는 드롭다운 메뉴에서 3D 타일 프로젝트를 선택합니다. 그런 다음 API 이름 아래에 있는 파란색 사용 설정 버튼을 선택합니다.

버튼에 관리가 표시되면 API가 이미 해당 프로젝트에 사용 설정된 것입니다.

<!DOCTYPE html>
<head>
<meta charset="utf-8" />
<title>CesiumJS 3D Tiles Rotating Drone View Demo</title>
<script src="https://ajax.googleapis.com/ajax/libs/cesiumjs/1.105/Build/Cesium/Cesium.js"></script>
<link href="https://ajax.googleapis.com/ajax/libs/cesiumjs/1.105/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
</head>
<body>
<label for="pacViewPlace">Go to a place: </label>
<input type="text" id="pacViewPlace" name="pacViewPlace" placeholder="Enter a location..." style="width: 300px" />
<div id="cesiumContainer"></div>
<script>
Cesium.RequestScheduler.requestsByServer["tile.googleapis.com:443"] = 18;

Cesium.Cartesian3.fromDegrees(
viewport.getSouthWest().lng(), viewport.getSouthWest().lat(), elevation),
Cesium.Cartesian3.fromDegrees(
viewport.getNorthEast().lng(), viewport.getNorthEast().lat(), elevation)
) / 2;
pointCameraAt(location, viewport, elevation);
unsubscribe = viewer.clock.onTick.addEventListener(() => {
viewer.camera.rotate(Cesium.Cartesian3.UNIT_Z);

autocomplete.addListener("place_changed", async () => {
place.geometry.location,
place.geometry.viewport,
elevation
/>
</head>
<body>
<div id="cesiumContainer"></div>
<script>
Cesium.RequestScheduler.requestsByServer["tile.googleapis.com:443"] = 18;

if (prevPosition) {
viewer.entities.add({
polyline: {
positions: [prevPosition, position],
width: 3,
material: Cesium.Color.WHITE,
clampToGround: true,
classificationType: Cesium.ClassificationType.CESIUM_3D_TILE,

Cesium.Cartographic.fromCartesian(prevPosition).height;
labelText += "\nHeight from previous point (meters):\n\t" + Math.abs(newHeight - prevHeight);
Cesium에서는 관심 지점 주변으로 카메라를 회전시켜 건물과의 충돌을 방지할 수 있습니다. 또는 카메라가 건물을 통과할 때 건물을 투명하게 만들 수 있습니다.

먼저 카메라를 한 지점에 고정하면 애셋을 보여주는 카메라 궤도를 만들 수 있습니다. 이 코드 샘플에 나와 있는 것처럼 이벤트 리스너와 함께 카메라의 lookAtTransform [https://cesium.com/learn/cesiumjs/ref-doc/Camera.html#lookAtTransform] 함수를 사용하여 이 작업을 수행할 수 있습니다.

transform,
new Cesium.HeadingPitchRange(0, -Math.PI / 8, 2900)

Cesium for Unreal 사용

3D Tiles API와 함께 Cesium for Unreal 플러그인을 사용하려면 아래 단계를 따르세요.
도움말: 자세한 안내는 Cesium for Unreal 빠른 시작 [https://cesium.com/learn/unreal/unreal-quickstart/]을 참고하세요.

Cesium for Unreal 플러그인을 설치합니다.
새 Unreal 프로젝트를 만듭니다.
Google 실사 3D 타일 API에 연결합니다.

메뉴에서 Cesium > Cesium을 선택하여 Cesium 창을 엽니다.
빈 3D 타일 타일셋을 선택합니다.
월드 아웃라이너에서 이 Cesium3DTileset을 선택하여 세부정보 패널을 엽니다.
소스를 Cesium Ion에서에서 URL에서로 변경합니다.
URL을 Google 3D 타일 URL로 설정합니다.

https://tile.googleapis.com/v1/3dtiles/root.json?key=YOUR_API_KEY

화면에 저작자 표시를 사용 설정하여 저작자 표시를 올바르게 표시합니다.

이렇게 하면 월드가 로드됩니다. LatLng로 이동하려면 아웃라이너 패널에서 CesiumGeoreference 항목을 선택한 다음 세부정보 패널에서 원점 위도/경도/높이를 수정합니다.

Cesium for Unity 사용
참고: Cesium for Unity에 대한 자세한 내용은 Cesium for Unity 빠른 시작 [https://cesium.com/learn/unity/unity-quickstart/]을 참고하세요.
Cesium for Unity에서 사실적인 타일을 사용하려면 다음 단계를 따르세요.

새 Unity 프로젝트를 만듭니다.
패키지 관리자 섹션에서 새 범위 등록기관을 추가합니다 (Editor > Project Settings).

이름: Cesium
URL: https://unity.pkg.cesium.com
범위: com.cesium.unity

Cesium for Unity 패키지를 설치합니다.
Google 실사 3D 타일 API에 연결합니다.

메뉴에서 Cesium > Cesium을 선택하여 Cesium 창을 엽니다.
빈 3D 타일 타일셋을 클릭합니다.
왼쪽 패널의 소스 아래에 있는 타일셋 소스 옵션에서 URL에서 (Cesium Ion에서가 아님)을 선택합니다.
URL을 Google 3D 타일 URL로 설정합니다.

https://tile.googleapis.com/v1/3dtiles/root.json?key=YOUR_API_KEY

화면에 저작자 표시를 사용 설정하여 저작자 표시를 올바르게 표시합니다.

이렇게 하면 월드가 로드됩니다. LatLng로 이동하려면 Scene Hierarchy에서 CesiumGeoreference 항목을 선택한 다음 Inspector에서 Origin Latitude/Longitude/Height를 수정합니다.

deck.gl 사용
참고: Map Tiles API와 함께 사용할 수 있는 deck.gl의 최소 버전은 8.9.13 이상입니다.
deck.gl [https://deck.gl/]은 WebGL 기반의 고성능 대규모 데이터 시각화를 위한 오픈소스 JavaScript 프레임워크입니다.

기여 분석

타일 gltf asset에서 copyright 필드를 추출한 다음 렌더링된 뷰에 표시하여 데이터 출처를 올바르게 표시해야 합니다. 자세한 내용은 데이터 출처 표시 [https://developers.google.com/maps/documentation/tile/create-renderer?hl=ko#display-attributions]를 참고하세요.

deck.gl 렌더러 예

간단한 예시

다음 예에서는 deck.gl 렌더러를 초기화한 다음 3D로 장소를 로드합니다. 코드에서 YOUR_API_KEY를 실제 API 키로 바꿔야 합니다.
<!DOCTYPE html>
<html>
<head>
<title>deck.gl Photorealistic 3D Tiles example</title>
<script src="https://unpkg.com/deck.gl@latest/dist.min.js"></script>
<style>
body { margin: 0; padding: 0;}
copyright.split(';').forEach(credits.add, credits);
creditsElement.innerHTML = [...credits].join('; ');
Google 포토리얼리스틱 3D 타일 위에 2D 레이어 시각화

deck.gl TerrainExtension [https://deck.gl/docs/api-reference/extensions/terrain-extension]은 2D 데이터를 3D 표면에 렌더링합니다. 예를 들어 포토리얼리스틱 3D 타일 지오메트리 위에 건물 윤곽의 GeoJSON을 드레이핑할 수 있습니다.

다음 예에서는 포토리얼리스틱 3D 타일 표면에 맞게 조정된 다각형으로 건물 레이어가 시각화됩니다.
<!DOCTYPE html>
<html>
<head>
<title>Google 3D tiles example</title>
<script src="https://unpkg.com/deck.gl@latest/dist.min.js"></script>
<style>
body { margin: 0; padding: 0;}
copyright.split(';').forEach(credits.add, credits);
creditsElement.innerHTML = [...credits].join('; ');
return [254, 246, 181]
else if (tpp < 0.6780)
return [255, 194, 133]
else if (tpp < 0.8594)
return [250, 138, 118]
return [225, 83, 131]