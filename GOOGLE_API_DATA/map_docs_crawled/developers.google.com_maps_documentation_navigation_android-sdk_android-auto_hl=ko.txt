Source URL: https://developers.google.com/maps/documentation/navigation/android-sdk/android-auto?hl=ko
Title: Android Auto 내비게이션 사용 설정

의견 보내기

Android Auto 내비게이션 사용 설정

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 제품 또는 기능은 미리보기(GA 이전) 버전입니다.
GA 이전 제품과 기능은 지원이 제한적일 수 있으며, GA 이전 제품과 기능에 대한 변경사항은 다른 GA 이전 버전과 호환되지 않을 수 있습니다. GA 이전 버전 제품 및 서비스에는 Google Maps Platform 서비스별 약관 [https://cloud.google.com/maps-platform/terms/maps-service-terms?hl=ko]이 적용됩니다. 자세한 내용은 출시 단계 설명 [https://developers.google.com/maps/launch-stages?hl=ko]을 참고하세요.

중요: Android Auto와 함께 사용하도록 개발된 모든 앱은 승인된 안전 절차를 따라야 합니다. 이 가이드에서는 따라야 하는 표준 사례를 제공하지만 Android Auto용 앱을 출시하려면 먼저 앱을 제출하여 승인을 받아야 합니다. 자세한 내용은 자동차용 Android Auto 앱 배포 [https://developer.android.com/training/cars/distribute?hl=ko]를 참고하세요.

이 섹션에서는 자동차용 Android 앱 라이브러리와 함께 Navigation SDK를 사용하여 대시보드 내 헤드 단위 [https://en.wikipedia.org/wiki/Automotive_head_unit]에 앱의 탐색 환경을 표시하는 방법을 설명합니다. 사용자의 대시보드 시스템이 Android Auto를 지원하는 경우 사용자는 휴대전화를 기기에 연결하여 자동차 디스플레이에서 직접 앱을 사용할 수 있습니다. 음성 안내는 자동차 스피커에서도 실행됩니다.

자동차용 Android 앱 라이브러리 [https://developer.android.com/training/cars/apps?hl=ko]는 운전자 안전을 위해 승인된 시각적 템플릿 세트를 제공하여 Android 애플리케이션이 Android Auto에서 실행되도록 지원합니다. 이러한 템플릿은 운전자의 주의 분산을 줄이기 위해 대시보드 내 UI 컨트롤을 휴대전화의 컨트롤로 제한합니다.

Navigation SDK 기반 앱이 Android Auto와 호환되도록 설정하면 내비게이션 환경을 위한 추가 뷰가 제공됩니다.
이렇게 하면 휴대전화용 지도 보기와 헤드 단위용 지도 보기 등 두 개의 지도 보기가 가능합니다. 두 디스플레이 모두 싱글톤인 Navigator.java의 안내를 받습니다.

대시보드 내 시스템은 안전 승인을 받은 대화형 요소를 표시하므로 사용자는 과도한 주의 분산 없이 목적지로 안전하게 이동할 수 있습니다. 사용자는 주문 수락 또는 거부, 지도에서 고객 위치 보기와 같은 앱별 기능과 상호작용할 수도 있습니다. 주문 상태 업데이트는 대시보드 내 단위에도 표시될 수 있습니다.

연결된 휴대전화는 표준 Navigation SDK 환경 또는 애플리케이션의 다른 뷰나 워크플로를 계속 표시할 수 있습니다. 이 기능을 사용하면 차량 화면에서 제대로 작동하지 않을 수 있는 맞춤 기능을 계속 제공할 수 있습니다.

설정

앱이 Android Auto와 호환되도록 하려면 먼저 Android Auto로 자동차 서비스를 설정한 다음 Navigation SDK 앱에서 TurnByTurn 라이브러리를 사용 설정해야 합니다.

Android Auto로 시작하기

Android Auto와 함께 작동하도록 설계된 Navigation SDK 기능을 사용하기 전에 Android Auto가 앱을 검색할 수 있도록 앱의 자동차 서비스를 설정해야 합니다.

다음 단계를 따르세요. 이 단계는 모두 Android for Cars [https://developer.android.com/training/cars?hl=ko] 개발자 문서에서 확인할 수 있습니다.

기본 Android Auto 기능을 숙지 [https://developer.android.com/training/cars?hl=ko]합니다.
자동차용 Android 앱 라이브러리를 설치 [https://developer.android.com/training/cars/apps?hl=ko#install-library]합니다.
Android Auto를 포함하도록 앱의 매니페스트 파일을 구성 [https://developer.android.com/training/cars/apps?hl=ko#configure-manifest-files]합니다.
매니페스트에서 최소 자동차 앱 수준을 1로 선언 [https://developer.android.com/training/cars/apps?hl=ko#api-level]합니다.
CarAppService 및 세션을 만듭니다 [https://developer.android.com/training/cars/apps?hl=ko#create-carappservice].

Navigation SDK 설정

자동차 앱 서비스를 설정하면 내비게이션 SDK를 사용할 수 있습니다.

아직 Navigation SDK를 앱에 통합하지 않은 경우 프로젝트를 설정 [https://developers.google.com/maps/documentation/navigation/android-sdk/set-up-project?hl=ko]합니다.
앱에 대해 TurnbyTurn 안내 피드를 사용 설정 [https://developers.google.com/maps/documentation/navigation/android-sdk/tbt-feed?hl=ko]합니다.
선택사항입니다. Navigation SDK에서 생성된 아이콘을 사용 [https://developers.google.com/maps/documentation/navigation/android-sdk/tbt-feed-display?hl=ko#use_generated_icons]합니다.
Screen 클래스에 제공된 Android Auto Surface에서 NavigationViewForAuto 클래스를 사용하여 지도를 그립니다 [https://developer.android.com/training/cars/apps/navigation?hl=ko#drawing-the-map].
TurnbyTurn 라이브러리의 데이터로 Android Auto 탐색 템플릿을 채웁니다 [https://developers.google.com/maps/documentation/navigation/android-sdk/android-auto?section=surface-callbacks&hl=ko#populate_navigation_information].

이제 앱에 탐색 정보를 제공하는 등록된 서비스가 있고 앱이 Android Auto에 연결할 수 있으므로 앱이 Android Auto와 제대로 작동하는 데 필요한 나머지 탐색 요소를 만들 준비가 되었습니다.

지도 및 탐색 UI 그리기 [https://developers.google.com/maps/documentation/navigation/android-sdk/android-auto?section=surface-callbacks&hl=ko#draw_the_map_and_navigation_ui]
지도 상호작용 사용 설정 [https://developers.google.com/maps/documentation/navigation/android-sdk/android-auto?section=surface-callbacks&hl=ko#enable_map_interaction]
이동 경로 표시 [https://developers.google.com/maps/documentation/navigation/android-sdk/android-auto?section=surface-callbacks&hl=ko#display_navigation_directions]
올바른 기동 유형 확인 [https://developers.google.com/maps/documentation/navigation/android-sdk/android-auto?section=surface-callbacks&hl=ko#ensure_correct_maneuver_types]

지도 및 탐색 UI 그리기

NavigationViewForAuto 클래스는 Android Auto 화면에 지도와 탐색 UI를 렌더링합니다. 휴대전화용 NavigationView과 거의 동일한 기능을 제공하지만 상호작용은 제한적입니다. NavigationViewForAuto를 사용하여 Android Auto에서 제공하는 Surface [https://developer.android.com/reference/android/view/Surface?hl=ko]에 그립니다.
private boolean isSurfaceReady(SurfaceContainer surfaceContainer) {
return surfaceContainer.getSurface() != null
&& surfaceContainer.getDpi() != 0
&& surfaceContainer.getHeight() != 0
&& surfaceContainer.getWidth() != 0;
getCarContext()
.getSystemService(DisplayManager.class)
.createVirtualDisplay(
VIRTUAL_DISPLAY_NAME,
surfaceContainer.getWidth(),
surfaceContainer.getHeight(),
surfaceContainer.getDpi(),
surfaceContainer.getSurface(),
DisplayManager.VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY);
presentation = new Presentation(getCarContext(), virtualDisplay.getDisplay());

navigationView = new NavigationViewForAuto(getCarContext());
navigationView.onCreate(null);
navigationView.onStart();
navigationView.onResume();

presentation.setContentView(navigationView);
presentation.show();

navigationView.getMapAsync(googleMap -> this.googleMap = googleMap);
navigationView.onStop();
navigationView.onDestroy();

presentation.dismiss();
virtualDisplay.release();
.setActionStrip(new ActionStrip.Builder().build())
.setMapActionStrip(new ActionStrip.Builder().addAction(Action.PAN).build())
.build();
CameraUpdate update =
CameraUpdateFactory.zoomBy((scaleFactor - 1),
new Point((int) focusX, (int) focusY));
googleMap.animateCamera(update); // map is set in onSurfaceAvailable.
SampleApplication application) {
super(carContext);
getCarContext().getCarService(AppManager.class).setSurfaceCallback(this);
application.getNavInfoMutableLiveData().observe(this, this::processNextStep);

@NonNull
@Override
public Template onGetTemplate() {
NavigationTemplate.Builder navigationTemplateBuilder =
new NavigationTemplate.Builder()
.setActionStrip(...)
.setMapActionStrip(...)
if (currentRoutingInfo != null) {
navigationTemplateBuilder.setNavigationInfo(currentRoutingInfo);
Step currentStep = buildStepFromStepInfo(navInfo.getCurrentStep());
Distance distanceToStep =
buildDistanceFromMeters(navInfo.getDistanceToCurrentStepMeters());

currentRoutingInfo =
new RoutingInfo.Builder().setCurrentStep(currentStep, distanceToStep).build();

IconCompat maneuverIcon =
IconCompat.createWithBitmap(stepInfo.getManeuverBitmap());
Maneuver.Builder
maneuverBuilder = newManeuver.Builder(
ManeuverConverter
.getAndroidAutoManeuverType(stepInfo.getManeuver()));
CarIcon maneuverCarIcon = new CarIcon.Builder(maneuverIcon).build();
maneuverBuilder.setIcon(maneuverCarIcon);
Step.Builder stepBuilder =
new Step.Builder()
.setRoad(stepInfo.getFullRoadName())
.setCue(stepInfo.getFullInstructionText())
.setManeuver(maneuverBuilder.build());

if (stepInfo.getLanes() != null
&& stepInfo.getLanesBitmap() != null) {
for (Lane lane : buildAndroidAutoLanesFromStep(stepInfo)) {
stepBuilder.addLane(lane);
IconCompat lanesIcon =
IconCompat.createWithBitmap(stepInfo.getLanesBitmap());
CarIcon lanesImage = new CarIcon.Builder(lanesIcon).build();
stepBuilder.setLanesImage(lanesImage);
double remainingMiles = ((double) remainingFeet) / DistanceConstants.FEET_PER_MILE;

Android Auto 자동차 라이브러리에서 사용되는 종류의 조작은 TurnByTurn 라이브러리에서 제공하는 조작과 일대일로 대응됩니다. 하지만 Navigation SDK 동작을 Android Auto 자동차 라이브러리의 유효한 선언으로 변환해야 합니다. 다음 표에는 몇 가지 필드의 대응 관계가 나와 있으며, 그 아래에는 편의를 위해 샘플 변환기 유틸리티가 나와 있습니다.

| 세부 경로 안내 라이브러리 조작 | Android Auto Maneuver |
| --- | --- |
| DEPART | TYPE_DEPART |
| DESTINATION | TYPE_DESTINATION |
| DESTINATION_LEFT | TYPE_DESTINATION_LEFT |
| DESTINATION_RIGHT | TYPE_DESTINATION_RIGHT |
| TURN_U_TURN_CLOCKWISE | TYPE_U_TURN_RIGHT |
| ON_RAMP_LEFT | TYPE_ON_RAMP_NORMAL_LEFT |
| ON_RAMP_RIGHT | TYPE_ON_RAMP_NORMAL_RIGHT |
| ON_RAMP_SLIGHT_LEFT | TYPE_ON_RAMP_SLIGHT_LEFT |
| FORK_RIGHT | TYPE_FORK_RIGHT |

펼쳐서 코드 예시를 확인하세요.
import com.google.android.libraries.mapsplatform.turnbyturn.model.Maneuver;
import com.google.common.collect.ImmutableMap;
import javax.annotation.Nullable;

ImmutableMap.<Integer, Integer>builder()
.put(Maneuver.DEPART, androidx.car.app.navigation.model.Maneuver.TYPE_DEPART)
.put(Maneuver.DESTINATION, androidx.car.app.navigation.model.Maneuver.TYPE_DESTINATION)
.put(
Maneuver.DESTINATION_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_DESTINATION_LEFT)
.put(
Maneuver.DESTINATION_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_DESTINATION_RIGHT)
.put(Maneuver.STRAIGHT, androidx.car.app.navigation.model.Maneuver.TYPE_STRAIGHT)
.put(Maneuver.TURN_LEFT, androidx.car.app.navigation.model.Maneuver.TYPE_TURN_NORMAL_LEFT)
.put(
Maneuver.TURN_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_TURN_NORMAL_RIGHT)
.put(Maneuver.TURN_KEEP_LEFT, androidx.car.app.navigation.model.Maneuver.TYPE_KEEP_LEFT)
.put(Maneuver.TURN_KEEP_RIGHT, androidx.car.app.navigation.model.Maneuver.TYPE_KEEP_RIGHT)
.put(
Maneuver.TURN_SLIGHT_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_TURN_SLIGHT_LEFT)
.put(
Maneuver.TURN_SLIGHT_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_TURN_SLIGHT_RIGHT)
.put(
Maneuver.TURN_SHARP_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_TURN_SHARP_LEFT)
.put(
Maneuver.TURN_SHARP_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_SHARP_RIGHT)
.put(
Maneuver.TURN_U_TURN_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_U_TURN_RIGHT)
.put(
Maneuver.TURN_U_TURN_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_U_TURN_LEFT)
.put(
Maneuver.MERGE_UNSPECIFIED,
androidx.car.app.navigation.model.Maneuver.TYPE_MERGE_SIDE_UNSPECIFIED)
.put(Maneuver.MERGE_LEFT, androidx.car.app.navigation.model.Maneuver.TYPE_MERGE_LEFT)
.put(Maneuver.MERGE_RIGHT, androidx.car.app.navigation.model.Maneuver.TYPE_MERGE_RIGHT)
.put(Maneuver.FORK_LEFT, androidx.car.app.navigation.model.Maneuver.TYPE_FORK_LEFT)
.put(Maneuver.FORK_RIGHT, androidx.car.app.navigation.model.Maneuver.TYPE_FORK_RIGHT)
.put(
Maneuver.ON_RAMP_UNSPECIFIED,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_NORMAL_RIGHT)
.put(
Maneuver.ON_RAMP_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_NORMAL_LEFT)
.put(
Maneuver.ON_RAMP_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_NORMAL_RIGHT)
.put(
Maneuver.ON_RAMP_KEEP_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_NORMAL_LEFT)
.put(
Maneuver.ON_RAMP_KEEP_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_NORMAL_RIGHT)
.put(
Maneuver.ON_RAMP_SLIGHT_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_SLIGHT_LEFT)
.put(
Maneuver.ON_RAMP_SLIGHT_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_SLIGHT_RIGHT)
.put(
Maneuver.ON_RAMP_SHARP_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_SHARP_LEFT)
.put(
Maneuver.ON_RAMP_SHARP_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_SHARP_RIGHT)
.put(
Maneuver.ON_RAMP_U_TURN_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_U_TURN_RIGHT)
.put(
Maneuver.ON_RAMP_U_TURN_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ON_RAMP_U_TURN_LEFT)
.put(
Maneuver.OFF_RAMP_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_NORMAL_LEFT)
.put(
Maneuver.OFF_RAMP_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_NORMAL_RIGHT)
.put(
Maneuver.OFF_RAMP_KEEP_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_SLIGHT_LEFT)
.put(
Maneuver.OFF_RAMP_KEEP_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_SLIGHT_RIGHT)
.put(
Maneuver.OFF_RAMP_SLIGHT_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_SLIGHT_LEFT)
.put(
Maneuver.OFF_RAMP_SLIGHT_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_SLIGHT_RIGHT)
.put(
Maneuver.OFF_RAMP_SHARP_LEFT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_NORMAL_LEFT)
.put(
Maneuver.OFF_RAMP_SHARP_RIGHT,
androidx.car.app.navigation.model.Maneuver.TYPE_OFF_RAMP_NORMAL_RIGHT)
.put(
Maneuver.ROUNDABOUT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW)
.put(
Maneuver.ROUNDABOUT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW)
.put(
Maneuver.ROUNDABOUT_STRAIGHT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ROUNDABOUT_ENTER_CW)
.put(
Maneuver.ROUNDABOUT_STRAIGHT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ROUNDABOUT_ENTER_CCW)
.put(
Maneuver.ROUNDABOUT_LEFT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_LEFT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_RIGHT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_RIGHT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SLIGHT_LEFT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SLIGHT_LEFT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SLIGHT_RIGHT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SLIGHT_RIGHT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SHARP_LEFT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SHARP_LEFT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SHARP_RIGHT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_SHARP_RIGHT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_U_TURN_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_U_TURN_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver
.TYPE_ROUNDABOUT_ENTER_AND_EXIT_CCW_WITH_ANGLE)
.put(
Maneuver.ROUNDABOUT_EXIT_CLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ROUNDABOUT_EXIT_CW)
.put(
Maneuver.ROUNDABOUT_EXIT_COUNTERCLOCKWISE,
androidx.car.app.navigation.model.Maneuver.TYPE_ROUNDABOUT_EXIT_CCW)
.put(Maneuver.FERRY_BOAT, androidx.car.app.navigation.model.Maneuver.TYPE_FERRY_BOAT)
.put(Maneuver.FERRY_TRAIN, androidx.car.app.navigation.model.Maneuver.TYPE_FERRY_TRAIN)
.put(Maneuver.NAME_CHANGE, androidx.car.app.navigation.model.Maneuver.TYPE_NAME_CHANGE)
.buildOrThrow();

/**
* Returns the corresponding {@link androidx.car.app.navigation.model.Maneuver.Type} for the given
* direction {@link Maneuver}
* @throws {@link IllegalArgumentException} if the given maneuver does not have a corresponding
*     Android Auto Maneuver type.
*/
public static int getAndroidAutoManeuverType(@Maneuver int maneuver) {
if (MANEUVER_TO_ANDROID_AUTO_MANEUVER_TYPE.containsKey(maneuver)) {
return MANEUVER_TO_ANDROID_AUTO_MANEUVER_TYPE.get(maneuver);
String.format(
"Given turn-by-turn Maneuver %d cannot be converted to an Android Auto equivalent.",
maneuver));
|| maneuver == Maneuver.ROUNDABOUT_RIGHT_CLOCKWISE
|| maneuver == Maneuver.ROUNDABOUT_LEFT_COUNTERCLOCKWISE
|| maneuver == Maneuver.ROUNDABOUT_RIGHT_COUNTERCLOCKWISE) {
return ROUNDABOUT_ANGLE_NORMAL;
|| maneuver == Maneuver.ROUNDABOUT_SHARP_RIGHT_CLOCKWISE
|| maneuver == Maneuver.ROUNDABOUT_SHARP_LEFT_COUNTERCLOCKWISE
|| maneuver == Maneuver.ROUNDABOUT_SHARP_RIGHT_COUNTERCLOCKWISE) {
return ROUNDABOUT_ANGLE_SHARP;
|| maneuver == Maneuver.ROUNDABOUT_SLIGHT_RIGHT_CLOCKWISE
|| maneuver == Maneuver.ROUNDABOUT_SLIGHT_LEFT_COUNTERCLOCKWISE
|| maneuver == Maneuver.ROUNDABOUT_SLIGHT_RIGHT_COUNTERCLOCKWISE) {
return ROUNDABOUT_ANGLE_SLIGHT;
|| maneuver == Maneuver.ROUNDABOUT_U_TURN_COUNTERCLOCKWISE) {
return ROUNDABOUT_ANGLE_U_TURN;