Source URL: https://developers.google.com/maps/documentation/javascript/controls?hl=ko
Title: 컨트롤

의견 보내기

컨트롤

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

플랫폼 선택:

Android [https://developers.google.com/maps/documentation/android-sdk/controls?hl=ko]

iOS [https://developers.google.com/maps/documentation/ios-sdk/controls?hl=ko]

JavaScript [https://developers.google.com/maps/documentation/javascript/controls?hl=ko]

컨트롤 개요

Maps JavaScript API를 통해 표시되는 지도에는 사용자와 지도가 상호작용할 수 있는 UI 요소가 포함됩니다. 이러한 요소를 컨트롤이라고 하며 애플리케이션에 이러한 컨트롤의 변형을 포함할 수 있습니다. 또는 아무것도 하지 않고 Maps JavaScript API가 모든 컨트롤 동작을 처리하도록 할 수 있습니다.

다음 지도는 Maps JavaScript API에서 표시하는 기본 컨트롤 집합을 보여줍니다.

다음은 지도에 사용할 수 있는 컨트롤의 전체 목록입니다.

확대/축소 컨트롤은 지도의 확대/축소 수준을 변경할 수 있는 '+' 및 '-' 버튼을 표시합니다. 이 컨트롤은 기본적으로 지도의 오른쪽 하단에 나타납니다.
카메라 컨트롤에는 확대/축소 컨트롤과 화면 이동 컨트롤이 모두 있으며 베타 채널 [https://developers.google.com/maps/documentation/javascript/versions?hl=ko#beta-channel]을 사용할 때는 기본적으로 확대/축소 컨트롤 대신 표시됩니다.

지도 유형 컨트롤은 드롭다운 또는 가로 버튼 바 스타일로 제공되며 사용자가 이 컨트롤을 사용하여 지도 유형(ROADMAP, SATELLITE, HYBRID 또는 TERRAIN)을 선택할 수 있습니다. 이 컨트롤은 기본적으로 지도의 왼쪽 상단에 표시됩니다.
스트리트 뷰 컨트롤에는 지도에 드래그하여 스트리트 뷰를 사용 설정할 수 있는 페그맨 아이콘이 포함되어 있습니다. 이 컨트롤은 기본적으로 지도의 오른쪽 하단에 표시됩니다.
회전 컨트롤은 비스듬한 이미지가 포함된 지도에 기울기 및 회전 옵션의 조합을 제공합니다. 이 컨트롤은 기본적으로 지도의 오른쪽 하단에 표시됩니다. 자세한 내용은 45° 이미지 [https://developers.google.com/maps/documentation/javascript/maptypes?hl=ko#45DegreeImagery]를 참고하세요.
축척 컨트롤은 지도 축척 요소를 표시합니다.
이 컨트롤은 기본적으로 사용 중지되어 있습니다.
전체 화면 컨트롤은 전체 화면 모드로 지도를 열기 위한 옵션을 제공합니다. 이 컨트롤은 데스크톱과 휴대기기에서 기본적으로 사용 설정되어 있습니다. 참고: iOS는 전체 화면 기능을 지원하지 않습니다. 따라서 iOS 기기에는 전체 화면 컨트롤이 표시되지 않습니다.
단축키 컨트롤은 지도와 상호작용하기 위한 단축키 목록을 표시합니다.

지도 컨트롤에 직접 액세스하거나 컨트롤을 수정하지 마세요. 대신 컨트롤의 가시성과 표시 방식에 영향을 주는 지도의 MapOptions 필드를 수정하세요. (적절한 MapOptions를 사용하여) 지도를 인스턴스화할 때 컨트롤 표시 방식을 조정하거나 setOptions()를 호출하여 지도의 옵션을 변경함으로써 지도를 동적으로 수정할 수 있습니다.

일부 컨트롤은 기본적으로 사용 설정되지 않습니다. 기본 UI 동작 및 이러한 동작을 수정하는 방법에 대한 자세한 내용은 아래의 기본 UI [https://developers.google.com/maps/documentation/javascript/controls?hl=ko#DefaultUI]를 참고하세요.

기본 UI

기본적으로, 지도가 너무 작으면(200x200픽셀) 모든 컨트롤이 사라집니다.
컨트롤이 표시되도록 명시적으로 설정하여 이 동작을 재정의할 수 있습니다. 지도에 컨트롤 추가 [https://developers.google.com/maps/documentation/javascript/controls?hl=ko#Adding_Controls_to_the_Map]를 참고하세요.

컨트롤의 동작과 모양은 전체 화면 컨트롤을 제외하고 휴대기기와 데스크톱 기기에서 동일합니다(컨트롤 목록 [https://developers.google.com/maps/documentation/javascript/controls?hl=ko#all-controls]에 설명된 동작 참고).

또한 키보드 처리는 기본적으로 모든 기기에서 사용 설정되어 있습니다.

기본 UI 사용 중지

API의 기본 UI 버튼을 전체적으로 사용 중지할 수도 있습니다. 이렇게 하려면 MapOptions 객체 내에서 지도의 disableDefaultUI 속성을 true로 설정하세요. 이 속성은 Maps JavaScript API에서 모든 UI 컨트롤 버튼을 사용 중지합니다. 하지만 각각 gestureHandling 및 keyboardShortcuts 속성으로 제어되는 기본 지도의 마우스 동작이나 단축키에는 영향을 미치지 않습니다.

다음 코드는 UI 버튼을 사용 중지합니다.

TypeScript
function initMap(): void {
function initMap() {

일부 컨트롤은 기본적으로 지도에 표시되지만 구체적으로 요청하지 않으면 표시되지 않는 컨트롤도 있습니다. 지도에서 컨트롤을 추가 또는 삭제하려는 경우 다음 MapOptions 객체의 필드에서 지정합니다. 컨트롤을 표시하려면 true로 설정하고 숨기려면 false로 설정합니다.

zoomControl: boolean,
cameraControl: boolean,
mapTypeControl: boolean,
scaleControl: boolean,
streetViewControl: boolean,
rotateControl: boolean,
fullscreenControl: boolean
function initMap(): void {
function initMap() {
google.maps.MapTypeControlStyle.DROPDOWN_MENU는 드롭다운 메뉴를 사용하여 지도 유형을 선택할 수 있는 단일 버튼 컨트롤을 표시합니다.
google.maps.MapTypeControlStyle.DEFAULT는 화면 크기에 따라 달라지며 향후 API 버전에서 변경될 수 있는 기본 동작을 표시합니다.

컨트롤 옵션을 수정하는 경우 적절한 MapOptions 값을 true로 설정하여 컨트롤을 명시적으로 사용 설정해야 합니다. 예를 들어 DROPDOWN_MENU 스타일을 표시하도록 지도 유형 컨트롤을 설정하려면 MapOptions 객체 내에 다음 코드를 사용하세요.

...
mapTypeControl: true,
mapTypeControlOptions: {
style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
이 컨트롤은 베타 채널 [https://developers.google.com/maps/documentation/javascript/versions?hl=ko#beta-channel]을 사용하는 지도에 기본적으로 표시됩니다.
cameraControlOptions 필드는 이 컨트롤에 사용할 CameraControlOptions [https://developers.google.com/maps/documentation/javascript/reference/control?hl=ko#CameraControlOptions]를 추가로 지정합니다.

mapTypeControl은 사용자가 지도 유형(예: 지도 및 위성) 간에 전환할 수 있는 지도 요형 컨트롤을 사용 설정/사용 중지합니다.
기본적으로 이 컨트롤은 지도의 왼쪽 상단에 표시됩니다. mapTypeControlOptions 필드는 이 컨트롤에 사용할 MapTypeControlOptions [https://developers.google.com/maps/documentation/javascript/reference/control?hl=ko#MapTypeControlOptions]를 추가로 지정합니다.

streetViewControl은 사용자가 스트리트 뷰 파노라마를 활성화할 수 있는 페그맨 컨트롤을 사용 설정/사용 중지합니다.
기본적으로 이 컨트롤은 지도의 오른쪽 하단에 표시됩니다. streetViewControlOptions 필드는 이 컨트롤에 사용할 StreetViewControlOptions [https://developers.google.com/maps/documentation/javascript/reference/control?hl=ko#StreetViewControlOptions]를 추가로 지정합니다.

rotateControl은 45° 이미지의 방향을 조정하기 위한 회전 컨트롤의 표시 여부를 지정합니다. 기본적으로 이 컨트롤의 표시 여부는 현재 확대/축소 설정 및 위치에서 지정된 지도 유형의 45° 이미지가 있는지에 따라 결정됩니다. 지도의 rotateControlOptions를 설정하여 사용할 RotateControlOptions [https://developers.google.com/maps/documentation/javascript/reference/control?hl=ko#RotateControlOptions]를 지정하여 컨트롤의 동작을 변경할 수도 있습니다. 45도 이미지를 사용할 수 없는 경우 컨트롤을 표시할 수 없습니다.

scaleControl - 지도 축척을 제공하는 축척 컨트롤을 사용 설정/사용 중지합니다. 기본적으로 이 컨트롤은 표시되지 않습니다. 이 컨트롤은 사용 설정되면 항상 지도의 오른쪽 하단에 표시됩니다. scaleControlOptions는 이 컨트롤에 사용할 ScaleControlOptions [https://developers.google.com/maps/documentation/javascript/reference/control?hl=ko#ScaleControlOptions]를 추가로 지정합니다.

fullscreenControl은 지도를 전체 화면 모드로 여는 컨트롤을 사용 설정/사용 중지합니다. 데스크톱 및 Android 기기에서 이 컨트롤은 기본적으로 사용 설정되어 있습니다.
이 컨트롤은 사용 설정되면 지도의 오른쪽 상단에 표시됩니다. fullscreenControlOptions는 이 컨트롤에 사용할 FullscreenControlOptions [https://developers.google.com/maps/documentation/javascript/reference/control?hl=ko#FullscreenControlOptions]를 추가로 지정합니다.

초기에 사용 중지하는 컨트롤의 옵션을 지정할 수도 있습니다.

컨트롤 배치

대부분의 컨트롤 옵션에는 지도에서 컨트롤을 배치할 위치를 나타내는 position 속성(ControlPosition 유형)이 포함되어 있습니다. 이러한 컨트롤의 위치는 고정된 것이 아닙니다. 대신 API는 지정된 제약 조건(예: 지도 크기) 내에서 기존 지도 요소 또는 다른 컨트롤 주변에 유동적으로 배치하는 방식으로 컨트롤을 지능적으로 배치합니다.
참고: API에서 컨트롤을 지능적으로 배치하려고 시도하지만 컨트롤이 지정된 복잡한 레이아웃과 겹치지 않는다고 보장할 수는 없습니다.

다음과 같은 컨트롤 위치가 지원됩니다.

TOP_CENTER는 지도의 상단 중앙에 컨트롤을 배치해야 함을 나타냅니다.
TOP_LEFT는 지도의 왼쪽 상단에 컨트롤을 배치하고, 하위 요소가 있는 경우 상단 중앙을 향해 '유동적으로' 배치해야 함을 나타냅니다.
TOP_RIGHT는 지도의 오른쪽 상단에 컨트롤을 배치하고, 하위 요소가 있는 경우 상단 중앙을 향해 '유동적으로' 배치해야 함을 나타냅니다.
LEFT_TOP은 지도의 왼쪽 상단, 모든 TOP_LEFT 요소 아래 컨트롤을 배치해야 함을 나타냅니다.
RIGHT_TOP은 지도의 오른쪽 상단, 모든 TOP_RIGHT 요소 아래 컨트롤을 배치해야 함을 나타냅니다.
LEFT_CENTER는 지도의 왼쪽 TOP_LEFT 및 BOTTOM_LEFT 위치 사이의 중앙에 컨트롤을 배치해야 함을 나타냅니다.
RIGHT_CENTER는 지도의 오른쪽 TOP_RIGHT 및 BOTTOM_RIGHT 위치 사이의 중앙에 컨트롤을 배치해야 함을 나타냅니다.
LEFT_BOTTOM은 지도의 왼쪽 하단, 모든 BOTTOM_LEFT 요소 위에 컨트롤을 배치해야 함을 나타냅니다.
RIGHT_BOTTOM은 지도의 오른쪽 하단, 모든 BOTTOM_RIGHT 요소 위에 컨트롤을 배치해야 함을 나타냅니다.
BOTTOM_CENTER는 지도의 하단 중앙에 컨트롤을 배치해야 함을 나타냅니다.
BOTTOM_LEFT는 지도의 왼쪽 하단에 컨트롤을 배치하고, 하위 요소가 있는 경우 하단 중앙을 향해 '유동적으로' 배치해야 함을 나타냅니다.
BOTTOM_RIGHT는 지도의 오른쪽 하단에 컨트롤을 배치하고, 하위 요소가 있는 경우 하단 중앙을 향해 '유동적으로' 배치해야 함을 나타냅니다.

이 위치는 위치를 수정할 수 없는 UI 요소(예: 저작권 및 Google 로고)의 위치와 겹칠 수도 있습니다.
그러한 경우 컨트롤은 각 위치에 적용된 로직에 따라 유동적으로 배치되고 최대한 지정된 위치에 가깝게 표시됩니다.

다음 예는 모든 컨트롤이 서로 다른 위치에 사용 설정된 간단한 지도를 보여줍니다.

TypeScript
function initMap(): void {
function initMap() {
controlButton.style.border = "2px solid #fff";
controlButton.style.borderRadius = "3px";
controlButton.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
controlButton.style.color = "rgb(25,25,25)";
controlButton.style.cursor = "pointer";
controlButton.style.fontFamily = "Roboto,Arial,sans-serif";
controlButton.style.fontSize = "16px";
controlButton.style.lineHeight = "38px";
controlButton.style.margin = "8px 0 22px";
controlButton.style.padding = "0 5px";
controlButton.style.textAlign = "center";

controlButton.textContent = "Center Map";
controlButton.title = "Click to recenter the map";
controlButton.type = "button";

API는 index 속성의 순서에 따라 각 위치에 컨트롤을 배치합니다. 더 낮은 색인의 컨트롤이 먼저 배치됩니다.
예를 들어 BOTTOM_RIGHT 위치의 두 맞춤 컨트롤은 이 색인 순서에 따라 색인 값이 낮은 컨트롤부터 배치됩니다. 기본적으로 모든 맞춤 컨트롤은 API 기본 컨트롤이 배치된 후에 배치됩니다. 컨트롤의 index 속성을 음수 값으로 설정하여 이 동작을 재정의할 수 있습니다. 맞춤 컨트롤은 로고의 왼쪽이나 저작권의 오른쪽에 배치할 수 없습니다.

다음 코드는 새 맞춤 컨트롤(생성자가 표시되지 않음)을 만들어 지도의 TOP_RIGHT 위치에 추가합니다.

맞춤 컨트롤 예

다음 컨트롤은 (특별히 유용하지는 않지만) 간단하고 위에 표시된 패턴을 결합합니다. 이 컨트롤은 지도의 중심을 특정 기본 위치에 설정하여 DOM 'click' 이벤트에 응답합니다.

TypeScript
controlButton.style.border = '2px solid #fff';
controlButton.style.borderRadius = '3px';
controlButton.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
controlButton.style.color = 'rgb(25,25,25)';
controlButton.style.cursor = 'pointer';
controlButton.style.fontFamily = 'Roboto,Arial,sans-serif';
controlButton.style.fontSize = '16px';
controlButton.style.lineHeight = '38px';
controlButton.style.margin = '8px 0 22px';
controlButton.style.padding = '0 5px';
controlButton.style.textAlign = 'center';

controlButton.textContent = 'Center Map';
controlButton.title = 'Click to recenter the map';
controlButton.type = 'button';

map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);
controlButton.style.border = "2px solid #fff";
controlButton.style.borderRadius = "3px";
controlButton.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
controlButton.style.color = "rgb(25,25,25)";
controlButton.style.cursor = "pointer";
controlButton.style.fontFamily = "Roboto,Arial,sans-serif";
controlButton.style.fontSize = "16px";
controlButton.style.lineHeight = "38px";
controlButton.style.margin = "8px 0 22px";
controlButton.style.padding = "0 5px";
controlButton.style.textAlign = "center";
controlButton.textContent = "Center Map";
controlButton.title = "Click to recenter the map";
controlButton.type = "button";
map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);
private center_: google.maps.LatLng;
constructor(
controlDiv: HTMLElement,
map: google.maps.Map,
center: google.maps.LatLngLiteral
) {
this.map_ = map;
controlDiv.style.clear = "both";

goCenterUI.title = "Click to recenter the map";
controlDiv.appendChild(goCenterUI);

goCenterText.innerHTML = "Center Map";
goCenterUI.appendChild(goCenterText);

setCenterUI.title = "Click to change the center of the map";
controlDiv.appendChild(setCenterUI);

setCenterText.innerHTML = "Set Center";
setCenterUI.appendChild(setCenterText);

centerControlDiv.style.paddingTop = "10px";
map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);
center_;
constructor(controlDiv, map, center) {
this.map_ = map;
controlDiv.style.clear = "both";

goCenterUI.title = "Click to recenter the map";
controlDiv.appendChild(goCenterUI);

goCenterText.innerHTML = "Center Map";
goCenterUI.appendChild(goCenterText);

setCenterUI.title = "Click to change the center of the map";
controlDiv.appendChild(setCenterUI);

setCenterText.innerHTML = "Set Center";
setCenterUI.appendChild(setCenterText);
centerControlDiv.style.paddingTop = "10px";
map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);