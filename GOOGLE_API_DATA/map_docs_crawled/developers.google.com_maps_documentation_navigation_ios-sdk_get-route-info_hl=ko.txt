Source URL: https://developers.google.com/maps/documentation/navigation/ios-sdk/get-route-info?hl=ko
Title: 경로 정보 가져오기

의견 보내기

경로 정보 가져오기

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

이 가이드에 따라 현재 경로의 시간, 거리, 경로 구간을 가져오도록 앱을 설정하세요.
경고: continueToNextDestination()가 호출된 후 탐색기는 이전 목적지를 완전히 잊습니다. 경로 구간에 관한 정보를 저장하거나 분석하려면 continueToNextDestination()를 호출하기 전에 내비게이터에서 이 정보를 가져와야 합니다.
개요

현재 경로에 관한 정보를 가져오려면 navigator 인스턴스에서 적절한 속성을 가져옵니다.

GMSNavigator.timeToNextDestination [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#timetonextdestination]
현재 경로에서 다음 목적지까지의 예상 시간을 초 단위로 가져옵니다.
GMSNavigator.distanceToNextDestination [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#distancetonextdestination]를 사용하여 현재 경로의 다음 목적지까지의 거리를 미터 단위로 가져옵니다.
GMSNavigationDelayCategory [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Enums/GMSNavigationDelayCategory?hl=ko]를 사용하여 트래픽 흐름의 지연 카테고리를 가져옵니다.
GMSNavigator.currentRouteLeg [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#currentrouteleg]를 사용하여 현재 경로 구간에 관한 정보를 가져옵니다.
GMSNavigator.traveledPath [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#traveledpath]를 사용하여 가장 최근에 이동한 경로를 가져옵니다.

코드 보기

SWIFT 코드를 표시/숨겨 경로 정보를 가져옵니다.

/*
* Copyright 2017 Google Inc. All rights reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*      http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import GoogleNavigation
import UIKit

class ViewController: UIViewController {

GMSNavigationServices.showTermsAndConditionsDialogIfNeeded(
withCompanyName: companyName
) { termsAccepted in
guard termsAccepted else {
makeButtons()
GMSNavigationWaypoint.init(
placeID: "ChIJnUYTpNASkFQR_gSty5kyoUk",
destinations.append(
GMSNavigationWaypoint.init(
placeID: "ChIJJ326ROcSkFQRBfUzOL2DSbo",

mapView.navigator?.setDestinations(destinations) { routeStatus in
guard routeStatus == .OK else {
print("Handle route statuses that are not OK.")
return
self.mapView.cameraMode = .following
self.mapView.locationSimulator?.simulateLocationsAlongExistingRoute()
"Path from (\(begin.latitude),\(begin.longitude)) to (\(current.latitude),\(current.longitude))"
navButton.alpha = 0.5
navButton.setTitle("Start navigation", for: .normal)
navButton.addTarget(self, action: #selector(startNav), for: .touchUpInside)
self.mapView.addSubview(navButton)

timeButton.alpha = 0.5
timeButton.setTitle("Time to next destination", for: .normal)
timeButton.addTarget(self, action: #selector(getTimeToNextDestination), for: .touchUpInside)
self.mapView.addSubview(timeButton)

distanceButton.alpha = 0.5
distanceButton.setTitle("Distance to next destination", for: .normal)
distanceButton.addTarget(
self, action: #selector(getDistanceToNextDestination), for: .touchUpInside)
self.mapView.addSubview(distanceButton)

routeButton.alpha = 0.5
routeButton.setTitle("Get current route leg", for: .normal)
routeButton.addTarget(self, action: #selector(getCurrentRouteLeg), for: .touchUpInside)
self.mapView.addSubview(routeButton)

pathButton.alpha = 0.5
pathButton.setTitle("Get traveled path", for: .normal)
pathButton.addTarget(self, action: #selector(getTraveledPath), for: .touchUpInside)
self.mapView.addSubview(pathButton)

* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*      http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#import "ViewController.h"
@import GoogleNavigation;

@interface ViewController ()

@end

@implementation ViewController {
GMSMapView *_mapView;
CLLocationManager *_locationManager;

GMSCameraPosition *camera = [GMSCameraPosition cameraWithLatitude:47.67
longitude:-122.20

NSString *companyName = @"Ride Sharing Co.";
[GMSNavigationServices
showTermsAndConditionsDialogIfNeededWithCompanyName:companyName
callback:^(BOOL termsAccepted) {
if (termsAccepted) {

[self makeButtons];
NSArray<GMSNavigationWaypoint *> *destinations =
@[[[GMSNavigationWaypoint alloc] initWithPlaceID:@"ChIJnUYTpNASkFQR_gSty5kyoUk"
[[GMSNavigationWaypoint alloc] initWithPlaceID:@"ChIJJ326ROcSkFQRBfUzOL2DSbo"
_mapView.cameraMode = GMSNavigationCameraModeFollowing;
[_mapView.locationSimulator simulateLocationsAlongExistingRoute];
NSTimeInterval time = _mapView.navigator.timeToNextDestination;
int minutes = floor(time/60);
int seconds = round(time - minutes * 60);
NSLog(@"%@", [NSString stringWithFormat:@"Time to next destination: %i:%i.", minutes, seconds]);
CLLocationDistance distance = _mapView.navigator.distanceToNextDestination;
double miles = distance * 0.00062137;
NSLog(@"%@", [NSString stringWithFormat:@"Distance to next destination: %.2f.", miles]);
GMSRouteLeg *currentSegment = _mapView.navigator.currentRouteLeg;
NSString *nextDestination = currentSegment.destinationWaypoint.title;
CLLocationDegrees lat = currentSegment.destinationCoordinate.latitude;
CLLocationDegrees lng = currentSegment.destinationCoordinate.longitude;
NSLog(@"%@", [NSString stringWithFormat:@"%@, %f/%f", nextDestination, lat, lng]);
GMSPath *latestPath = _mapView.navigator.traveledPath;
if (latestPath.count > 0) {
CLLocationCoordinate2D begin = [latestPath coordinateAtIndex:0];
CLLocationCoordinate2D current = [latestPath coordinateAtIndex:latestPath.count - 1];
NSLog(@"Path from %f/%f to %f/%f",
begin.latitude,
begin.longitude,
current.latitude,
current.longitude);
UIButton *navButton = [UIButton buttonWithType:UIButtonTypeCustom];
[navButton addTarget:self
action:@selector(startNav)
[navButton setBackgroundColor:[UIColor blueColor]];
[navButton setAlpha:0.5];
navButton.frame = CGRectMake(5.0, 150.0, 200.0, 35.0);
[_mapView addSubview:navButton];

UIButton *timeButton = [UIButton buttonWithType:UIButtonTypeCustom];
[timeButton addTarget:self
action:@selector(getTimeToNextDestination)
[timeButton setBackgroundColor:[UIColor blueColor]];
[timeButton setAlpha:0.5];
timeButton.frame = CGRectMake(5.0, 190.0, 200.0, 35.0);
[_mapView addSubview:timeButton];

UIButton *distanceButton = [UIButton buttonWithType:UIButtonTypeCustom];
[distanceButton addTarget:self
action:@selector(getDistanceToNextDestination)
[distanceButton setBackgroundColor:[UIColor blueColor]];
[distanceButton setAlpha:0.5];
distanceButton.frame = CGRectMake(5.0, 230.0, 200.0, 35.0);
[_mapView addSubview:distanceButton];

UIButton *routeButton = [UIButton buttonWithType:UIButtonTypeCustom];
[routeButton addTarget:self
action:@selector(getCurrentRouteLeg)
[routeButton setBackgroundColor:[UIColor blueColor]];
[routeButton setAlpha:0.5];
routeButton.frame = CGRectMake(5.0, 270.0, 200.0, 35.0);
[_mapView addSubview:routeButton];

UIButton *pathButton = [UIButton buttonWithType:UIButtonTypeCustom];
[pathButton addTarget:self
action:@selector(getTraveledPath)
[pathButton setBackgroundColor:[UIColor blueColor]];
[pathButton setAlpha:0.5];
pathButton.frame = CGRectMake(5.0, 310.0, 200.0, 35.0);
[_mapView addSubview:pathButton];
if let navigator = mapView.navigator {
Objective-C
NSTimeInterval time = _mapView.navigator.timeToNextDestination;
int minutes = floor(time/60);
int seconds = round(time - minutes * 60);
NSLog(@"%@", [NSString stringWithFormat:@"Time to next destination: %i:%i.", minutes, seconds]);

다음 목적지까지의 거리 가져오기

다음 목적지까지의 거리를 가져오려면 distanceToNextDestination() [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#distancetonextdestination]를 호출하세요.
그러면 CLLocationDistance 값이 반환됩니다. 단위는 미터로 지정됩니다.

Swift
if let navigator = mapView.navigator {
Objective-C
CLLocationDistance distance = _mapView.navigator.distanceToNextDestination;
double miles = distance * 0.00062137;
NSLog(@"%@", [NSString stringWithFormat:@"Distance to next destination: %.2f.", miles]);

다음 목적지의 교통상황 가져오기

다음 목적지로의 트래픽 흐름을 나타내는 값을 가져오려면 delayCategoryToNextDestination [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#delaycategorytonextdestination]를 호출합니다.
이 매개변수는 GMSNavigationDelayCategory를 반환합니다. 다음 예에서는 결과를 평가하고 트래픽 메시지를 로깅하는 방법을 보여줍니다.

Swift
if let navigator = mapView.navigator {
case .heavy:
traffic = "heavy"
case .medium:
traffic = "moderate"
case .light:
traffic = "light"
default:
traffic = "unavailable"
Objective-C
GMSNavigationDelayCategory delay = mapView.navigator.delayCategoryToNextDestination;
NSString *traffic = @"";

switch (delayCategory) {
case GMSNavigationDelayCategoryNoData:
traffic = @"No Data";
break;
case GMSNavigationDelayCategoryHeavy:
traffic = @"Heavy";
break;
case GMSNavigationDelayCategoryMedium:
traffic = @"Medium";
break;
case GMSNavigationDelayCategoryLight:
traffic = @"Light";
break;
default:
NSLog(@"Invalid delay category: %zd", delayCategory);
NSLog(@"%@", [NSString stringWithFormat:@"Traffic is %@.", traffic]);

현재 구간에 대한 정보 가져오기

현재 경로 구간에 관한 정보를 가져오려면 currentRouteLeg [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#currentrouteleg]를 호출합니다.
그러면 GMSRouteLeg 인스턴스가 반환되며, 여기에서 다음을 가져올 수 있습니다.

구간의 목적지입니다.
구간의 최종 좌표입니다.
경로 구간을 구성하는 좌표가 포함된 경로입니다.

다음 예에서는 다음 경로 구간의 제목과 위도/경도 좌표를 로깅하는 방법을 보여줍니다.

Swift
if let navigator = mapView.navigator {
NSLog(nextDestination! + ", " + lat! + "/" + lng!)
Objective-C
GMSRouteLeg *currentSegment = _mapView.navigator.currentRouteLeg;
NSString *nextDestination = currentSegment.destinationWaypoint.title;
CLLocationDegrees lat = currentSegment.destinationCoordinate.latitude;
CLLocationDegrees lng = currentSegment.destinationCoordinate.longitude;
NSLog(@"%@", [NSString stringWithFormat:@"%@, %f/%f", nextDestination, lat, lng]);

가장 최근에 이동한 경로 가져오기

가장 최근에 이동한 경로를 가져오려면 traveledPath [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSNavigator?hl=ko#traveledpath]를 호출하세요.
이렇게 하면 중복 점을 삭제하도록 간소화된 GMSPath [https://developers.google.com/maps/documentation/navigation/ios-sdk/reference/objc/Classes/GMSPath?hl=ko] 인스턴스가 반환됩니다 (예: 연속적인 공선 점을 단일 선분으로 변환). 이 경로는 안내가 시작될 때까지 비어 있습니다. 다음 예에서는 가장 최근에 이동한 경로를 가져오는 방법을 보여줍니다.

Swift
if let navigator = mapView.navigator {
Objective-C
GMSPath *latestPath = mapView.navigator.traveledPath;
if (latestPath.count > 0) {
CLLocationCoordinate2D begin = [latestPath coordinateAtIndex:0];
CLLocationCoordinate2D current = [latestPath coordinateAtIndex:latestPath.count - 1];
NSLog(@"Path from %f/%f to %f/%f",
begin.latitude,
begin.longitude,
current.latitude,
current.longitude);